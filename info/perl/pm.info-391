This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Tk/MenuHash,  Next: Tk/Menubutton,  Prev: Tk/Menu,  Up: Module List

Ties a Tk::Menubutton widget to a hash object thingy
****************************************************

NAME
====

   Tk::MenuHash - Ties a Tk::Menubutton widget to a hash object thingy

SYNOPSIS
========

     use Tk::MenuHash;

     my $MB = new Tk::MenuHash ($Menubutton);
     my $MB = new Tk::MenuHash (
         $MW->Menubutton (
             -relief       => 'raised',
             -text         => 'Pick something',
             -underline    => 0,
         )->pack (
             -side         => 'left',
         )
     );

     $MB->{'Some list item label'}   = [ \&CommandFunction, 'args' ];
     $MB->{'Some other label'}       = \&CommandFunction;
     $MB->{'Some lable name'}        = 'default';

     delete $MB->{'Some other label'};

     $MB->configure ( -text => 'Pick something else' );

     my $menuText = $MB->{"Anything, it doesn't matter"};

     ##############################################################
     ## Or you can do it this way, but it needs two vars so I don't
     ## recommend it...

     tie my %MB, 'Tk::MenuHash', $Menubutton;
     ## Or...
     tie my %MB, 'Tk::MenuHash', $MW->Menubutton (
         -relief       => 'raised',
         -text         => 'Pick something',
         -underline    => 0,
     )->pack (
         -side         => 'left',
     );

     $MB{'Some list item label'}   = [ \&CommandFunction, 'args' ];
     $MB{'Some other label'}       = \&CommandFunction;
     $MB{'Some lable name'}        = 'default';

     delete $MB{'Some other label'};

     $Menubutton->configure ( -text => 'Pick something else' );

     my $menuText = $MB{"Anything, it doesn't matter"};

DESCRIPTION
===========

   Creates a tied *Tk::Menubutton* widget hash reference object kinda
thingy....

   It's actually much simplier then it sounds, at least to use.  It walks
and talks half like an object, and half like a (tied) hash reference.  This
is because it's both in one (it's a blessed reference to a tied hash of the
same class).

WARNING:
     This is *not* a valid Tk widget as you would normally think of it.
     You can not (currently) call it as

          my $menuHash = $MW->MenuHash(); ## Don't try this (yet)!

     The *2.x* release will be a true widget and thus walk and talk
     currently as such.  As much as I will try and maintain this current
     API for future compatibility, this may not be entire possible.  The
     *2.x* release will solidify this widget's API, but until then
     consider this API in a state of flux.  Thanks

   When you add a key (label) to the hash it added it to the menubutton.
The value assigned must be either a valid *Tk::Menubutton* *-command*
option, or the string 'default' (case is not important).  The default is
simply a function that configure()s the Menubuttons *-text* to that of the
selected label.  You can then retrieve the text by just reading a key (any
key, even if it doesn't exist, it doesn't matter) from the hash.

   The new() method passes back a reference to a tie()d MenuHash, but with
all the properties (and methods) of the Menubutton you passed it.  With
this type you can set and delete fields as hash keys references:

     $MenuHash->{'Some label'} = 'default';

   But also call Tk::Menubutton (or sub-classes of it, if that's what you
passed the constructor) methods:

     $MenuHash->configure ( -text => 'Pick something' );

   This involves *black magic* to do, but it works.  See the AUTOLOAD
method code if you have a morbid interest in this, however it's more that
we are dealing with 3 objects in 2 classes.

   I prefer this useage myself as it meens I only need to carry around one
var that walks and talks almost exactly like a "real" *Tk::Menubutton*
(that is, you can call any valid Tk::Menubutton method off it directly),
but with the added (and *much* needed IMHO) feature of being able to easily
add, delete, select, and read menu options as simple hash ref keys.

EXAMPLE
=======

     use Tk;
     use Tk::MenuHash;

     my $MW = new MainWindow;

     my $menu = new Tk::MenuHash ($MW->Menubutton (
         -relief       => 'raised',
         -text         => 'Pick something',
         -underline    => 0,
     )->pack (
         -side         => 'left',
     ));

     $menu->{'Option one (default)'}               = 'default';
     $menu->{'Option two (print "two")'}           = sub { print "two\n" };
     $menu->{'Option three (exit)'}                = sub { $MW->destroy };
     $menu->{'Option four (print current text)'}   = sub { print "$menu->{foobar}\n" };

     MainLoop;

AUTHOR
======

   Zenin <zenin@bawdycaste.com>

   aka Byron Brummer <byron@omix.com>

COPYRIGHT
=========

   Copyright (c) 1998, 1999 OMIX, Inc.

   Available for use under the same terms as perl.


File: pm.info,  Node: Tk/Menubutton,  Next: Tk/Menustrip,  Prev: Tk/MenuHash,  Up: Module List

Create and manipulate Menubutton widgets
****************************************

NAME
====

   Tk::Menubutton - Create and manipulate Menubutton widgets

   *$menubutton* = *$parent*->Menubutton(?options?);

STANDARD OPTIONS
================


*-activebackground*	*-cursor*	*-highlightthickness*	*-takefocus*
*-activeforeground*	*-disabledforeground*	*-image*	*-text*
*-anchor*	*-font*	-justify	*-textvariable*
*-background*	*-foreground*	*-padx*	*-underline*
*-bitmap*	*-highlightbackground*	*-pady*	*-wraplength*
*-borderwidth*	*-highlightcolor*	*-relief*

   See *Note Tk/options: Tk/options, for details of the standard options.

WIDGET-SPECIFIC OPTIONS
=======================

Name:	*direction*
Class:	*Height*
Switch:	*-direction*
     Specifies where the menu is going to be popup up. above tries to pop
     the menu above the menubutton. below tries to pop the menu below the
     menubutton. left tries to pop the menu to the left of the menubutton.
     right tries to pop the menu to the right of the menu button. flush
     pops the menu directly over the menubutton.

Name:	height
Class:	*Height*
Switch:	*-height*
     Specifies a desired height for the menubutton.  If an image or bitmap
     is being displayed in the menubutton then the value is in screen
     units (i.e. any of the forms acceptable to *Tk_GetPixels*); for text
     it is in lines of text.  If this option isn't specified, the
     menubutton's desired height is computed from the size of the image or
     bitmap or text being displayed in it.

Name:	*indicatorOn*
Class:	*IndicatorOn*
Switch:	*-indicatoron*
     The value must be a proper boolean value.  If it is true then a small
     indicator rectangle will be displayed on the right side of the
     menubutton and the default menu bindings will treat this as an option
     menubutton.  If false then no indicator will be displayed.

Name:	menu
Class:	*MenuName*
Switch:	*-menu*
     Specifies the path name of the menu associated with this menubutton.
     The menu must be a child of the menubutton.

Name:	state
Class:	State
Switch:	*-state*
     Specifies one of three states for the menubutton:  normal, active, or
     disabled.  In normal state the menubutton is displayed using the
     *foreground* and background options.  The active state is typically
     used when the pointer is over the menubutton.  In active state the
     menubutton is displayed using the *activeForeground* and
     *activeBackground* options.  Disabled state means that the menubutton
     should be insensitive:  the default bindings will refuse to activate
     the widget and will ignore mouse button presses.  In this state the
     *disabledForeground* and background options determine how the button
     is displayed.

Name:	width
Class:	Width
Switch:	*-width*
     Specifies a desired width for the menubutton.  If an image or bitmap
     is being displayed in the menubutton then the value is in screen
     units (i.e. any of the forms acceptable to *Tk_GetPixels*); for text
     it is in characters.  If this option isn't specified, the
     menubutton's desired width is computed from the size of the image or
     bitmap or text being displayed in it.

DESCRIPTION
===========

   The Menubutton method creates a new window (given by the $widget
argument) and makes it into a menubutton widget.  Additional options,
described above, may be specified on the command line or in the option
database to configure aspects of the menubutton such as its colors, font,
text, and initial relief.  The *menubutton* command returns its $widget
argument.  At the time this command is invoked, there must not exist a
window named $widget, but $widget's parent must exist.

   A menubutton is a widget that displays a textual string, bitmap, or
image and is associated with a menu widget.  If text is displayed, it must
all be in a single font, but it can occupy multiple lines on the screen
(if it contains newlines or if wrapping occurs because of the *wrapLength*
option) and one of the characters may optionally be underlined using the
underline option.  In normal usage, pressing mouse button 1 over the
menubutton causes the associated menu to be posted just underneath the
menubutton.  If the mouse is moved over the menu before releasing the
mouse button, the button release causes the underlying menu entry to be
invoked.  When the button is released, the menu is unposted.

   Menubuttons are typically organized into groups called menu bars that
allow scanning: if the mouse button is pressed over one menubutton
(causing it to post its menu) and the mouse is moved over another
menubutton in the same menu bar without releasing the mouse button, then
the menu of the first menubutton is unposted and the menu of the new
menubutton is posted instead.

   There are several interactions between menubuttons and menus;  see the
menu manual entry for information on various menu configurations, such as
pulldown menus and option menus.

WIDGET METHODS
==============

   The Menubutton method creates a widget object.  This object supports
the configure and cget methods described in *Note Tk/options: Tk/options,
which can be used to enquire and modify the options described above.  The
menu method returns the menu associated with the widget.  The widget also
inherits all the methods provided by the generic `Tk::Widget|Tk::Widget'
in this node class.

DEFAULT BINDINGS
================

   Tk automatically creates class bindings for menubuttons that give them
the following default behavior:

[1]
     A menubutton activates whenever the mouse passes over it and
     deactivates whenever the mouse leaves it.

[2]
     Pressing mouse button 1 over a menubutton posts the menubutton: its
     relief changes to raised and its associated menu is posted under the
     menubutton.  If the mouse is dragged down into the menu with the
     button still down, and if the mouse button is then released over an
     entry in the menu, the menubutton is unposted and the menu entry is
     invoked.

[3]
     If button 1 is pressed over a menubutton and then released over that
     menubutton, the menubutton stays posted: you can still move the mouse
     over the menu and click button 1 on an entry to invoke it.  Once a
     menu entry has been invoked, the menubutton unposts itself.

[4]
     If button 1 is pressed over a menubutton and then dragged over some
     other menubutton, the original menubutton unposts itself and the new
     menubutton posts.

[5]
     If button 1 is pressed over a menubutton and released outside any
     menubutton or menu, the menubutton unposts without invoking any menu
     entry.

[6]
     When a menubutton is posted, its associated menu claims the input
     focus to allow keyboard traversal of the menu and its submenus.  See
     the menu documentation for details on these bindings.

[7]
     If the underline option has been specified for a menubutton then
     keyboard traversal may be used to post the menubutton: Alt+x, where x
     is the underlined character (or its lower-case or upper-case
     equivalent), may be typed in any window under the menubutton's
     toplevel to post the menubutton.

[8]
     The F10 key may be typed in any window to post the first menubutton
     under its toplevel window that isn't disabled.

[9]
     If a menubutton has the input focus, the space and return keys post
     the menubutton.

     If the menubutton's state is disabled then none of the above actions
     occur:  the menubutton is completely non-responsive.

     The behavior of menubuttons can be changed by defining new bindings
     for individual widgets or by redefining the class bindings.

KEYWORDS
========

   menubutton, widget


File: pm.info,  Node: Tk/Menustrip,  Next: Tk/MesgBox,  Prev: Tk/Menubutton,  Up: Module List

Another menubar with help menu support, etc
*******************************************

NAME
====

   Tk::Menustrip - Another menubar with help menu support, etc

SYNOPSIS
========

     use Tk::Menustrip;
     use Tk;

     my $MainWindow = MainWindow->new();

     my $l_Menubar = $this->Menustrip();

     $l_Menubar->MenuLabel     ('File'),
     $l_Menubar->MenuEntry     ('File', 'Save', sub {Save();});
     $l_Menubar->MenuSeparator ('File');
     $l_Menubar->MenuEntry     ('File', 'Exit', sub {Exit();});

     $l_Menubar->MenuLabel     ('Help', '-right');
     $l_Menubar->MenuEntry     ('Help', 'About...');
     $l_Menubar->MenuSeparator ('Help');
     $l_Menubar->MenuEntry     ('Help', 'Help On...');

     $l_Menubar->pack(-fill => 'x');

     Tk::MainLoop;

DESCRIPTION
===========

AUTHORS
=======

   Damion K. Wilson, dkw@rcm.bm

HISTORY    =cut
===============


File: pm.info,  Node: Tk/MesgBox,  Next: Tk/Message,  Prev: Tk/Menustrip,  Up: Module List

Perl/Tk module for message and button dialogue boxes.
*****************************************************

NAME
====

   MesgBox - Perl/Tk module for message and button dialogue boxes.

SYNOPSIS
========

     use MesgBox;

     # Example 1: an 'OK' box.
     # Pressing <Space>, <Return>, <o>, <Control-o> or <Alt-o> will close the box.

     my $msg = $Window->MesgBox(-title => 'Test', -text => 'Test Complete.');
     $msg->Show;

     # Example 2: a 'Yes/No' box.
     # Pressing <Space>, <Return>, <y>, <Control-y> or <Alt-y>
     # presses the 'Yes' button;
     # pressing <n>, <Control-n> or <Alt-n> presses the 'No' button.

     my $msg = $Window->MesgBox(
         -title     => 'Save File?',
         -text      => "Save '$filename'?",
         -icon      => 'QUESTION',
         -buttons   => ['Yes', 'No'],
         -defbutton => 'Yes',
         );
     my $ans = $msg->Show;
     &save_file if $ans eq 'Yes';

     # Example 3: an 'OK/Cancel' box.
     # Pressing <Space>, <Return>, <o>, <Control-o> or <Alt-o> presses the 'OK'
     # button;
     # pressing <Escape>, <c>, <Control-c> or <Alt-c> presses the 'Cancel'
     # button.

     my $msg = $Window->MesgBox(
         -title   => 'Print',
         -text    => 'Print the page',
         -buttons => ['OK', 'Cancel'],
         );
     my $ans = $msg->Show;
     &print if $ans eq 'OK';

DESCRIPTION
===========

   This message box is similar to the MsgBox function provided with
Windows. It provides a message text with an optional 'icon' and any
buttons required. It is not as versatile as the Dialog box supplied with
Tk but is simpler, and it provides automatic keyboard bindings.

   All options are optional, although defining a `-title' and `-text' is
only sensible. Leaving out everything else will provide a simple OK button.

   The keyboard is bound such that the first letter of each button is
bound both as a letter alone and in conjunction with both Control and Alt.
This letter is also displayed underlined. It is recommended that each
button's text begins with a unique letter. Any button with the text 'OK'
will be the default button responding to <Return>, unless overridden by
the `-defbutton' option. Any button with the text 'Cancel' will be the
default cancel button responding to <Escape> unless overridden by the
`-canbutton' option.

   `-title' is the text which appears in the title bar.

   `-text' is the text which appears in the body of the message. It may
include newlines which are respected, but it will wrap.

   `-icon' is the 'icon' which appears to the left of the message. It may
be one of Tk's standard bitmaps: info 'i', error '(\)', warning '!',
question '?'; or one of the MesgBox versions: INFO 'i', ERROR 'E', WARNING
'!', QUESTION '?'. It may be undefined meaning no image appears.

   `-defbutton' is the default button. It defaults to the 'OK' button if
there is one. The default button is the button 'pressed' when the user
presses <Return>.

   `-canbutton' is the cancel button. It defaults to the 'Cancel' button
if there is one. The cancel button is the button 'pressed' when the user
presses <Escape>.

   `-buttons' is an array of button captions. By default it is set to a
list consisting of one element, 'OK'. You may use any text, e.g. 'OK',
'Cancel', 'Yes', 'Retry', etc. You may have as many buttons as you like -
although too many might not fit on the screen...

   `-aspect' is the ratio of width to height. Generally increase this past
the default of 200, say to 300, 400 or 500 to make the message box wider
and shorter.

   -justify sets the justification for the `-text' - may be 'center',
'left' or 'right'. Defaults to 'center'.

   `-textfg' sets the foreground colour for the `-text'; default is black.

   `-textbg' sets the background colour for the `-text'; default is
lightgrey.

   `-buttonfont' sets the font for the button; default is 12pt Helvetica.

   `-bindctrl' sets the keyboard bindings to include <Control-$letter>,
defaults to true.

   `-bindalt' sets the keyboard bindings to include <Alt-$letter>, defaults
to true.

   `-bindord' sets the keyboard bindings to include <$letter>, defaults to
true.

   `-buttonpadx' sets the left and right padding around the button,
defaults to 0.

   `-buttonpady' sets the above and below padding around the button,
defaults to 0.

   `-buttonfg' sets the button foreground colour, defaults to black.

   `-buttonbg' sets the button foreground colour, defaults to lightgrey.

   `-buttonHL' sets the button highlight colour, defaults to lightgrey.

INSTALLATION
============

   MesgBox.pm should be placed in any Tk directory in any lib directory in
Perl's %INC path, for example, '/usr/lib/perl5/Tk'.

BUGS
====

   MesgBox does almost no error checking.

CHANGES
=======

   1999/01/18  First public release.

   1999/01/22  Minor documentation changes.

   1999/01/23  Tidied up set_icon.

   1999/02/23  Should now be Windows compatible.

   1999/08/05  Just changed the files to make them more CPAN friendly.

   1999/08/08  Changed licence to LGPL.

   1999/09/06  Minor change to packaging for CPAN.

   1999/10/01  Changed the Show() method so that it is now compatible with
           Tk800.015 as well as earlier Tk800 versions.

   2000/05/05  Minor increment because I accidentally deleted it from CPAN.

   2000/09/16  Added new options to control colours and padding: almost
all the             new code was supplied by Daniel Berger.

AUTHOR
======

   Mark Summerfield. I can be contacted as <summer@perlpress.com> - please
include the word 'mesgbox' in the subject line.

   The code draws very heavily from Stephen O. Lidie's Dialog.pm module.

COPYRIGHT
=========

   Copyright (c) Mark Summerfield 1999,2000. All Rights Reserved.

   This module may be used/distributed/modified under the LGPL.


File: pm.info,  Node: Tk/Message,  Next: Tk/Month,  Prev: Tk/MesgBox,  Up: Module List

Create and manipulate Message widgets
*************************************

NAME
====

   Tk::Message - Create and manipulate Message widgets

   *$message* = *$parent*->Message(?options?);

STANDARD OPTIONS
================


*-anchor*	*-font*	*-highlightthickness*	*-takefocus*
*-background*	*-foreground*	*-padx*	*-text*
*-borderwidth*	*-highlightbackground*	*-pady*	*-textvariable*
*-cursor*	*-highlightcolor*	*-relief*	*-width*

   See *Note Tk/options: Tk/options, for details of the standard options.

WIDGET-SPECIFIC OPTIONS
=======================

Name:	*aspect*
Class:	*Aspect*
Switch:	*-aspect*
     Specifies a non-negative integer value indicating desired aspect
     ratio for the text.  The aspect ratio is specified as
     100*width/height.  100 means the text should be as wide as it is
     tall, 200 means the text should be twice as wide as it is tall, 50
     means the text should be twice as tall as it is wide, and so on.
     Used to choose line length for text if width option isn't specified.
     Defaults to 150.

Name:	justify
Class:	Justify
Switch:	-justify
     Specifies how to justify lines of text.  Must be one of left, center,
     or right.  Defaults to left.  This option works together with the
     anchor, *aspect*, *padX*, *padY*, and width options to provide a
     variety of arrangements of the text within the window.  The *aspect*
     and width options determine the amount of screen space needed to
     display the text.  The anchor, *padX*, and *padY* options determine
     where this rectangular area is displayed within the widget's window,
     and the justify option determines how each line is displayed within
     that rectangular region.  For example, suppose anchor is e and
     justify is left, and that the message window is much larger than
     needed for the text.  The the text will displayed so that the left
     edges of all the lines line up and the right edge of the longest line
     is *padX* from the right side of the window;  the entire text block
     will be centered in the vertical span of the window.

Name:	width
Class:	Width
Switch:	*-width*
     Specifies the length of lines in the window.  The value may have any
     of the forms acceptable to *Tk_GetPixels*.  If this option has a
     value greater than zero then the *aspect* option is ignored and the
     width option determines the line length.  If this option has a value
     less than or equal to zero, then the *aspect* option determines the
     line length.

DESCRIPTION
===========

   The Message method creates a new window (given by the $widget argument)
and makes it into a message widget.  Additional options, described above,
may be specified on the command line or in the option database to
configure aspects of the message such as its colors, font, text, and
initial relief.  The message command returns its $widget argument.  At the
time this command is invoked, there must not exist a window named $widget,
but $widget's parent must exist.

   A message is a widget that displays a textual string.  A message widget
has three special features.  First, it breaks up its string into lines in
order to produce a given aspect ratio for the window.  The line breaks are
chosen at word boundaries wherever possible (if not even a single word
would fit on a line, then the word will be split across lines).  Newline
characters in the string will force line breaks;  they can be used, for
example, to leave blank lines in the display.

   The second feature of a message widget is justification.  The text may
be displayed left-justified (each line starts at the left side of the
window), centered on a line-by-line basis, or right-justified (each line
ends at the right side of the window).

   The third feature of a message widget is that it handles control
characters and non-printing characters specially.  Tab characters are
replaced with enough blank space to line up on the next 8-character
boundary.  Newlines cause line breaks.  Other control characters (ASCII
code less than 0x20) and characters not defined in the font are displayed
as a four-character sequence *\x**hh* where *hh* is the two-digit
hexadecimal number corresponding to the character.  In the unusual case
where the font doesn't contain all of the characters in
"0123456789abcdef\x" then control characters and undefined characters are
not displayed at all.

WIDGET METHODS
==============

   The Message method creates a widget object.  This object supports the
configure and cget methods described in *Note Tk/options: Tk/options,
which can be used to enquire and modify the options described above.  The
widget also inherits all the methods provided by the generic
`Tk::Widget|Tk::Widget' in this node class.

DEFAULT BINDINGS
================

   When a new message is created, it has no default event bindings:
messages are intended for output purposes only.

BUGS
====

   Tabs don't work very well with text that is centered or right-justified.
The most common result is that the line is justified wrong.

KEYWORDS
========

   message, widget


File: pm.info,  Node: Tk/Month,  Next: Tk/More,  Prev: Tk/Message,  Up: Module List

Calendar widget which shows one month at a time.
************************************************

NAME
====

   Tk::Month - Calendar widget which shows one month at a time.

SYNOPSIS
========

     use Tk;
     use Tk::Month;

     $m = $parent->Tk::Month(
     		-month		=> 'July',
     		-year		=> '1997',
     		-title		=> '%b %y',
     		-command	=> \&press,
     		-printformat	=> '%e',
     		-navigation	=> [0|1],
     		-includeall	=> [0|1],
     		-showall	=> [0|1],
     		-first		=> [0|1|2|3|4|5|6],
     	)->pack();

     $m->configure(
     		-month		=> 'July',
     		-year		=> '1997',
     		-command	=> \&press,
     		-printformat	=> '%e %B %Y %A',
     		-navigation	=> [0|1],
     		-includeall	=> [0|1],
     		-showall	=> [0|1],
     		-first		=> [0|1|2|3|4|5|6],
     );

     $m->separator();
     $m->command(
     		-label		=> 'Label',
     		-command	=> \&callback,
     );

DESCRIPTION
===========

   Tk::Month is a general purpose calendar widget which shows one month at
a time and allowes user defined button actions.

FUNCTIONS
=========

$m->separator();
----------------

     Adds a separator to the title menu.

$m->command(...);
-----------------

     Adds an entry to the title menu. This can be used to add
     extra functionality, such as closing the calendar widget or
     printing a month.

OPTIONS
=======

-month => 'month'
-----------------

     Sets the required month. The default is the current month.

-year => 'year'
---------------

     Sets the required year. The default is the current year.

-title => 'strftime format'
---------------------------

     Sets the format for the widget title.
     The default is '%B %Y'.

-command => \&press
-------------------

     Set the command to execute when a button is pressed.
     This function must accept a string
     (the title of the Month widget)
     and an array of arrays of dates.
     Each date is of the format specified by the -printformat option.
     The default is to print out the list on standard output.

-printformat	=> "strftime format"
---------------------------------

     Set the default format for dates when they are passed in an
     array of arrays to the -command function.
     The default is '%e %B %Y'.

DISCONTINUED -printcommand	=> \&print
-------------------------------------

     Add an entry to the title menu using the 'command' function.

DISCONTINUTED -close		=> $widget,
---------------------------------

     Add an entry to the title menu using the 'command' function.

-showall		=> [0|1]
------------------

     Causes the dates on buttons not actually in the month to be
     dsiplay. The default is to not show these dates.

-includeall	=> [0|1]
--------------------

     Causes the side buttons to include all the non-month dates.
     The defaults is to include all the dates.

-first	=> [0|1|2|3|4|5|6]
-------------------------

     Sets the first day of the week.
     The default is 0 (i.e. Sunday).

-navigation	=> [0|1],
---------------------

     Sets whether the navigation buttons and menu are included.
     The default is to show the naviagation aids.


File: pm.info,  Node: Tk/More,  Next: Tk/Multi/Any,  Prev: Tk/Month,  Up: Module List

a 'more' or 'less' like text widget
***********************************

NAME
====

   Tk::More - a 'more' or 'less' like text widget

SYNOPSIS
========

     use Tk::More;

     $more = $parent->More(...text widget options ...);
     $more->Load(FILENAME);

DESCRIPTION
===========

   *Tk::More* is a readonly text widget with additional key bindings as
found in UNI* command line tool more.  As in more an additional
status/command line is added at the bottom.

ADDITIONAL BINDINGS
===================

Key-G
     goto end of file

Key-f
     like next key

Key-b
     like prior key

Key-k
     like up key

Key-j
     like down key

Key-/
     search forward

Key-n
     find next match

Key-N
     find previous match

BUGS
====

   Besides that most of more bindings are not implemented. This bugs me
most (high to low priority):

   * Reverse search missing

   * better status line implementation

   * Cursor movement: up/down move displayed area regardless where
insert cursor is

   * add History, Load, Search (also as popup menu)

   * Key-u and Key-d should move 1/2 screen and not 90% of a screen

   * bad history impl.

SEE ALSO
========

   `Tk::ROText|Tk::ROText' in this node more(1)

AUTHOR
======

   Achim Bohnet <`ach@mpe.mpg.de'>

   Copyright (c) 1997-1998 Achim Bohnet. All rights reserved.  This
program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.


File: pm.info,  Node: Tk/Multi/Any,  Next: Tk/Multi/Canvas,  Prev: Tk/More,  Up: Module List

Do not use
**********

NAME
====

   Tk::Multi::Any - Do not use

SYNOPSIS
========

DESCRIPTION
===========

   This class contains a Print dialog box. Do not use it. This class will
be removed on the next version. The other Multi widget will use the soon
to be released PrintDialog widget.

AUTHOR
======

   Dominique Dumont, Dominique_Dumont@grenoble.hp.com

   Copyright (c) 1997-1998 Dominique Dumont. All rights reserved.  This
program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

SEE ALSO
========

   perl(1), Tk(3), Tk::Multi(3), Tk::Multi::Manager(3)


File: pm.info,  Node: Tk/Multi/Canvas,  Next: Tk/Multi/Frame,  Prev: Tk/Multi/Any,  Up: Module List

Tk composite widget with a scroll window and more
*************************************************

NAME
====

   Tk::Multi::Canvas - Tk composite widget with a scroll window and more

SYNOPSIS
========

     use Tk::Multi::Manager;

     use Tk::Multi::Canvas ;

     my $manager = yourWindow -> MultiManager
      (
       menu => $menu_ref , # optionnal
       title => "windows" # optionnal
      ) -> pack ();

     # Don't pack it, the manager will do it
     my $w1 = $manager -> newSlave('type' => 'MultiCanvas', 'title' => 'a_label');

DESCRIPTION
===========

   This composite widget features :

   * a scrollable Canvas

   * A print button (The shell print command may be modified by setting
     $Tk::Multi::Canvas::printCmd to the appropriate shell command. By
     default, it is set to 'lp -opostscript')

   * a clear button

   This widget will forward all unrecognize commands to the Canvas object.

   Note that this widget should be created only by the Multi::Manager.

WIDGET-SPECIFIC OPTIONS
=======================

title
-----

   Some text which will be displayed above the test window.

menu_button
-----------

   The log window feature a set of menu items which must be added in a
menu.  This menu ref must be passed with the menu_button prameter to the
object during its instaciation

WIDGET-SPECIFIC METHODS
=======================

setSize( heigth, [ width ])
---------------------------

   Will resize the canvas window.

print
-----

   Will raise a popup window with an Entry to modify the actual print
command, a print button, a default button (to restore the default print
command), and a cancel button.

doPrint
-------

   Print the label and the content of the text window. The print is invoked
by dumping the text content into a piped command.

   You may want to set up a new command to print correctly on your machine.
You may do it by using the setPrintCmd method or by invoking the 'print'
method.

setPrintCmd('print command')
----------------------------

   Will set the $printCmd class variable to the passed string. You may use
this method to set the appropriate print command on your machine. Note that
using this method will affect all other Tk::Multi::Canvas object since the
modified variable is not an instance variable but a class variable.

clear
-----

   clear all items in the canvas.

Delegated methods
=================

   By default all widget method are delegated to the Text widget. Excepted
:

command(-label => 'some text', -command => sub {...} )
------------------------------------------------------

   Delegated to the menu entry managed by Multi::Manager. Will add a new
command to the aforementionned menu.

TO DO
=====

   I'm not really satisfied with print management. May be one day, I'll
write a print management composite widget which will look like Netscape's
print window. But that's quite low on my priority list. Any volunteer ?

   Dragging middle mouse button to scroll the canvas.

   Defines ressources for the config options.

AUTHOR
======

   Dominique Dumont, Dominique_Dumont@grenoble.hp.com

SEE ALSO
========

   perl(1), Tk(3), Tk::Multi(3), Tk::Multi::Manager(3)


File: pm.info,  Node: Tk/Multi/Frame,  Next: Tk/Multi/Manager,  Prev: Tk/Multi/Canvas,  Up: Module List

Tk composite widget with a scroll window and more
*************************************************

NAME
====

   Tk::Multi::Frame - Tk composite widget with a scroll window and more

SYNOPSIS
========

     use Tk::Multi::Manager;

     use Tk::Multi::Frame ;

     my $manager = yourWindow -> MultiManager
      (
       menu => $menu_ref , # optionnal
       printSub => $sub_ref ,  # optionnal
       title => "windows" # optionnal
      ) -> pack ();

     # Don't pack it, the manager will do it
     my $w1 = $manager -> newSlave('type' => 'MultiFrame', 'title' => 'a_label');

DESCRIPTION
===========

   This composite widget features :

   * a scrollable Frame

   * A print button (if the printSub parameter was provided)

     (The shell print command may be modified by setting
     $Tk::Multi::Frame::printCmd to the appropriate shell command. By
     default, it is set to 'lp -opostscript')

   This widget will forward all unrecognize commands to the Frame object.

   Note that this widget should be created only by the Multi::Manager.

WIDGET-SPECIFIC OPTIONS
=======================

title
-----

   The frame title (See *Note Tk/TFrame: Tk/TFrame,)

menu_button
-----------

   The log window feature a set of menu items which must be added in a
menu.  This menu ref must be passed with the menu_button prameter to the
object during its instaciation

printSub
--------

   By itself, a frame cannot be printed. So if the user wants to print
some informations related to what's packed inside the frame, he must
provide a sub ref which will return a string. This string will be printed
as is by the widget.

WIDGET-SPECIFIC METHODS
=======================

print
-----

   Will raise a popup window with an Entry to modify the actual print
command, a print button, a default button (to restore the default print
command), and a cancel button.

doPrint
-------

   Print the label and the content of the text window. The print is invoked
by dumping the text content into a piped command.

   You may want to set up a new command to print correctly on your machine.
You may do it by using the setPrintCmd method or by invoking the 'print'
method.

setPrintCmd('print command')
----------------------------

   Will set the $printCmd class variable to the passed string. You may use
this method to set the appropriate print command on your machine. Note that
using this method will affect all other Tk::Multi::Frame object since the
modified variable is not an instance variable but a class variable.

clear
-----

   clear all items in the canvas.

Delegated methods
=================

   By default all widget method are delegated to the TFrame widget.
Excepted :

command(-label => 'some text', -command => sub {...} )
------------------------------------------------------

   Delegated to the menu entry managed by Multi::Manager. Will add a new
command to the aforementionned menu.

TO DO
=====

   I'm not really satisfied with print management. May be one day, I'll
write a print management composite widget which will look like Netscape's
print window. But that's quite low on my priority list. Any volunteer ?

   Dragging middle mouse button to scroll the canvas.

   Defines ressources for the config options.

AUTHOR
======

   Dominique Dumont, Dominique_Dumont@grenoble.hp.com

SEE ALSO
========

   perl(1), Tk(3), Tk::Multi(3), Tk::Multi::Manager(3)


File: pm.info,  Node: Tk/Multi/Manager,  Next: Tk/Multi/Text,  Prev: Tk/Multi/Frame,  Up: Module List

Tk composite widget managing Tk::Multi slaves
*********************************************

NAME
====

   Tk::Multi::Manager - Tk composite widget managing Tk::Multi slaves

SYNOPSIS
========

     use Tk::Multi::Manager ;
     use Tk::Multi::Text ; # if you use MultiText as a slave

     my $manager = yourWindow -> MultiManager
      (
       menu => $menu_ref , # optionnal
       title => "windows", # optionnal
       help => "Explain what your set of widget do" #optionnal
      ) -> pack ();

     # Don't pack it, the managet will do it
     my $w1 = $manager -> newSlave
      (
       'type' => 'MultiText',
       'title' => 'a_label',
       help => "Explain what your slave widget does" #optionnal
      );

DESCRIPTION
===========

   The manager is a composite widget made of a menu cascade of check
buttons and slaves which can be Tk::Multi::Text.

   The user can add windows to the manager. Each window visibility is
controled by a check button in the menu cascade.  The check button
actually tells the packer to forget the window. note that the window
object is not destroyed.

   The main menu bar will feature a 'Help' menu on the right. If the main
help which explain the purpose of the Multi::Manager and its slaves is
provided when creating the widget, the Help sub-menu will feature a
'global' label.

   Each slave widget which is created with a help will have its own label
in the help menu.

Multi widgets
=============

   This package features the following Multi widgets:

   * *Note Tk/Multi/Text: Tk/Multi/Text,

   * *Note Tk/Multi/Canvas: Tk/Multi/Canvas,

Constructor configuration options
=================================

menu
----

   The widget may use a 'menu' argument which will be used to create a
menu item and releveant sub-menus to control the sub-window.  If not
provided, the widget will create a its own menu.

title
-----

   The optionnal title argument contains the title of the menu created by
the manager.

help
----

   The argument may be a string or a sub reference.

   When the help menu is invoked, either the help string will be displayed
in a *Note Tk/Dialog: Tk/Dialog, box or the sub will be run. In this case
it is the user's responsability to provide a readable help from the sub.

Methods
=======

newSlave(...) ;
---------------

   Create a new slave to manager. Returns the slave widget object.
Parameters are:

   * type: specifies the kind of Multi widget (e.g. MultiText).

   * title: specifies the title of the widget (mandatory).

   * before: specify that you want this new slave to be packed before
     (well, above) another widget. This parameter will be set to the
     'title' of this other widget.

   * side: when set to 'top', the widget will be packed on top of the
     others.  (default to 'bottom').

   * hidden: specifies whether the widget is to be packed right now or not
     (default 0)

   * destroyable: a 'destroy' button is created if this parameter is
     defined (default no).  Returns the slave widget reference.

   * help: This argument may be specified like the help parameter defined
     above for the constructor.

getSlave('name of the slave');
------------------------------

   Return the slave widget or undef.

hide('name of the slave');
--------------------------

   Hide the slave.

show('name of the slave');
--------------------------

   Show the slave.

destroySlave( 'name of the slave') ;
------------------------------------

   Destroy the slave

AUTHOR
======

   Dominique Dumont, Dominique_Dumont@grenoble.hp.com

   Copyright (c) 1997-1999 Dominique Dumont. All rights reserved.  This
program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

SEE ALSO
========

   perl(1), Tk(3), Tk::Multi::Text(3), Tk::Multi::Canvas(3)


File: pm.info,  Node: Tk/Multi/Text,  Next: Tk/Multi/Toplevel,  Prev: Tk/Multi/Manager,  Up: Module List

Tk composite widget with a scroll window and more
*************************************************

NAME
====

   Tk::Multi::Text - Tk composite widget with a scroll window and more

SYNOPSIS
========

     use Tk::Multi::Manager;

     use Tk::Multi::Text ;

     my $manager = yourWindow -> MultiManager
      (
       menu => $menu_ref , # optionnal
       title => "windows" # optionnal
      ) -> pack ();

     # Don't pack it, the managet will do it
     my $w1 = $manager -> newSlave('type' => 'MultiText', 'title' => 'a_label');

DESCRIPTION
===========

   This composite widget features :

   * a scrollable read-only text window (based on ROtext)

   * A print menu button (The shell print command may be modified by
     setting $Tk::Multi::Text::printCmd to the appropriate shell command.
     By default, it is set to 'lp -ol70 -otl66 -o12 -olm10')

   * a clear menu button.

   This widget will forward all unrecognize commands to the ROtext object.

   Note that this widget should be created only by the Multi::Manager.

WIDGET-SPECIFIC OPTIONS
=======================

title
-----

   Some text which will be displayed above the test window.

menu_button
-----------

   The log window feature a set of menu items which must be added in a
menu.  This menu ref must be passed with the menu_button prameter to the
object during its creation.

data
----

   A string which will be displayed in the text window.

WIDGET-SPECIFIC METHODS
=======================

insertText($some_text)
----------------------

   Insert the passed string at the bottom of the text window

print
-----

   Will raise a popup window with an Entry to modify the actual print
command, a print button, a default button (to restore the default print
command), and a cancel button.

clear
-----

   Is just a delete('1.0','end') .

Delegated methods
=================

   By default all widget method are delegated to the Text widget. Excepted
:

command(-label => 'some text', -command => sub {...} )
------------------------------------------------------

   Delegated to the menu entry managed by Multi::Manager. Will add a new
command to the aforementionned menu.

TO DO
=====

   Defines ressources for the config options.

AUTHOR
======

   Dominique Dumont, Dominique_Dumont@grenoble.hp.com

   Copyright (c) 1997-1998 Dominique Dumont. All rights reserved.  This
program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

SEE ALSO
========

   perl(1), Tk(3), Tk::Multi(3), Tk::Multi::Manager(3)


File: pm.info,  Node: Tk/Multi/Toplevel,  Next: Tk/Mwm,  Prev: Tk/Multi/Text,  Up: Module List

Toplevel MultiManager
*********************

NAME
====

   Tk::Multi::Toplevel - Toplevel MultiManager

SYNOPSIS
========

     use Multi::Toplevel ;

     my $mw = MainWindow-> new ;
     
     my $p = $mw->MultiTop();

     # If Multi::Toplevel is the only Tk window of your application
     $mw -> withdraw ; # hide the main window
     # destroy the main window when close is called
     $p -> OnDestroy(sub{$mw->destroy});

     # add a 'bar' menu with a 'foo' button on the menu bar
     $p->menuCommand(name => 'foo', menu => 'bar',
                     sub => sub{warn "invoked  bar->foo\n";});

     # add a menu button on the 'File' menu
     $p->add(
             'command',
             -label => 'baz',
             command => sub {warn "invoked  File->baz\n";}
            );

DESCRIPTION
===========

   This class is a *Note Tk/Multi/Manager: Tk/Multi/Manager, packed in a
Toplevel window. It features also :

   * 'File->show internal...' button to invoke an Object Scanner (See
     *Note Tk/ObjScanner: Tk/ObjScanner,)

   * A facility to manage user menus with sorted buttons

   * A help facility based on *Note Tk/Pod: Tk/Pod,

Users menus
===========

   By default the Multi::Toplevel widget comes with 3 menubuttons:

   * 'File' for the main widget commands

   * 'windows' to manage the Multi slaves widget

   * 'Help'

   The user can also add its own menus and menu buttons to the main
menubar.  When needed the user can call the menuCommand method to add a
new menu button (and as new menu if necessary) . Then the user can remove
the menu button with the menuRemove command.

   For instance, if the user call :

     $widget->->menuCommand(name => 'foo', menu => 'example',
       sub => \&a_sub);
     
     The menubar will feature a new 'example' menu with a 'foo' button.

   Then if the user call :

     $widget->->menuCommand(name => 'bar', menu => 'example',
       sub => \&a_sub);

   The menubar will feature a new 'bar' button in the 'example' menu. Note
that menu buttons are sorted alphabetically.

   Then if the user call :

     $widget->menuRemove(name => 'bar', menu => 'example');

   The bar button will be removed from the menu bar.

Constructor configuration options
=================================

manager
-------

   Object reference that will be scanned by the ObjScanner. Usefull when
you want to debug the object that actually use the Multi::TopLevel. By
default the ObjScanner will scan the Multi::TopLevel object.

podName
-------

   This the name of the pod file that will be displayed with the
'Help'->'global' button. This should be set to the pod file name of the
class or the application using this widget.

   By default, the help button will display the pod file of
Multi::TopLevel.

podSection
----------

   This the section of the pod file that will be displayed with the
'Help'->'global' button.

   By default, the help button will display the 'DESCRIPTION' pod section.

Advertised widgets
==================

   * fileMenu: 'File' Tk::Menu (on the left of the menu bar)

   * menubar : the Tk::Frame containing the menu buttons

   * multiMgr: The Tk::Multi::Manager

delegated methods
=================

   * newSlave, hide, show, destroySlave : To the Tk::Multi::Manager

   * add, delete, insert : To the 'File' Tk::Menu

Methods
=======

menuCommand()
-------------

   Parameters are :

   * name: button_name

   * menu: menu_name

   * command: subref

   Will add the 'button_name' button in the 'menu_name' menu to invoke the
sub ref. If necessary, the 'menu_name' menu will be created.

menuRemove ()
-------------

   * name: button_name

   * menu: menu_name

   Will remove the 'button_name' button from the 'menu_name' menu.  If no
buttons are left, the 'menu_name' menu will be removed from the menu bar.

showHelp (...)
--------------

   Parameters are :

   * pod: pod file name (optional, defaults to the file name passed to the
     constructor or to 'Tk::Multi::Toplevel')

   * section: pod_section (optional, defaults to the sectione name passed
     to the constructor or to 'DESCRIPTION')

   Will invoke the Tk::Pod documentation widget of the specified pod file
and pod section.

BUGS
====

   Users menu does not fold when you insert a lot of buttons.

   Tk::Pod 0.10 does not display the specified section. Use a later
version or this patch
(http://www.xray.mpe.mpg.de/mailing-lists/ptk/1998-11/msg00033.html)

AUTHOR
======

   Dominique Dumont, Dominique_Dumont@grenoble.hp.com

   Copyright (c) 1998-1999 Dominique Dumont. All rights reserved.  This
program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

SEE ALSO
========

   perl(1), Tk(3), Tk::Multi::Manager(3), Tk::Pod(3), Tk::ObjScanner(3),
Tk::mega(3)


File: pm.info,  Node: Tk/Mwm,  Next: Tk/NoteBook,  Prev: Tk/Multi/Toplevel,  Up: Module List

Communicate with the Motif(tm) window manager.
**********************************************

NAME
====

   Tk::Mwm - Communicate with the Motif(tm) window manager.

       *use Tk::Mwm;*

       *$toplevel*->*mwm*Option?(args)?

       *$toplevel*->*mwm*(option ?,args?)

DESCRIPTION
===========

   Interface to special extentions supported by mwm.

METHODS
=======

*$toplevel*->*mwmDecoration*?(?option??=>value? ?,...?)?
     When no options are given, this method returns the values of all the
     decorations options for the toplevel window with the *$toplevel*.
     When only one option is given without specifying the value, the
     current value of that option is returned.  When more than one
     "option-value" pairs are passed to this method, the specified values
     will be assigned to the corresponding options. As a result, the
     appearance of the Motif decorations around the toplevel window will
     be changed.  Possible options are: *-border*, *-menu*, *-maximize*,
     *-minimize*, *-resizeh* and *-title*. The value must be a Boolean
     value. The values returned by this command are undefined when the
     window is not managed by mwm.

*$toplevel*->*mwmIsmwmrunning*
     This returns value is true if mwm is running on the screen where the
     specified window is located, false otherwise.

*$toplevel*->*mwmProtocol*
     When no additional options are given, this method returns all
     protocols associated with this toplevel window.

*$toplevel*->*mwmProtocol*(activate => *protocol_name*)
     Activate the mwm protocol message in mwm's menu.

*$toplevel*->*MwmProtocol*(add => *protocol_name*, *menu_message*)
     Add a new mwm protocol message for this toplevel window. The message
     is identified by the string name specified in *protocol_name*.  A
     menu item will be added into mwm's menu as specified by
     *menu_message*.  Once a new mwm protocol message is added to a
     toplevel, it can be caught by the TK protocol method. Here is an
     example:

         *$toplevel*->*mwmProtocol*(*'add'* => 'MY_PRINT_HELLO', '"Print
     Hello"  _H Ctrl<Key>H');

         *$toplevel*->protocol(*'MY_PRINT_HELLO'* => sub {print "Hello"});

*$toplevel*->*mwmProtocol*(*'deactivate'* => *protocol_name*)
     Deactivate the mwm protocol message in mwm's menu.

*$toplevel*->*mwmProtocol*(*'delete'* => *protocol_name*)
     Delete the mwm protocol message from mwm's menu. Please note that the
     window manager protocol handler associated with this protocol (by the
     protocol method) is not deleted automatically. You have to delete the
     protocol handle explicitly.  E.g.:

         *$mw*->*mwmProtocol*(*'delete'* => 'MY_PRINT_HELLO');

         *$mw*->protocol(*'MY_PRINT_HELLO'* => ");

BUGS
====

   This is a Tix extension which perl/Tk has adopted. It has not been
tested as perl/Tk's author has not got round to installing a Motif Window
Manager.

   On some versions of mwm, the *-border* will not disappear unless
*-resizeh* is turned off. Also, the *-title* will not disappear unless all
of *-title*, *-menu*, *-maximize* and *-minimize* are turned off.

SEE ALSO
========

   `Tk::Wm|Tk::Wm' in this node `Tk::tixWm|Tk::tixWm' in this node
`Tk::Toplevel|Tk::Toplevel' in this node

KEYWORDS
========

   window manager, mwm, TIX

AUTHOR
======

   Ioi Kim Lam - ioi@graphics.cis.upenn.edu


