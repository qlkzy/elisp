This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Bio/SeqI,  Next: Bio/SeqIO,  Prev: Bio/SeqFeatureI,  Up: Module List

Abstract Interface of Sequence (with features)
**********************************************

NAME
====

   Bio::SeqI - Abstract Interface of Sequence (with features)

SYNOPSIS
========

     # get a Bio::SeqI somehow, eg, via SeqIO. See SeqIO info
     # for more information

     $seqio  = Bio::SeqIO->new ( '-format' => 'Fasta' , -file => 'myfile.fasta');
     $seqobj = $seqio->next_seq();

     # features must implement Bio::SeqFeatureI

     @features = $seqobj->top_SeqFeatures(); # just top level
     @features = $seqobj->all_SeqFeatures(); # descend into sub features

     $seq      = $seqobj->seq(); # actual sequence as a string
     $seqstr   = $seqobj->subseq(10,50);
     $ann      = $seqobj->annotation(); # annotation object

DESCRIPTION
===========

   SeqI is the abstract interface of annotated Sequence. These methods are
those which you can be guarenteed to get for any annseq. There aren't many
here, because too many complicated functions here prevent implementations
which are just wrappers around a database or similar delayed mechanisms.

   Most of the clever stuff happens inside the SeqFeatureI system.

   A good reference implementation is Bio::Seq which is a pure perl
implementation of this class with alot of extra pieces for extra
manipulation.  However, if you want to be able to use any sequence object
in your analysis, if you can do it just using these methods, then you know
you will be future proof and compatible with other implementations of Seq.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     bioperl-l@bioperl.org          - General discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Ewan Birney
====================

   Email birney@sanger.ac.uk

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

top_SeqFeatures
---------------

     Title   : top_SeqFeatures
     Usage   :
     Function:
     Example :
     Returns :
     Args    :

all_SeqFeatures
---------------

     Title   : all_SeqFeatures
     Usage   : @features = $annseq->all_SeqFeatures()
     Function: returns all SeqFeatures, included sub SeqFeatures
     Returns : an array
     Args    : none

seq
---

     Title   : seq
     Usage   :
     Function:
     Example :
     Returns :
     Args    :

write_GFF
---------

     Title   : write_GFF
     Usage   :
     Function:
     Example :
     Returns :
     Args    :

annotation
----------

     Title   : annotation
     Usage   : $obj->annotation($seq_obj)
     Function:
     Example :
     Returns : value of annotation
     Args    : newvalue (optional)

primary_seq
-----------

     Title   : primary_seq
     Usage   : $obj->primary_seq($newval)
     Function:
     Example :
     Returns : value of primary_seq
     Args    : newvalue (optional)

feature_count
-------------

     Title   : feature_count
     Usage   : $seq->feature_count()
     Function: Return the number of SeqFeatures attached to a sequence
     Example :
     Returns : number of SeqFeatures
     Args    : none

species
-------

     Title   : species
     Usage   :
     Function: Gets or sets the species
     Example : $species = $self->species();
     Returns : Bio::Species object
     Args    : Bio::Species object or none;


File: pm.info,  Node: Bio/SeqIO,  Next: Bio/SeqIO/EMBL,  Prev: Bio/SeqI,  Up: Module List

Handler for SeqIO Formats
*************************

NAME
====

   Bio::SeqIO - Handler for SeqIO Formats

SYNOPSIS
========

     use Bio::SeqIO;

     $in  = Bio::SeqIO->new(-file => "inputfilename" , '-format' => 'Fasta');
     $out = Bio::SeqIO->new(-file => ">outputfilename" , '-format' => 'EMBL');
     # note: we quote -format to keep older perl's from complaining.

     while ( my $seq = $in->next_seq() ) {
     	$out->write_seq($seq);
     }

   or

     use Bio::SeqIO;

     $in  = Bio::SeqIO->newFh(-file => "inputfilename" , '-format' => 'Fasta');
     $out = Bio::SeqIO->newFh('-format' => 'EMBL');

     # World's shortest Fasta<->EMBL format converter:
     print $output $_ while <$in>;

DESCRIPTION
===========

   Bio::SeqIO is a handler module for the formats in the SeqIO set (eg,
Bio::SeqIO::fasta). It is the officially sanctioned way of getting at the
format objects, which most people should use.

   The SeqIO system replaces the old parse_XXX functions in the Seq object.

   The idea is that you request a stream object for a particular format.
All the stream objects have a notion of an internal file that is read from
or written to. A particular SeqIO object instance is configured for either
input or output. A specific example of a stream object is the
Bio::SeqIO::fasta object.

   Each stream object has functions

     $stream->next_seq();

   and

     $stream->write_seq($seq);

   also

     $stream->type() # returns 'INPUT' or 'OUTPUT'

   As an added bonus, you can recover a filehandle that is tied to the
SeqIO object, allowing you to use the standard <> and print operations to
read and write sequence objects:

     use Bio::SeqIO;

     $stream = Bio::SeqIO->newFh(-format => 'Fasta'); # read from standard input

     while ( $seq = <$stream> ) {
     	# do something with $seq
     }

   and

     print $stream $seq; # when stream is in output mode

   This makes the simplest ever reformatter

     #!/usr/local/bin/perl

     $format1 = shift;
     $format2 = shift || die "Usage: reformat format1 format2 < input > output";

     use Bio::SeqIO;

     $in  = Bio::SeqIO->newFh(-format => $format1 );
     $out = Bio::SeqIO->newFh(-format => $format2 );
     #note: you might want to quote -format to keep older perl's from complaining.

     print $out $_ while <$in>;

CONSTRUCTORS
============

Bio::SeqIO->new()
-----------------

     $seqIO = Bio::SeqIO->new(-file => 'filename',   -format=>$format);
     $seqIO = Bio::SeqIO->new(-fh   => \*FILEHANDLE, -format=>$format);
     $seqIO = Bio::SeqIO->new(-format => $format);

   The new() class method constructs a new Bio::SeqIO object.  The
returned object can be used to retrieve or print BioSeq objects. new()
accepts the following parameters:

-file
     A file path to be opened for reading or writing.  The usual Perl
     conventions apply:

          'file'       # open file for reading
          '>file'      # open file for writing
          '>>file'     # open file for appending
          '+<file'     # open file read/write
          'command |'  # open a pipe from the command
          '| command'  # open a pipe to the command

-fh
     You may provide new() with a previously-opened filehandle.  For
     example, to read from STDIN:

          $seqIO = Bio::SeqIO->new(-fh => \*STDIN);

     Note that you must pass filehandles as references to globs.

     If neither a filehandle nor a filename is specified, then the module
     will read from the @ARGV array or STDIN, using the familiar <>
     semantics.

-format
     Specify the format of the file.  Supported formats include:

          Fasta       FASTA format
          EMBL        EMBL format
          GenBank     GenBank format
          swiss       Swissprot format
          SCF         SCF tracefile format
          PIR         Protein Information Resource format
          GCG         GCG format
          raw         Raw format (one sequence per line, no ID)
          ace         ACeDB sequence format

     If no format is specified and a filename is given, then the module
     will attempt to deduce it from the filename.  If this is unsuccessful,
     Fasta format is assumed.

     The format name is case insensitive.  'FASTA', 'Fasta' and 'fasta' are
     all supported.

Bio::SeqIO->newFh()
-------------------

     $fh = Bio::SeqIO->newFh(-fh   => \*FILEHANDLE, -format=>$format);
     $fh = Bio::SeqIO->newFh(-format => $format);
     # etc.

   This constructor behaves like new(), but returns a tied filehandle
rather than a Bio::SeqIO object.  You can read sequences from this object
using the familiar <> operator, and write to it using print().  The usual
array and $_ semantics work.  For example, you can read all sequence
objects into an array like this:

     @sequences = <$fh>;

   Other operations, such as read(), sysread(), write(), close(), and
printf() are not supported.

OBJECT METHODS
==============

   See below for more detailed summaries.  The main methods are:

$sequence = $seqIO->next_seq()
------------------------------

   Fetch the next sequence from the stream.

$seqIO->write_seq($sequence [,$another_sequence,...])
-----------------------------------------------------

   Write the specified sequence(s) to the stream.

TIEHANDLE(), READLINE(), PRINT()
--------------------------------

   These provide the tie interface.  See *Note Perltie:
(perl.info)perltie, for more details.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably  to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     bioperl-l@bioperl.org                  - General discussion
     http://bioperl.org/MailList.shtml      - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.   Bug reports can be submitted via email or
the web:

     bioperl-bugs@bioperl.org
     http://bioperl.org/bioperl-bugs/

AUTHOR - Ewan Birney, Lincoln Stein
===================================

   Email birney@ebi.ac.uk

   Describe contact details here

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

new
---

     Title   : new
     Usage   : $stream = Bio::SeqIO->new(-file => $filename, -format => 'Format')
     Function: Returns a new seqstream
     Returns : A Bio::SeqIO::Handler initialised with the appropriate format
     Args    : -file => $filename
               -format => format
               -fh => filehandle to attach to

newFh
-----

     Title   : newFh
     Usage   : $fh = Bio::SeqIO->newFh(-file=>$filename,-format=>'Format')
     Function: does a new() followed by an fh()
     Example : $fh = Bio::SeqIO->newFh(-file=>$filename,-format=>'Format')
               $sequence = <$fh>;   # read a sequence object
               print $fh $sequence; # write a sequence object
     Returns : filehandle tied to the Bio::SeqIO::Fh class
     Args    :

fh
--

     Title   : fh
     Usage   : $obj->fh
     Function:
     Example : $fh = $obj->fh;      # make a tied filehandle
               $sequence = <$fh>;   # read a sequence object
               print $fh $sequence; # write a sequence object
     Returns : filehandle tied to the Bio::SeqIO::Fh class
     Args    :

next_seq
--------

     Title   : next_seq
     Usage   : $seq = stream->next_seq
     Function: Reads the next sequence object from the stream and returns it.

     Certain driver modules may encounter entries in the stream that
     are either misformatted or that use syntax not yet understood
     by the driver. If such an incident is recoverable, e.g., by
     dismissing a feature of a feature table or some other non-mandatory
     part of an entry, the driver will issue a warning. In the case
     of a non-recoverable situation an exception will be thrown.
     Do not assume that you can resume parsing the same stream after
     catching the exception. Note that you can always turn recoverable
     errors into exceptions by calling $stream->verbose(2) (see
     Bio::RootI POD page).
      Returns : a Bio::Seq sequence object
      Args    :

next_primary_seq
----------------

     Title   : next_primary_seq
     Usage   : $seq = $stream->next_primary_seq
     Function: Provides a primaryseq type of sequence object
     Returns : A Bio::PrimarySeqI object
     Args    : none

write_seq
---------

     Title   : write_seq
     Usage   : $stream->write_seq($seq)
     Function: writes the $seq object into the stream
     Returns : 1 for success and 0 for error
     Args    : Bio::Seq object

moltype
-------

     Title   : moltype
     Usage   : $self->moltype($newval)
     Function: Set/get the molecule type for the Seq objects to be created.
     Example : $seqio->moltype('protein')
     Returns : value of moltype: 'dna', 'rna', or 'protein'
     Args    : newvalue (optional)
     Throws  : Exception if the argument is not one of 'dna', 'rna', or 'protein'

_load_format_module
-------------------

     Title   : _load_format_module
     Usage   : *INTERNAL SeqIO stuff*
     Function: Loads up (like use) a module at run time on demand
     Example :
     Returns :
     Args    :

_concatenate_lines
------------------

     Title   : _concatenate_lines
     Usage   : $s = _concatenate_lines($line, $continuation_line)
     Function: Private. Concatenates two strings assuming that the second stems
               from a continuation line of the first. Adds a space between both
               unless the first ends with a dash.

     Takes care of either arg being empty.
      Example :
      Returns : A string.
      Args    :

_filehandle
-----------

     Title   : _filehandle
     Usage   : $obj->_filehandle($newval)
     Function: This method is deprecated. Call _fh() instead.
     Example :
     Returns : value of _filehandle
     Args    : newvalue (optional)

_guess_format
-------------

     Title   : _guess_format
     Usage   : $obj->_guess_format($filename)
     Function:
     Example :
     Returns : guessed format of filename (lower case)
     Args    :


File: pm.info,  Node: Bio/SeqIO/EMBL,  Next: Bio/SeqIO/FTHelper,  Prev: Bio/SeqIO,  Up: Module List

EMBL sequence input/output stream
*********************************

NAME
====

   Bio::SeqIO::EMBL - EMBL sequence input/output stream

SYNOPSIS
========

   It is probably best not to use this object directly, but rather go
through the SeqIO handler system. Go:

     $stream = Bio::SeqIO->new(-file => $filename, -format => 'EMBL');

     while $seq ( <$stream> ) {
     	# $seq is a Bio::Seq object
     }

DESCRIPTION
===========

   This object can transform Bio::Seq objects to and from EMBL flat file
databases.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably  to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     vsns-bcd-perl@lists.uni-bielefeld.de          - General discussion
     vsns-bcd-perl-guts@lists.uni-bielefeld.de     - Technically-oriented discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.   Bug reports can be submitted via email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Ewan Birney
====================

   Email birney@sanger.ac.uk

   Describe contact details here

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

next_seq
--------

     Title   : next_seq
     Usage   : $seq = $stream->next_seq()
     Function: returns the next sequence in the stream
     Returns : Bio::Seq object
     Args    :

write_seq
---------

     Title   : write_seq
     Usage   : $stream->write_seq($seq)
     Function: writes the $seq object into the stream
     Returns : 1 for success and 0 for error
     Args    : Bio::Seq object

_filehandle
-----------

     Title   : _filehandle
     Usage   : $obj->_filehandle($newval)
     Function:
     Example :
     Returns : value of _filehandle
     Args    : newvalue (optional)


File: pm.info,  Node: Bio/SeqIO/FTHelper,  Next: Bio/SeqIO/Fasta,  Prev: Bio/SeqIO/EMBL,  Up: Module List

Helper class for Embl/Genbank feature tables
********************************************

NAME
====

   Bio::SeqIO::FTHelper - Helper class for Embl/Genbank feature tables

SYNOPSIS
========

   Used by Bio::SeqIO::EMBL to help process the Feature Table

DESCRIPTION
===========

   Represents one particular Feature with the following fields

     key - the key of the feature
     loc - the location string of the feature
     <other fields> - other fields

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     bioperl-l@bioperl.org                 - General discussion
     http://www.bioperl.org/MailList.shtml - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Ewan Birney
====================

   Email birney@ebi.ac.uk

   Describe contact details here

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

_generic_seqfeature
-------------------

     Title   : _generic_seqfeature
     Usage   : $fthelper->_generic_seqfeature($annseq, "GenBank")
     Function: processes fthelper into a generic seqfeature
     Returns : TRUE on success and otherwise FALSE
     Args    : Bio::Seq, string indicating the source (GenBank/EMBL/SwissProt)

_parse_loc
----------

     Title   : _parse_loc
     Usage   : $fthelper->_parse_loc( $loc_string)

     Function: Parses the given location string and returns a location object
               with start() and end() and strand() set appropriately.
               Note that this method is private.
     Returns : location object or 0 on fail
     Args    : location string

from_SeqFeature
---------------

     Title   : from_SeqFeature
     Usage   : @fthelperlist = Bio::SeqIO::FTHelper::from_SeqFeature($sf,
     						     $context_annseq);
     Function: constructor of fthelpers from SeqFeatures
             :
             : The additional annseq argument is to allow the building of FTHelper
             : lines relevant to particular sequences (ie, when features are spread over
             : enteries, knowing how to build this)
     Returns : an array of FThelpers
     Args    : seq features

key
---

     Title   : key
     Usage   : $obj->key($newval)
     Function:
     Example :
     Returns : value of key
     Args    : newvalue (optional)

loc
---

     Title   : loc
     Usage   : $obj->loc($newval)
     Function:
     Example :
     Returns : value of loc
     Args    : newvalue (optional)

field
-----

     Title   : field
     Usage   :
     Function:
     Example :
     Returns :
     Args    :

add_field
---------

     Title   : add_field
     Usage   :
     Function:
     Example :
     Returns :
     Args    :


File: pm.info,  Node: Bio/SeqIO/Fasta,  Next: Bio/SeqIO/GCG,  Prev: Bio/SeqIO/FTHelper,  Up: Module List

Fasta sequence input/output stream
**********************************

NAME
====

   Bio::SeqIO::Fasta - Fasta sequence input/output stream

SYNOPSIS
========

   It is probably best not to use this object directly, but rather go
through the SeqIO handler system. Go:

     $stream = Bio::SeqIO->new(-file => $filename, -format => 'Fasta');

     while $seq ( <$stream> ) {
     	# $seq is a Bio::Seq object
     }

DESCRIPTION
===========

   This object can transform Bio::Seq objects to and from fasta flat file
databases.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably  to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     vsns-bcd-perl@lists.uni-bielefeld.de          - General discussion
     vsns-bcd-perl-guts@lists.uni-bielefeld.de     - Technically-oriented discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.   Bug reports can be submitted via email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Ewan Birney
====================

   Email birney@sanger.ac.uk

   Describe contact details here

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

next_seq
--------

     Title   : next_seq
     Usage   : $seq = $stream->next_seq()
     Function: returns the next sequence in the stream
     Returns : Bio::Seq object
     Args    :

write_seq
---------

     Title   : write_seq
     Usage   : $stream->write_seq($seq)
     Function: writes the $seq object into the stream
     Returns : 1 for success and 0 for error
     Args    : Bio::Seq object

_filehandle
-----------

     Title   : _filehandle
     Usage   : $obj->_filehandle($newval)
     Function:
     Example :
     Returns : value of _filehandle
     Args    : newvalue (optional)


File: pm.info,  Node: Bio/SeqIO/GCG,  Next: Bio/SeqIO/Handler,  Prev: Bio/SeqIO/Fasta,  Up: Module List

Raw sequence input/output stream
********************************

NAME
====

   Bio::SeqIO::GCG - Raw sequence input/output stream

SYNOPSIS
========

   It is probably best not to use this object directly, but rather go
through the SeqIO handler system. Go:

     $stream = Bio::SeqIO->new(-file => $filename, -format => 'GCG');

     while $seq ( <$stream> ) {
     	# $seq is a Bio::Seq object
     }

DESCRIPTION
===========

   This object can transform Bio::Seq objects to and from GCG-formatted
sequence files.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     vsns-bcd-perl@lists.uni-bielefeld.de          - General discussion
     vsns-bcd-perl-guts@lists.uni-bielefeld.de     - Technically-oriented discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.   Bug reports can be submitted via email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHORS - Ewan Birney & Chris Dagdigian
=======================================

   Email birney@sanger.ac.uk, dag@sonsorol.org

   Ewan Birney wrote the all the base SeqIO stuff. This module is based on
his SeqIO::Fasta and has been tweaked by Chris Dagdigian, to support GCG
formatted sequence input/output.

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

next_seq
--------

     Title   : next_seq
     Usage   : $seq = $stream->next_seq()
     Function: returns the next sequence in the stream
     Returns : Bio::Seq object
     Args    :

write_seq
---------

     Title   : write_seq
     Usage   : $stream->write_seq($seq)
     Function: writes the fromatted $seq object into the stream
     Returns : 1 for success and 0 for error
     Args    : Bio::Seq object, sequence string

_filehandle
-----------

     Title   : _filehandle
     Usage   : $obj->_filehandle($newval)
     Function:
     Example :
     Returns : value of _filehandle
     Args    : newvalue (optional)

_validate_checksum
------------------

     Title   : _validate_checksum
     Usage   : n/a - internal method
     Function: if parsed gcg sequence contains a checksum field
             : we compare it to a value computed here on the parsed
             : sequence. A checksum mismatch would indicate some
             : type of parsing failure occured.
             :
     Returns : 1 for success, 0 for failure
     Args    : string containing parsed seq, value of parsed cheksum


File: pm.info,  Node: Bio/SeqIO/Handler,  Next: Bio/SeqIO/MultiFile,  Prev: Bio/SeqIO/GCG,  Up: Module List

Handler of the SeqIO classes for tieing to filehandles
******************************************************

NAME
====

   Bio::SeqIO::Handler - Handler of the SeqIO classes for tieing to
filehandles

SYNOPSIS
========

     $stream = Bio::SeqIO->new(-file => "filename", -format => 'Fasta');

     tie *SEQ, 'Bio::SeqIO::Handler', $stream;

     while $seq ( <SEQ> ) {
     	# $seq is Bio::Seq object
     }

DESCRIPTION
===========

   This object wraps over the Bio::SeqIO:: format classes, providing the
correct glue for the tie mechanism in to filehandles. This allows normal
looking perl filehandles can be used to provide a streams for converting
sequences to and from ascii formats

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably  to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     vsns-bcd-perl@lists.uni-bielefeld.de          - General discussion
     vsns-bcd-perl-guts@lists.uni-bielefeld.de     - Technically-oriented discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.   Bug reports can be submitted via email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Ewan Birney
====================

   Email birney@sanger.ac.uk

   Describe contact details here

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

_streamobj
----------

     Title   : _streamobj
     Usage   : $obj->_streamobj($newval)
     Function:
     Example :
     Returns : value of _streamobj
     Args    : newvalue (optional)


File: pm.info,  Node: Bio/SeqIO/MultiFile,  Next: Bio/SeqIO/Raw,  Prev: Bio/SeqIO/Handler,  Up: Module List

Treating a set of files as a single input stream
************************************************

NAME
====

   Bio::SeqIO::MultiFile - Treating a set of files as a single input stream

SYNOPSIS
========

     $seqin = Bio::SeqIO::MultiFile( '-format' => 'Fasta',
                                     '-files'  => ['file1','file2'] );
     while((my $seq = $seqin->next_seq)) {
         # do something with $seq
     }

DESCRIPTION
===========

   Bio::SeqIO::MultiFile provides a simple way of bundling a whole set of
identically formatted sequence input files as a single stream.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably  to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     bioperl-l@bioperl.org                 - General discussion
     http://www.bioperl.org/MailList.shtml - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.   Bug reports can be submitted via email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Ewan Birney
====================

   Email birney@ebi.ac.uk

   Describe contact details here

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

next_seq
--------

     Title   : next_seq
     Usage   :
     Function:
     Example :
     Returns :
     Args    :

next_primary_seq
----------------

     Title   : next_primary_seq
     Usage   :
     Function:
     Example :
     Returns :
     Args    :

_load_file
----------

     Title   : _load_file
     Usage   :
     Function:
     Example :
     Returns :
     Args    :

_set_file
---------

     Title   : _set_file
     Usage   :
     Function:
     Example :
     Returns :
     Args    :

_current_seqio
--------------

     Title   : _current_seqio
     Usage   : $obj->_current_seqio($newval)
     Function:
     Example :
     Returns : value of _current_seqio
     Args    : newvalue (optional)

_format
-------

     Title   : _format
     Usage   : $obj->_format($newval)
     Function:
     Example :
     Returns : value of _format
     Args    : newvalue (optional)


File: pm.info,  Node: Bio/SeqIO/Raw,  Next: Bio/SeqIO/ace,  Prev: Bio/SeqIO/MultiFile,  Up: Module List

Raw sequence input/output stream
********************************

NAME
====

   Bio::SeqIO::Raw - Raw sequence input/output stream

SYNOPSIS
========

   It is probably best not to use this object directly, but rather go
through the SeqIO handler system. Go:

     $stream = Bio::SeqIO->new(-file => $filename, -format => 'Raw');

     while $seq ( <$stream> ) {
     	# $seq is a Bio::Seq object
     }

DESCRIPTION
===========

   This object can transform Bio::Seq objects to and from raw textfiles.
"Raw" is defined to mean 1 or more sequences separated by a newline. Raw
sequences are just lines of data with no formatting or special fields.

   The write_seq() method has not been tested yet, should be simple enough.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably  to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     vsns-bcd-perl@lists.uni-bielefeld.de          - General discussion
     vsns-bcd-perl-guts@lists.uni-bielefeld.de     - Technically-oriented discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.   Bug reports can be submitted via email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Ewan Birney
====================

   Email birney@sanger.ac.uk

   Describe contact details here

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

next_seq
--------

     Title   : next_seq
     Usage   : $seq = $stream->next_seq()
     Function: returns the next sequence in the stream
     Returns : Bio::Seq object
     Args    :

write_seq
---------

     Title   : write_seq
     Usage   : $stream->write_seq($seq)
     Function: writes the $seq object into the stream
     Returns : 1 for success and 0 for error
     Args    : Bio::Seq object

_filehandle
-----------

     Title   : _filehandle
     Usage   : $obj->_filehandle($newval)
     Function:
     Example :
     Returns : value of _filehandle
     Args    : newvalue (optional)


File: pm.info,  Node: Bio/SeqIO/ace,  Next: Bio/SeqIO/embl,  Prev: Bio/SeqIO/Raw,  Up: Module List

ace sequence input/output stream
********************************

NAME
====

   Bio::SeqIO::ace - ace sequence input/output stream

SYNOPSIS
========

   Do not use this module directly.  Use it via the Bio::SeqIO class.

DESCRIPTION
===========

   This object can transform Bio::Seq objects to and from ace file format.
It only parses a DNA or Peptide objects contained in the ace file,
producing PrimarySeq objects from them.  All other objects in the files
will be ignored.  It doesn't attempt to parse any annotation attatched to
the containing Sequence or Protein objects, which would probably be
impossible, since everyone's ACeDB schema can be different.

   It won't parse ace files containing Timestamps correctly either.  This
can easily be added if considered necessary.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably  to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     bioperl-l@bioperl.org                  - General discussion
     http://www.bioperl.org/MailList.shtml  - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.   Bug reports can be submitted via email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHORS - James Gilbert
=======================

   Email: jgrg@sanger.ac.uk

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

next_primary_seq
----------------

     Title   : next_primary_seq
     Usage   : $seq = $stream->next_primary_seq()
     Function: returns the next sequence in the stream
     Returns : Bio::PrimarySeq object
     Args    : NONE

next_seq
--------

     Title   : next_seq
     Usage   : $seq = $stream->next_seq()
     Function: returns the next sequence in the stream
     Returns : Bio::Seq object
     Args    : NONE

write_seq
---------

     Title   : write_seq
     Usage   : $stream->write_seq(@seq)
     Function: writes the $seq object into the stream
     Returns : 1 for success and 0 for error
     Args    : Bio::Seq object(s)


File: pm.info,  Node: Bio/SeqIO/embl,  Next: Bio/SeqIO/fasta,  Prev: Bio/SeqIO/ace,  Up: Module List

EMBL sequence input/output stream
*********************************

NAME
====

   Bio::SeqIO::embl - EMBL sequence input/output stream

SYNOPSIS
========

   It is probably best not to use this object directly, but rather go
through the AnnSeqIO handler system. Go:

     $stream = Bio::SeqIO->new(-file => $filename, -format => 'EMBL');

     while ( (my $seq = $stream->next_seq()) ) {
     	# do something with $seq
     }

DESCRIPTION
===========

   This object can transform Bio::Seq objects to and from EMBL flat file
databases.

   There is alot of flexibility here about how to dump things which I need
to document fully.

   There should be a common object that this and genbank share (probably
with swissprot). Too much of the magic is identical.

Optional functions
------------------

_show_dna()
     (output only) shows the dna or not

_post_sort()
     (output only) provides a sorting func which is applied to the
     FTHelpers before printing

_id_generation_func()
     This is function which is called as

          print "ID   ", $func($annseq), "\n";

     To generate the ID line. If it is not there, it generates a sensible
     ID line using a number of tools.

          =back

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably  to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     bioperl-l@bioperl.org                 - General discussion
     http://www.bioperl.org/MailList.shtml - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.   Bug reports can be submitted via email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Ewan Birney
====================

   Email birney@ebi.ac.uk

   Describe contact details here

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

next_seq
--------

     Title   : next_seq
     Usage   : $seq = $stream->next_seq()
     Function: returns the next sequence in the stream
     Returns : Bio::Seq object
     Args    :

write_seq
---------

     Title   : write_seq
     Usage   : $stream->write_seq($seq)
     Function: writes the $seq object (must be seq) to the stream
     Returns : 1 for success and 0 for error
     Args    : Bio::Seq

_print_EMBL_FTHelper
--------------------

     Title   : _print_EMBL_FTHelper
     Usage   :
     Function:
     Example :
     Returns :
     Args    :

_read_EMBL_Species
------------------

     Title   : _read_EMBL_Species
     Usage   :
     Function: Reads the EMBL Organism species and classification
               lines.
     Example :
     Returns : A Bio::Species object
     Args    :

_read_EMBL_DBLink
-----------------

     Title   : _read_EMBL_DBLink
     Usage   :
     Function: Reads the EMBL database cross reference ("DR") lines
     Example :
     Returns : A list of Bio::Annotation::DBLink objects
     Args    :

_filehandle
-----------

     Title   : _filehandle
     Usage   : $obj->_filehandle($newval)
     Function:
     Example :
     Returns : value of _filehandle
     Args    : newvalue (optional)

_read_FTHelper_EMBL
-------------------

     Title   : _read_FTHelper_EMBL
     Usage   : _read_FTHelper_EMBL($buffer)
     Function: reads the next FT key line
     Example :
     Returns : Bio::SeqIO::FTHelper object
     Args    : filehandle and reference to a scalar

_write_line_EMBL
----------------

     Title   : _write_line_EMBL
     Usage   :
     Function: internal function
     Example :
     Returns :
     Args    :

_write_line_EMBL_regex
----------------------

     Title   : _write_line_EMBL_regex
     Usage   :
     Function: internal function for writing lines of specified
               length, with different first and the next line
               left hand headers and split at specific points in the
               text
     Example :
     Returns : nothing
     Args    : file handle, first header, second header, text-line, regex for line breaks, total line length

_post_sort
----------

     Title   : _post_sort
     Usage   : $obj->_post_sort($newval)
     Function:
     Returns : value of _post_sort
     Args    : newvalue (optional)

_show_dna
---------

     Title   : _show_dna
     Usage   : $obj->_show_dna($newval)
     Function:
     Returns : value of _show_dna
     Args    : newvalue (optional)

_id_generation_func
-------------------

     Title   : _id_generation_func
     Usage   : $obj->_id_generation_func($newval)
     Function:
     Returns : value of _id_generation_func
     Args    : newvalue (optional)

_ac_generation_func
-------------------

     Title   : _ac_generation_func
     Usage   : $obj->_ac_generation_func($newval)
     Function:
     Returns : value of _ac_generation_func
     Args    : newvalue (optional)

_sv_generation_func
-------------------

     Title   : _sv_generation_func
     Usage   : $obj->_sv_generation_func($newval)
     Function:
     Returns : value of _sv_generation_func
     Args    : newvalue (optional)

_kw_generation_func
-------------------

     Title   : _kw_generation_func
     Usage   : $obj->_kw_generation_func($newval)
     Function:
     Returns : value of _kw_generation_func
     Args    : newvalue (optional)


File: pm.info,  Node: Bio/SeqIO/fasta,  Next: Bio/SeqIO/game,  Prev: Bio/SeqIO/embl,  Up: Module List

fasta sequence input/output stream
**********************************

NAME
====

   Bio::SeqIO::fasta - fasta sequence input/output stream

SYNOPSIS
========

   Do not use this module directly.  Use it via the Bio::SeqIO class.

DESCRIPTION
===========

   This object can transform Bio::Seq objects to and from fasta flat file
databases.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     bioperl-l@bioperl.org            - General discussion
     http://bioperl.org/MailList.shtml - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.   Bug reports can be submitted via email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHORS - Ewan Birney & Lincoln Stein
=====================================

   Email: birney@ebi.ac.uk        lstein@cshl.org

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

next_seq
--------

     Title   : next_seq
     Usage   : $seq = $stream->next_seq()
     Function: returns the next sequence in the stream
     Returns : Bio::Seq object
     Args    : NONE

next_primary_seq
----------------

     Title   : next_seq
     Usage   : $seq = $stream->next_seq()
     Function: returns the next sequence in the stream
     Returns : Bio::PrimarySeq object
     Args    : NONE

write_seq
---------

     Title   : write_seq
     Usage   : $stream->write_seq(@seq)
     Function: writes the $seq object into the stream
     Returns : 1 for success and 0 for error
     Args    : Bio::Seq object


File: pm.info,  Node: Bio/SeqIO/game,  Next: Bio/SeqIO/gcg,  Prev: Bio/SeqIO/fasta,  Up: Module List

Parses GAME XML 0.1 and higher into and out of Bio::Seq objects.
****************************************************************

NAME
====

   Bio::SeqIO::game - Parses GAME XML 0.1 and higher into and out of
Bio::Seq objects.

SYNOPSIS
========

   To use this module you need XML::Parser, XML::Parser::PerlSAX and
XML::Writer.

   Do not use this module directly.  Use it via the Bio::SeqIO class.

DESCRIPTION
===========

   This object can transform Bio::Seq objects to and from bioxml seq,
computation, feature and annotation dtds,versions 0.1 and higher.  These
can be found at http://www.bioxml.org/dtds/current.  It does this using
the idHandler, seqHandler and featureHandler modules you should have
gotten with this one.

   The idea is that any bioxml features can be turned into bioperl
annotations.  When Annotations and computations are parsed in, they gain
additional info in the bioperl SeqFeature tag attribute.  These can be
used to reconstitute a computation or annotation by the bioxml with the
bx-handler module when write_seq is called.

   If you use this to write SeqFeatures that were not generated from
computations or annotations, it will output a list of bioxml features.
Some data may be lost in this step, since bioxml features just have a
span, type and description - nothing about the anlysis performed.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably  to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     bioxml-dev@bioxml.org        - Technical discussion - Moderate volume
     bioxml-announce@bioxml.org   - General Announcements - Pretty dead
     http://www.bioxml.org/MailingLists/         - About the mailing lists

AUTHOR - Brad Marshall & Ewan Birney & Lincoln Stein
====================================================

   Email: bradmars@yahoo.com        birney@sanger.ac.uk
lstein@cshl.org

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

_export_subfeatures
-------------------

     Title   : _export_subfeatures
     Usage   : $obj->_export_subfeatures
     Function: export all subfeatures (also in the geneprediction structure)
     Returns : value of _export_subfeatures
     Args    : newvalue (optional)

_group_subfeatures
------------------

     Title   : _group_subfeatures
     Usage   : $obj->_group_subfeatures
     Function: Groups all subfeatures in separate feature_sets
     Returns : value of _group_subfeatures
     Args    : newvalue (optional)

_subfeature_types
-----------------

     Title   : _subfeature_types
     Usage   : $obj->_subfeature_types
     Function: array of all possible subfeatures, it should be a name of a function which
             : returns an arrau of sub_seqfeatures when called: @array = $feature->subfeaturetyp()
     Returns : array of _subfeature_types
     Args    : array of subfeature types (optional)

_add_subfeature_type    Title   : _add_subfeature_type  Usage   : $obj->_add_subfeature_type  Function: add one possible subfeature, it should be a name of a function which          : returns an arrau of sub_seqfeatures when called: @array = $feature->subfeaturetyp()  Returns : 1  Args    : one subfeature type (optional)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

next_seq
--------

     Title   : next_seq
     Usage   : $seq = $stream->next_seq()
     Function: returns the next sequence in the stream
     Returns : Bio::Seq object
     Args    : NONE

next_primary_seq
----------------

     Title   : next_primary_seq
     Usage   : $seq = $stream->next_primary_seq()
     Function: returns the next primary sequence (ie no seq_features) in the stream
     Returns : Bio::PrimarySeq object
     Args    : NONE

write_seq
---------

     Title   : write_seq
     Usage   : Not Yet Implemented! $stream->write_seq(@seq)
     Function: writes the $seq object into the stream
     Returns : 1 for success and 0 for error
     Args    : Bio::Seq object


File: pm.info,  Node: Bio/SeqIO/gcg,  Next: Bio/SeqIO/genbank,  Prev: Bio/SeqIO/game,  Up: Module List

GCG sequence input/output stream
********************************

NAME
====

   Bio::SeqIO::gcg - GCG sequence input/output stream

SYNOPSIS
========

   Do not use this module directly.  Use it via the Bio::SeqIO class.

DESCRIPTION
===========

   This object can transform Bio::Seq objects to and from GCG flat file
databases.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably  to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     bioperl-l@bioperl.org                 - General discussion
     http://www.bioperl.org/MailList.shtml - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.   Bug reports can be submitted via email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHORS - Ewan Birney & Lincoln Stein
=====================================

   Email: birney@ebi.ac.uk        lstein@cshl.org

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

next_seq
--------

     Title   : next_seq
     Usage   : $seq = $stream->next_seq()
     Function: returns the next sequence in the stream
     Returns : Bio::Seq object
     Args    :

write_seq
---------

     Title   : write_seq
     Usage   : $stream->write_seq(@seq)
     Function: writes the fromatted $seq object into the stream
     Returns : 1 for success and 0 for error
     Args    : Bio::Seq object, sequence string

GCG_checksum
------------

     Title     : GCG_checksum
     Usage     : $cksum = $gcgio->GCG_checksum($seq);
     Function  : returns a gcg checksum for the sequence specified

     This method can also be called as a class method.
      Example   :
      Returns   : a GCG checksum string
      Argument  : a Bio::PrimarySeqI implementing object

_validate_checksum
------------------

     Title   : _validate_checksum
     Usage   : n/a - internal method
     Function: if parsed gcg sequence contains a checksum field
             : we compare it to a value computed here on the parsed
             : sequence. A checksum mismatch would indicate some
             : type of parsing failure occured.
             :
     Returns : 1 for success, 0 for failure
     Args    : string containing parsed seq, value of parsed cheksum


File: pm.info,  Node: Bio/SeqIO/genbank,  Next: Bio/SeqIO/largefasta,  Prev: Bio/SeqIO/gcg,  Up: Module List

GenBank sequence input/output stream
************************************

NAME
====

   Bio::SeqIO::GenBank - GenBank sequence input/output stream

SYNOPSIS
========

   It is probably best not to use this object directly, but rather go
through the SeqIO handler system. Go:

     $stream = Bio::SeqIO->new(-file => $filename, -format => 'GenBank');

     while ( my $seq = $stream->next_seq() ) {
     	# do something with $seq
     }

DESCRIPTION
===========

   This object can transform Bio::Seq objects to and from GenBank flat
file databases.

   There is alot of flexibility here about how to dump things which I need
to document fully.

Optional functions
------------------

_show_dna()
     (output only) shows the dna or not

_post_sort()
     (output only) provides a sorting func which is applied to the
     FTHelpers before printing

_id_generation_func()
     This is function which is called as

          print "ID   ", $func($seq), "\n";

     To generate the ID line. If it is not there, it generates a sensible
     ID line using a number of tools.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably  to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     bioperl-l@bioperl.org                  - General discussion
     http://www.bioperl.org/MailList.shtml  - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.   Bug reports can be submitted via email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Elia Stupka
====================

   Email elia@ebi.ac.uk

   Describe contact details here

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

next_seq
--------

     Title   : next_seq
     Usage   : $seq = $stream->next_seq()
     Function: returns the next sequence in the stream
     Returns : Bio::Seq object
     Args    :

write_seq
---------

     Title   : write_seq
     Usage   : $stream->write_seq($seq)
     Function: writes the $seq object (must be seq) to the stream
     Returns : 1 for success and 0 for error
     Args    : Bio::Seq

_print_GenBank_FTHelper
-----------------------

     Title   : _print_GenBank_FTHelper
     Usage   :
     Function:
     Example :
     Returns :
     Args    :

_read_GenBank_References
------------------------

     Title   : _read_GenBank_References
     Usage   :
     Function: Reads references from GenBank format. Internal function really
     Example :
     Returns :
     Args    :

_read_GenBank_Species
---------------------

     Title   : _read_GenBank_Species
     Usage   :
     Function: Reads the GenBank Organism species and classification
               lines.
     Example :
     Returns : A Bio::Species object
     Args    :

_read_FTHelper_GenBank
----------------------

     Title   : _read_FTHelper_GenBank
     Usage   : _read_FTHelper_GenBank($buffer)
     Function: reads the next FT key line
     Example :
     Returns : Bio::SeqIO::FTHelper object
     Args    : filehandle and reference to a scalar

_write_line_GenBank
-------------------

     Title   : _write_line_GenBank
     Usage   :
     Function: internal function
     Example :
     Returns :
     Args    :

_write_line_GenBank_regex
-------------------------

     Title   : _write_line_GenBank_regex
     Usage   :
     Function: internal function for writing lines of specified
               length, with different first and the next line
               left hand headers and split at specific points in the
               text
     Example :
     Returns : nothing
     Args    : file handle, first header, second header, text-line, regex for line breaks, total line length

_post_sort
----------

     Title   : _post_sort
     Usage   : $obj->_post_sort($newval)
     Function:
     Returns : value of _post_sort
     Args    : newvalue (optional)

_show_dna
---------

     Title   : _show_dna
     Usage   : $obj->_show_dna($newval)
     Function:
     Returns : value of _show_dna
     Args    : newvalue (optional)

_id_generation_func
-------------------

     Title   : _id_generation_func
     Usage   : $obj->_id_generation_func($newval)
     Function:
     Returns : value of _id_generation_func
     Args    : newvalue (optional)

_ac_generation_func
-------------------

     Title   : _ac_generation_func
     Usage   : $obj->_ac_generation_func($newval)
     Function:
     Returns : value of _ac_generation_func
     Args    : newvalue (optional)

_sv_generation_func
-------------------

     Title   : _sv_generation_func
     Usage   : $obj->_sv_generation_func($newval)
     Function:
     Returns : value of _sv_generation_func
     Args    : newvalue (optional)

_kw_generation_func
-------------------

     Title   : _kw_generation_func
     Usage   : $obj->_kw_generation_func($newval)
     Function:
     Returns : value of _kw_generation_func
     Args    : newvalue (optional)


