This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Net/RRP/Entity,  Next: Net/RRP/Entity/Contact,  Prev: Net/RRP/Codec,  Up: Module List

rrp entity abstraction class
****************************

NAME
====

   Net::RRP::Entity - rrp entity abstraction class

SYNOPSIS
========

     use Net::RRP::Entity;
     my $entity = new Net::RRP::Entity();

DESCRIPTION
===========

   This is a base class for all Entity::* classes.

new
---

   This is a constructor. Example:

     use Net::RRP::Entity;
     my $entity = new Net::RRP::Entity();
     my $entity1 = new Net::RRP::Entity( key => [ 'value' ] );

getName
-------

   Return a *real* name of this entity. You must overwrite this method at
child class. Example:

     my $entityName = $entity->getName();
     print STDERR "EntityName is $entityName\n";

setAttribute
------------

   Setup attribte with name $attributeName to a $attributeValue.
$attributeValue must be a array ref. Example:

     $entity->setAttribute ( $attributeName, $attributeValue );
     $entity->setAttribute ( 'DomainName', [ 'test.ru' ] );
     $entity->setAttribute ( 'NameServer', [ 'ns1.ttt.ru', 'ns2.qqq.ru' ] );

getAttribute
------------

   Return a value of $attributeName attribute. Example:

     print STDERR $entity->getAttribute ( 'NameServer' )->[ 0 ];

   Can throw Net::RRP::Exception::MissingRequiredAttribute exception

getAttributes
-------------

   Return the hash ref of the all entity attributes. Example:

     my $attributes = $entity->getAttributes();
     foreach my $attributeName ( keys %$attributes )
     {
          print $attributeName . ' ' . $attributes->{ $$attributeName }->[ 0 ];
     }

getPrimaryAttributeValue
------------------------

   return a "primary" attribute value

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Entity (C) Michael Kulakov, Zenon N.S.P. 2000
                          125124, 19, 1-st Jamskogo polja st,
                          Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Request(3)' in this node, `Net::RRP::Response(3)' in this
node, `Net::RRP::Codec(3)' in this node, RFC 2832,
`Net::RRP::Exception::MissingRequiredAttribute(3)' in this node


File: pm.info,  Node: Net/RRP/Entity/Contact,  Next: Net/RRP/Entity/Domain,  Prev: Net/RRP/Entity,  Up: Module List

rrp contact entity representation.
**********************************

NAME
====

   Net::RRP::Entity::Contact - rrp contact entity representation.

SYNOPSIS
========

     use Net::RRP::Entity::Contact;
     my $contactEntity = new Net::RRP::Entity::Contact ( name => 'contactname',
     						     fax  => 'password',
     						     .... );

DESCRIPTION
===========

   This is a rrp contact entity representation class.

getName
-------

   return a 'Contact'

setAttribute
------------

   Add check constraint to attributes. Only firstname, lastname,
middlename, address, phone, email and fax attributes may be exists

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Entity::Contact (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Entity(3)' in this node, `Net::RRP::Codec(3)' in this node,
RFC 2832, `Net::RRP::Exception::InvalidAttributeName(3)' in this node


File: pm.info,  Node: Net/RRP/Entity/Domain,  Next: Net/RRP/Entity/NameServer,  Prev: Net/RRP/Entity/Contact,  Up: Module List

rrp domain entity representation.
*********************************

NAME
====

   Net::RRP::Entity::Domain - rrp domain entity representation.

SYNOPSIS
========

     use Net::RRP::Entity::Domain;
     my $domainEntity = new Net::RRP::Entity::Domain ( DomainName => [ 'domain.ru' ],
     						   NameServer => [ 'ns1.domain.ru' ] );
     my $domainEntity1 = new Net::RRP::Entity::Domain ();
     $domainEntity1->setAttribute ( DomainName => [ 'domain.ru' ] );
     $domainEntity1->setAttribute ( NameServer => [ 'ns1.domain.ru' ] );

DESCRIPTION
===========

   This is a rrp domain entity representation class.

getName
-------

   return a 'Domain'

setAttribute
------------

   Add check constraint to attributes. Only DomainName and NameServer
attributes can exists.

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Entity::Domain (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Entity(3)' in this node, `Net::RRP::Codec(3)' in this node,
RFC 2832, `Net::RRP::Exception::InvalidAttributeName(3)' in this node


File: pm.info,  Node: Net/RRP/Entity/NameServer,  Next: Net/RRP/Entity/Owner,  Prev: Net/RRP/Entity/Domain,  Up: Module List

rrp domain entity representation.
*********************************

NAME
====

   Net::RRP::Entity::NameServer - rrp domain entity representation.

SYNOPSIS
========

     use Net::RRP::Entity::NameServer;
     my $nameServerEntity = new Net::RRP::Entity::NameServer ( NameServer => [ 'ns1.domain.ru' ],
     						       IPAddress  => [ '1.1.1.1' ] );
     my $nameServerEntity1 = new Net::RRP::Entity::NameServer ();
     $nameServerEntity1->setAttribute ( NameServer => [ 'ns1.domain.ru' ] );
     $nameServerEntity1->setAttribute ( IPAddress  => [ '1.1.1.1' ] );

DESCRIPTION
===========

   This is a rrp name server entity representation class.

getName
-------

   return a 'NameServer'

setAttribute
------------

   Add check constraint to attributes. Only NameServer and IPAddress
attributes can exists.

getPrimaryAttributeValue
------------------------

   return a "primary" attribute value

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Entity::NameServer (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Entity(3)' in this node, `Net::RRP::Codec(3)' in this node,
RFC 2832, `Net::RRP::Exception::InvalidAttributeName(3)' in this node


File: pm.info,  Node: Net/RRP/Entity/Owner,  Next: Net/RRP/Entity/Registrar,  Prev: Net/RRP/Entity/NameServer,  Up: Module List

rrp owner entity representation.
********************************

NAME
====

   Net::RRP::Entity::Owner - rrp owner entity representation.

SYNOPSIS
========

     use Net::RRP::Entity::Owner;
     my $ownerEntity = new Net::RRP::Entity::Owner ( name     => 'ownername',
     						 password => 'password',
     						 .... );

DESCRIPTION
===========

   This is a rrp owner entity representation class.

getName
-------

   return a 'Owner'

setAttribute
------------

   Add check constraint to attributes. Only OwnerName and NameServer
attributes can exists.

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Entity::Owner (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Entity(3)' in this node, `Net::RRP::Codec(3)' in this node,
RFC 2832, `Net::RRP::Exception::InvalidAttributeName(3)' in this node


File: pm.info,  Node: Net/RRP/Entity/Registrar,  Next: Net/RRP/Entity/Replica,  Prev: Net/RRP/Entity/Owner,  Up: Module List

rrp registrar entity representation.
************************************

NAME
====

   Net::RRP::Entity::Registrar - rrp registrar entity representation.

SYNOPSIS
========

     use Net::RRP::Entity::Registrar;
     my $registrarEntity = new Net::RRP::Entity::Registrar ( name     => 'registrarname',
     							 password => 'password',
     							 .... );

DESCRIPTION
===========

   This is a rrp registrar entity representation class.

getName
-------

   return a 'Registrar'

setAttribute
------------

   Add check constraint to attributes. Only name, password, techcontact,
status may be exists

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Entity::Registrar (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Entity(3)' in this node, `Net::RRP::Codec(3)' in this node,
RFC 2832, `Net::RRP::Exception::InvalidAttributeName(3)' in this node


File: pm.info,  Node: Net/RRP/Entity/Replica,  Next: Net/RRP/Protocol,  Prev: Net/RRP/Entity/Registrar,  Up: Module List

rrp replica entity representation.
**********************************

NAME
====

   Net::RRP::Entity::Replica - rrp replica entity representation.

SYNOPSIS
========

     use Net::RRP::Entity::Replica;
     my $replicaEntity = new Net::RRP::Entity::Replica ( name => 'replicaname',
     						      => 'password',
     							 .... );

DESCRIPTION
===========

   This is a rrp replica entity representation class.

getName
-------

   return a 'Replica'

setAttribute
------------

   Add check constraint to attributes. Only techcontact, serial, name and
password may be exists

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Entity::Replica (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Entity(3)' in this node, `Net::RRP::Codec(3)' in this node,
RFC 2832, `Net::RRP::Exception::InvalidAttributeName(3)' in this node


File: pm.info,  Node: Net/RRP/Protocol,  Next: Net/RRP/Request,  Prev: Net/RRP/Entity/Replica,  Up: Module List

rrp protocol
************

NAME
====

   Net::RRP::Protocol - rrp protocol

SYNOPSIS
========

     use Net::RRP::Protocol;
     my $protocol = new Net::RRP::Protocol ( %parameters_for_IO_Socket_SSL_new );
     my $protocol1 = new Net::RRP::Protocol ( socket => $io_socket_ssl_object );

DESCRIPTION
===========

   This class implements rrp command ( request/response ) communications
over socket ( IO::Socket::SSL )

new
---

   This is a comstructor. You must setup complete paraters for initiliaze
of IO::Socket::SSL instance or pass already initilized socket at 'socket'
key.

     use Net::RRP::Protocol;
     my $protocol = new Net::RRP::Protocol ( %parameters_for_IO_Socket_SSL_new );
     my $protocol1 = new Net::RRP::Protocol ( socket => $io_socket_ssl_object );

   See `IO::Socket::SSL(3)' in this node for more details about
IO::Socket::SSL parameters.

getRequest
----------

   Get Net::RRP::Request class instance from socket. See
`Net::RRP::Codec(3)' in this node for more details about parsing of stream
&& get Net::RRP::Request instance.

     my $request = $protocol->getRequest ();

getResponse
-----------

   Get Net::RRP::Response class instance from socket. See
`Net::RRP::Codec(3)' in this node for more details about parsing of stream
&& get Net::RRP::Response instance.

     my $response = $protocol->getResponse ();

sendRequest
-----------

   Send rrp request to socket. Example:

     $protocol->sendRequest ( $request );

   throw throw Net::RRP::Exception::IOError if io errors.

sendResponse
------------

   Send rrp response to socket. Example:

     $protocol->sendResponse ( $response );

   throw throw Net::RRP::Exception::IOError if io errors.

sendHello()
-----------

   Send a "hello" message to a socket at the server part. You can pass
registryName, version and buildDate parameters to this call.

     $protocol->hello ( registryName => "RU",
     		    version      => '1.1.0',
     		    buildDate    => 'Mon Jun 19 14:04:00 MSK 2000' ).

   Return true if ok and false at errors.

getHello
--------

   Get "hello" from scream

     $protocol->getHello();

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Protocol (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Request(3)' in this node, `Net::RRP::Response(3)' in this
node, `Net::RRP::Codec(3)' in this node, RFC 2832


File: pm.info,  Node: Net/RRP/Request,  Next: Net/RRP/Request/Add,  Prev: Net/RRP/Protocol,  Up: Module List

rrp request abstraction class
*****************************

NAME
====

   Net::RRP::Request - rrp request abstraction class

SYNOPSIS
========

     use Net::RRP::Request;
     my $request = new Net::RRP::Request;

DESCRIPTION
===========

   This is a base class for all Request::* classes.

new
---

   The constructor. You can pass entity && options attributes to this
method. Example:

     my $request = new Net::RRP::Request ( entity  => new Net::RRP::Entity ( .... ),
                                           options => { key => 'value' } );
     my $request1 = new Net::RRP::Request ( );

getName
-------

   Return a *real* name of this request. You must overwrite this method at
child class. Example:

     my $requestName = $request->getName();
     print STDERR "EntityName is $requestName\n";

setEntity
---------

   Setup the rrp entity for this request. Example:

     $request->setEntity ( new Net::RRP::Entity ( ... ) );

getEntity
---------

   Return a entity of this request. Example:

     my $entity = $request->getEntity();

   Can throw Net::RRP::Exception::MissingRequiredEntity exception

getOption
---------

   Return a request option by $optionName. Example:

     print $request->getOption ( $optionName );
     print $request->getOption ( 'ttt' ); # no '-' here

   Can throw Net::RRP::Exception::MissingCommandOption() exception.

setOption
---------

   Set $optionName rrp request option to the $optionValue. Example:

     $request->setOption ( $optionName =>  $optionValue );
     $request->setOption ( tt => 'qq' );

getOptions
----------

   Return a hash ref to the request options. Example:

     my $options = $request->gtOptions();
     map { print "$_ = " . $options->{$_} } keys %$options;

isSuccessResponse
-----------------

   Return a true if response is successfull.

     my $protocol = new Net::RRP::Protocol ( .... );
     my $request  = new Net::RRP::Request::Add ( .... );
     $protocol->sendRequest ( $request );
     my $response = $protocol->getResponse ();
     die "error" unless $request->isSuccessResponse ( $response );

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Request (C) Michael Kulakov, Zenon N.S.P. 2000
                           125124, 19, 1-st Jamskogo polja st,
                           Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Entity(3)' in this node, `Net::RRP::Response(3)' in this
node, `Net::RRP::Codec(3)' in this node, RFC 2832,
`Net::RRP::Exception::MissingCommandOption(3)' in this node,
`Net::RRP::Exception::MissingRequiredEntity(3)' in this node


File: pm.info,  Node: Net/RRP/Request/Add,  Next: Net/RRP/Request/Check,  Prev: Net/RRP/Request,  Up: Module List

rrp add request representation.
*******************************

NAME
====

   Net::RRP::Request::Add - rrp add request representation.

SYNOPSIS
========

     use Net::RRP::Request::Add;
     my $addRequest = new Net::RRP::Request::Add
        ( entity  => new Net::RRP::Entity::Domain
          ( DomainName => [ 'domain.ru' ],
     	NameServer => [ 'ns1.domain.ru' ] ),
          options => { Period => 10 } );
     my $addRequest1 = new Net::RRP::Request::Add ();
     $addRequest1->setEntity ( new Net::RRP::Entity::Domain
     			   ( DomainName => [ 'domain.ru' ],
     			     NameServer => [ 'ns1.domain.ru' ] ) );
     $addRequest1->setOption ( Period => 10 );

DESCRIPTION
===========

   This is a rrp add request representation class.

getName
-------

   return a 'Add'

setEntity
---------

   throw Net::RRP::Exception::InvalidEntityValue exception unless entity
is Net::RRP::Entity::Domain or Net::RRP::Entity::NameServer

setOption
---------

   Support for Registrar and Serial options.  pass Period option. Throw
Net::RRP::Exception::InvalidCommandOption exception at other options.
Throw Net::RRP::Exception::InvalidOptionValue unless passed value is
numeric.

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Request::Add (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Request(3)' in this node, `Net::RRP::Codec(3)' in this node,
`Net::RRP::Entity::Domain(3)' in this node,
`Net::RRP::Entity::NameServer(3)' in this node, RFC 2832,
`Net::RRP::Exception::InvalidEntityValue(3)' in this node,
`Net::RRP::Exception::InvalidCommandOption(3)' in this node,
`Net::RRP::Exception::InvalidOptionValue(3)' in this node


File: pm.info,  Node: Net/RRP/Request/Check,  Next: Net/RRP/Request/Del,  Prev: Net/RRP/Request/Add,  Up: Module List

rrp check request representation.
*********************************

NAME
====

   Net::RRP::Request::Check - rrp check request representation.

SYNOPSIS
========

     use Net::RRP::Request::Check;
     my $checkRequest = new Net::RRP::Request::Check
        ( entity  => new Net::RRP::Entity::Domain ( DomainName => [ 'domain.ru' ] ) );
     my $checkRequest1 = new Net::RRP::Request::Check ();
     $checkRequest1->setEntity ( new Net::RRP::Entity::NameServer ( NameServer => [ 'ns1.domain.ru' ] ) );

DESCRIPTION
===========

   This is a rrp check request representation class.

getName
-------

   return a 'Check'

setEntity
---------

   throw Net::RRP::Exception::InvalidEntityValue unless entity is
Net::RRP::Entity::Domain or Net::RRP::Entity::NameServer

setOption
---------

   throw Net::RRP::Exception::InvalidCommandOption;

isSuccessResponse
-----------------

   Command: CHECK Success: 210, 211, 212, 213

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Request::Check (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Request(3)' in this node, `Net::RRP::Codec(3)' in this node,
`Net::RRP::Entity::Domain(3)' in this node,
`Net::RRP::Entity::NameServer(3)' in this node, RFC 2832,
`Net::RRP::Exception::InvalidEntityValue(3)' in this node,
`Net::RRP::Exception::InvalidCommandOption(3)' in this node,


File: pm.info,  Node: Net/RRP/Request/Del,  Next: Net/RRP/Request/Delete,  Prev: Net/RRP/Request/Check,  Up: Module List

rrp delete request representation.
**********************************

NAME
====

   Net::RRP::Request::Del - rrp delete request representation.

SYNOPSIS
========

     use Net::RRP::Request::Del;
     my $deleteRequest = new Net::RRP::Request::Del
        ( entity  => new Net::RRP::Entity::Domain  ( DomainName => [ 'domain.ru' ] ) );
     my $deleteRequest1 = new Net::RRP::Request::Del ();
     $deleteRequest1->setEntity ( new Net::RRP::Entity::Domain ( DomainName => [ 'domain.ru' ] ) );

DESCRIPTION
===========

   This is a rrp delete request representation class.

getName
-------

   return a 'Del'

setEntity
---------

   throw Net::RRP::Exception::InvalidEntityValue unless entity is
Net::RRP::Entity::Domain or Net::RRP::Entity::NameServer

setOption
---------

   Pass to parent method for Registrar and Serial options, throw
Net::RRP::Exception::InvalidCommandOption () immediate if other option

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Request::Del (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Request(3)' in this node, `Net::RRP::Codec(3)' in this node,
`Net::RRP::Entity::Domain(3)' in this node,
`Net::RRP::Entity::NameServer(3)' in this node, RFC 2832,
`Net::RRP::Exception::InvalidEntityValue(3)' in this node,
`Net::RRP::Exception::InvalidCommandOption(3)' in this node,


File: pm.info,  Node: Net/RRP/Request/Delete,  Next: Net/RRP/Request/Describe,  Prev: Net/RRP/Request/Del,  Up: Module List

rrp delete request representation.
**********************************

NAME
====

   Net::RRP::Request::Delete - rrp delete request representation.

SYNOPSIS
========

     use Net::RRP::Request::Delete;
     my $deleteRequest = new Net::RRP::Request::Delete
        ( entity  => new Net::RRP::Entity::Domain  ( DomainName => [ 'domain.ru' ] ) );
     my $deleteRequest1 = new Net::RRP::Request::Delete ();
     $deleteRequest1->setEntity ( new Net::RRP::Entity::Domain ( DomainName => [ 'domain.ru' ] ) );

DESCRIPTION
===========

   This is a rrp delete request representation class.

getName
-------

   return a 'Delete'

setEntity
---------

   throw Net::RRP::Exception::InvalidEntityValue unless entity is
Net::RRP::Entity::Domain or Net::RRP::Entity::NameServer

setOption
---------

   throw Net::RRP::Exception::InvalidCommandOption () immediate

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Request::Delete (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Request(3)' in this node, `Net::RRP::Codec(3)' in this node,
`Net::RRP::Entity::Domain(3)' in this node,
`Net::RRP::Entity::NameServer(3)' in this node, RFC 2832,
`Net::RRP::Exception::InvalidEntityValue(3)' in this node,
`Net::RRP::Exception::InvalidCommandOption(3)' in this node,


File: pm.info,  Node: Net/RRP/Request/Describe,  Next: Net/RRP/Request/Mod,  Prev: Net/RRP/Request/Delete,  Up: Module List

rrp describe request representation.
************************************

NAME
====

   Net::RRP::Request::Describe - rrp describe request representation.

SYNOPSIS
========

     use Net::RRP::Request::Describe;
     my $describeRequest = new Net::RRP::Request::Describe ( Target => 'Protocol' );
     my $describeRequest1 = new Net::RRP::Request::Describe ();
     $describeRequest1->setOption ( Target => 'Protocol' );

DESCRIPTION
===========

   This is a rrp describe request representation class.

getName
-------

   return a 'Describe'

setEntity
---------

   throw Net::RRP::Exception::InvalidEntityValue immediate

setOption
---------

   Pass only Target option with Protocol value. Throw
Net::RRP::Exception::InvalidCommandOption in other case.

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Request::Describe (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Request(3)' in this node, `Net::RRP::Codec(3)' in this node,
RFC 2832


File: pm.info,  Node: Net/RRP/Request/Mod,  Next: Net/RRP/Request/Quit,  Prev: Net/RRP/Request/Describe,  Up: Module List

rrp mod request representation.
*******************************

NAME
====

   Net::RRP::Request::Mod - rrp mod request representation.

SYNOPSIS
========

     use Net::RRP::Request::Mod;
     my $modRequest = new Net::RRP::Request::Mod
        ( entity  => new Net::RRP::Entity::Domain
          ( DomainName => [ 'domain.ru' ],
     	NameServer => [ 'ns1.domain.ru' ] ) );
     my $modRequest1 = new Net::RRP::Request::Mod ();
     $modRequest1->setEntity ( new Net::RRP::Entity::Domain
     			   ( DomainName => [ 'domain.ru' ],
     			     NameServer => [ 'ns1.domain.ru' ] ) );

DESCRIPTION
===========

   This is a rrp mod request representation class.

getName
-------

   return a 'Mod'

setEntity
---------

   throw Net::RRP::Exception::InvalidEntityValue unless entity is
Net::RRP::Entity::Domain or Net::RRP::Entity::NameServer

setOption
---------

   Support for Registrar and Serial options, throw
Net::RRP::Exception::InvalidCommandOption if other option

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Request::Mod (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Request(3)' in this node, `Net::RRP::Codec(3)' in this node,
`Net::RRP::Entity::Domain(3)' in this node,
`Net::RRP::Entity::NameServer(3)' in this node, RFC 2832,
`Net::RRP::Exception::InvalidCommandOption(3)' in this node,
`Net::RRP::Exception::InvalidEntityValue(3)' in this node


File: pm.info,  Node: Net/RRP/Request/Quit,  Next: Net/RRP/Request/Renew,  Prev: Net/RRP/Request/Mod,  Up: Module List

rrp quit request representation.
********************************

NAME
====

   Net::RRP::Request::Quit - rrp quit request representation.

SYNOPSIS
========

     use Net::RRP::Request::Quit;
     my $quitRequest = new Net::RRP::Request::Quit ()

DESCRIPTION
===========

   This is a rrp quit request representation class.

getName
-------

   return a 'Quit'

setEntity
---------

   throw Net::RRP::Exception::InvalidEntityValue immediate

setOption
---------

   throw Net::RRP::Exception::InvalidCommandOption () immediate

isSuccessResponse
-----------------

   Only 200 response successfull for quit.

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Request::Quit (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Request(3)' in this node, `Net::RRP::Codec(3)' in this node,
RFC 2832, `Net::RRP::Exception::InvalidCommandOption(3)' in this node,
`Net::RRP::Exception::InvalidEntityValue(3)' in this node


File: pm.info,  Node: Net/RRP/Request/Renew,  Next: Net/RRP/Request/Reverse,  Prev: Net/RRP/Request/Quit,  Up: Module List

rrp renew request representation.
*********************************

NAME
====

   Net::RRP::Request::Renew - rrp renew request representation.

SYNOPSIS
========

     use Net::RRP::Request::Renew;
     my $renewRequest = new Net::RRP::Request::Renew
        ( entity  => new Net::RRP::Entity::Domain ( DomainName => 'domain.ru' )
          options => { Period => 10, CurrentExpirationYear => 2000 } );

DESCRIPTION
===========

   This is a rrp renew request representation class.

getName
-------

   return a 'Renew'

setEntity
---------

   throw Net::RRP::Exception::InvalidEntityValue unless entity is
Net::RRP::Entity::Domain

setOption
---------

   Pass only Period && CurrentExpirationYear option. Throw
Net::RRP::Exception::InvalidCommandOption at other case.

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Request::Renew (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Request(3)' in this node, `Net::RRP::Codec(3)' in this node,
`Net::RRP::Entity::Domain(3)' in this node,
`Net::RRP::Entity::NameServer(3)' in this node, RFC 2832,
`Net::RRP::Exception::InvalidCommandOption(3)' in this node,
`Net::RRP::Exception::InvalidEntityValue(3)' in this node


File: pm.info,  Node: Net/RRP/Request/Reverse,  Next: Net/RRP/Request/Session,  Prev: Net/RRP/Request/Renew,  Up: Module List

rrp reverse request representation. This command must reverse protocol for replication issues.
**********************************************************************************************

NAME
====

   Net::RRP::Request::Reverse - rrp reverse request representation. This
command must reverse protocol for replication issues.

SYNOPSIS
========

     use Net::RRP::Request::Reverse;
     my $reverseRequest = new Net::RRP::Request::Reverse ();

DESCRIPTION
===========

   This is a rrp reverse request representation class. RRP rfc extension.

getName
-------

   return a 'Reverse'

setEntity
---------

   throw Net::RRP::Exception::InvalidEntityValue immediate

setOption
---------

   throw Net::RRP::Exception::InvalidCommandOption () immediate

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Request::Reverse (C) Vladimir B. Grebenschikov
                                    TSB "Russian Express"
                                    vova@express.ru

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Request(3)' in this node, `Net::RRP::Codec(3)' in this node,
RFC 2832, `Net::RRP::Exception::InvalidCommandOption(3)' in this node,
`Net::RRP::Exception::InvalidEntityValue(3)' in this node


File: pm.info,  Node: Net/RRP/Request/Session,  Next: Net/RRP/Request/Status,  Prev: Net/RRP/Request/Reverse,  Up: Module List

rrp session request representation.
***********************************

NAME
====

   Net::RRP::Request::Session - rrp session request representation.

SYNOPSIS
========

     use Net::RRP::Request::Session;
     my $sessionRequest = new Net::RRP::Request::Session ( Id       => 'reg1',
     						       Password => '***' );
     my $sessionRequest1 = new Net::RRP::Request::Session ();
     $sessionRequest1->setOption ( Id          => 'reg1' );
     $sessionRequest1->setOption ( Password    => '***'  );
     $sessionRequest1->setOption ( NewPassword => '****' );

DESCRIPTION
===========

   This is a rrp session request representation class.

getName
-------

   return a 'Session'

setEntity
---------

   throw Net::RRP::Exception::InvalidEntityValue immediate

setOption
---------

   Pass only Id, Password, NewPassword options

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Request::Session (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Request(3)' in this node, `Net::RRP::Codec(3)' in this node,
RFC 2832, `Net::RRP::Exception::InvalidCommandOption(3)' in this node,
`Net::RRP::Exception::InvalidEntityValue(3)' in this node


File: pm.info,  Node: Net/RRP/Request/Status,  Next: Net/RRP/Request/Transfer,  Prev: Net/RRP/Request/Session,  Up: Module List

rrp status request representation.
**********************************

NAME
====

   Net::RRP::Request::Status - rrp status request representation.

SYNOPSIS
========

     use Net::RRP::Request::Status;
     my $statusRequest = new Net::RRP::Request::Status
        ( entity  => new Net::RRP::Entity::Domain ( DomainName => [ 'domain.ru' ] ) );
     my $statusRequest1 = new Net::RRP::Request::Status ();
     $statusRequest1->setEntity ( new Net::RRP::Entity::NameServer ( NameServer => [ 'ns1.domain.ru' ] ) );

DESCRIPTION
===========

   This is a rrp status request representation class.

getName
-------

   return a 'Status'

setEntity
---------

   throw Net::RRP::Exception::InvalidEntityValue unless entity is
Net::RRP::Entity::Domain or Net::RRP::Entity::NameServer

setOption
---------

   throw Net::RRP::Exception::InvalidCommandOption

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Request::Status (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Request(3)' in this node, `Net::RRP::Codec(3)' in this node,
`Net::RRP::Entity::Domain(3)' in this node,
`Net::RRP::Entity::NameServer(3)' in this node, RFC 2832,
`Net::RRP::Exception::InvalidCommandOption(3)' in this node,
`Net::RRP::Exception::InvalidEntityValue(3)' in this node


File: pm.info,  Node: Net/RRP/Request/Transfer,  Next: Net/RRP/Response,  Prev: Net/RRP/Request/Status,  Up: Module List

rrp transfer request representation.
************************************

NAME
====

   Net::RRP::Request::Transfer - rrp transfer request representation.

SYNOPSIS
========

     use Net::RRP::Request::Transfer;
     my $transferRequest = new Net::RRP::Request::Transfer
        ( entity  => new Net::RRP::Entity::Domain ( DomainName => [ 'domain.ru' ] ),
          options => { Approve => 'no' } )
     my $transferRequest1 = new Net::RRP::Request::Transfer ();
     $transferRequest1->setEntity ( new Net::RRP::Entity::Domain ( DomainName => [ 'domain.ru' ] );
     $transferRequest1->setOption ( Approve => 'no' );

DESCRIPTION
===========

   This is a rrp transfer request representation class.

getName
-------

   return a 'Transfer'

setEntity
---------

   throw Net::RRP::Exception::InvalidEntityValue unless entity is
Net::RRP::Entity::Domain

setOption
---------

   Pass only Approve option and yes/no value

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Request::Transfer (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Request(3)' in this node, `Net::RRP::Codec(3)' in this node,
`Net::RRP::Entity::Domain(3)' in this node, RFC
2832,`Net::RRP::Exception::InvalidCommandOption(3)' in this node,
`Net::RRP::Exception::InvalidEntityValue(3)' in this node,
`Net::RRP::Exception::InvalidOptionValue(3)' in this node


File: pm.info,  Node: Net/RRP/Response,  Next: Net/RRP/Response/n200,  Prev: Net/RRP/Request/Transfer,  Up: Module List

the base class for the Net::RRP::Response::* classes
****************************************************

NAME
====

     Net::RRP::Response - the base class for the Net::RRP::Response::* classes

SYNOPSIS
========

     use Net::RRP::Response;
     my $response = new Net::RRP::Response ();

DESCRIPTION
===========

   This is a base class of all Response::* classes. Child class must
overwrite a getCode method and setup own constrains for attributes at
setAttribute method. Child classes must named Net::RRP::Response::nNNN,
where NNN is a response number.

new
---

   The constructor. You can setup attributes and description. Example:

     use Net::RRP::Response;
     my $response = new Net::RRP::Response ();
     my $otherResponse = new Net::RRP::Response ( attributes  => { qq => 'tt'},
     					      description => 'this is a response description' );

newFromException
----------------

   Construct new response object from exception infomation;

     my $response = newFromException Net::RRP::Response ( new Net::RRP::Exception ( "description", $code ) );

getCode
-------

   This method return a code (number) of response. Must be overwrited at
child classes. Example:

     my $responseNumber = $response->getCode;

getDescription
--------------

   Get response description. Example:

     my $description = $response->getDescription();

setDescription
--------------

   Set response description. Example:

     $response->setDescription ( 'this is a response description' );

getAttribute
------------

   Return a named response attribute. Example:

     my $attribute = $response->getAttribute ( 'name' );

setAttribute
------------

   Setup a named attribute. Example:

     $response->setAttribute ( 'name' => 'value' );

getAttributes
-------------

   Get response attributes hash ref. Example:

     my $attributes = $response->getAttributes;
     map { print "$_ = " . $attributes->{$_} } keys %$attributes;

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Response (C) Michael Kulakov, Zenon N.S.P. 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Entity(3)' in this node, `Net::RRP::Request(3)' in this
node, `Net::RRP::Codec(3)' in this node, `Net::RRP::Exception(3)' in this
node, RFC 2832


File: pm.info,  Node: Net/RRP/Response/n200,  Next: Net/RRP/Response/n210,  Prev: Net/RRP/Response,  Up: Module List

the rrp response 200 representation
***********************************

NAME
====

   Net::RRP::Response::n200 - the rrp response 200 representation

SYNOPSIS
========

     use Net::RRP::Response::n200;
     my $response = new Net::RRP::Response::n200;

DESCRIPTION
===========

   Net::RRP::Response::n200 - the 200 rrp response representation. See
base class `Net::RRP::Response(3)' in this node for more details.

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Response::n200 (C) Zenon N.S.P. Michael Kulakov 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Response(3)' in this node, `Net::RRP::Codec(3)' in this
node, RFC 2832


File: pm.info,  Node: Net/RRP/Response/n210,  Next: Net/RRP/Response/n211,  Prev: Net/RRP/Response/n200,  Up: Module List

the rrp response 210 representation
***********************************

NAME
====

   Net::RRP::Response::n210 - the rrp response 210 representation

SYNOPSIS
========

     use Net::RRP::Response::n210;
     my $response = new Net::RRP::Response::n210;

DESCRIPTION
===========

   Net::RRP::Response::n210 - the 210 rrp response representation. See
base class `Net::RRP::Response(3)' in this node for more details.

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Response::n210 (C) Zenon N.S.P. Michael Kulakov 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Response(3)' in this node, `Net::RRP::Codec(3)' in this
node, RFC 2832


File: pm.info,  Node: Net/RRP/Response/n211,  Next: Net/RRP/Response/n212,  Prev: Net/RRP/Response/n210,  Up: Module List

the rrp response 211 representation
***********************************

NAME
====

   Net::RRP::Response::n211 - the rrp response 211 representation

SYNOPSIS
========

     use Net::RRP::Response::n211;
     my $response = new Net::RRP::Response::n211;

DESCRIPTION
===========

   Net::RRP::Response::n211 - the 211 rrp response representation. See
base class `Net::RRP::Response(3)' in this node for more details.

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Response::n211 (C) Zenon N.S.P. Michael Kulakov 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Response(3)' in this node, `Net::RRP::Codec(3)' in this
node, RFC 2832


File: pm.info,  Node: Net/RRP/Response/n212,  Next: Net/RRP/Response/n213,  Prev: Net/RRP/Response/n211,  Up: Module List

the rrp response 212 representation
***********************************

NAME
====

   Net::RRP::Response::n212 - the rrp response 212 representation

SYNOPSIS
========

     use Net::RRP::Response::n212;
     my $response = new Net::RRP::Response::n212;

DESCRIPTION
===========

   Net::RRP::Response::n212 - the 212 rrp response representation. See
base class `Net::RRP::Response(3)' in this node for more details.

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Response::n212 (C) Zenon N.S.P. Michael Kulakov 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Response(3)' in this node, `Net::RRP::Codec(3)' in this
node, RFC 2832


File: pm.info,  Node: Net/RRP/Response/n213,  Next: Net/RRP/Response/n220,  Prev: Net/RRP/Response/n212,  Up: Module List

the rrp response 213 representation
***********************************

NAME
====

   Net::RRP::Response::n213 - the rrp response 213 representation

SYNOPSIS
========

     use Net::RRP::Response::n213;
     my $response = new Net::RRP::Response::n213;

DESCRIPTION
===========

   Net::RRP::Response::n213 - the 213 rrp response representation. See
base class `Net::RRP::Response(3)' in this node for more details.

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Response::n213 (C) Zenon N.S.P. Michael Kulakov 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Response(3)' in this node, `Net::RRP::Codec(3)' in this
node, RFC 2832


File: pm.info,  Node: Net/RRP/Response/n220,  Next: Net/RRP/Response/n420,  Prev: Net/RRP/Response/n213,  Up: Module List

the rrp response 220 representation
***********************************

NAME
====

   Net::RRP::Response::n220 - the rrp response 220 representation

SYNOPSIS
========

     use Net::RRP::Response::n220;
     my $response = new Net::RRP::Response::n220;

DESCRIPTION
===========

   Net::RRP::Response::n220 - the 220 rrp response representation. See
base class `Net::RRP::Response(3)' in this node for more details.

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Response::n220 (C) Zenon N.S.P. Michael Kulakov 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Response(3)' in this node, `Net::RRP::Codec(3)' in this
node, RFC 2832


File: pm.info,  Node: Net/RRP/Response/n420,  Next: Net/RRP/Response/n421,  Prev: Net/RRP/Response/n220,  Up: Module List

the rrp response 420 representation
***********************************

NAME
====

   Net::RRP::Response::n420 - the rrp response 420 representation

SYNOPSIS
========

     use Net::RRP::Response::n420;
     my $response = new Net::RRP::Response::n420;

DESCRIPTION
===========

   Net::RRP::Response::n420 - the 420 rrp response representation. See
base class `Net::RRP::Response(3)' in this node for more details.

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Response::n420 (C) Zenon N.S.P. Michael Kulakov 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Response(3)' in this node, `Net::RRP::Codec(3)' in this
node, RFC 2832


File: pm.info,  Node: Net/RRP/Response/n421,  Next: Net/RRP/Response/n500,  Prev: Net/RRP/Response/n420,  Up: Module List

the rrp response 421 representation
***********************************

NAME
====

   Net::RRP::Response::n421 - the rrp response 421 representation

SYNOPSIS
========

     use Net::RRP::Response::n421;
     my $response = new Net::RRP::Response::n421;

DESCRIPTION
===========

   Net::RRP::Response::n421 - the 421 rrp response representation. See
base class `Net::RRP::Response(3)' in this node for more details.

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Response::n421 (C) Zenon N.S.P. Michael Kulakov 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Response(3)' in this node, `Net::RRP::Codec(3)' in this
node, RFC 2832


File: pm.info,  Node: Net/RRP/Response/n500,  Next: Net/RRP/Response/n501,  Prev: Net/RRP/Response/n421,  Up: Module List

the rrp response 500 representation
***********************************

NAME
====

   Net::RRP::Response::n500 - the rrp response 500 representation

SYNOPSIS
========

     use Net::RRP::Response::n500;
     my $response = new Net::RRP::Response::n500;

DESCRIPTION
===========

   Net::RRP::Response::n500 - the 500 rrp response representation. See
base class `Net::RRP::Response(3)' in this node for more details.

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Response::n500 (C) Zenon N.S.P. Michael Kulakov 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Response(3)' in this node, `Net::RRP::Codec(3)' in this
node, RFC 2832


File: pm.info,  Node: Net/RRP/Response/n501,  Next: Net/RRP/Response/n502,  Prev: Net/RRP/Response/n500,  Up: Module List

the rrp response 501 representation
***********************************

NAME
====

   Net::RRP::Response::n501 - the rrp response 501 representation

SYNOPSIS
========

     use Net::RRP::Response::n501;
     my $response = new Net::RRP::Response::n501;

DESCRIPTION
===========

   Net::RRP::Response::n501 - the 501 rrp response representation. See
base class `Net::RRP::Response(3)' in this node for more details.

AUTHOR AND COPYRIGHT
====================

     Net::RRP::Response::n501 (C) Zenon N.S.P. Michael Kulakov 2000
                            125124, 19, 1-st Jamskogo polja st,
                            Moscow, Russian Federation

     mkul@cpan.org

     All rights reserved.

     You may distribute this package under the terms of either the GNU
     General Public License or the Artistic License, as specified in the
     Perl README file.

SEE ALSO
========

   `Net::RRP::Response(3)' in this node, `Net::RRP::Codec(3)' in this
node, RFC 2832


