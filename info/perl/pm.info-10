This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Ace/Browser/AceSubs,  Next: Ace/Graphics/Fk,  Prev: Ace,  Up: Module List

Subroutines for AceBrowser
**************************

NAME
====

   Ace::Browser::AceSubs - Subroutines for AceBrowser

SYNOPSIS
========

     use Ace;
     use Ace::Browser::AceSubs;
     use CGI qw(:standard);

     my $obj = GetAceObject() || AceMissing();
     AceHeader();

     print start_html('AceBrowser Report');
     print Header();
     print TypeSelector($obj);
     print h1("Report for $obj");
     print Footer();

     See L<Ace::Graphics::Panel> and L<Ace::Graphics::Glyph>.

DESCRIPTION
===========

   This glyph draws a series of filled rectangles connected by up-angled
connectors or "hats".  The rectangles indicate exons; the hats are
introns.  The direction of transcription is indicated by a small arrow at
the end of the glyph, rightward for the + strand.

   The feature must respond to the exons() and optionally introns()
methods, or it will default to the generic display.  Implied introns (not
returned by the introns() method) are drawn in a contrasting color to
explicit introns.

OPTIONS
-------

   In addition to the common options, the following glyph-specific option
is recognized:

     Option                Description                    Default
     ------                -----------                    -------

     -implied_intron_color The color to use for gaps      gray
                           not returned by the introns()
                           method.

     -draw_arrow           Whether to draw arrowhead      true
                           indicating direction of
                           transcription.

BUGS
====

   Please report them.

SEE ALSO
========

   *Note Ace/Sequence: Ace/Sequence,, *Note Ace/Sequence/Feature:
Ace/Sequence/Feature,, *Note Ace/Graphics/Panel: Ace/Graphics/Panel,,
*Note Ace/Graphics/Track: Ace/Graphics/Track,, *Note
Ace/Graphics/Glyph/anchored_arrow: Ace/Graphics/Glyph/anchored_arrow,,
*Note Ace/Graphics/Glyph/arrow: Ace/Graphics/Glyph/arrow,,
`Ace::Graphics::Glyph::box' in this node, *Note
Ace/Graphics/Glyph/primers: Ace/Graphics/Glyph/primers,, *Note
Ace/Graphics/Glyph/segments: Ace/Graphics/Glyph/segments,,
`Ace::Graphics::Glyph::toomany' in this node, *Note
Ace/Graphics/Glyph/transcript: Ace/Graphics/Glyph/transcript,,

AUTHOR
======

   Lincoln Stein <lstein@cshl.org>.

   Copyright (c) 2001 Cold Spring Harbor Laboratory

   This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.  See DISCLAIMER.txt for disclaimers
of warranty.


File: pm.info,  Node: Ace/Graphics/Fk,  Next: Ace/Graphics/Glyph,  Prev: Ace/Browser/AceSubs,  Up: Module List

A dummy feature object used for generating panel key tracks
***********************************************************

NAME
====

   Ace::Graphics::Fk - A dummy feature object used for generating panel
key tracks

SYNOPSIS
========

   None.  Used internally by Ace::Graphics::Panel.

DESCRIPTION
===========

   None.  Used internally by Ace::Graphics::Panel.

SEE ALSO
========

   *Note Ace/Sequence: Ace/Sequence,,*Note Ace/Sequence/Feature:
Ace/Sequence/Feature,, *Note Ace/Graphics/Track: Ace/Graphics/Track,,*Note
Ace/Graphics/Glyph: Ace/Graphics/Glyph,, *Note GD: GD,

AUTHOR
======

   Lincoln Stein <lstein@cshl.org>.

   Copyright (c) 2001 Cold Spring Harbor Laboratory

   This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.  See DISCLAIMER.txt for disclaimers
of warranty.


File: pm.info,  Node: Ace/Graphics/Glyph,  Next: Ace/Graphics/Glyph/anchored_arrow,  Prev: Ace/Graphics/Fk,  Up: Module List

Base class for Ace::Graphics::Glyph objects
*******************************************

NAME
====

   Ace::Graphics::Glyph - Base class for Ace::Graphics::Glyph objects

SYNOPSIS
========

   See *Note Ace/Graphics/Panel: Ace/Graphics/Panel,.

DESCRIPTION
===========

   Ace::Graphics::Glyph is the base class for all glyph objects.  Each
glyph is a wrapper around an Ace::Sequence::Feature object, knows how to
render itself on an Ace::Graphics::Panel, and has a variety of
configuration variables.

   End developers will not ordinarily work directly with
Ace::Graphics::Glyph, but may want to subclass it for customized displays.

METHODS
=======

   This section describes the class and object methods for
Ace::Graphics::Glyph.

CONSTRUCTORS
------------

   Ace::Graphics::Glyph objects are constructed automatically by an
Ace::Graphics::GlyphFactory, and are not usually created by end-developer
code.

$glyph = Ace::Graphics::Glyph->new(-feature=>$feature,-factory=>$factory)
     Given a sequence feature, creates an Ace::Graphics::Glyph object to
     display it.  The -feature argument points to the
     Ace::Sequence::Feature object to display.  -factory indicates an
     Ace::Graphics::GlyphFactory object from which the glyph will fetch all
     its run-time configuration information.

     A standard set of options are recognized.  See `OPTIONS' in this node.

OBJECT METHODS
--------------

   Once a glyph is created, it responds to a large number of methods.  In
this section, these methods are grouped into related categories.

   Retrieving glyph context:

$factory = $glyph->factory
     Get the Ace::Graphics::GlyphFactory associated with this object.  This
     cannot be changed once it is set.

$feature = $glyph->feature
     Get the sequence feature associated with this object.  This cannot be
     changed once it is set.

   Retrieving glyph options:

$fgcolor = $glyph->fgcolor
$bgcolor = $glyph->bgcolor
$fontcolor = $glyph->fontcolor
$fillcolor = $glyph->fillcolor
     These methods return the configured foreground, background, font and
     fill colors for the glyph in the form of a GD::Image color index.

$width = $glyph->width
     Return the maximum width allowed for the glyph.  Most glyphs will be
     smaller than this.

$font = $glyph->font
     Return the font for the glyph.

$option = $glyph->option($option)
     Return the value of the indicated option.

$index = $glyph->color($color)
     Given a symbolic or #RRGGBB-form color name, returns its GD index.

   Retrieving information about the sequence:

$start = $glyph->start
$end   = $glyph->end
     These methods return the start and end of the glyph in base pair
     units.

$offset = $glyph->offset
     Returns the offset of the segment (the base pair at the far left of
     the image).

$length = $glyph->length
     Returns the length of the sequence segment.

   Retrieving formatting information:

$top = $glyph->top
$left = $glyph->left
$bottom = $glyph->bottom
$right = $glyph->right
     These methods return the top, left, bottom and right of the glyph in
     pixel coordinates.

$height = $glyph->height
     Returns the height of the glyph.  This may be somewhat larger or
     smaller than the height suggested by the GlyphFactory, depending on
     the type of the glyph.

$scale = $glyph->scale
     Get the scale for the glyph in pixels/bp.

$height = $glyph->labelheight
     Return the height of the label, if any.

$label = $glyph->label
     Return a human-readable label for the glyph.

   These methods are called by Ace::Graphics::Track during the layout
process:

$glyph->move($dx,$dy)
     Move the glyph in pixel coordinates by the indicated delta-x and
     delta-y values.

($x1,$y1,$x2,$y2) = $glyph->box
     Return the current position of the glyph.

   These methods are intended to be overridden in subclasses:

$glyph->calculate_height
     Calculate the height of the glyph.

$glyph->calculate_left
     Calculate the left side of the glyph.

$glyph->calculate_right
     Calculate the right side of the glyph.

$glyph->draw($gd,$left,$top)
     Optionally offset the glyph by the indicated amount and draw it onto
     the GD::Image object.

$glyph->draw_label($gd,$left,$top)
     Draw the label for the glyph onto the provided GD::Image object,
     optionally offsetting by the amounts indicated in $left and $right.

   These methods are useful utility routines:

$pixels = $glyph->map_pt($bases);
     Map the indicated base position, given in base pair units, into
     pixels, using the current scale and glyph position.

$glyph->filled_box($gd,$x1,$y1,$x2,$y2)
     Draw a filled rectangle with the appropriate foreground and fill
     colors, and pen width onto the GD::Image object given by $gd, using
     the provided rectangle coordinates.

$glyph->filled_oval($gd,$x1,$y1,$x2,$y2)
     As above, but draws an oval inscribed on the rectangle.

OPTIONS
-------

   The following options are standard among all Glyphs.  See individual
glyph pages for more options.

     Option      Description               Default
     ------      -----------               -------

     -fgcolor    Foreground color		black

     -outlinecolor				black
     	      Synonym for -fgcolor

     -bgcolor    Background color          white

     -fillcolor  Interior color of filled  turquoise
     	      images

     -linewidth  Width of lines drawn by	1
     		    glyph

     -height     Height of glyph		10

     -font       Glyph font		gdSmallFont

     -label      Whether to draw a label	false

SUBCLASSING Ace::Graphics::Glyph
================================

   By convention, subclasses are all lower-case.  Begin each subclass with
a preamble like this one:

     package Ace::Graphics::Glyph::crossbox;

     use strict;
     use vars '@ISA';
     @ISA = 'Ace::Graphics::Glyph';

   Then override the methods you need to.  Typically, just the draw()
method will need to be overridden.  However, if you need additional room
in the glyph, you may override calculate_height(), calculate_left() and
calculate_right().  Do not directly override height(), left() and right(),
as their purpose is to cache the values returned by their calculating
cousins in order to avoid time-consuming recalculation.

   A simple draw() method looks like this:

     sub draw {
      my $self = shift;
      $self->SUPER::draw(@_);
      my $gd = shift;

     # and draw a cross through the box
     my ($x1,$y1,$x2,$y2) = $self->calculate_boundaries(@_);
     my $fg = $self->fgcolor;
     $gd->line($x1,$y1,$x2,$y2,$fg);
     $gd->line($x1,$y2,$x2,$y1,$fg);
      }

   This subclass draws a simple box with two lines criss-crossed through
it.  We first call our inherited draw() method to generate the filled box
and label.  We then call calculate_boundaries() to return the coordinates
of the glyph, disregarding any extra space taken by labels.  We call
fgcolor() to return the desired foreground color, and then call
$gd->line() twice to generate the criss-cross.

   For more complex draw() methods, see Ace::Graphics::Glyph::transcript
and Ace::Graphics::Glyph::segments.

BUGS
====

   Please report them.

SEE ALSO
========

   *Note Ace/Sequence: Ace/Sequence,, *Note Ace/Sequence/Feature:
Ace/Sequence/Feature,, *Note Ace/Graphics/Panel: Ace/Graphics/Panel,,
*Note Ace/Graphics/Track: Ace/Graphics/Track,, *Note
Ace/Graphics/Glyph/anchored_arrow: Ace/Graphics/Glyph/anchored_arrow,,
*Note Ace/Graphics/Glyph/arrow: Ace/Graphics/Glyph/arrow,,
`Ace::Graphics::Glyph::box' in this node, *Note
Ace/Graphics/Glyph/primers: Ace/Graphics/Glyph/primers,, *Note
Ace/Graphics/Glyph/segments: Ace/Graphics/Glyph/segments,,
`Ace::Graphics::Glyph::toomany' in this node, *Note
Ace/Graphics/Glyph/transcript: Ace/Graphics/Glyph/transcript,,

AUTHOR
======

   Lincoln Stein <lstein@cshl.org>.

   Copyright (c) 2001 Cold Spring Harbor Laboratory

   This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.  See DISCLAIMER.txt for disclaimers
of warranty.


File: pm.info,  Node: Ace/Graphics/Glyph/anchored_arrow,  Next: Ace/Graphics/Glyph/arrow,  Prev: Ace/Graphics/Glyph,  Up: Module List

The "anchored_arrow" glyph
**************************

NAME
====

   Ace::Graphics::Glyph::anchored_arrow - The "anchored_arrow" glyph

SYNOPSIS
========

     See L<Ace::Graphics::Panel> and L<Ace::Graphics::Glyph>.

DESCRIPTION
===========

   This glyph draws an arrowhead which is anchored at one or both ends
(has a vertical base) or has one or more arrowheads.  The arrowheads
indicate that the feature does not end at the edge of the picture, but
continues.  For example:

     |-----------------------------|          both ends in picture
      <----------------------|                    left end off picture
          |---------------------------->      right end off picture
      <------------------------------------>      both ends off picture

OPTIONS
-------

   No additional options are recognized.  =head1 BUGS

   Please report them.

SEE ALSO
========

   *Note Ace/Sequence: Ace/Sequence,, *Note Ace/Sequence/Feature:
Ace/Sequence/Feature,, *Note Ace/Graphics/Panel: Ace/Graphics/Panel,,
*Note Ace/Graphics/Track: Ace/Graphics/Track,, *Note
Ace/Graphics/Glyph/anchored_arrow: Ace/Graphics/Glyph/anchored_arrow,,
*Note Ace/Graphics/Glyph/arrow: Ace/Graphics/Glyph/arrow,,
`Ace::Graphics::Glyph::box' in this node, *Note
Ace/Graphics/Glyph/primers: Ace/Graphics/Glyph/primers,, *Note
Ace/Graphics/Glyph/segments: Ace/Graphics/Glyph/segments,,
`Ace::Graphics::Glyph::toomany' in this node, *Note
Ace/Graphics/Glyph/transcript: Ace/Graphics/Glyph/transcript,,

AUTHOR
======

   Lincoln Stein <lstein@cshl.org>.

   Copyright (c) 2001 Cold Spring Harbor Laboratory

   This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.  See DISCLAIMER.txt for disclaimers
of warranty.


File: pm.info,  Node: Ace/Graphics/Glyph/arrow,  Next: Ace/Graphics/Glyph/group,  Prev: Ace/Graphics/Glyph/anchored_arrow,  Up: Module List

The "arrow" glyph
*****************

NAME
====

   Ace::Graphics::Glyph::arrow - The "arrow" glyph

SYNOPSIS
========

     See L<Ace::Graphics::Panel> and L<Ace::Graphics::Glyph>.

DESCRIPTION
===========

   This glyph draws arrows.  Depending on options, the arrows can be
labeled, be oriented vertically or horizontally, or can contain major and
minor ticks suitable for use as a scale.

OPTIONS
-------

   In addition to the common options, the following glyph-specific options
are recognized:

     Option      Description               Default
     ------      -----------               -------

     -tick       Whether to draw major       0
                 and minor ticks.
     	      0 = no ticks
     	      1 = major ticks
     	      2 = minor ticks

     -parallel   Whether to draw the arrow   true
     	      parallel to the sequence
     	      or perpendicular to it.

     -northeast  Whether to draw the         true
     	      north or east arrowhead
     	      (depending on orientation)

     -southwest  Whether to draw the         true
     	      south or west arrowhead
     	      (depending on orientation)

   Set -parallel to false to display a point-like feature such as a
polymorphism, or to indicate an important location.  If the feature start
== end, then the glyph will draw a single arrow at the designated location:

     ^
     |

   Otherwise, there will be two arrows at the start and end:

     ^              ^
     |              |

BUGS
====

   Please report them.

SEE ALSO
========

   *Note Ace/Sequence: Ace/Sequence,, *Note Ace/Sequence/Feature:
Ace/Sequence/Feature,, *Note Ace/Graphics/Panel: Ace/Graphics/Panel,,
*Note Ace/Graphics/Track: Ace/Graphics/Track,, *Note
Ace/Graphics/Glyph/anchored_arrow: Ace/Graphics/Glyph/anchored_arrow,,
*Note Ace/Graphics/Glyph/arrow: Ace/Graphics/Glyph/arrow,,
`Ace::Graphics::Glyph::box' in this node, *Note
Ace/Graphics/Glyph/primers: Ace/Graphics/Glyph/primers,, *Note
Ace/Graphics/Glyph/segments: Ace/Graphics/Glyph/segments,,
`Ace::Graphics::Glyph::toomany' in this node, *Note
Ace/Graphics/Glyph/transcript: Ace/Graphics/Glyph/transcript,,

AUTHOR
======

   Lincoln Stein <lstein@cshl.org>.

   Copyright (c) 2001 Cold Spring Harbor Laboratory

   This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.  See DISCLAIMER.txt for disclaimers
of warranty.


File: pm.info,  Node: Ace/Graphics/Glyph/group,  Next: Ace/Graphics/Glyph/line,  Prev: Ace/Graphics/Glyph/arrow,  Up: Module List

The group glyph
***************

NAME
====

   Ace::Graphics::Glyph::group - The group glyph

SYNOPSIS
========

   none

DESCRIPTION
===========

   This is an internal glyph type, used by Ace::Graphics::Track for moving
sets of glyphs around as a group.  This glyph is created automatically
when processing a set of features passed to Ace::Graphics::Panel->new as
an array ref.

OPTIONS
-------

   In addition to the common options, the following glyph-specific options
are recognized:

     Option      Description               Default
     ------      -----------               -------

     -connect    Whether to connect members  false
                 of the group by a dashed
                 line.

BUGS
====

   Please report them.

SEE ALSO
========

   *Note Ace/Sequence: Ace/Sequence,, *Note Ace/Sequence/Feature:
Ace/Sequence/Feature,, *Note Ace/Graphics/Panel: Ace/Graphics/Panel,,
*Note Ace/Graphics/Track: Ace/Graphics/Track,, *Note
Ace/Graphics/Glyph/anchored_arrow: Ace/Graphics/Glyph/anchored_arrow,,
*Note Ace/Graphics/Glyph/arrow: Ace/Graphics/Glyph/arrow,,
`Ace::Graphics::Glyph::box' in this node, *Note
Ace/Graphics/Glyph/primers: Ace/Graphics/Glyph/primers,, *Note
Ace/Graphics/Glyph/segments: Ace/Graphics/Glyph/segments,,
`Ace::Graphics::Glyph::toomany' in this node, *Note
Ace/Graphics/Glyph/transcript: Ace/Graphics/Glyph/transcript,,

AUTHOR
======

   Lincoln Stein <lstein@cshl.org>.

   Copyright (c) 2001 Cold Spring Harbor Laboratory

   This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.  See DISCLAIMER.txt for disclaimers
of warranty.


File: pm.info,  Node: Ace/Graphics/Glyph/line,  Next: Ace/Graphics/Glyph/primers,  Prev: Ace/Graphics/Glyph/group,  Up: Module List

The "line" glyph
****************

NAME
====

   Ace::Graphics::Glyph::line - The "line" glyph

SYNOPSIS
========

     See L<Ace::Graphics::Panel> and L<Ace::Graphics::Glyph>.

DESCRIPTION
===========

   This glyph draws a line parallel to the sequence segment.

OPTIONS
-------

   This glyph takes only the standard options.

BUGS
====

   Please report them.

SEE ALSO
========

   *Note Ace/Sequence: Ace/Sequence,, *Note Ace/Sequence/Feature:
Ace/Sequence/Feature,, *Note Ace/Graphics/Panel: Ace/Graphics/Panel,,
*Note Ace/Graphics/Track: Ace/Graphics/Track,, *Note
Ace/Graphics/Glyph/anchored_arrow: Ace/Graphics/Glyph/anchored_arrow,,
*Note Ace/Graphics/Glyph/arrow: Ace/Graphics/Glyph/arrow,,
`Ace::Graphics::Glyph::box' in this node, *Note
Ace/Graphics/Glyph/primers: Ace/Graphics/Glyph/primers,, *Note
Ace/Graphics/Glyph/segments: Ace/Graphics/Glyph/segments,,
`Ace::Graphics::Glyph::toomany' in this node, *Note
Ace/Graphics/Glyph/transcript: Ace/Graphics/Glyph/transcript,,

AUTHOR
======

   Lincoln Stein <lstein@cshl.org>.

   Copyright (c) 2001 Cold Spring Harbor Laboratory

   This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.  See DISCLAIMER.txt for disclaimers
of warranty.


File: pm.info,  Node: Ace/Graphics/Glyph/primers,  Next: Ace/Graphics/Glyph/segments,  Prev: Ace/Graphics/Glyph/line,  Up: Module List

The "STS primers" glyph
***********************

NAME
====

   Ace::Graphics::Glyph::primers - The "STS primers" glyph

SYNOPSIS
========

     See L<Ace::Graphics::Panel> and L<Ace::Graphics::Glyph>.

DESCRIPTION
===========

   This glyph draws two arrows oriented towards each other and connected
by a line of a contrasting color.  The length of the arrows is immaterial,
but the length of the glyph itself corresponds to the length of the scaled
feature.

OPTIONS
-------

   In addition to the common options, the following glyph-specific options
are recognized:

     Option      Description               Default
     ------      -----------               -------

     -connect    Whether to connect the      false
                 two arrowheads by a line.

     -connect_color  The color to use for the    fgcolor
                 connecting line.

BUGS
====

   Please report them.

SEE ALSO
========

   *Note Ace/Sequence: Ace/Sequence,, *Note Ace/Sequence/Feature:
Ace/Sequence/Feature,, *Note Ace/Graphics/Panel: Ace/Graphics/Panel,,
*Note Ace/Graphics/Track: Ace/Graphics/Track,, *Note
Ace/Graphics/Glyph/anchored_arrow: Ace/Graphics/Glyph/anchored_arrow,,
*Note Ace/Graphics/Glyph/arrow: Ace/Graphics/Glyph/arrow,,
`Ace::Graphics::Glyph::box' in this node, *Note
Ace/Graphics/Glyph/primers: Ace/Graphics/Glyph/primers,, *Note
Ace/Graphics/Glyph/segments: Ace/Graphics/Glyph/segments,,
`Ace::Graphics::Glyph::toomany' in this node, *Note
Ace/Graphics/Glyph/transcript: Ace/Graphics/Glyph/transcript,,

AUTHOR
======

   Lincoln Stein <lstein@cshl.org>.

   Copyright (c) 2001 Cold Spring Harbor Laboratory

   This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.  See DISCLAIMER.txt for disclaimers
of warranty.


File: pm.info,  Node: Ace/Graphics/Glyph/segments,  Next: Ace/Graphics/Glyph/transcript,  Prev: Ace/Graphics/Glyph/primers,  Up: Module List

The "discontinuous segments" glyph
**********************************

NAME
====

   Ace::Graphics::Glyph::segments - The "discontinuous segments" glyph

SYNOPSIS
========

     See L<Ace::Graphics::Panel> and L<Ace::Graphics::Glyph>.

DESCRIPTION
===========

   This glyph draws a sequence feature that consists of multiple
discontinuous segments, such as the exons on a transcript or a gapped
alignment.  The representation is a series of filled rectangles connected
by line segments.

   The features passed to it must either respond to the
Bio::SequenceFeatureI-style subSeqFeatures() method, or the
AcePerl/Das-style segments() or merged_segments() methods.

OPTIONS
-------

   Only the common options are recognized. There are no glyph-specific
options.

BUGS
====

   Please report them.

SEE ALSO
========

   *Note Ace/Sequence: Ace/Sequence,, *Note Ace/Sequence/Feature:
Ace/Sequence/Feature,, *Note Ace/Graphics/Panel: Ace/Graphics/Panel,,
*Note Ace/Graphics/Track: Ace/Graphics/Track,, *Note
Ace/Graphics/Glyph/anchored_arrow: Ace/Graphics/Glyph/anchored_arrow,,
*Note Ace/Graphics/Glyph/arrow: Ace/Graphics/Glyph/arrow,,
`Ace::Graphics::Glyph::box' in this node, *Note
Ace/Graphics/Glyph/primers: Ace/Graphics/Glyph/primers,, *Note
Ace/Graphics/Glyph/segments: Ace/Graphics/Glyph/segments,,
`Ace::Graphics::Glyph::toomany' in this node, *Note
Ace/Graphics/Glyph/transcript: Ace/Graphics/Glyph/transcript,,

AUTHOR
======

   Lincoln Stein <lstein@cshl.org>.

   Copyright (c) 2001 Cold Spring Harbor Laboratory

   This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.  See DISCLAIMER.txt for disclaimers
of warranty.


File: pm.info,  Node: Ace/Graphics/Glyph/transcript,  Next: Ace/Graphics/GlyphFactory,  Prev: Ace/Graphics/Glyph/segments,  Up: Module List

The "gene" glyph
****************

NAME
====

   Ace::Graphics::Glyph::transcript - The "gene" glyph

SYNOPSIS
========

     See L<Ace::Graphics::Panel> and L<Ace::Graphics::Glyph>.

DESCRIPTION
===========

   This glyph draws a series of filled rectangles connected by up-angled
connectors or "hats".  The rectangles indicate exons; the hats are
introns.  The direction of transcription is indicated by a small arrow at
the end of the glyph, rightward for the + strand.

   The feature must respond to the exons() and optionally introns()
methods, or it will default to the generic display.  Implied introns (not
returned by the introns() method) are drawn in a contrasting color to
explicit introns.

OPTIONS
-------

   In addition to the common options, the following glyph-specific option
is recognized:

     Option                Description                    Default
     ------                -----------                    -------

     -implied_intron_color The color to use for gaps      gray
                           not returned by the introns()
                           method.

     -draw_arrow           Whether to draw arrowhead      true
                           indicating direction of
                           transcription.

BUGS
====

   Please report them.

SEE ALSO
========

   *Note Ace/Sequence: Ace/Sequence,, *Note Ace/Sequence/Feature:
Ace/Sequence/Feature,, *Note Ace/Graphics/Panel: Ace/Graphics/Panel,,
*Note Ace/Graphics/Track: Ace/Graphics/Track,, *Note
Ace/Graphics/Glyph/anchored_arrow: Ace/Graphics/Glyph/anchored_arrow,,
*Note Ace/Graphics/Glyph/arrow: Ace/Graphics/Glyph/arrow,,
`Ace::Graphics::Glyph::box' in this node, *Note
Ace/Graphics/Glyph/primers: Ace/Graphics/Glyph/primers,, *Note
Ace/Graphics/Glyph/segments: Ace/Graphics/Glyph/segments,,
`Ace::Graphics::Glyph::toomany' in this node, *Note
Ace/Graphics/Glyph/transcript: Ace/Graphics/Glyph/transcript,,

AUTHOR
======

   Lincoln Stein <lstein@cshl.org>.

   Copyright (c) 2001 Cold Spring Harbor Laboratory

   This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.  See DISCLAIMER.txt for disclaimers
of warranty.


File: pm.info,  Node: Ace/Graphics/GlyphFactory,  Next: Ace/Graphics/Panel,  Prev: Ace/Graphics/Glyph/transcript,  Up: Module List

Create Ace::Graphics::Glyphs
****************************

NAME
====

   Ace::Graphics::GlyphFactory - Create Ace::Graphics::Glyphs

SYNOPSIS
========

     use Ace::Graphics::GlyphFactory;

     my $factory = Ace::Graphics::GlyphFactory($glyph_name,@options);

DESCRIPTION
===========

   The Ace::Graphics::GlyphFactory class is used internally by
Ace::Graphics::Track and Ace::Graphics::Glyph to hold the options
pertaining to a set of related glyphs and creating them on demand.  This
class is not ordinarily useful to the end-developer.

METHODS
=======

   This section describes the class and object methods for
Ace::Graphics::GlyphFactory.

CONSTRUCTORS
------------

   There is only one constructor, the new() method.  It is ordinarily
called by Ace::Graphics::Track, in the make_factory() subroutine.

$factory = Ace::Graphics::GlyphFactory->new($glyph_name,@options)
     The new() method creates a new factory object.  The object will create
     glyphs of type $glyph_name, and using the options specified in
     @options.  Generic options are described in *Note Ace/Graphics/Panel:
     Ace/Graphics/Panel,, and specific options are described in each of the
     Ace::Graphics::Glyph::* manual pages.  =back

OBJECT METHODS
--------------

   Once a track is created, the following methods can be invoked:

$glyph = $factory->glyph($feature)
     Given a sequence feature, creates an Ace::Graphics::Glyph object to
     display it.  The various attributes of the glyph are set from the
     options provided at factory creation time.

$option = $factory->option($option_name [,$new_option])
     Given an option name, returns its value.  If a second argument is
     provided, sets the option to the new value and returns its previous
     one.

$index = $factory->fgcolor
     Returns the desired foreground color for the glyphs in the form of an
     GD::Image color index.  This may be the one of the special colors
     gdBrushed and gdStyled.  This is only useful while the enclosing
     Ace::Graphics::Panel object is rendering the object.  In other
     contexts it returns undef.

$scale = $factory->scale([$scale])
     Get or set the scale, in pixels/bp, for the glyph.  This is
     ordinarily set by the Ace::Graphics::Track object just prior to
     rendering, and called by each glyphs' map_pt() method when performing
     the rendering.

$color = $factory->bgcolor([$color])
     Get or set the background color for the glyphs.

$color = $factory->fillcolor([$color])
     Get or set the fill color for the glyphs.

$font = $factory->font([$font])
     Get or set the font to use for rendering the glyph.

$color = $factory->fontcolor
     Get the color for the font (to set it, use fgcolor()).  This is subtly
     different from fgcolor() itself, because it will never return a styled
     color, such as gdBrushed.

$panel = $factory->panel([$panel])
     Get or set the panel that contains the GD::Image object used by this
     factory.

$index = $factory->translate($color)
@rgb = $factory->rgb($index)
     These are convenience procedures that are passed through to the
     enclosing Panel object and have the same effect as the like-named
     methods in that class.  See *Note Ace/Graphics/Panel:
     Ace/Graphics/Panel,.

BUGS
====

   Please report them.

SEE ALSO
========

   *Note Ace/Sequence: Ace/Sequence,, *Note Ace/Sequence/Feature:
Ace/Sequence/Feature,, *Note Ace/Graphics/Panel: Ace/Graphics/Panel,,
*Note Ace/Graphics/Track: Ace/Graphics/Track,, *Note Ace/Graphics/Glyph:
Ace/Graphics/Glyph,

AUTHOR
======

   Lincoln Stein <lstein@cshl.org>.

   Copyright (c) 2001 Cold Spring Harbor Laboratory

   This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.  See DISCLAIMER.txt for disclaimers
of warranty.


File: pm.info,  Node: Ace/Graphics/Panel,  Next: Ace/Graphics/Track,  Prev: Ace/Graphics/GlyphFactory,  Up: Module List

PNG graphics of Ace::Sequence::Feature objects
**********************************************

NAME
====

   Ace::Graphics::Panel - PNG graphics of Ace::Sequence::Feature objects

SYNOPSIS
========

     use Ace::Sequence;
     use Ace::Graphics::Panel;

     my $db     = Ace->connect(-host=>'brie2.cshl.org',-port=>2005) or die;
     my $cosmid = Ace::Sequence->new(-seq=>'Y16B4A',
     				  -db=>$db,-start=>-15000,-end=>15000) or die;

     my @transcripts = $cosmid->transcripts;

     my $panel = Ace::Graphics::Panel->new(
     				      -segment => $cosmid,
     				      -width  => 800
     				     );

     $panel->add_track(arrow => $cosmid,
      		  -bump => 0,
      		  -tick=>2);

     $panel->add_track(transcript => \@transcripts,
      		    -fillcolor =>  'wheat',
      		    -fgcolor   =>  'black',
                       -key       => 'Curated Genes',
      		    -bump      =>  +1,
      		    -height    =>  10,
      		    -label     =>  1);

     my $boxes = $panel->boxes;
     print $panel->png;

DESCRIPTION
===========

   The Ace::Graphics::Panel class provides drawing and formatting services
for Ace::Sequence::Feature objects or Das::Segment::Feature objects.

   Typically you will begin by creating a new Ace::Graphics::Panel object,
passing it the width of the visual display and the length of the segment.

   You will then call add_track() one or more times to add sets of related
features to the picture.  When you have added all the features you desire,
you may call png() to convert the image into a PNG-format image, or
boxes() to return coordinate information that can be used to create an
imagemap.

   Note that this modules depends on GD.

METHODS
=======

   This section describes the class and object methods for
Ace::Graphics::Panel.

CONSTRUCTORS
------------

   There is only one constructor, the new() method.

$panel = Ace::Graphics::Panel->new(@options)
     The new() method creates a new panel object.  The options are a set
     of tag/value pairs as follows:

          Option      Value                                Default
          ------      -----                                -------

          -length     Length of sequence segment, in bp    0

          -segment    An Ace::Sequence or Das::Segment     none
                      object, used to derive length if
          	      not provided

          -offset     Base pair to place at extreme left   $segment->start
          	      of image.

          -width      Desired width of image, in pixels    600

          -spacing    Spacing between tracks, in pixels    5

          -pad_top    Additional whitespace between top    0
          	      of image and contents, in pixels

          -pad_bottom Additional whitespace between top    0
          	      of image and bottom, in pixels

          -pad_left   Additional whitespace between left   0
          	      of image and contents, in pixels

          -pad_right  Additional whitespace between right  0
          	      of image and bottom, in pixels

          -keycolor   Background color for the key printed 'cornsilk'
                      at bottom of panel (if any)

          -keyspacing Spacing between key glyphs in the    10
                      key printed at bottom of panel
                      (if any)

     Typically you will pass new() an object that implements the
     Bio::RangeI interface, providing a length() method, from which the
     panel will derive its scale.

          $panel = Ace::Graphics::Panel->new(-segment => $sequence,
          				     -width   => 800);

     new() will return undef in case of an error. If the specified glyph
     name is not a valid one, new() will throw an exception.

OBJECT METHODS
--------------

$track = $panel->add_track($glyph,$features,@options)
     The add_track() method adds a new track to the image.

     Tracks are horizontal bands which span the entire width of the panel.
     Each track contains a number of graphical elements called "glyphs",
     each corresponding to a sequence feature. There are different glyph
     types, but each track can only contain a single type of glyph.
     Options passed to the track control the color and size of the glyphs,
     whether they are allowed to overlap, and other formatting attributes.
     The height of a track is determined from its contents and cannot be
     directly influenced.

     The first two arguments are the glyph name and an array reference
     containing the list of features to display.  The order of the
     arguments is irrelevant, allowing either of these idioms:

          $panel->add_track(arrow => \@features);
          $panel->add_track(\@features => 'arrow');

     The glyph name indicates how each feature is to be rendered.  A
     variety of glyphs are available, and the number is growing.
     Currently, the following glyphs are available:

          Name        Description
          ----        -----------

          box	      A filled rectangle, nondirectional.

          arrow	      An arrow; can be unidirectional or bidirectional.
          	      It is also capable of displaying a scale with
          	      major and minor tickmarks, and can be oriented
          	      horizontally or vertically.

          segments    A set of filled rectangles connected by solid lines.
          	      Used for interrupted features, such as gapped
          	      alignments.

          transcript  Similar to segments, but the connecting line is
          	      a "hat" shape, and the direction of transcription
          	      is indicated by a small arrow.

          primers     Two inward pointing arrows connected by a line.
          	      Used for STSs.

          toomany     A "cloud", to indicate too many features to show
          	      individually.  This is a placeholder that will be
          	      replaced by something more clever, such as a histogram
          	      or density plot.

          group	      A group of related features connected by a dashed line.
          	      This is used internally by the Track class and should
          	      not be called explicitly.

     If the glyph name is omitted from add_track(), the "box" glyph will be
     used by default.

     The @options array is a list of name/value pairs that control the
     attributes of the track.  The options are in turn passed to the
     glyphs.  Each glyph has its own specialized subset of options, but
     some are shared by all glyphs:

          Option      Description               Default
          ------      -----------               -------

          -fgcolor    Foreground color		black

          -outlinecolor				black
          	      Synonym for -fgcolor

          -bgcolor    Background color          white

          -fillcolor  Interior color of filled  turquoise
          	      images

          -linewidth  Width of lines drawn by	1
          		    glyph

          -height     Height of glyph		10

          -font       Glyph font		gdSmallFont

          -label      Whether to draw a label	false

          -bump	      Bump direction		0

          -connect_groups                       false
                      Connect groups by a
          	      dashed line (see below)

          -key        Show this track in the    undef
                      key

     Colors can be expressed in either of two ways: as symbolic names such
     as "cyan" and as HTML-style #RRGGBB triples.  The symbolic names are
     the 140 colors defined in the Netscape/Internet Explorer color cube,
     and can be retrieved using the Ace::Graphics::Panel->color_names()
     method.

     The background color is used for the background color of the track
     itself.  The foreground color controls the color of lines and strings.
     The interior color is used for filled objects such as boxes.

     The -label argument controls whether or not the ID of the feature
     should be printed next to the feature.  It is accepted by most, but
     not all of the glyphs.

     The -bump argument controls what happens when glyphs collide.  By
     default, they will simply overlap (value 0).  A -bump value of +1 will
     cause overlapping glyphs to bump downwards until there is room for
     them.  A -bump value of -1 will cause overlapping glyphs to bump
     upwards.

     The -key argument declares that the track is to be shown in a key
     appended to the bottom of the image.  The key contains a picture of a
     glyph and a label describing what the glyph means.  The label is
     specified in the argument to -key.

     add_track() returns an Ace::Graphics::Track object.  You can use this
     object to add additional features or to control the appearance of the
     track with greater detail, or just ignore it.  Tracks are added in
     order from the top of the image to the bottom.  To add tracks to the
     top of the image, use unshift_track().

     Typical usage is:

          $panel->add_track( thistle    => \@genes,
          		    -fillcolor =>  'green',
          		    -fgcolor   =>  'black',
          		    -bump      =>  +1,
          		    -height    => 10,
          		    -label     => 1);

$track = unshift_track($glyph,$features,@options)
     unshift_track() works like add_track(), except that the new track is
     added to the top of the image rather than the bottom.

     *Adding groups of features:* It is not uncommon to add a group of
     features which are logically connected, such as the 5' and 3' ends of
     EST reads.  To group features into sets that remain on the same
     horizontal position and bump together, pass the sets as an anonymous
     array.  To connect the groups by a dashed line, pass the
     -connect_groups argument with a true value.  For example:

          $panel->add_track(segments => [[$abc_5,$abc_3],
          				 [$xxx_5,$xxx_3],
          				 [$yyy_5,$yyy_3]],
          		    -connect_groups => 1);

$gd = $panel->gd
     The gd() method lays out the image and returns a GD::Image object
     containing it.  You may then call the GD::Image object's png() or
     jpeg() methods to get the image data.

$png = $panel->png
     The png() method returns the image as a PNG-format drawing, without
     the intermediate step of returning a GD::Image object.

$boxes = $panel->boxes
@boxes = $panel->boxes
     The boxes() method returns the coordinates of each glyph, useful for
     constructing an image map.  In a scalar context, boxes() returns an
     array ref.  In an list context, the method returns the array directly.

     Each member of the list is an anonymous array of the following format:

          [ $feature, $x1, $y1, $x2, $y2 ]

     The first element is the feature object; either an
     Ace::Sequence::Feature, a Das::Segment::Feature, or another Bioperl
     Bio::SeqFeatureI object.  The coordinates are the topleft and
     bottomright corners of the glyph, including any space allocated for
     labels.

ACCESSORS
---------

   The following accessor methods provide access to various attributes of
the panel object.  Called with no arguments, they each return the current
value of the attribute.  Called with a single argument, they set the
attribute and return its previous value.

   Note that in most cases you must change attributes prior to invoking
gd(), png() or boxes().  These three methods all invoke an internal
layout() method which places the tracks and the glyphs within them, and
then caches the result.

     Accessor Name      Description
     -------------      -----------

     width()	      Get/set width of panel
     spacing()	      Get/set spacing between tracks
     length()	      Get/set length of segment (bp)
     pad_top()	      Get/set top padding
     pad_left()	      Get/set left padding
     pad_bottom()	      Get/set bottom padding
     pad_right()	      Get/set right padding

INTERNAL METHODS
----------------

   The following methods are used internally, but may be useful for those
implementing new glyph types.

@names = Ace::Graphics::Panel->color_names
     Return the symbolic names of the colors recognized by the panel
     object.  In a scalar context, returns an array reference.

@rgb = $panel->rgb($index)
     Given a GD color index (between 0 and 140), returns the RGB triplet
     corresponding to this index.  This method is only useful within a
     glyph's draw() routine, after the panel has allocated a GD::Image and
     is populating it.

$index = $panel->translate($color)
     Given a color, returns the GD::Image index.  The color may be
     symbolic, such as "turquoise", or a #RRGGBB triple, as in #F0E0A8.
     This method is only useful within a glyph's draw() routine, after the
     panel has allocated a GD::Image and is populating it.

$panel->set_pen($width,$color)
     Changes the width and color of the GD drawing pen to the values
     indicated.  This is called automatically by the GlyphFactory fgcolor()
     method.

BUGS
====

   Please report them.

SEE ALSO
========

   *Note Ace/Sequence: Ace/Sequence,,*Note Ace/Sequence/Feature:
Ace/Sequence/Feature,, *Note Ace/Graphics/Track: Ace/Graphics/Track,,*Note
Ace/Graphics/Glyph: Ace/Graphics/Glyph,, *Note GD: GD,

AUTHOR
======

   Lincoln Stein <lstein@cshl.org>.

   Copyright (c) 2001 Cold Spring Harbor Laboratory

   This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.  See DISCLAIMER.txt for disclaimers
of warranty.


File: pm.info,  Node: Ace/Graphics/Track,  Next: Ace/Iterator,  Prev: Ace/Graphics/Panel,  Up: Module List

PNG graphics of Ace::Sequence::Feature objects
**********************************************

NAME
====

   Ace::Graphics::Track - PNG graphics of Ace::Sequence::Feature objects

SYNOPSIS
========

     use Ace::Sequence;
     use Ace::Graphics::Panel;

     my $db     = Ace->connect(-host=>'brie2.cshl.org',-port=>2005) or die;
     my $cosmid = Ace::Sequence->new(-seq=>'Y16B4A',
     				  -db=>$db,-start=>-15000,-end=>15000) or die;

     my @transcripts = $cosmid->transcripts;

     my $panel = Ace::Graphics::Panel->new(
     				      -segment => $cosmid,
     				      -width  => 800
     				     );

     my $track = $panel->add_track('transcript'
      		                -fillcolor =>  'wheat',
     				-fgcolor   =>  'black',
     				-bump      =>  +1,
     				-height    =>  10,
     				-label     =>  1);
     foreach (@transcripts) {
        $track->add_feature($_);
     }

     my $boxes = $panel->boxes;
     print $panel->png;

DESCRIPTION
===========

   The Ace::Graphics::Track class is used by Ace::Graphics::Panel to lay
out a set of sequence features using a uniform glyph type. You will
ordinarily work with panels rather than directly with tracks.

METHODS
=======

   This section describes the class and object methods for
Ace::Graphics::Panel.

CONSTRUCTORS
------------

   There is only one constructor, the new() method.  It is ordinarily
called by Ace::Graphics::Panel, and not in end-developer code.

$track = Ace::Graphics::Track->new($glyph_name,$features,@options)
     The new() method creates a new track object from the provided glyph
     name and list of features.  The arguments are similar to those in
     Ace::Graphics::Panel->new().

     If successful new() will return a new Ace::Graphics::Track.
     Otherwise, it will return undef.

     If the specified glyph name is not a valid one, new() will throw an
     exception.

OBJECT METHODS
--------------

   Once a track is created, the following methods can be invoked.

$track->add_feature($feature)
     This adds a new feature to the track.  The feature can either be a
     single object that implements the Bio::SeqFeatureI interface (such as
     an Ace::Sequence::Feature or Das::Segment::Feature), or can be an
     anonymous array containing a set of related features.  In the latter
     case, the track will attempt to keep the features in the same
     horizontal band and will not allow any other features to overlap.

$track->add_group($group)
     This behaves the same as add_feature(), but requires that its argument
     be an array reference containing a list of grouped features.

$track->draw($gd,$left,$top)
     Render the track on a previously-created GD::Image object.  The $left
     and $top arguments indicate the position at which to start rendering.

$boxes = $track->boxes($left,$top)
@boxes = $track->boxes($left,$top)
     Return an array of array references indicating glyph coordinates for
     each of the render features.  $left and $top indicate the offset for
     the track on the image plane.  In a scalar context, this method
     returns an array reference of glyph coordinates.  In a list context,
     it returns the list itself.

     See Ace::Graphics::Panel->boxes() for the format of the result.

ACCESSORS
---------

   The following accessor methods provide access to various attributes of
the track object.  Called with no arguments, they each return the current
value of the attribute.  Called with a single argument, they set the
attribute and return its previous value.

   Note that in most cases you must change attributes before the track's
layout() method is called.

     Accessor Name      Description
     -------------      -----------

     scale()	      Get/set the track scale, measured in pixels/bp
     lineheight()	      Get/set the height of each glyph, pixels
     width()	      Get/set the width of the track
     bump()	      Get/set the bump direction

INTERNAL METHODS
----------------

   The following methods are used internally, but may be useful for those
implementing new glyph types.

$glyphs = $track->layout
     Layout the features, and return an anonymous array of
     Ace::Graphics::Glyph objects that have been created and correctly
     positioned.

     Because layout is an expensive operation, calling this method several
     times will return the previously-cached result, ignoring any changes
     to track attributes.

$height = $track->height
     Invokes layout() and returns the height of the track.

$glyphs = $track->glyphs
     Returns the glyph cache.  Returns undef before layout() and a
     reference to an array of glyphs after layout().

$factory = $track->make_factory(@options)
     Given a set of options (argument/value pairs), returns a
     Ace::Graphics::GlyphFactory for use in creating the glyphs with the
     desired settings.

BUGS
====

   Please report them.

SEE ALSO
========

   *Note Ace/Sequence: Ace/Sequence,,*Note Ace/Sequence/Feature:
Ace/Sequence/Feature,,*Note Ace/Graphics/Panel: Ace/Graphics/Panel,, *Note
Ace/Graphics/GlyphFactory: Ace/Graphics/GlyphFactory,,*Note
Ace/Graphics/Glyph: Ace/Graphics/Glyph,

AUTHOR
======

   Lincoln Stein <lstein@cshl.org>.

   Copyright (c) 2001 Cold Spring Harbor Laboratory

   This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.  See DISCLAIMER.txt for disclaimers
of warranty.


File: pm.info,  Node: Ace/Iterator,  Next: Ace/Local,  Prev: Ace/Graphics/Track,  Up: Module List

Iterate Across an ACEDB Query
*****************************

NAME
====

   Ace::Iterator - Iterate Across an ACEDB Query

SYNOPSIS
========

     use Ace;
     $db = Ace->connect(-host => 'beta.crbm.cnrs-mop.fr',
                        -port => 20000100);

     $i  = $db->fetch_many(Sequence=>'*');  # fetch a cursor
     while ($obj = $i->next) {
        print $obj->asTable;
     }

DESCRIPTION
===========

   The Ace::Iterator class implements a persistent query on an Ace
database.  You can create multiple simultaneous queries and retrieve
objects from each one independently of the others.  This is useful when a
query is expected to return more objects than can easily fit into memory.
The iterator is essentially a database "cursor."

new() Method
------------

     $iterator = Ace::Iterator->new(-db        => $db,
                                    -query     => $query,
                                    -filled    => $filled,
                                    -chunksize => $chunksize);

   An Ace::Iterator is returned by the Ace accessor's object's
fetch_many() method. You usually will not have cause to call the new()
method directly.  If you do so, the parameters are as follows:

-db
     The Ace database accessor object to use.

-query
     A query, written in Ace query language, to pass to the database.  This
     query should return a list of objects.

-filled
     If true, then retrieve complete objects from the database, rather than
     empty object stubs.  Retrieving filled objects uses more memory and
     network bandwidth than retrieving unfilled objects, but it's
     recommended if you know in advance that you will be accessing most or
     all of the objects' fields, for example, for the purposes of
     displaying the objects.

-chunksize
     The iterator will fetch objects from the database in chunks controlled
     by this argument.  The default is 40.  You may want to tune the
     chunksize to optimize the retrieval for your application.

next() method
-------------

     $object = $iterator->next;

   This method retrieves the next object from the query, performing
whatever database accesses it needs.  After the last object has been
fetched, the next() will return undef.  Usually you will call next()
inside a loop like this:

     while (my $object = $iterator->next) {
        # do something with $object
     }

   Because of the way that object caching works, next() will be most
efficient if you are only looping over one iterator at a time.  Although
parallel access will work correctly, it will be less efficient than serial
access.  If possible, avoid this type of code:

     my $iterator1 = $db->fetch_many(-query=>$query1);
     my $iterator2 = $db->fetch_many(-query=>$query2);
     do {
        my $object1 = $iterator1->next;
        my $object2 = $iterator2->next;
     } while $object1 && $object2;

SEE ALSO
========

   *Note Ace: Ace,, *Note Ace/Model: Ace/Model,, *Note Ace/Object:
Ace/Object,

AUTHOR
======

   Lincoln Stein <lstein@cshl.org> with extensive help from Jean
Thierry-Mieg <mieg@kaa.crbm.cnrs-mop.fr>

   Copyright (c) 1997-1998 Cold Spring Harbor Laboratory

   This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.  See DISCLAIMER.txt for disclaimers
of warranty.


