This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: ExtUtils/MM_VMS,  Next: ExtUtils/MM_Win32,  Prev: ExtUtils/MM_Unix,  Up: Module List

methods to override UN*X behaviour in ExtUtils::MakeMaker
*********************************************************

NAME
====

   ExtUtils::MM_VMS - methods to override UN*X behaviour in
ExtUtils::MakeMaker

SYNOPSIS
========

     use ExtUtils::MM_VMS; # Done internally by ExtUtils::MakeMaker if needed

DESCRIPTION
===========

   See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not the
semantics.

Methods always loaded
---------------------

wraplist
     Converts a list into a string wrapped at approximately 80 columns.

rootdir (override)
     Returns a string representing of the root directory.

SelfLoaded methods
------------------

   Those methods which override default MM_Unix methods are marked
"(override)", while methods unique to MM_VMS are marked "(specific)".  For
overridden methods, documentation is limited to an explanation of why this
method overrides the MM_Unix method; see the ExtUtils::MM_Unix
documentation for more details.

guess_name (override)
     Try to determine name of extension being built.  We begin with the
     name of the current directory.  Since VMS filenames are
     case-insensitive, however, we look for a `.pm' file whose name
     matches that of the current directory (presumably the 'main' `.pm'
     file for this extension), and try to find a package statement from
     which to obtain the Mixed::Case package name.

find_perl (override)
     Use VMS file specification syntax and CLI commands to find and invoke
     Perl images.

path (override)
     Translate logical name DCL$PATH as a searchlist, rather than trying
     to split string value of `$ENV{'PATH'}'.

maybe_command (override)
     Follows VMS naming conventions for executable files.  If the name
     passed in doesn't exactly match an executable file, appends `.Exe'
     (or equivalent) to check for executable image, and `.Com' to check
     for DCL procedure.  If this fails, checks directories in DCL$PATH and
     finally `Sys$System:' for an executable file having the name
     specified, with or without the `.Exe'-equivalent suffix.

maybe_command_in_dirs (override)
     Uses DCL argument quoting on test command line.

perl_script (override)
     If name passed in doesn't specify a readable file, appends `.com' or
     `.pl' and tries again, since it's customary to have file types on all
     files under VMS.

file_name_is_absolute (override)
     Checks for VMS directory spec as well as Unix separators.

replace_manpage_separator
     Use as separator a character which is legal in a VMS-syntax file name.

init_others (override)
     Provide VMS-specific forms of various utility commands, then hand off
     to the default MM_Unix method.

constants (override)
     Fixes up numerous file and directory macros to insure VMS syntax
     regardless of input syntax.  Also adds a few VMS-specific macros and
     makes lists of files comma-separated.

cflags (override)
     Bypass shell script and produce qualifiers for CC directly (but warn
     user if a shell script for this extension exists).  Fold multiple
     /Defines into one, since some C compilers pay attention to only one
     instance of this qualifier on the command line.

const_cccmd (override)
     Adds directives to point C preprocessor to the right place when
     handling #include <sys/foo.h> directives.  Also constructs CC command
     line a bit differently than MM_Unix method.

pm_to_blib (override)
     DCL *still* accepts a maximum of 255 characters on a command line, so
     we write the (potentially) long list of file names to a temp file,
     then persuade Perl to read it instead of the command line to find
     args.

tool_autosplit (override)
     Use VMS-style quoting on command line.

tool_sxubpp (override)
     Use VMS-style quoting on xsubpp command line.

xsubpp_version (override)
     Test xsubpp exit status according to VMS rules ($sts & 1 ==> good)
     rather than Unix rules ($sts == 0 ==> good).

tools_other (override)
     Adds a few MM[SK] macros, and shortens some the installatin commands,
     in order to stay under DCL's 255-character limit.  Also changes
     EQUALIZE_TIMESTAMP to set revision date of target file to one second
     later than source file, since MMK interprets precisely equal revision
     dates for a source and target file as a sign that the target needs to
     be updated.

dist (override)
     Provide VMSish defaults for some values, then hand off to default
     MM_Unix method.

c_o (override)
     Use VMS syntax on command line.  In particular, $(DEFINE) and
     $(PERL_INC) have been pulled into $(CCCMD).  Also use MM[SK] macros.

xs_c (override)
     Use MM[SK] macros.

xs_o (override)
     Use MM[SK] macros, and VMS command line for C compiler.

top_targets (override)
     Use VMS quoting on command line for Version_check.

dlsyms (override)
     Create VMS linker options files specifying universal symbols for this
     extension's shareable image, and listing other shareable images or
     libraries to which it should be linked.

dynamic_lib (override)
     Use VMS Link command.

dynamic_bs (override)
     Use VMS-style quoting on Mkbootstrap command line.

static_lib (override)
     Use VMS commands to manipulate object library.

manifypods (override)
     Use VMS-style quoting on command line, and VMS logical name to
     specify fallback location at build time if we can't find pod2man.

processPL (override)
     Use VMS-style quoting on command line.

installbin (override)
     Stay under DCL's 255 character command line limit once again by
     splitting potentially long list of files across multiple lines in
     realclean target.

subdir_x (override)
     Use VMS commands to change default directory.

clean (override)
     Split potentially long list of files across multiple commands (in
     order to stay under the magic command line limit).  Also use MM[SK]
     commands for handling subdirectories.

realclean (override)
     Guess what we're working around?  Also, use MM[SK] for subdirectories.

dist_basics (override)
     Use VMS-style quoting on command line.

dist_core (override)
     Syntax for invoking `VMS_Share' differs from that for Unix `shar', so
     `shdist' target actions are VMS-specific.

dist_dir (override)
     Use VMS-style quoting on command line.

dist_test (override)
     Use VMS commands to change default directory, and use VMS-style
     quoting on command line.

install (override)
     Work around DCL's 255 character limit several times,and use VMS-style
     command line quoting in a few cases.

perldepend (override)
     Use VMS-style syntax for files; it's cheaper to just do it directly
     here than to have the MM_Unix method call catfile repeatedly.  Also,
     if we have to rebuild Config.pm, use MM[SK] to do it.

makefile (override)
     Use VMS commands and quoting.

test (override)
     Use VMS commands for handling subdirectories.

test_via_harness (override)
     Use VMS-style quoting on command line.

test_via_script (override)
     Use VMS-style quoting on command line.

makeaperl (override)
     Undertake to build a new set of Perl images using VMS commands.  Since
     VMS does dynamic loading, it's not necessary to statically link each
     extension into the Perl image, so this isn't the normal build path.
     Consequently, it hasn't really been tested, and may well be
     incomplete.

nicetext (override)
     Insure that colons marking targets are preceded by space, in order to
     distinguish the target delimiter from a colon appearing as part of a
     filespec.


File: pm.info,  Node: ExtUtils/MM_Win32,  Next: ExtUtils/MakeMaker,  Prev: ExtUtils/MM_VMS,  Up: Module List

methods to override UN*X behaviour in ExtUtils::MakeMaker
*********************************************************

NAME
====

   ExtUtils::MM_Win32 - methods to override UN*X behaviour in
ExtUtils::MakeMaker

SYNOPSIS
========

     use ExtUtils::MM_Win32; # Done internally by ExtUtils::MakeMaker if needed

DESCRIPTION
===========

   See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not the
semantics.

catfile
     Concatenate one or more directory names and a filename to form a
     complete path ending with a filename

constants (o)
     Initializes lots of constants and .SUFFIXES and .PHONY

static_lib (o)
     Defines how to produce the *.a (or equivalent) files.

dynamic_bs (o)
     Defines targets for bootstrap files.

dynamic_lib (o)
     Defines how to produce the *.so (or equivalent) files.

canonpath
     No physical check on the filesystem, but a logical cleanup of a path.
     On UNIX eliminated successive slashes and successive "/.".

perl_script
     Takes one argument, a file name, and returns the file name, if the
     argument is likely to be a perl script. On MM_Unix this is true for
     any ordinary, readable file.

pm_to_blib
     Defines target that copies all files in the hash PM to their
     destination and autosplits them. See `DESCRIPTION', *Note
     ExtUtils/Install: ExtUtils/Install,

test_via_harness (o)
     Helper method to write the test targets

tool_autosplit (override)
     Use Win32 quoting on command line.

tools_other (o)
     Win32 overrides.

     Defines SHELL, LD, TOUCH, CP, MV, RM_F, RM_RF, CHMOD, UMASK_NULL in
     the Makefile. Also defines the perl programs MKPATH,
     WARN_IF_OLD_PACKLIST, MOD_INSTALL. DOC_INSTALL, and UNINSTALL.

xs_o (o)
     Defines suffix rules to go from XS to object files directly. This is
     only intended for broken make implementations.

top_targets (o)
     Defines the targets all, subdirs, config, and O_FILES

htmlifypods (o)
     Defines targets and routines to translate the pods into HTML manpages
     and put them into the INST_HTMLLIBDIR and INST_HTMLSCRIPTDIR
     directories.

     Same as MM_Unix version (changes command-line quoting).

manifypods (o)
     We don't want manpage process.

dist_ci (o)
     Same as MM_Unix version (changes command-line quoting).

dist_core (o)
     Same as MM_Unix version (changes command-line quoting).

pasthru (o)
     Defines the string that is passed to recursive make calls in
     subdirectories.


File: pm.info,  Node: ExtUtils/MakeMaker,  Next: ExtUtils/Manifest,  Prev: ExtUtils/MM_Win32,  Up: Module List

create an extension Makefile
****************************

NAME
====

   ExtUtils::MakeMaker - create an extension Makefile

SYNOPSIS
========

   `use ExtUtils::MakeMaker;'

   `WriteMakefile( ATTRIBUTE => VALUE [, ...] );'

   which is really

   `MM->new(\%att)->flush;'

DESCRIPTION
===========

   This utility is designed to write a Makefile for an extension module
from a Makefile.PL. It is based on the Makefile.SH model provided by Andy
Dougherty and the perl5-porters.

   It splits the task of generating the Makefile into several subroutines
that can be individually overridden.  Each subroutine returns the text it
wishes to have written to the Makefile.

   MakeMaker is object oriented. Each directory below the current
directory that contains a Makefile.PL. Is treated as a separate object.
This makes it possible to write an unlimited number of Makefiles with a
single invocation of WriteMakefile().

How To Write A Makefile.PL
--------------------------

   The short answer is: Don't.

     Always begin with h2xs.
     Always begin with h2xs!
     ALWAYS BEGIN WITH H2XS!

   even if you're not building around a header file, and even if you don't
have an XS component.

   Run h2xs(1) before you start thinking about writing a module. For so
called pm-only modules that consist of `*.pm' files only, h2xs has the -X
switch. This will generate dummy files of all kinds that are useful for
the module developer.

   The medium answer is:

     use ExtUtils::MakeMaker;
     WriteMakefile( NAME => "Foo::Bar" );

   The long answer is the rest of the manpage :-)

Default Makefile Behaviour
--------------------------

   The generated Makefile enables the user of the extension to invoke

     perl Makefile.PL # optionally "perl Makefile.PL verbose"
     make
     make test        # optionally set TEST_VERBOSE=1
     make install     # See below

   The Makefile to be produced may be altered by adding arguments of the
form `KEY=VALUE'. E.g.

     perl Makefile.PL PREFIX=/tmp/myperl5

   Other interesting targets in the generated Makefile are

     make config     # to check if the Makefile is up-to-date
     make clean      # delete local temp files (Makefile gets renamed)
     make realclean  # delete derived files (including ./blib)
     make ci         # check in all the files in the MANIFEST file
     make dist       # see below the Distribution Support section

make test
---------

   MakeMaker checks for the existence of a file named test.pl in the
current directory and if it exists it adds commands to the test target of
the generated Makefile that will execute the script with the proper set of
perl -I options.

   MakeMaker also checks for any files matching glob("t/*.t"). It will add
commands to the test target of the generated Makefile that execute all
matching files via the *Note Test/Harness: Test/Harness, module with the -I
switches set correctly.

make testdb
-----------

   A useful variation of the above is the target `testdb'. It runs the
test under the Perl debugger (see *Note Perldebug: (perl.info)perldebug,).
If the file test.pl exists in the current directory, it is used for the
test.

   If you want to debug some other testfile, set `TEST_FILE' variable
thusly:

     make testdb TEST_FILE=t/mytest.t

   By default the debugger is called using -d option to perl. If you want
to specify some other option, set `TESTDB_SW' variable:

     make testdb TESTDB_SW=-Dx

make install
------------

   make alone puts all relevant files into directories that are named by
the macros INST_LIB, INST_ARCHLIB, INST_SCRIPT, INST_HTMLLIBDIR,
INST_HTMLSCRIPTDIR, INST_MAN1DIR, and INST_MAN3DIR.  All these default to
something below ./blib if you are not building below the perl source
directory. If you *are* building below the perl source, INST_LIB and
INST_ARCHLIB default to ../../lib, and INST_SCRIPT is not defined.

   The install target of the generated Makefile copies the files found
below each of the INST_* directories to their INSTALL* counterparts. Which
counterparts are chosen depends on the setting of INSTALLDIRS according to
the following table:

     INSTALLDIRS set to
            	       	              perl   	          site

     INST_ARCHLIB	INSTALLARCHLIB        INSTALLSITEARCH
     INST_LIB		INSTALLPRIVLIB        INSTALLSITELIB
     INST_HTMLLIBDIR	INSTALLHTMLPRIVLIBDIR INSTALLHTMLSITELIBDIR
     INST_HTMLSCRIPTDIR            INSTALLHTMLSCRIPTDIR
     INST_BIN			  INSTALLBIN
     INST_SCRIPT                   INSTALLSCRIPT
     INST_MAN1DIR                  INSTALLMAN1DIR
     INST_MAN3DIR                  INSTALLMAN3DIR

   The INSTALL... macros in turn default to their %Config
($Config{installprivlib}, $Config{installarchlib}, etc.) counterparts.

   You can check the values of these variables on your system with

     perl '-V:install.*'

   And to check the sequence in which the library directories are searched
by perl, run

     perl -le 'print join $/, @INC'

PREFIX and LIB attribute
------------------------

   PREFIX and LIB can be used to set several INSTALL* attributes in one
go. The quickest way to install a module in a non-standard place might be

     perl Makefile.PL LIB=~/lib

   This will install the module's architecture-independent files into
~/lib, the architecture-dependent files into ~/lib/$archname/auto.

   Another way to specify many INSTALL directories with a single parameter
is PREFIX.

     perl Makefile.PL PREFIX=~

   This will replace the string specified by $Config{prefix} in all
$Config{install*} values.

   Note, that in both cases the tilde expansion is done by MakeMaker, not
by perl by default, nor by make. Conflicts between parameters LIB, PREFIX
and the various INSTALL* arguments are resolved so that XXX

   If the user has superuser privileges, and is not working on AFS (Andrew
File System) or relatives, then the defaults for INSTALLPRIVLIB,
INSTALLARCHLIB, INSTALLSCRIPT, etc. will be appropriate, and this
incantation will be the best:

     perl Makefile.PL; make; make test
     make install

   make install per default writes some documentation of what has been
done into the file `$(INSTALLARCHLIB)/perllocal.pod'. This feature can be
bypassed by calling make pure_install.

AFS users
---------

   will have to specify the installation directories as these most
probably have changed since perl itself has been installed. They will have
to do this by calling

     perl Makefile.PL INSTALLSITELIB=/afs/here/today \
     	INSTALLSCRIPT=/afs/there/now INSTALLMAN3DIR=/afs/for/manpages
     make

   Be careful to repeat this procedure every time you recompile an
extension, unless you are sure the AFS installation directories are still
valid.

Static Linking of a new Perl Binary
-----------------------------------

   An extension that is built with the above steps is ready to use on
systems supporting dynamic loading. On systems that do not support dynamic
loading, any newly created extension has to be linked together with the
available resources. MakeMaker supports the linking process by creating
appropriate targets in the Makefile whenever an extension is built. You
can invoke the corresponding section of the makefile with

     make perl

   That produces a new perl binary in the current directory with all
extensions linked in that can be found in INST_ARCHLIB , SITELIBEXP, and
PERL_ARCHLIB. To do that, MakeMaker writes a new Makefile, on UNIX, this
is called Makefile.aperl (may be system dependent). If you want to force
the creation of a new perl, it is recommended, that you delete this
Makefile.aperl, so the directories are searched-through for linkable
libraries again.

   The binary can be installed into the directory where perl normally
resides on your machine with

     make inst_perl

   To produce a perl binary with a different name than `perl', either say

     perl Makefile.PL MAP_TARGET=myperl
     make myperl
     make inst_perl

   or say

     perl Makefile.PL
     make myperl MAP_TARGET=myperl
     make inst_perl MAP_TARGET=myperl

   In any case you will be prompted with the correct invocation of the
`inst_perl' target that installs the new binary into INSTALLBIN.

   make inst_perl per default writes some documentation of what has been
done into the file `$(INSTALLARCHLIB)/perllocal.pod'. This can be bypassed
by calling make pure_inst_perl.

   Warning: the inst_perl: target will most probably overwrite your
existing perl binary. Use with care!

   Sometimes you might want to build a statically linked perl although
your system supports dynamic loading. In this case you may explicitly set
the linktype with the invocation of the Makefile.PL or make:

     perl Makefile.PL LINKTYPE=static    # recommended

   or

     make LINKTYPE=static                # works on most systems

Determination of Perl Library and Installation Locations
--------------------------------------------------------

   MakeMaker needs to know, or to guess, where certain things are located.
Especially INST_LIB and INST_ARCHLIB (where to put the files during the
make(1) run), PERL_LIB and PERL_ARCHLIB (where to read existing modules
from), and PERL_INC (header files and `libperl*.*').

   Extensions may be built either using the contents of the perl source
directory tree or from the installed perl library. The recommended way is
to build extensions after you have run 'make install' on perl itself. You
can do that in any directory on your hard disk that is not below the perl
source tree. The support for extensions below the ext directory of the
perl distribution is only good for the standard extensions that come with
perl.

   If an extension is being built below the `ext/' directory of the perl
source then MakeMaker will set PERL_SRC automatically (e.g., `../..').  If
PERL_SRC is defined and the extension is recognized as a standard
extension, then other variables default to the following:

     PERL_INC     = PERL_SRC
     PERL_LIB     = PERL_SRC/lib
     PERL_ARCHLIB = PERL_SRC/lib
     INST_LIB     = PERL_LIB
     INST_ARCHLIB = PERL_ARCHLIB

   If an extension is being built away from the perl source then MakeMaker
will leave PERL_SRC undefined and default to using the installed copy of
the perl library. The other variables default to the following:

     PERL_INC     = $archlibexp/CORE
     PERL_LIB     = $privlibexp
     PERL_ARCHLIB = $archlibexp
     INST_LIB     = ./blib/lib
     INST_ARCHLIB = ./blib/arch

   If perl has not yet been installed then PERL_SRC can be defined on the
command line as shown in the previous section.

Which architecture dependent directory?
---------------------------------------

   If you don't want to keep the defaults for the INSTALL* macros,
MakeMaker helps you to minimize the typing needed: the usual relationship
between INSTALLPRIVLIB and INSTALLARCHLIB is determined by Configure at
perl compilation time. MakeMaker supports the user who sets
INSTALLPRIVLIB. If INSTALLPRIVLIB is set, but INSTALLARCHLIB not, then
MakeMaker defaults the latter to be the same subdirectory of
INSTALLPRIVLIB as Configure decided for the counterparts in %Config ,
otherwise it defaults to INSTALLPRIVLIB. The same relationship holds for
INSTALLSITELIB and INSTALLSITEARCH.

   MakeMaker gives you much more freedom than needed to configure internal
variables and get different results. It is worth to mention, that make(1)
also lets you configure most of the variables that are used in the
Makefile. But in the majority of situations this will not be necessary,
and should only be done if the author of a package recommends it (or you
know what you're doing).

Using Attributes and Parameters
-------------------------------

   The following attributes can be specified as arguments to
WriteMakefile() or as NAME=VALUE pairs on the command line:

AUTHOR
     String containing name (and email address) of package author(s). Is
     used in PPD (Perl Package Description) files for PPM (Perl Package
     Manager).

ABSTRACT
     One line description of the module. Will be included in PPD file.

ABSTRACT_FROM
     Name of the file that contains the package description. MakeMaker
     looks for a line in the POD matching /^($package\s-\s)(.*)/. This is
     typically the first line in the "=head1 NAME" section. $2 becomes the
     abstract.

BINARY_LOCATION
     Used when creating PPD files for binary packages.  It can be set to a
     full or relative path or URL to the binary archive for a particular
     architecture.  For example:

          perl Makefile.PL BINARY_LOCATION=x86/Agent.tar.gz

     builds a PPD package that references a binary of the `Agent' package,
     located in the `x86' directory relative to the PPD itself.

C
     Ref to array of *.c file names. Initialised from a directory scan and
     the values portion of the XS attribute hash. This is not currently
     used by MakeMaker but may be handy in Makefile.PLs.

CAPI
     [This attribute is obsolete in Perl 5.6.  PERL_OBJECT builds are
     C-compatible by default.]

     Switch to force usage of the Perl C API even when compiling for
     PERL_OBJECT.

     Note that this attribute is passed through to any recursive build,
     but if and only if the submodule's Makefile.PL itself makes no mention
     of the 'CAPI' attribute.

CCFLAGS
     String that will be included in the compiler call command line between
     the arguments INC and OPTIMIZE.

CONFIG
     Arrayref. E.g. [qw(archname manext)] defines ARCHNAME & MANEXT from
     config.sh. MakeMaker will add to CONFIG the following values anyway:
     ar cc cccdlflags ccdlflags dlext dlsrc ld lddlflags ldflags libc
     lib_ext obj_ext ranlib sitelibexp sitearchexp so

CONFIGURE
     CODE reference. The subroutine should return a hash reference. The
     hash may contain further attributes, e.g. {LIBS => ...}, that have to
     be determined by some evaluation method.

DEFINE
     Something like `"-DHAVE_UNISTD_H"'

DIR
     Ref to array of subdirectories containing Makefile.PLs e.g. [ 'sdbm'
     ] in ext/SDBM_File

DISTNAME
     Your name for distributing the package (by tar file). This defaults to
     NAME above.

DL_FUNCS
     Hashref of symbol names for routines to be made available as universal
     symbols.  Each key/value pair consists of the package name and an
     array of routine names in that package.  Used only under AIX, OS/2,
     VMS and Win32 at present.  The routine names supplied will be expanded
     in the same way as XSUB names are expanded by the XS() macro.
     Defaults to

          {"$(NAME)" => ["boot_$(NAME)" ] }

     e.g.

          {"RPC" => [qw( boot_rpcb rpcb_gettime getnetconfigent )],
           "NetconfigPtr" => [ 'DESTROY'] }

     Please see the *Note ExtUtils/Mksymlists: ExtUtils/Mksymlists,
     documentation for more information about the DL_FUNCS, DL_VARS and
     FUNCLIST attributes.

DL_VARS
     Array of symbol names for variables to be made available as universal
     symbols.  Used only under AIX, OS/2, VMS and Win32 at present.
     Defaults to [].  (e.g. [ qw(Foo_version Foo_numstreams Foo_tree ) ])

EXCLUDE_EXT
     Array of extension names to exclude when doing a static build.  This
     is ignored if INCLUDE_EXT is present.  Consult INCLUDE_EXT for more
     details.  (e.g.  [ qw( Socket POSIX ) ] )

     This attribute may be most useful when specified as a string on the
     command line:  perl Makefile.PL EXCLUDE_EXT='Socket Safe'

EXE_FILES
     Ref to array of executable files. The files will be copied to the
     INST_SCRIPT directory. Make realclean will delete them from there
     again.

FIRST_MAKEFILE
     The name of the Makefile to be produced. Defaults to the contents of
     MAKEFILE, but can be overridden. This is used for the second Makefile
     that will be produced for the MAP_TARGET.

FULLPERL
     Perl binary able to run this extension.

FUNCLIST
     This provides an alternate means to specify function names to be
     exported from the extension.  Its value is a reference to an array of
     function names to be exported by the extension.  These names are
     passed through unaltered to the linker options file.

H
     Ref to array of *.h file names. Similar to C.

HTMLLIBPODS
     Hashref of .pm and .pod files.  MakeMaker will default this to all
     .pod and any .pm files that include POD directives.  The files listed
     here will be converted to HTML format and installed as was requested
     at Configure time.

HTMLSCRIPTPODS
     Hashref of pod-containing files.  MakeMaker will default this to all
     EXE_FILES files that include POD directives.  The files listed here
     will be converted to HTML format and installed as was requested at
     Configure time.

IMPORTS
     This attribute is used to specify names to be imported into the
     extension. It is only used on OS/2 and Win32.

INC
     Include file dirs eg: `"-I/usr/5include -I/path/to/inc"'

INCLUDE_EXT
     Array of extension names to be included when doing a static build.
     MakeMaker will normally build with all of the installed extensions
     when doing a static build, and that is usually the desired behavior.
     If INCLUDE_EXT is present then MakeMaker will build only with those
     extensions which are explicitly mentioned. (e.g.  [ qw( Socket POSIX
     ) ])

     It is not necessary to mention DynaLoader or the current extension
     when filling in INCLUDE_EXT.  If the INCLUDE_EXT is mentioned but is
     empty then only DynaLoader and the current extension will be included
     in the build.

     This attribute may be most useful when specified as a string on the
     command line:  perl Makefile.PL INCLUDE_EXT='POSIX Socket Devel::Peek'

INSTALLARCHLIB
     Used by 'make install', which copies files from INST_ARCHLIB to this
     directory if INSTALLDIRS is set to perl.

INSTALLBIN
     Directory to install binary files (e.g. tkperl) into.

INSTALLDIRS
     Determines which of the two sets of installation directories to
     choose: installprivlib and installarchlib versus installsitelib and
     installsitearch. The first pair is chosen with INSTALLDIRS=perl, the
     second with INSTALLDIRS=site. Default is site.

INSTALLHTMLPRIVLIBDIR
     This directory gets the HTML pages at 'make install' time. Defaults to
     $Config{installhtmlprivlibdir}.

INSTALLHTMLSCRIPTDIR
     This directory gets the HTML pages at 'make install' time. Defaults to
     $Config{installhtmlscriptdir}.

INSTALLHTMLSITELIBDIR
     This directory gets the HTML pages at 'make install' time. Defaults to
     $Config{installhtmlsitelibdir}.

INSTALLMAN1DIR
     This directory gets the man pages at 'make install' time. Defaults to
     $Config{installman1dir}.

INSTALLMAN3DIR
     This directory gets the man pages at 'make install' time. Defaults to
     $Config{installman3dir}.

INSTALLPRIVLIB
     Used by 'make install', which copies files from INST_LIB to this
     directory if INSTALLDIRS is set to perl.

INSTALLSCRIPT
     Used by 'make install' which copies files from INST_SCRIPT to this
     directory.

INSTALLSITEARCH
     Used by 'make install', which copies files from INST_ARCHLIB to this
     directory if INSTALLDIRS is set to site (default).

INSTALLSITELIB
     Used by 'make install', which copies files from INST_LIB to this
     directory if INSTALLDIRS is set to site (default).

INST_ARCHLIB
     Same as INST_LIB for architecture dependent files.

INST_BIN
     Directory to put real binary files during 'make'. These will be copied
     to INSTALLBIN during 'make install'

INST_EXE
     Old name for INST_SCRIPT. Deprecated. Please use INST_SCRIPT if you
     need to use it.

INST_LIB
     Directory where we put library files of this extension while building
     it.

INST_HTMLLIBDIR
     Directory to hold the man pages in HTML format at 'make' time

INST_HTMLSCRIPTDIR
     Directory to hold the man pages in HTML format at 'make' time

INST_MAN1DIR
     Directory to hold the man pages at 'make' time

INST_MAN3DIR
     Directory to hold the man pages at 'make' time

INST_SCRIPT
     Directory, where executable files should be installed during 'make'.
     Defaults to "./blib/script", just to have a dummy location during
     testing. make install will copy the files in INST_SCRIPT to
     INSTALLSCRIPT.

PERL_MALLOC_OK
     defaults to 0.  Should be set to TRUE if the extension can work with
     the memory allocation routines substituted by the Perl malloc()
     subsystem.  This should be applicable to most extensions with
     exceptions of those

        * with bugs in memory allocations which are caught by Perl's
          malloc();

        * which interact with the memory allocator in other ways than via
          malloc(), realloc(), free(), calloc(), sbrk() and brk();

        * which rely on special alignment which is not provided by Perl's
          malloc().

     *NOTE.*  Negligence to set this flag in *any one* of loaded extension
     nullifies many advantages of Perl's malloc(), such as better usage of
     system resources, error detection, memory usage reporting, catchable
     failure of memory allocations, etc.

LDFROM
     defaults to "$(OBJECT)" and is used in the ld command to specify what
     files to link/load from (also see dynamic_lib below for how to
     specify ld flags)

LIB
     LIB can only be set at `perl Makefile.PL' time. It has the effect of
     setting both INSTALLPRIVLIB and INSTALLSITELIB to that value
     regardless any

LIBPERL_A
     The filename of the perllibrary that will be used together with this
     extension. Defaults to libperl.a.

LIBS
     An anonymous array of alternative library specifications to be
     searched for (in order) until at least one library is found. E.g.

          'LIBS' => ["-lgdbm", "-ldbm -lfoo", "-L/path -ldbm.nfs"]

     Mind, that any element of the array contains a complete set of
     arguments for the ld command. So do not specify

          'LIBS' => ["-ltcl", "-ltk", "-lX11"]

     See ODBM_File/Makefile.PL for an example, where an array is needed. If
     you specify a scalar as in

          'LIBS' => "-ltcl -ltk -lX11"

     MakeMaker will turn it into an array with one element.

LINKTYPE
     'static' or 'dynamic' (default unless usedl=undef in config.sh).
     Should only be used to force static linking (also see linkext below).

MAKEAPERL
     Boolean which tells MakeMaker, that it should include the rules to
     make a perl. This is handled automatically as a switch by MakeMaker.
     The user normally does not need it.

MAKEFILE
     The name of the Makefile to be produced.

MAN1PODS
     Hashref of pod-containing files. MakeMaker will default this to all
     EXE_FILES files that include POD directives. The files listed here
     will be converted to man pages and installed as was requested at
     Configure time.

MAN3PODS
     Hashref of .pm and .pod files. MakeMaker will default this to all
     .pod and any .pm files that include POD directives. The files listed
     here will be converted to man pages and installed as was requested at
     Configure time.

MAP_TARGET
     If it is intended, that a new perl binary be produced, this variable
     may hold a name for that binary. Defaults to perl

MYEXTLIB
     If the extension links to a library that it builds set this to the
     name of the library (see SDBM_File)

NAME
     Perl module name for this extension (DBD::Oracle). This will default
     to the directory name but should be explicitly defined in the
     Makefile.PL.

NEEDS_LINKING
     MakeMaker will figure out if an extension contains linkable code
     anywhere down the directory tree, and will set this variable
     accordingly, but you can speed it up a very little bit if you define
     this boolean variable yourself.

NOECHO
     Defaults to `@'. By setting it to an empty string you can generate a
     Makefile that echos all commands. Mainly used in debugging MakeMaker
     itself.

NORECURS
     Boolean.  Attribute to inhibit descending into subdirectories.

NO_VC
     In general, any generated Makefile checks for the current version of
     MakeMaker and the version the Makefile was built under. If NO_VC is
     set, the version check is neglected. Do not write this into your
     Makefile.PL, use it interactively instead.

OBJECT
     List of object files, defaults to '$(BASEEXT)$(OBJ_EXT)', but can be
     a long string containing all object files, e.g. "tkpBind.o
     tkpButton.o tkpCanvas.o"

OPTIMIZE
     Defaults to -O. Set it to -g to turn debugging on. The flag is passed
     to subdirectory makes.

PERL
     Perl binary for tasks that can be done by miniperl

PERLMAINCC
     The call to the program that is able to compile perlmain.c. Defaults
     to $(CC).

PERL_ARCHLIB
     Same as above for architecture dependent files.

PERL_LIB
     Directory containing the Perl library to use.

PERL_SRC
     Directory containing the Perl source code (use of this should be
     avoided, it may be undefined)

PERM_RW
     Desired permission for read/writable files. Defaults to `644'.  See
     also `MM_Unix' in this node.

PERM_RWX
     Desired permission for executable files. Defaults to `755'.  See also
     `MM_Unix' in this node.

PL_FILES
     Ref to hash of files to be processed as perl programs. MakeMaker will
     default to any found *.PL file (except Makefile.PL) being keys and
     the basename of the file being the value. E.g.

          {'foobar.PL' => 'foobar'}

     The *.PL files are expected to produce output to the target files
     themselves. If multiple files can be generated from the same *.PL
     file then the value in the hash can be a reference to an array of
     target file names. E.g.

          {'foobar.PL' => ['foobar1','foobar2']}

PM
     Hashref of .pm files and *.pl files to be installed.  e.g.

          {'name_of_file.pm' => '$(INST_LIBDIR)/install_as.pm'}

     By default this will include *.pm and *.pl and the files found in the
     PMLIBDIRS directories.  Defining PM in the Makefile.PL will override
     PMLIBDIRS.

PMLIBDIRS
     Ref to array of subdirectories containing library files.  Defaults to
     [ 'lib', $(BASEEXT) ]. The directories will be scanned and any files
     they contain will be installed in the corresponding location in the
     library.  A libscan() method can be used to alter the behaviour.
     Defining PM in the Makefile.PL will override PMLIBDIRS.

POLLUTE
     Release 5.005 grandfathered old global symbol names by providing
     preprocessor macros for extension source compatibility.  As of
     release 5.6, these preprocessor definitions are not available by
     default.  The POLLUTE flag specifies that the old names should still
     be defined:

          perl Makefile.PL POLLUTE=1

     Please inform the module author if this is necessary to successfully
     install a module under 5.6 or later.

PPM_INSTALL_EXEC
     Name of the executable used to run PPM_INSTALL_SCRIPT below. (e.g.
     perl)

PPM_INSTALL_SCRIPT
     Name of the script that gets executed by the Perl Package Manager
     after the installation of a package.

PREFIX
     Can be used to set the three INSTALL* attributes in one go (except for
     probably INSTALLMAN1DIR, if it is not below PREFIX according to
     %Config).  They will have PREFIX as a common directory node and will
     branch from that node into lib/, lib/ARCHNAME or whatever Configure
     decided at the build time of your perl (unless you override one of
     them, of course).

PREREQ_PM
     Hashref: Names of modules that need to be available to run this
     extension (e.g. Fcntl for SDBM_File) are the keys of the hash and the
     desired version is the value. If the required version number is 0, we
     only check if any version is installed already.

SKIP
     Arryref. E.g. [qw(name1 name2)] skip (do not write) sections of the
     Makefile. Caution! Do not use the SKIP attribute for the negligible
     speedup. It may seriously damage the resulting Makefile. Only use it
     if you really need it.

TYPEMAPS
     Ref to array of typemap file names.  Use this when the typemaps are
     in some directory other than the current directory or when they are
     not named *typemap*.  The last typemap in the list takes precedence.
     A typemap in the current directory has highest precedence, even if it
     isn't listed in TYPEMAPS.  The default system typemap has lowest
     precedence.

VERSION
     Your version number for distributing the package.  This defaults to
     0.1.

VERSION_FROM
     Instead of specifying the VERSION in the Makefile.PL you can let
     MakeMaker parse a file to determine the version number. The parsing
     routine requires that the file named by VERSION_FROM contains one
     single line to compute the version number. The first line in the file
     that contains the regular expression

          /([\$*])(([\w\:\']*)\bVERSION)\b.*\=/

     will be evaluated with eval() and the value of the named variable
     after the eval() will be assigned to the VERSION attribute of the
     MakeMaker object. The following lines will be parsed o.k.:

          $VERSION = '1.00';
          *VERSION = \'1.01';
          ( $VERSION ) = '$Revision: 1.222 $ ' =~ /\$Revision:\s+([^\s]+)/;
          $FOO::VERSION = '1.10';
          *FOO::VERSION = \'1.11';

     but these will fail:

          my $VERSION = '1.01';
          local $VERSION = '1.02';
          local $FOO::VERSION = '1.30';

     The file named in VERSION_FROM is not added as a dependency to
     Makefile. This is not really correct, but it would be a major pain
     during development to have to rewrite the Makefile for any smallish
     change in that file. If you want to make sure that the Makefile
     contains the correct VERSION macro after any change of the file, you
     would have to do something like

          depend => { Makefile => '$(VERSION_FROM)' }

     See attribute depend below.

XS
     Hashref of .xs files. MakeMaker will default this.  e.g.

          {'name_of_file.xs' => 'name_of_file.c'}

     The .c files will automatically be included in the list of files
     deleted by a make clean.

XSOPT
     String of options to pass to xsubpp.  This might include `-C++' or
     `-extern'.  Do not include typemaps here; the TYPEMAP parameter
     exists for that purpose.

XSPROTOARG
     May be set to an empty string, which is identical to `-prototypes', or
     `-noprototypes'. See the xsubpp documentation for details. MakeMaker
     defaults to the empty string.

XS_VERSION
     Your version number for the .xs file of this package.  This defaults
     to the value of the VERSION attribute.

Additional lowercase attributes
-------------------------------

   can be used to pass parameters to the methods which implement that part
of the Makefile.

clean
          {FILES => "*.xyz foo"}

depend
          {ANY_TARGET => ANY_DEPENDECY, ...}

dist
          {TARFLAGS => 'cvfF', COMPRESS => 'gzip', SUFFIX => '.gz',
          SHAR => 'shar -m', DIST_CP => 'ln', ZIP => '/bin/zip',
          ZIPFLAGS => '-rl', DIST_DEFAULT => 'private tardist' }

     If you specify COMPRESS, then SUFFIX should also be altered, as it is
     needed to tell make the target file of the compression. Setting
     DIST_CP to ln can be useful, if you need to preserve the timestamps on
     your files. DIST_CP can take the values 'cp', which copies the file,
     'ln', which links the file, and 'best' which copies symbolic links and
     links the rest. Default is 'best'.

dynamic_lib
          {ARMAYBE => 'ar', OTHERLDFLAGS => '...', INST_DYNAMIC_DEP => '...'}

linkext
          {LINKTYPE => 'static', 'dynamic' or ''}

     NB: Extensions that have nothing but *.pm files had to say

          {LINKTYPE => ''}

     with Pre-5.0 MakeMakers. Since version 5.00 of MakeMaker such a line
     can be deleted safely. MakeMaker recognizes when there's nothing to
     be linked.

macro
          {ANY_MACRO => ANY_VALUE, ...}

realclean
          {FILES => '$(INST_ARCHAUTODIR)/*.xyz'}

test
          {TESTS => 't/*.t'}

tool_autosplit
          {MAXLEN => 8}

Overriding MakeMaker Methods
----------------------------

   If you cannot achieve the desired Makefile behaviour by specifying
attributes you may define private subroutines in the Makefile.PL.  Each
subroutines returns the text it wishes to have written to the Makefile. To
override a section of the Makefile you can either say:

     sub MY::c_o { "new literal text" }

   or you can edit the default by saying something like:

     sub MY::c_o {
         package MY;	# so that "SUPER" works right
         my $inherited = shift->SUPER::c_o(@_);
         $inherited =~ s/old text/new text/;
         $inherited;
     }

   If you are running experiments with embedding perl as a library into
other applications, you might find MakeMaker is not sufficient. You'd
better have a look at ExtUtils::Embed which is a collection of utilities
for embedding.

   If you still need a different solution, try to develop another
subroutine that fits your needs and submit the diffs to
`perl5-porters@perl.org' or `comp.lang.perl.moderated' as appropriate.

   For a complete description of all MakeMaker methods see *Note
ExtUtils/MM_Unix: ExtUtils/MM_Unix,.

   Here is a simple example of how to add a new target to the generated
Makefile:

     sub MY::postamble {
     	'
     $(MYEXTLIB): sdbm/Makefile
     	    cd sdbm && $(MAKE) all
     ';
     }

Hintsfile support
-----------------

   MakeMaker.pm uses the architecture specific information from Config.pm.
In addition it evaluates architecture specific hints files in a `hints/'
directory. The hints files are expected to be named like their
counterparts in `PERL_SRC/hints', but with an `.pl' file name extension
(eg. `next_3_2.pl'). They are simply evaled by MakeMaker within the
WriteMakefile() subroutine, and can be used to execute commands as well as
to include special variables. The rules which hintsfile is chosen are the
same as in Configure.

   The hintsfile is eval()ed immediately after the arguments given to
WriteMakefile are stuffed into a hash reference $self but before this
reference becomes blessed. So if you want to do the equivalent to override
or create an attribute you would say something like

     $self->{LIBS} = ['-ldbm -lucb -lc'];

Distribution Support
--------------------

   For authors of extensions MakeMaker provides several Makefile targets.
Most of the support comes from the ExtUtils::Manifest module, where
additional documentation can be found.

make distcheck
     reports which files are below the build directory but not in the
     MANIFEST file and vice versa. (See ExtUtils::Manifest::fullcheck() for
     details)

make skipcheck
     reports which files are skipped due to the entries in the
     MANIFEST.SKIP file (See ExtUtils::Manifest::skipcheck() for details)

make distclean
     does a realclean first and then the distcheck. Note that this is not
     needed to build a new distribution as long as you are sure that the
     MANIFEST file is ok.

make manifest
     rewrites the MANIFEST file, adding all remaining files found (See
     ExtUtils::Manifest::mkmanifest() for details)

make distdir
     Copies all the files that are in the MANIFEST file to a newly created
     directory with the name `$(DISTNAME)-$(VERSION)'. If that directory
     exists, it will be removed first.

make disttest
     Makes a distdir first, and runs a `perl Makefile.PL', a make, and a
     make test in that directory.

make tardist
     First does a distdir. Then a command $(PREOP) which defaults to a null
     command, followed by $(TOUNIX), which defaults to a null command under
     UNIX, and will convert files in distribution directory to UNIX format
     otherwise. Next it runs `tar' on that directory into a tarfile and
     deletes the directory. Finishes with a command $(POSTOP) which
     defaults to a null command.

make dist
     Defaults to $(DIST_DEFAULT) which in turn defaults to tardist.

make uutardist
     Runs a tardist first and uuencodes the tarfile.

make shdist
     First does a distdir. Then a command $(PREOP) which defaults to a null
     command. Next it runs `shar' on that directory into a sharfile and
     deletes the intermediate directory again. Finishes with a command
     $(POSTOP) which defaults to a null command.  Note: For shdist to work
     properly a `shar' program that can handle directories is mandatory.

make zipdist
     First does a distdir. Then a command $(PREOP) which defaults to a null
     command. Runs `$(ZIP) $(ZIPFLAGS)' on that directory into a zipfile.
     Then deletes that directory. Finishes with a command $(POSTOP) which
     defaults to a null command.

make ci
     Does a $(CI) and a $(RCS_LABEL) on all files in the MANIFEST file.

   Customization of the dist targets can be done by specifying a hash
reference to the dist attribute of the WriteMakefile call. The following
parameters are recognized:

     CI           ('ci -u')
     COMPRESS     ('gzip --best')
     POSTOP       ('@ :')
     PREOP        ('@ :')
     TO_UNIX      (depends on the system)
     RCS_LABEL    ('rcs -q -Nv$(VERSION_SYM):')
     SHAR         ('shar')
     SUFFIX       ('.gz')
     TAR          ('tar')
     TARFLAGS     ('cvf')
     ZIP          ('zip')
     ZIPFLAGS     ('-r')

   An example:

     WriteMakefile( 'dist' => { COMPRESS=>"bzip2", SUFFIX=>".bz2" })

Disabling an extension
----------------------

   If some events detected in Makefile.PL imply that there is no way to
create the Module, but this is a normal state of things, then you can
create a `Makefile' which does nothing, but succeeds on all the "usual"
build targets.  To do so, use

     ExtUtils::MakeMaker::WriteEmptyMakefile();

   instead of WriteMakefile().

   This may be useful if other modules expect this module to be *built*
OK, as opposed to *work* OK (say, this system-dependent module builds in a
subdirectory of some other distribution, or is listed as a dependency in a
CPAN::Bundle, but the functionality is supported by different means on the
current architecture).

ENVIRONMENT
===========

PERL_MM_OPT
     Command line options used by `MakeMaker->new()', and thus by
     `WriteMakefile()'.  The string is split on whitespace, and the result
     is processed before any actual command line arguments are processed.

SEE ALSO
========

   ExtUtils::MM_Unix, ExtUtils::Manifest, ExtUtils::testlib,
ExtUtils::Install, ExtUtils::Embed

AUTHORS
=======

   Andy Dougherty <`doughera@lafcol.lafayette.edu'>, Andreas KE<ouml>nig
<`A.Koenig@franz.ww.TU-Berlin.DE'>, Tim Bunce <`Tim.Bunce@ig.co.uk'>.  VMS
support by Charles Bailey <`bailey@newman.upenn.edu'>.  OS/2 support by
Ilya Zakharevich <`ilya@math.ohio-state.edu'>.  Contact the makemaker
mailing list `mailto:makemaker@franz.ww.tu-berlin.de', if you have any
questions.


File: pm.info,  Node: ExtUtils/Manifest,  Next: ExtUtils/Miniperl,  Prev: ExtUtils/MakeMaker,  Up: Module List

utilities to write and check a MANIFEST file
********************************************

NAME
====

   ExtUtils::Manifest - utilities to write and check a MANIFEST file

SYNOPSIS
========

     require ExtUtils::Manifest;

     ExtUtils::Manifest::mkmanifest;

     ExtUtils::Manifest::manicheck;

     ExtUtils::Manifest::filecheck;

     ExtUtils::Manifest::fullcheck;

     ExtUtils::Manifest::skipcheck;

     ExtUtils::Manifest::manifind();

     ExtUtils::Manifest::maniread($file);

     ExtUtils::Manifest::manicopy($read,$target,$how);

DESCRIPTION
===========

   mkmanifest() writes all files in and below the current directory to a
file named in the global variable $ExtUtils::Manifest::MANIFEST (which
defaults to MANIFEST) in the current directory. It works similar to

     find . -print

   but in doing so checks each line in an existing MANIFEST file and
includes any comments that are found in the existing MANIFEST file in the
new one. Anything between white space and an end of line within a MANIFEST
file is considered to be a comment. Filenames and comments are separated
by one or more TAB characters in the output. All files that match any
regular expression in a file MANIFEST.SKIP (if such a file exists) are
ignored.

   manicheck() checks if all the files within a MANIFEST in the current
directory really do exist. It only reports discrepancies and exits
silently if MANIFEST and the tree below the current directory are in sync.

   filecheck() finds files below the current directory that are not
mentioned in the MANIFEST file. An optional file MANIFEST.SKIP will be
consulted. Any file matching a regular expression in such a file will not
be reported as missing in the MANIFEST file.

   fullcheck() does both a manicheck() and a filecheck().

   skipcheck() lists all the files that are skipped due to your
MANIFEST.SKIP file.

   manifind() returns a hash reference. The keys of the hash are the files
found below the current directory.

   maniread($file) reads a named MANIFEST file (defaults to MANIFEST in
the current directory) and returns a HASH reference with files being the
keys and comments being the values of the HASH.  Blank lines and lines
which start with `#' in the MANIFEST file are discarded.

   `manicopy($read,$target,$how)' copies the files that are the keys in
the HASH *%$read* to the named target directory. The HASH reference $read
is typically returned by the maniread() function. This function is useful
for producing a directory tree identical to the intended distribution
tree. The third parameter $how can be used to specify a different methods
of "copying". Valid values are cp, which actually copies the files, `ln'
which creates hard links, and best which mostly links the files but copies
any symbolic link to make a tree without any symbolic link. Best is the
default.

MANIFEST.SKIP
=============

   The file MANIFEST.SKIP may contain regular expressions of files that
should be ignored by mkmanifest() and filecheck(). The regular expressions
should appear one on each line. Blank lines and lines which start with `#'
are skipped.  Use `\#' if you need a regular expression to start with a
sharp character. A typical example:

     \bRCS\b
     ^MANIFEST\.
     ^Makefile$
     ~$
     \.html$
     \.old$
     ^blib/
     ^MakeMaker-\d

EXPORT_OK
=========

   `&mkmanifest', `&manicheck', `&filecheck', `&fullcheck', `&maniread',
and `&manicopy' are exportable.

GLOBAL VARIABLES
================

   `$ExtUtils::Manifest::MANIFEST' defaults to MANIFEST. Changing it
results in both a different MANIFEST and a different MANIFEST.SKIP file.
This is useful if you want to maintain different distributions for
different audiences (say a user version and a developer version including
RCS).

   `$ExtUtils::Manifest::Quiet' defaults to 0. If set to a true value, all
functions act silently.

DIAGNOSTICS
===========

   All diagnostic output is sent to `STDERR'.

`Not in MANIFEST:' file
     is reported if a file is found, that is missing in the MANIFEST file
     which is excluded by a regular expression in the file MANIFEST.SKIP.

`No such file:' file
     is reported if a file mentioned in a MANIFEST file does not exist.

`MANIFEST:' $!
     is reported if MANIFEST could not be opened.

`Added to MANIFEST:' file
     is reported by mkmanifest() if $Verbose is set and a file is added to
     MANIFEST. $Verbose is set to 1 by default.

SEE ALSO
========

   *Note ExtUtils/MakeMaker: ExtUtils/MakeMaker, which has handy targets
for most of the functionality.

AUTHOR
======

   Andreas Koenig <`koenig@franz.ww.TU-Berlin.DE'>


