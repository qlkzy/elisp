This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Bio/LiveSeq/IO/BioPerl,  Next: Bio/LiveSeq/IO/Loader,  Prev: Bio/LiveSeq/Gene,  Up: Module List

Loader for LiveSeq from EMBL entries with BioPerl
*************************************************

NAME
====

   Bio::LiveSeq::IO::BioPerl - Loader for LiveSeq from EMBL entries with
BioPerl

SYNOPSIS
========

     my $db="EMBL";
     my $file="../data/M20132";

     my $loader=Bio::LiveSeq::IO::BioPerl->load(-db=>"EMBL", -file=>"$file");

     my @translationobjects=$loader->entry2liveseq();

     my $gene="AR";
     my $gene=$loader->gene2liveseq("gene");

     NOTE: The only -db now supported is EMBL. Hence it defaults to EMBL.

DESCRIPTION
===========

   This package uses BioPerl (SeqIO) to fetch a sequence database entry,
analyse it and create LiveSeq objects out of it.

   An filename has to be passed to this package which will return
references to all translation objects created from the EMBL entry.
References to Transcription, DNA and Exon objects can all be retrieved
departing from these.

   Alternatively, a specific "gene" name can be specified, together with
the embl-acc ID. This will create a LiveSeq::Gene object with all relevant
gene features attached/created.

AUTHOR - Joseph A.L. Insana
===========================

   Email:  Insana@ebi.ac.uk, jinsana@gmx.net

   Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

load
====

     Title   : load
     Usage   : my $filename="../data/M20132";
               $loader=Bio::LiveSeq::IO::BioPerl->load(-db=>"EMBL", -file=>"$filename");

     Function: loads an entry with BioPerl from a database into a hash
     Returns : reference to a new object of class IO::BioPerl holding an entry
     Errorcode 0
     Args    : an BioPerl query resulting in one fetched EMBL (by default) entry

embl2hash
=========

     Title   : embl2hash
     Function: retrieves with BioPerl an EMBL entry, parses it and creates
               a hash that contains all the information.
     Returns : a reference to a hash
     Errorcode: 0
     Args    : a filename pointing to a file containing one EMBL entry
     	    two array references to skip features and qualifiers (for
     	    performance)
     Example: @valid_features=qw(CDS exon prim_transcript mRNA);
              @valid_qualifiers=qw(gene codon_start db_xref product rpt_family);
              $hashref=&embl2hash("$file",\@valid_features,\@valid_qualifiers);

novelaasequence2gene
====================

     Title   : novelaasequence2gene
     Usage   : $gene=Bio::LiveSeq::IO::BioPerl->novelaasequence2gene(-aasequence => "MGLAAPTRS*");
             : $gene=Bio::LiveSeq::IO::BioPerl->novelaasequence2gene(-aasequence => "MGLAAPTRS*",
                                                -cusg_data => "58 44 7 29 3 3 480 267 105 143 122 39 144 162 14 59 53 25 233 292 19 113 88 246 28 68 161 231 27 102 128 151 67 60 138 131 48 61 153 19 233 73 150 31 129 38 147 71 138 43 181 81 44 15 255 118 312 392 236 82 20 10 14 141");
             : $gene=Bio::LiveSeq::IO::BioPerl->novelaasequence2gene(-aasequence => "MGLAAPTRS*",
                                                -cusg_data => "58 44 7 29 3 3 480 267 105 143 122 39 144 162 14 59 53 25 233 292 19 113 88 246 28 68 161 231 27 102 128 151 67 60 138 131 48 61 153 19 233 73 150 31 129 38 147 71 138 43 181 81 44 15 255 118 312 392 236 82 20 10 14 141",
                                                -translation_table => "2",
                                                -gene_name => "tyr-kinase");

     Function: creates LiveSeq objects from a novel amino acid sequence,
               using codon usage information (loaded from a file) to choose
               codons according to relative frequencies.
               If a codon_usage information is not specified,
               the default is to use Homo sapiens data (taxonomy ID 9606).
               If a translation_table ID is not specified, it will default to 1
               (standard code).
     Returns : reference to a Gene object containing references to LiveSeq objects
     Errorcode 0
     Args    : string containing an amino acid sequence
     	    string (optional) with codon usage data (64 integer numbers)
               string (optional) specifying a gene_name
               integer (optional) specifying a translation_table ID


File: pm.info,  Node: Bio/LiveSeq/IO/Loader,  Next: Bio/LiveSeq/IO/SRS,  Prev: Bio/LiveSeq/IO/BioPerl,  Up: Module List

Parent Loader for LiveSeq
*************************

NAME
====

   Bio::LiveSeq::IO::Loader - Parent Loader for LiveSeq

SYNOPSIS
========

     #documentation needed

DESCRIPTION
===========

   This package holds common methods used by BioPerl, SRS and file loaders.
It contains methods to create LiveSeq objects out of entire entries or
from a localized sequence region surrounding a particular gene.

AUTHOR - Joseph A.L. Insana
===========================

   Email:  Insana@ebi.ac.uk, jinsana@gmx.net

   Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

entry2liveseq
=============

     Title   : entry2liveseq
     Usage   : @translationobjects=$loader->entry2liveseq();
             : @translationobjects=$loader->entry2liveseq(-getswissprotinfo => 0);
     Function: creates LiveSeq objects from an entry previously loaded
     Returns : array of references to objects of class Translation
     Errorcode 0
     Args    : optional boolean flag to avoid the retrieval of SwissProt
               informations for all Transcripts containing SwissProt x-reference
               default is 1 (to retrieve those informations and create AARange
               LiveSeq objects)
     Note    : this method can get really slow for big entries. The lightweight
               gene2liveseq method is recommended

novelaasequence2gene
====================

     Title   : novelaasequence2gene
     Usage   : $gene=$loader->novelaasequence2gene(-aasequence => "MGLAAPTRS*");
             : $gene=$loader->novelaasequence2gene(-aasequence => "MGLAAPTRS*");
                                                -taxon => 9606,
                                                -gene_name => "tyr-kinase");

     Function: creates LiveSeq objects from a novel amino acid sequence,
               using codon usage database to choose codons according to
               relative frequencies.
               If a taxon ID is not specified, the default is to use the human
               one (taxonomy ID 9606).
     Returns : reference to a Gene object containing references to LiveSeq objects
     Errorcode 0
     Args    : string containing an amino acid sequence
               integer (optional) with a taxonomy ID
               string specifying a gene name

printswissprot
==============

     Title   : printswissprot
     Usage   : $loader->printswissprot($hashref);
     Function: prints out all informations loaded from a database entry into the
               loader. Mainly used for testing purposes.
     Args    : a hashref containing the SWISSPROT entry datas
     Note    : the hashref can be obtained with a call to the method
                  $loader->get_swisshash()      (only with SRS loader)
     	    that takes as argument a string like "SWISS-PROT:P10275" or
     	    from $loader->swissprot2hash() that takes an SRS query string
     	    as its argument (e.g. "swissprot-acc:P10275")

printembl
=========

     Title   : printembl
     Usage   : $loader->printembl();
     Function: prints out all informations loaded from a database entry into the
               loader. Mainly used for testing purposes.
     Args    : none

genes
=====

     Title   : genes
     Usage   : $loader->genes();
     Function: Returns an array of gene_names (strings) contained in the loaded
               entry.
     Args    : none


File: pm.info,  Node: Bio/LiveSeq/IO/SRS,  Next: Bio/LiveSeq/Intron,  Prev: Bio/LiveSeq/IO/Loader,  Up: Module List

Loader for LiveSeq from EMBL entries with SRS
*********************************************

NAME
====

   Bio::LiveSeq::IO::SRS - Loader for LiveSeq from EMBL entries with SRS

SYNOPSIS
========

     my $db="EMBL";
     my $acc_id="M20132";
     my $query="embl-acc:$acc_id";

     my $loader=Bio::LiveSeq::IO::SRS->load(-db=>"EMBL", -query=>"$query");

     my @translationobjects=$loader->entry2liveseq();

     my $gene="AR";
     my $gene=$loader->gene2liveseq("gene");

     NOTE: The only -db now supported is EMBL. Hence it defaults to EMBL.

DESCRIPTION
===========

   This package uses the SRS (Sequence Retrieval System) to fetch a
sequence database entry, analyse it and create LiveSeq objects out of it.

   An embl-acc ID has to be passed to this package which will return
references to all translation objects created from the EMBL entry.
References to Transcription, DNA and Exon objects can all be retrieved
departing from these.

   Alternatively, a specific "gene" name can be specified, together with
the embl-acc ID. This will create a LiveSeq::Gene object with all relevant
gene features attached/created.

AUTHOR - Joseph A.L. Insana
===========================

   Email:  Insana@ebi.ac.uk, jinsana@gmx.net

   Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

load
====

     Title   : load
     Usage   : my $acc_id="M20132";
               my $query="embl-acc:$acc_id";
               $loader=Bio::LiveSeq::IO::SRS->load(-db=>"EMBL", -query=>"$query");

     Function: loads an entry with SRS from a database into a hash
     Returns : reference to a new object of class IO::SRS holding an entry
     Errorcode 0
     Args    : an SRS query resulting in one fetched EMBL (by default) entry

embl2hash
=========

     Title   : embl2hash
     Function: retrieves with SRS an EMBL entry, parses it and creates
               a hash that contains all the information.
     Returns : a reference to a hash
     Errorcode: 0
     Args    : an SRS query resulting in one fetched EMBL entry
                 i.e. a string in a form like "embl-acc:accession_number"
     	    two array references to skip features and qualifiers (for
     	    performance)
     Example: @valid_features=qw(CDS exon prim_transcript mRNA);
              @valid_qualifiers=qw(gene codon_start db_xref product rpt_family);
              $hashref=&embl2hash("$query",\@valid_features,\@valid_qualifiers);

get_swisshash
=============

     Title   : get_swisshash
     Usage   : $loader->get_swisshash();
     Example : $swisshash=$loader->swissprot2hash("SWISS-PROT:P10275")
     Function: retrieves with SRS a SwissProt entry, parses it and creates
               a hash that contains all the information.
     Returns : a reference to a hash
     Errorcode: 0
     Args    : the db_xref qualifier's value from an EMBL CDS Feature
               i.e. a string in the form "SWISS-PROT:accession_number"
     Note    : this can be modified (adding a second argument) to retrieve
               and parse SWTREMBL, SWALL... entries

swissprot2hash
==============

     Title   : swissprot2hash
     Usage   : $loader->swissprot2hash();
     Example : $swisshash=$loader->swissprot2hash("swissprot-acc:P10275")
     Function: retrieves with SRS a SwissProt entry, parses it and creates
               a hash that contains all the information.
     Returns : a reference to a hash
     Errorcode: 0
     Args    : an SRS query resulting in one entry from SwissProt database
               i.e. a string in the form "swissprot-acc:accession_number"
     Note    : this can be modified (adding a second argument) to retrieve
               and parse SWTREMBL, SWALL... entries

novelaasequence2gene
====================

     Title   : novelaasequence2gene
     Usage   : $gene=Bio::LiveSeq::IO::SRS->novelaasequence2gene(-aasequence => "MGLAAPTRS*");
             : $gene=Bio::LiveSeq::IO::SRS->novelaasequence2gene(-aasequence => "MGLAAPTRS*",
                                                -genome => "Homo sapiens");
             : $gene=Bio::LiveSeq::IO::SRS->novelaasequence2gene(-aasequence => "MGLAAPTRS*",
                                                -genome => "Mitochondrion Homo sapiens",
                                                -gene_name => "tyr-kinase");

     Function: creates LiveSeq objects from a novel amino acid sequence,
               using codon usage database to choose codons according to
               relative frequencies.
               If a genome latin name is not specified, the default is to use
               'Homo sapiens' (taxonomy ID 9606).
     Returns : reference to a Gene object containing references to LiveSeq objects
     Errorcode 0
     Args    : string containing an amino acid sequence
               string (optional) with a species/genome latin name
               string specifying a gene name
     Note    : SRS access to TAXON and CODONUSAGE databases is required


File: pm.info,  Node: Bio/LiveSeq/Intron,  Next: Bio/LiveSeq/Mutation,  Prev: Bio/LiveSeq/IO/SRS,  Up: Module List

Range abstract class for LiveSeq
********************************

NAME
====

   Bio::LiveSeq::Intron - Range abstract class for LiveSeq

SYNOPSIS
========

     # documentation needed

DESCRIPTION
===========

   Class for INTRON objects. They consist of a beginlabel, an endlabel
(both referring to a LiveSeq DNA object) and a strand.  The strand could
be 1 (forward strand, default), -1 (reverse strand).

AUTHOR - Joseph A.L. Insana
===========================

   Email:  Insana@ebi.ac.uk, jinsana@gmx.net

   Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

new
===

     Title   : new
     Usage   : $intron1=Bio::LiveSeq::Intron->new(-seq => $objref,
     					       -start => $startlabel,
     					       -end => $endlabel,
                                                  -strand => 1
     					       );

     Function: generates a new Bio::LiveSeq::Intron
     Returns : reference to a new object of class Intron
     Errorcode -1
     Args    : two labels and an integer


File: pm.info,  Node: Bio/LiveSeq/Mutation,  Next: Bio/LiveSeq/Mutator,  Prev: Bio/LiveSeq/Intron,  Up: Module List

Mutation event descriptor class
*******************************

NAME
====

   Bio::LiveSeq::Mutation - Mutation event descriptor class

SYNOPSIS
========

     # full descrition of a point mutation
     $mutation1a = Bio::LiveSeq::Mutation->new ( -seq => 'A',
     					      -seqori => 'T',
     					      -pos  => 100,
     					      -len => 1 # optional, defaults to length(seq)
     					     );

     # minimal information for a point mutation
     $mutation1b = Bio::LiveSeq::Mutation->new ( -seq => 'A',
     					      -pos  => 100
     					      );
     # insertion
     $mutation2 = Bio::LiveSeq::Mutation->new ( -seq => 'ATT',
     					     -pos  => 100,
     					     -len => 0
     					     );
     # deletion
     $mutation3 = Bio::LiveSeq::Mutation->new ( -seq => '',  # optional
     					     -seqori => 'TTG',  # optional
     					     -pos  => 100
     					     -len => 3
     					     );
     # complex
     $mutation4 = Bio::LiveSeq::Mutation->new ( -seq => 'CC',
     					     -seqori => 'TTG',  # optional
     					     -pos  => 100
     					     -len => 3
     					     );

DESCRIPTION
===========

   This class describes a local mutation event using minimalistic
description.  It is not necessary to know anything about the original
sequence. You need to give the changed sequence, the position of the
mutation in the (unidentified) reference sequence, and the length of the
affected subsequence in the reference sequence. If the original allele
sequence is given, the objects applying the mutation into the reference
sequence (e.g. *Note Bio/LiveSeq/Mutator: Bio/LiveSeq/Mutator,) might
check for its validity.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.

     bioperl-l@bioperl.org                         - General discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via  email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Heikki Lehvaslaiho
===========================

   Email:  heikki@ebi.ac.uk Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

seq
---

     Title   : seq
     Usage   : $obj->seq();
     Function:

     Sets and returns the mutated sequence. No checking is done
     to validate the symbols.

     Example :
     Returns : string
     Args    : integer

seqori
------

     Title   : seqori
     Usage   : $obj->seqori();
     Function:

     Sets and returns the original subsequence in the reference
     sequence. No checking is done to validate the symbols.
     Optional value.

     Example :
     Returns : string
     Args    : string

pos
---

     Title   : pos
     Usage   : $obj->pos();
     Function:

     Sets and returns the position of the first element in the
     sequence.

     Example :
     Returns : string
     Args    : integer

len
---

     Title   : len
     Usage   : $obj->len();
     Function:

     Sets and returns the len of the affected original allele
     sequence.  If value is not set, defaults to the lenght of
     the mutated sequence (seq).

     Example :
     Returns : string
     Args    : string

label
-----

     Title   : label
     Usage   : $obj->label();
     Function:

     Sets and returns the label of the affected original allele
     location. Label is a stable identifier whereas location
     can be changed by mutations. Label comes from
     l<Bio::LiveSeq::Gene>.

     Example :
     Returns : string
     Args    : string

transpos
--------

     Title   : transpos
     Usage   : $obj->transpos();
     Function:

     Sets and returns the transcript position of the mutation.
     Set when associated with a reference sequence. Value
     depends on reference molecule and the co-ordinate system
     used.

     Example :
     Returns : string
     Args    : integer

issue
-----

     Title   : issue
     Usage   : $obj->issue();
     Function:

     Sets and returns the position of the mutation in an array
     of mutations to be issued. Set after the validity of the
     mutation has been confirmed.

     Example :
     Returns : string
     Args    : integer

prelabel
--------

     Title   : prelabel
     Usage   : $obj->prelabel();
     Function:

     Sets and returns the prelabel of the affected original allele
     location. Prelabel is a stable identifier whereas location
     can be changed by mutations. Prelabel comes from
     l<Bio::LiveSeq::Gene>.

     Example :
     Returns : string
     Args    : string

postlabel
---------

     Title   : postlabel
     Usage   : $obj->postlabel();
     Function:

     Sets and returns the postlabel of the affected original allele
     location. Postlabel is a stable identifier whereas location
     can be changed by mutations. Postlabel comes from
     l<Bio::LiveSeq::Gene>.

     Example :
     Returns : string
     Args    : string

lastlabel
---------

     Title   : lastlabel
     Usage   : $obj->lastlabel();
     Function:

     Sets and returns the lastlabel of the affected original allele
     location. Lastlabel is a stable identifier whereas location
     can be changed by mutations. Lastlabel comes from
     l<Bio::LiveSeq::Gene>.

     Example :
     Returns : string
     Args    : string


File: pm.info,  Node: Bio/LiveSeq/Mutator,  Next: Bio/LiveSeq/Prim_Transcript,  Prev: Bio/LiveSeq/Mutation,  Up: Module List

Package mutating LiveSequences
******************************

NAME
====

   Bio::LiveSeq::Mutator - Package mutating LiveSequences

SYNOPSIS
========

     # $gene is a Bio::LiveSeq::Gene object
     my $mutate = Bio::LiveSeq::Mutator->new('-gene' => $gene,
     					  '-numbering' => "coding"
     					   );
     # $mut is a Bio::LiveSeq::Mutation object
     $mutate->add_Mutation($mut);
     # $results is a Bio::Variation::SeqDiff object
     my $results=$mutate->change_gene();
     if ($results) {
         my $out = Bio::Variation::IO->new( '-format' => 'flat');
         $out->write($results);
     }

DESCRIPTION
===========

     This class mutates L<Bio::LiveSeq::Gene> objects and returns
     L<Bio::Variation::SeqDiff> object. Mutations are described as
     L<Bio::LiveSeq::Mutation> objects.

FEEDBACK
========

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.

     bioperl-l@bioperl.org                         - General discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via  email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Heikki Lehvaslaiho & Joseph A.L. Insana
================================================

     Email:  heikki@ebi.ac.uk
             insana@ebi.ac.uk, jinsana@gmx.net

     Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

     The rest of the documentation details each of the object
     methods. Internal methods are usually preceded with a _

gene
----

     Title   : gene
     Usage   : $mutobj = $obj->gene;
             : $mutobj = $obj->gene($objref);
     Function:

     Returns or sets the link-reference to a
     L<Bio::LiveSeq::Gene> object. If no value has ben set, it
     will return undef

     Returns : an object reference  or undef
     Args    : a L<Bio::LiveSeq::Gene>

numbering
---------

     Title   : numbering
     Usage   : $obj->numbering();
     Function:

     Sets and returns coordinate system used in positioning the
     mutations.

     Example :
     Returns : string
     Args    : string (coding [transcript number] | entry)

add_Mutation
------------

     Title   : add_Mutation
     Usage   : $self->add_Mutation($ref)
     Function: adds a L<Bio::Liveseq::Mutation> object
     Example :
     Returns :
     Args    : a L<Bio::Liveseq::Mutation>

each_Mutation
-------------

     Title   : each_Mutation
     Usage   : foreach $ref ( $a->each_Mutation )
     Function: gets an array of L<Bio::Liveseq::Mutation> objects
     Example :
     Returns : array of Mutations
     Args    :

mutation
--------

     Title   : mutation
     Usage   : $mutobj = $obj->mutation;
             : $mutobj = $obj->mutation($objref);
     Function:

     Returns or sets the link-reference to the current mutation
     object.  If the value is not set, it will return undef.
     Internal method.

     Returns : an object reference  or undef

DNA
---

     Title   : DNA
     Usage   : $mutobj = $obj->DNA;
             : $mutobj = $obj->DNA($objref);
     Function:

     Returns or sets the reference to the LiveSeq object holding
     the reference sequence. If there is no link, it will return
     undef.
     Internal method.

     Returns : an object reference or undef

RNA
---

     Title   : RNA
     Usage   : $mutobj = $obj->RNA;
             : $mutobj = $obj->RNA($objref);
     Function:

     Returns or sets the reference to the LiveSeq object holding
     the reference sequence. If the value is not set, it will return
     undef.
     Internal method.

     Returns : an object reference  or undef

dnamut
------

     Title   : dnamut
     Usage   : $mutobj = $obj->dnamut;
             : $mutobj = $obj->dnamut($objref);
     Function:

     Returns or sets the reference to the current DNAMutation object.
     If the value is not set, it will return undef.
     Internal method.

     Returns : an L<Bio::Variation::DNAMutation> or undef

rnachange
---------

     Title   : rnachange
     Usage   : $mutobj = $obj->rnachange;
             : $mutobj = $obj->rnachange($objref);
     Function:

     Returns or sets the reference to the current RNAChange object.
     If the value is not set, it will return undef.
     Internal method.

     Returns : an L<Bio::Variation::RNAChange> or undef

aachange
--------

     Title   : aachange
     Usage   : $mutobj = $obj->aachange;
             : $mutobj = $obj->aachange($objref);
     Function:

     Returns or sets the reference to the current AAChange object.
     If the value is not set, it will return undef.
     Internal method.

     Returns : an L<Bio::Variation::AAChange> or undef

exons
-----

     Title   : exons
     Usage   : $mutobj = $obj->exons;
             : $mutobj = $obj->exons($objref);
     Function:

     Returns or sets the reference to a current array of Exons.
     If the value is not set, it will return undef.
     Internal method.

     Returns : an array of L<Bio::LiveSeq::Exon> objects or undef

change_gene
-----------

     Title   : change_gene
     Usage   : my $mutate = Bio::LiveSeq::Mutator->new(-gene => $gene,
     						   numbering => "coding"
     						   );
               $mutate->add_Mutation($mut);
               my $results=$mutate->change_gene();

     Function:

     Returns a Bio::Variation::SeqDiff object containing the
     results of the changes performed according to the
     instructions present in the mutmatrix.  The -numbering
     argument decides what molecule is being changed and what
     numbering scheme being used:

     -numbering => "entry"

     determines the DNA level, using the numbering of the
     beginning of the sequence

     -numbering => "coding"

     determines the cDNA level, using the numbering from the
     beginning of the 1st transcript

     Alternative transcripts can be used by specifying "coding 2" or
     "coding 3" ...

     Args    : Bio::LiveSeq::Gene object
               reference to a mutmatrix array of arrays
               string specifying a numbering scheme (defaults to 'coding')
     Returns : Bio::Variation::SeqDiff object or 0 on error

_mutationpos2label
------------------

     Title   : _mutationpos2label
     Usage   :
     Function:
     Example :
     Returns : number of valid mutations
     Args    : LiveSeq sequence object

_set_DNAMutation
----------------

     Title   : _set_DNAMutation
     Usage   :
     Function:

     Stores DNA level mutation attributes before mutation into
     L<Bio::Variation::DNAMutation> object.  Links it to SeqDiff
     object.

     Example :
     Returns : L<Bio::Variation::DNAMutation> object
     Args    : L<Bio::Variation::SeqDiff> object

_set_effects
------------

     Title   : _set_effects
     Usage   :
     Function:

     Stores RNA and AA level mutation attributes before mutation
     into L<Bio::Variation::RNACange> and
     L<Bio::Variation::AACange> objects.  Links them to
     SeqDiff object.

     Example :
     Returns :
     Args    : L<Bio::Variation::SeqDiff> object
               L<Bio::Variation::DNAMutation> object

_untranslated
-------------

     Title   : _untranslated
     Usage   :
     Function:

     Stores RNA change attributes before mutation
     into L<Bio::Variation::RNAChange object.  Links it to
     SeqDiff object.

     Example :
     Returns :
     Args    : L<Bio::Variation::SeqDiff> object
               L<Bio::Variation::DNAMutation> object


File: pm.info,  Node: Bio/LiveSeq/Prim_Transcript,  Next: Bio/LiveSeq/Range,  Prev: Bio/LiveSeq/Mutator,  Up: Module List

Prim_Transcript class for LiveSeq
*********************************

NAME
====

   Bio::LiveSeq::Prim_Transcript - Prim_Transcript class for LiveSeq

SYNOPSIS
========

     # documentation needed

DESCRIPTION
===========

   Class for PRIM_TRANSCRIPT objects. They consist of a beginlabel, an
endlabel (both referring to a LiveSeq DNA object) and a strand.  The
strand could be 1 (forward strand, default), -1 (reverse strand).

AUTHOR - Joseph A.L. Insana
===========================

   Email:  Insana@ebi.ac.uk, jinsana@gmx.net

   Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

new
===

     Title   : new
     Usage   : $intron1=Bio::LiveSeq::Prim_Transcript->new(-seq => $objref,
     							-start => $startlabel,
     							-end => $endlabel,
     							-strand => 1
     							);

     Function: generates a new Bio::LiveSeq::Prim_Transcript
     Returns : reference to a new object of class Prim_Transcript
     Errorcode -1
     Args    : two labels and an integer


File: pm.info,  Node: Bio/LiveSeq/Range,  Next: Bio/LiveSeq/Repeat_Region,  Prev: Bio/LiveSeq/Prim_Transcript,  Up: Module List

Range abstract class for LiveSeq
********************************

NAME
====

   Bio::LiveSeq::Range - Range abstract class for LiveSeq

SYNOPSIS
========

     # documentation needed

DESCRIPTION
===========

   This is used as parent for exon and intron classes.

AUTHOR - Joseph A.L. Insana
===========================

   Email:  Insana@ebi.ac.uk, jinsana@gmx.net

   Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

new
===

     Title   : new
     Usage   : $range1 = Bio::LiveSeq::Range->new(-seq => $obj_ref,
                                                  -start => $beginlabel,
                                                  -end => $endlabel, -strand => 1);

     Function: generates a new Bio::LiveSeq::Range
     Returns : reference to a new object of class Range
     Errorcode -1
     Args    : two labels, an obj_ref and an integer
               strand 1=forward strand, strand -1=reverse strand
               if strand not specified, it defaults to 1
               the -seq argument must point to the underlying DNA LiveSeq object

valid
=====

     Title   : valid
     Usage   : $boolean = $obj->valid($label)
     Function: tests if a label exists AND is part of the object
     Returns : boolean
     Args    : label


File: pm.info,  Node: Bio/LiveSeq/Repeat_Region,  Next: Bio/LiveSeq/Repeat_Unit,  Prev: Bio/LiveSeq/Range,  Up: Module List

Repeat_Region class for LiveSeq
*******************************

NAME
====

   Bio::LiveSeq::Repeat_Region - Repeat_Region class for LiveSeq

SYNOPSIS
========

     # documentation needed

DESCRIPTION
===========

   Class for REPEAT_REGION objects. They consist of a beginlabel, an
endlabel (both referring to a LiveSeq DNA object) and a strand.  The
strand could be 1 (forward strand, default), -1 (reverse strand).

AUTHOR - Joseph A.L. Insana
===========================

   Email:  Insana@ebi.ac.uk, jinsana@gmx.net

   Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, Regioned Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

new
===

     Title   : new
     Usage   : $intron1=Bio::LiveSeq::Repeat_Region->new(-seq => $objref,
     					      -start => $startlabel,
     					      -end => $endlabel, -strand => 1);

     Function: generates a new Bio::LiveSeq::Repeat_Region
     Returns : reference to a new object of class Repeat_Region
     Errorcode -1
     Args    : two labels and an integer


File: pm.info,  Node: Bio/LiveSeq/Repeat_Unit,  Next: Bio/LiveSeq/SeqI,  Prev: Bio/LiveSeq/Repeat_Region,  Up: Module List

Repeat_Unit class for LiveSeq
*****************************

NAME
====

   Bio::LiveSeq::Repeat_Unit - Repeat_Unit class for LiveSeq

SYNOPSIS
========

     # documentation needed

DESCRIPTION
===========

   Class for REPEAT_UNIT objects. They consist of a beginlabel, an
endlabel (both referring to a LiveSeq DNA object) and a strand.  The
strand could be 1 (forward strand, default), -1 (reverse strand).

AUTHOR - Joseph A.L. Insana
===========================

   Email:  Insana@ebi.ac.uk, jinsana@gmx.net

   Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

new
===

     Title   : new
     Usage   : $intron1=Bio::LiveSeq::Repeat_Unit->new(-seq => $objref,
     					      -start => $startlabel,
     					      -end => $endlabel, -strand => 1);

     Function: generates a new Bio::LiveSeq::Repeat_Unit
     Returns : reference to a new object of class Repeat_Unit
     Errorcode -1
     Args    : two labels and an integer


File: pm.info,  Node: Bio/LiveSeq/SeqI,  Next: Bio/LiveSeq/Transcript,  Prev: Bio/LiveSeq/Repeat_Unit,  Up: Module List

Abstract sequence interface class for LiveSeq
*********************************************

NAME
====

   Bio::LiveSeq::SeqI - Abstract sequence interface class for LiveSeq

SYNOPSIS
========

     # documentation needed

DESCRIPTION
===========

   This class implements BioPerl PrimarySeqI interface for Live Seq
objects.

   One of the main difference in LiveSequence compared to traditional
"string" sequences is that coordinate systems are flexible. Typically gene
nucleotide numbering starts from 1 at the first character of the initiator
codon (A in ATG). This means that negative positions are possible and
common!

   Secondly, the sequence manipulation methods do not return a new
sequence object but change the current object. The current status can be
written out to BioPerl sequence objects.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     vsns-bcd-perl@lists.uni-bielefeld.de          - General discussion
     vsns-bcd-perl-guts@lists.uni-bielefeld.de     - Technically-oriented discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via  email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Joseph A.L. Insana
===========================

   Email:  Insana@ebi.ac.uk, jinsana@gmx.net

   Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

   Some note on the terminology/notation of method names:  label: a unique
pointer to a single nucleotide  position: the position of a nucleotide
according to a particular coordinate            system (e.g. counting
downstream from a particular label taken as            number 1)  base:
the one letter code for a nucleotide (i.e.: "a" "t" "c" "g")

     a base is the "value" that an "element" of a "chain" can assume
       (see documentation on the Chain datastructure if interested)

seq
---

     Title   : seq
     Usage   : $string    = $obj->seq()
     Function: Returns the complete sequence of an object as a string of letters.
               Suggested cases are upper case for proteins and lower case for
               DNA sequence (IUPAC standard),
     Returns : a string

all_labels
----------

     Title   : all_labels
     Usage   : @labels = $obj->all_labels()
     Function: all the labels of every nucleotide an object is composed of
     Returns : an array of labels
     Args    : none

labelsubseq
===========

     Title   : labelsubseq
     Usage   : $dna->labelsubseq();
             : $dna->labelsubseq($startlabel);
             : $dna->labelsubseq($startlabel,$length);
             : $dna->labelsubseq($startlabel,undef,$endlabel);
     e.g.    : $dna->labelsubseq(4,undef,8);
     Function: prints the sequence as string. The difference between labelsubseq
               and normal subseq is that it uses /labels/ as arguments, instead
               than positions. This allows for faster and more efficient lookup,
               skipping the (usually) lengthy conversion of positions into labels.
               This is expecially useful for manipulating with high power
               LiveSeq objects, knowing the labels and exploiting their
               usefulness.
     Returns : a string
     Errorcode -1
     Args    : without arguments it returns the entire sequence
               with a startlabel it returns the sequence downstream that label
               if a length is specified, it returns only that number of bases
               if an endlabel is specified, it overrides the length argument
                and prints instead up to that label (included)
     Defaults: $startlabel defaults to the beginning of the entire sequence
               $endlabel defaults to the end of the entire sequence

subseq
------

     Title   : subseq
     Usage   : $substring = $obj->subseq(10,40);
             : $substring = $obj->subseq(10,undef,4);
     Function: returns the subseq from start to end, where the first base
               is 1 and the number is inclusive, ie 1-2 are the first two
               bases of the sequence

     Start cannot be larger than end but can be equal.

     Allows for negative numbers $obj->subseq(-10,-1). By
     definition, there is no 0!
                 -5  -1 1   5
          gctagcgcccaac atggctcgctg

     This allows to retrieve sequences upstream from given position.

     The precedence is from left to right: if END is given LENGTH is
     ignored.

     Examples: $obj->subseq(-10,undef,10) returns 10 elements before position 1
               $obj->subseq(4,8) returns elements from the 4th to the 8th, inclusive

     Returns : a string
     Errorcode: -1
     Args    : start,  integer, defaults to start of the sequence
               end,    integer, '' or undef, defaults to end of the sequence
               length, integer, '' or undef
               an optional strand (1 or -1) 4th argument
                if strand argument is not given, it will default to the object
                argment. This argument is useful when a call is issued from a child
                of a parent object containing the subseq method

length
======

     Title   : length
     Usage   : $seq->length();
     Function: returns the number of nucleotides (or the number of aminoacids)
               in the entire sequence
     Returns : an integer
     Errorcode -1
     Args    : none

display_id
----------

     Title   : display_id
     Usage   : $id_string = $obj->display_id();
     Function: returns the display id, alias the common name of the object

     The semantics of this is that it is the most likely string
     to be used as an identifier of the sequence, and likely to
     have "human" readability.  The id is equivalent to the ID
     field of the GenBank/EMBL databanks and the id field of the
     Swissprot/sptrembl database. In fasta format, the >(\S+) is
     presumed to be the id, though some people overload the id
     to embed other information.

     See also: accession_number
     Returns : a string
     Args    : none

accession_number
----------------

     Title   : accession_number
     Usage   : $unique_biological_key = $obj->accession_number;
     Function: Returns the unique biological id for a sequence, commonly
               called the accession_number.
               Notice that primary_id() provides the unique id for the
               implemetation, allowing multiple objects to have the same accession
               number in a particular implementation.

     For objects with no accession_number this method returns "unknown".
      Returns : a string
      Args    : none

primary_id
----------

     Title   : primary_id
     Usage   : $unique_implementation_key = $obj->primary_id;
     Function: Returns the unique id for this object in this
               implementation. This allows implementations to manage their own
               object ids in a way the implementation can control. Clients can
               expect one id to map to one object.

     For sequences with no primary_id, this method returns
     a stringified memory location.

     Returns : A string
     Args    : None

change
------

     Title   : change
     Usage   : $substring = $obj->change('AA', 10);
     Function: changes, modifies, mutates the LiveSequence
     Examples:
            $obj->change('',   10);      delete nucleotide #10
            $obj->change('',   10, 2);   delete two nucleotides starting from #10
            $obj->change('G',  10);      change nuc #10 to 'G'
            $obj->change('GA', 10, 4);   replace #10 and 3 following with 'GA'
            $obj->change('GA', 10, 2));  is same as $obj->change('GA',  10);
            $obj->change('GA', 10, 0 );  insert 'GA' before nucleotide at #10
            $obj->change('GA', 10, 1);   GA inserted before #10, #10 deleted
            $obj->change('GATC', 10, 2); GATC inserted before #10, #10&#11 deleted
            $obj->change('GATC', 10, 6); GATC inserted before #10, #10-#15 deleted

     Returns : a string of deleted bases (if any) or 1 (everything OK)
     Errorcode: -1
     Args    : seq,    string, or '' ('' = undef = 0 = deletion)
               start,  integer
               length, integer (optional)

positionchange
--------------

     Title   : positionchange
     Function: Exactly like change. I.e. change() defaults to positionchange()

labelchange
-----------

     Title   : labelchange
     Function: Exactly like change but uses a /label/ instead than a position
               as second argument. This allows for multiple changes in a LiveSeq
               without the burden of recomputing positions. I.e. for a multiple
               change in two different points of the LiveSeq, the approach would
               be the following: fetch the correct labels out of the two different
               positions (method: label($position)) and then use the labelchange()
               method to modify the sequence using those labels instead than
               relying on the positions (that would have modified after the
               first change).

valid
=====

     Title   : valid
     Usage   : $boolean = $obj->valid($label)
     Function: tests if a label exists inside the object
     Returns : boolean
     Args    : label

start
=====

     Title   : start
     Usage   : $startlabel=$obj->start()
     Function: returns the label of the first nucleotide of the object (exon, CDS)
     Returns : label
     Args    : none

end
===

     Title   : end
     Usage   : $endlabel=$obj->end()
     Function: returns the label of the last nucleotide of the object (exon, CDS)
     Returns : label
     Args    : none

strand
======

     Title   : strand
     Usage   : $strand=$obj->strand()
               $obj->strand($strand)
     Function: gets or sets strand information, being 1 or -1 (forward or reverse)
     Returns : -1 or 1
     Args    : none OR -1 or 1

moltype
=======

     Title   : moltype
     Usage   : if( $obj->moltype eq 'dna' ) { /Do Something/ }
     Function: Returns the type of sequence being one of
               'dna', 'rna' or 'protein'. This is case sensitive.
     
     Returns : a string either 'dna','rna','protein'.
     Args    : none
     Note    : "circular dna" is set as dna
     
     =cut

   sub moltype {   my %valid_type = map {$_, 1} qw( dna rna protein );
my ($obj,$value) = @_;   if (defined $value) {     $value =~ s/circular
dna/dna/;     unless ( $valid_type{$value} ) {       carp "Molecular type
'$value' is not a valid type";     }     $obj->{'moltype'} = $value;   }
return $obj->{'moltype'}; }

coordinate_start
================

     Title   : coordinate_start
     Usage   : $coordstartlabel=$obj->coordinate_start()
             : $coordstartlabel=$obj->coordinate_start($label)
     Function: returns and optionally sets the first label of the coordinate
               system used
               For some objects only labels inside the object or in frame (for
               Translation objects) will be allowed to get set as coordinate start

     Returns : label. It returns 0 if label not found.
     Errorcode -1
     Args    : an optional reference $label that is position 1

label
=====

     Title   : label
     Usage   : $seq->label($position)
             : $seq->label($position,$firstlabel)
     Examples: $nextlabel=$seq->label(2,$label) -> retrieves the following label
             : $prevlabel=$seq->label(-1,$label) -> retrieves the preceding label

     Function: returns the label of the nucleotide at $position from current
               coordinate start
     Returns : a label. It returns 0 if label not found.
     Errorcode -1
     Args    : a position,
               an optional reference $firstlabel that is to be used as position 1
               an optional strand (1 or -1) argument
                if strand argument is not given, it will default to the object
                argument. This argument is useful when a call is issued from a child
                of a parent object containing the subseq method

position
========

     Title   : position
     Usage   : $seq->position($label)
             : $seq->position($label,$firstlabel)
     Function: returns the position of nucleotide at $label
     Returns : the position of the label from current coordinate start
     Errorcode 0
     Args    : a label pointing to a certain nucleotide (e.g. start of exon)
               an optional "firstlabel" as reference to count from
               an optional strand (1 or -1) argument
                if strand argument is not given, it will default to the object
                argument. This argument is useful when a call is issued from a child
                of a parent object containing the subseq method

follows
=======

     Title   : follows
     Usage   : $seq->follows($firstlabel,$secondlabel)
             : $seq->follows($firstlabel,$secondlabel,$strand)
     Function: checks if SECONDlabel follows FIRSTlabel, undependent of the strand
               i.e. it checks downstream for forward strand and
               upstream for reverse strand
     Returns : 1 or 0
     Errorcode -1
     Args    : two labels
               an optional strand (1 or -1) argument
                if strand argument is not given, it will default to the object
                argument. This argument is useful when a call is issued from a child
                of a parent object containing the subseq method

translate
---------

     Title   : translate
     Usage   : $protein_seq = $obj->translate
     Function: Provides the translation of the DNA sequence
               using full IUPAC ambiguities in DNA/RNA and amino acid codes.

     The resulting translation is identical to EMBL/TREMBL database
     translations.

     Returns : a string
     Args    : character for terminator (optional) defaults to '*'
               character for unknown amino acid (optional) defaults to 'X'
               frame (optional) valid values 0, 1, 3, defaults to 0
               codon table id (optional) defaults to 1

translate_string
----------------

     Title   : translate_string
     Usage   : $protein_seq = $obj->translate_string("attcgtgttgatcgatta");
     Function: Like translate, but can be used to translate subsequences after
               having retrieved them as string.
     Args    : 1st argument is a string. Optional following arguments: like in
               the translate method

gene
====

     Title   : gene
     Usage   : my $gene=$obj->gene;
     Function: Gets or sets the reference to the LiveSeq::Gene object.
               Objects that are features of a LiveSeq Gene will have this
               attribute set automatically.
     
     Returns : reference to an object of class Gene
     Note    : if Gene object is not set, this method will return 0;
     Args    : none or reference to object of class Bio::LiveSeq::Gene

obj_valid
=========

     Title   : obj_valid
     Usage   : if ($obj->obj_valid) {do something;}
     Function: Checks if start and end labels are still valid for the ojbect,
               i.e. tests if the LiveSeq object is still valid
     Returns : boolean
     Args    : none

name
----

     Title   : name
     Usage   : $name = $obj->name;
             : $name = $obj->name("ABCD");
     Function: Returns or sets the name of the object.
               If there is no name, it will return "unknown";
     Returns : A string
     Args    : None

description
-----------

     Title   : description
     Usage   : $description = $obj->description;
             : $description = $obj->description("ABCD");
     Function: Returns or sets the description of the object.
               If there is no description, it will return "unknown";
     Returns : A string
     Args    : None

source
------

     Title   : source
     Usage   : $name = $obj->source;
             : $name = $obj->source("Homo sapiens");
     Function: Returns or sets the organism that is source of the object.
               If there is no source, it will return "unknown";
     Returns : A string
     Args    : None


