This is Info file perl.info, produced by Makeinfo version 1.68 from the
input file bigperl.texi.

   settitle perl


File: perl.info,  Node: perllol,  Next: perlboot,  Prev: perldsc,  Up: Top

Manipulating Arrays of Arrays in Perl
*************************************

NAME
====

   perllol - Manipulating Arrays of Arrays in Perl

DESCRIPTION
===========

Declaration and Access of Arrays of Arrays
==========================================

   The simplest thing to build an array of arrays (sometimes imprecisely
called a list of lists).  It's reasonably easy to understand, and almost
everything that applies here will also be applicable later on with the
fancier data structures.

   An array of an array is just a regular old array @AoA that you can get
at with two subscripts, like `$AoA[3][2]'.  Here's a declaration of the
array:

     # assign to our array, an array of array references
     @AoA = (
     	   [ "fred", "barney" ],
     	   [ "george", "jane", "elroy" ],
     	   [ "homer", "marge", "bart" ],
     );

     print $AoA[2][2];
       bart

   Now you should be very careful that the outer bracket type is a round
one, that is, a parenthesis.  That's because you're assigning to an
@array, so you need parentheses.  If you wanted there not to be an @AoA,
but rather just a reference to it, you could do something more like this:

     # assign a reference to array of array references
     $ref_to_AoA = [
     	[ "fred", "barney", "pebbles", "bambam", "dino", ],
     	[ "homer", "bart", "marge", "maggie", ],
     	[ "george", "jane", "elroy", "judy", ],
     ];

     print $ref_to_AoA->[2][2];

   Notice that the outer bracket type has changed, and so our access syntax
has also changed.  That's because unlike C, in perl you can't freely
interchange arrays and references thereto.  $ref_to_AoA is a reference to
an array, whereas @AoA is an array proper.  Likewise, `$AoA[2]' is not an
array, but an array ref.  So how come you can write these:

     $AoA[2][2]
     $ref_to_AoA->[2][2]

   instead of having to write these:

     $AoA[2]->[2]
     $ref_to_AoA->[2]->[2]

   Well, that's because the rule is that on adjacent brackets only (whether
square or curly), you are free to omit the pointer dereferencing arrow.
But you cannot do so for the very first one if it's a scalar containing a
reference, which means that $ref_to_AoA always needs it.

Growing Your Own
================

   That's all well and good for declaration of a fixed data structure, but
what if you wanted to add new elements on the fly, or build it up entirely
from scratch?

   First, let's look at reading it in from a file.  This is something like
adding a row at a time.  We'll assume that there's a flat file in which
each line is a row and each word an element.  If you're trying to develop
an  @AoA array containing all these, here's the right way to do that:

     while (<>) {
     	@tmp = split;
     	push @AoA, [ @tmp ];
     }

   You might also have loaded that from a function:

     for $i ( 1 .. 10 ) {
     	$AoA[$i] = [ somefunc($i) ];
     }

   Or you might have had a temporary variable sitting around with the
array in it.

     for $i ( 1 .. 10 ) {
     	@tmp = somefunc($i);
     	$AoA[$i] = [ @tmp ];
     }

   It's very important that you make sure to use the [] array reference
constructor.  That's because this will be very wrong:

     $AoA[$i] = @tmp;

   You see, assigning a named array like that to a scalar just counts the
number of elements in @tmp, which probably isn't what you want.

   If you are running under `use strict', you'll have to add some
declarations to make it happy:

     use strict;
     my(@AoA, @tmp);
     while (<>) {
     	@tmp = split;
     	push @AoA, [ @tmp ];
     }

   Of course, you don't need the temporary array to have a name at all:

     while (<>) {
     	push @AoA, [ split ];
     }

   You also don't have to use push().  You could just make a direct
assignment if you knew where you wanted to put it:

     my (@AoA, $i, $line);
     for $i ( 0 .. 10 ) {
     	$line = <>;
     	$AoA[$i] = [ split ' ', $line ];
     }

   or even just

     my (@AoA, $i);
     for $i ( 0 .. 10 ) {
     	$AoA[$i] = [ split ' ', <> ];
     }

   You should in general be leery of using functions that could
potentially return lists in scalar context without explicitly stating
such.  This would be clearer to the casual reader:

     my (@AoA, $i);
     for $i ( 0 .. 10 ) {
     	$AoA[$i] = [ split ' ', scalar(<>) ];
     }

   If you wanted to have a $ref_to_AoA variable as a reference to an array,
you'd have to do something like this:

     while (<>) {
     	push @$ref_to_AoA, [ split ];
     }

   Now you can add new rows.  What about adding new columns?  If you're
dealing with just matrices, it's often easiest to use simple assignment:

     for $x (1 .. 10) {
     	for $y (1 .. 10) {
     	    $AoA[$x][$y] = func($x, $y);
     	}
     }

     for $x ( 3, 7, 9 ) {
     	$AoA[$x][20] += func2($x);
     }

   It doesn't matter whether those elements are already there or not:
it'll gladly create them for you, setting intervening elements to undef as
need be.

   If you wanted just to append to a row, you'd have to do something a bit
funnier looking:

     # add new columns to an existing row
     push @{ $AoA[0] }, "wilma", "betty";

   Notice that I *couldn't* say just:

     push $AoA[0], "wilma", "betty";  # WRONG!

   In fact, that wouldn't even compile.  How come?  Because the argument
to push() must be a real array, not just a reference to such.

Access and Printing
===================

   Now it's time to print your data structure out.  How are you going to
do that?  Well, if you want only one of the elements, it's trivial:

     print $AoA[0][0];

   If you want to print the whole thing, though, you can't say

     print @AoA;		# WRONG

   because you'll get just references listed, and perl will never
automatically dereference things for you.  Instead, you have to roll
yourself a loop or two.  This prints the whole structure, using the
shell-style for() construct to loop across the outer set of subscripts.

     for $aref ( @AoA ) {
     	print "\t [ @$aref ],\n";
     }

   If you wanted to keep track of subscripts, you might do this:

     for $i ( 0 .. $#AoA ) {
     	print "\t elt $i is [ @{$AoA[$i]} ],\n";
     }

   or maybe even this.  Notice the inner loop.

     for $i ( 0 .. $#AoA ) {
     	for $j ( 0 .. $#{$AoA[$i]} ) {
     	    print "elt $i $j is $AoA[$i][$j]\n";
     	}
     }

   As you can see, it's getting a bit complicated.  That's why sometimes
is easier to take a temporary on your way through:

     for $i ( 0 .. $#AoA ) {
     	$aref = $AoA[$i];
     	for $j ( 0 .. $#{$aref} ) {
     	    print "elt $i $j is $AoA[$i][$j]\n";
     	}
     }

   Hmm... that's still a bit ugly.  How about this:

     for $i ( 0 .. $#AoA ) {
     	$aref = $AoA[$i];
     	$n = @$aref - 1;
     	for $j ( 0 .. $n ) {
     	    print "elt $i $j is $AoA[$i][$j]\n";
     	}
     }

Slices
======

   If you want to get at a slice (part of a row) in a multidimensional
array, you're going to have to do some fancy subscripting.  That's because
while we have a nice synonym for single elements via the pointer arrow for
dereferencing, no such convenience exists for slices.  (Remember, of
course, that you can always write a loop to do a slice operation.)

   Here's how to do one operation using a loop.  We'll assume an @AoA
variable as before.

     @part = ();
     $x = 4;
     for ($y = 7; $y < 13; $y++) {
     	push @part, $AoA[$x][$y];
     }

   That same loop could be replaced with a slice operation:

     @part = @{ $AoA[4] } [ 7..12 ];

   but as you might well imagine, this is pretty rough on the reader.

   Ah, but what if you wanted a *two-dimensional slice*, such as having $x
run from 4..8 and $y run from 7 to 12?  Hmm... here's the simple way:

     @newAoA = ();
     for ($startx = $x = 4; $x <= 8; $x++) {
     	for ($starty = $y = 7; $y <= 12; $y++) {
     	    $newAoA[$x - $startx][$y - $starty] = $AoA[$x][$y];
     	}
     }

   We can reduce some of the looping through slices

     for ($x = 4; $x <= 8; $x++) {
     	push @newAoA, [ @{ $AoA[$x] } [ 7..12 ] ];
     }

   If you were into Schwartzian Transforms, you would probably have
selected map for that

     @newAoA = map { [ @{ $AoA[$_] } [ 7..12 ] ] } 4 .. 8;

   Although if your manager accused of seeking job security (or rapid
insecurity) through inscrutable code, it would be hard to argue. :-) If I
were you, I'd put that in a function:

     @newAoA = splice_2D( \@AoA, 4 => 8, 7 => 12 );
     sub splice_2D {
     	my $lrr = shift; 	# ref to array of array refs!
     	my ($x_lo, $x_hi,
     	    $y_lo, $y_hi) = @_;

     return map {
         [ @{ $lrr->[$_] } [ $y_lo .. $y_hi ] ]
     } $x_lo .. $x_hi;
         }

SEE ALSO
========

   perldata(1), perlref(1), perldsc(1)

AUTHOR
======

   Tom Christiansen <`tchrist@perl.com'>

   Last update: Thu Jun  4 16:16:23 MDT 1998


File: perl.info,  Node: perlmachten,  Next: perlos2,  Prev: perlhpux,  Up: Top

Perl version 5 on Power MachTen systems
***************************************

NAME
====

   README.machten - Perl version 5 on Power MachTen systems

DESCRIPTION
===========

   This document describes how to build Perl 5 on Power MachTen systems,
and discusses a few wrinkles in the implementation.

Compiling Perl 5 on MachTen
---------------------------

   To compile perl under MachTen 4.1.4 (and probably earlier versions):

     ./Configure -de
     make
     make test
     make install

   This builds and installs a statically-linked perl; MachTen's dynamic
linking facilities are not adequate to support Perl's use of dynamically
linked libraries.  (See `hints/machten.sh' for more information.)

   You should have at least 32 megabytes of free memory on your system
before running the make command.

   For much more information on building perl - for example, on how to
change the default installation directory - see INSTALL.

Failures during make test
-------------------------

op/lexassign.t
     This test may fail when first run after building perl.  It does not
     fail subsequently.  The cause is unknown.

pragma/warnings.t
     Test 257 fails due to a failure to warn about attempts to read from a
     filehandle which is a duplicate of stdout when stdout is attached to a
     pipe.  The output of the test contains a block comment which discusses
     a different failure, not applicable to MachTen.

     The root of the problem is that Machten does not assign a file type to
     either end of a pipe (see `stat' in this node), resulting, among
     other things in Perl's -p test failing on file descriptors belonging
     to pipes.  As a result, perl becomes confused, and the test for
     reading from a write-only file fails.  I am reluctant to patch perl
     to get around this, as it's clearly an OS bug (about which Tenon has
     been informed), and limited in its effect on practical Perl programs.

Using external modules
----------------------

   If warnings are enabled with Perl's -w command-line flag, you are
likely to see warnings when using external modules containing XS
(compiled) code:

     Subroutine DynaLoader::dl_error redefined at /usr/local/lib/perl5/5.6.0/powerpc-machten/DynaLoader.pm line 93.

   This is a harmless consequence of the static linking used for MachTen
perl.  You can suppress the warnings by using the more modern `-Mwarnings'
instead of the traditional -w.  (See *Note Perllexwarn: perllexwarn,.)

Building external modules
-------------------------

   To add an external module to perl, build in the normal way, which is
documented in *Note ExtUtils/MakeMaker: (pm.info)ExtUtils/MakeMaker,, or
which can be driven automatically by the CPAN module (see *Note CPAN:
(pm.info)CPAN,), which is part of the standard distribution.  If wou want
to install a module contains XS code (C or C++ source which compiles to
object code for linking with perl), you will have to replace your perl
binary with a new version containing the new statically-linked object
module.  The build process tells you how to do this.

   There is a gotcha, however, which users usually encounter immediately
they respond to CPAN's invitation to `install Bundle::CPAN'. When
installing a *bundle* - a group of modules which together achieve some
particular purpose, the installation process for later modules in the
bundle tends to assume that earlier modules have been fully installed and
are available for use.  This is not true on a statically-linked system for
earlier modules which contain XS code.  As a result the installation of
the bundle fails.  The work-around is not to install the bundle as a
one-shot operation, but instead to see what modules it contains, and
install these one-at-a-time by hand in the order given.

AUTHOR
======

   Dominic Dunlop <domo@computer.org>

DATE
====

   Version 1.0 2000-03-22


File: perl.info,  Node: perlmod,  Next: perlmodlib,  Prev: perlsub,  Up: Top

Perl modules (packages and symbol tables)
*****************************************

NAME
====

   perlmod - Perl modules (packages and symbol tables)

DESCRIPTION
===========

Packages
--------

   Perl provides a mechanism for alternative namespaces to protect
packages from stomping on each other's variables.  In fact, there's really
no such thing as a global variable in Perl .  The package statement
declares the compilation unit as being in the given namespace.  The scope
of the package declaration is from the declaration itself through the end
of the enclosing block, eval, or file, whichever comes first (the same
scope as the my() and local() operators).  Unqualified dynamic identifiers
will be in this namespace, except for those few identifiers that if
unqualified, default to the main package instead of the current one as
described below.  A package statement affects only dynamic
variables-including those you've used local() on-but not lexical variables
created with my().  Typically it would be the first declaration in a file
included by the do, require, or use operators.  You can switch into a
package in more than one place; it merely influences which symbol table is
used by the compiler for the rest of that block.  You can refer to
variables and filehandles in other packages by prefixing the identifier
with the package name and a double colon: `$Package::Variable'.  If the
package name is null, the main package is assumed.  That is, `$::sail' is
equivalent to `$main::sail'.

   The old package delimiter was a single quote, but double colon is now
the preferred delimiter, in part because it's more readable to humans, and
in part because it's more readable to emacs macros.  It also makes C++
programmers feel like they know what's going on-as opposed to using the
single quote as separator, which was there to make Ada programmers feel
like they knew what's going on.  Because the old-fashioned syntax is still
supported for backwards compatibility, if you try to use a string like
`"This is $owner's house"', you'll be accessing `$owner::s'; that is, the
$s variable in package owner, which is probably not what you meant.  Use
braces to disambiguate, as in `"This is ${owner}'s house"'.

   Packages may themselves contain package separators, as in
`$OUTER::INNER::var'.  This implies nothing about the order of name
lookups, however.  There are no relative packages: all symbols are either
local to the current package, or must be fully qualified from the outer
package name down.  For instance, there is nowhere within package `OUTER'
that `$INNER::var' refers to `$OUTER::INNER::var'.  It would treat package
`INNER' as a totally separate global package.

   Only identifiers starting with letters (or underscore) are stored in a
package's symbol table.  All other symbols are kept in package main,
including all punctuation variables, like $_.  In addition, when
unqualified, the identifiers STDIN, STDOUT, STDERR, ARGV, ARGVOUT, ENV,
INC, and SIG are forced to be in package main, even when used for other
purposes than their built-in one.  If you have a package called m, s, or
y, then you can't use the qualified form of an identifier because it would
be instead interpreted as a pattern match, a substitution, or a
transliteration.

   Variables beginning with underscore used to be forced into package
main, but we decided it was more useful for package writers to be able to
use leading underscore to indicate private variables and method names.  $_
is still global though.  See also `"Technical Note on the Syntax of
Variable Names"', *Note Perlvar: perlvar,.

   evaled strings are compiled in the package in which the eval() was
compiled.  (Assignments to `$SIG{}', however, assume the signal handler
specified is in the main package.  Qualify the signal handler name if you
wish to have a signal handler in a package.)  For an example, examine
`perldb.pl' in the Perl library.  It initially switches to the DB package
so that the debugger doesn't interfere with variables in the program you
are trying to debug.  At various points, however, it temporarily switches
back to the main package to evaluate various expressions in the context of
the main package (or wherever you came from).  See *Note Perldebug:
perldebug,.

   The special symbol __PACKAGE__ contains the current package, but cannot
(easily) be used to construct variables.

   See *Note Perlsub: perlsub, for other scoping issues related to my()
and local(), and *Note Perlref: perlref, regarding closures.

Symbol Tables
-------------

   The symbol table for a package happens to be stored in the hash of that
name with two colons appended.  The main symbol table's name is thus
`%main::', or `%::' for short.  Likewise symbol table for the nested
package mentioned earlier is named `%OUTER::INNER::'.

   The value in each entry of the hash is what you are referring to when
you use the `*name' typeglob notation.  In fact, the following have the
same effect, though the first is more efficient because it does the symbol
table lookups at compile time:

     local *main::foo    = *main::bar;
     local $main::{foo}  = $main::{bar};

   You can use this to print out all the variables in a package, for
instance.  The standard but antequated `dumpvar.pl' library and the CPAN
module Devel::Symdump make use of this.

   Assignment to a typeglob performs an aliasing operation, i.e.,

     *dick = *richard;

   causes variables, subroutines, formats, and file and directory handles
accessible via the identifier `richard' also to be accessible via the
identifier `dick'.  If you want to alias only a particular variable or
subroutine, assign a reference instead:

     *dick = \$richard;

   Which makes $richard and $dick the same variable, but leaves  @richard
and @dick as separate arrays.  Tricky, eh?

   This mechanism may be used to pass and return cheap references into or
from subroutines if you won't want to copy the whole thing.  It only works
when assigning to dynamic variables, not lexicals.

     %some_hash = ();			# can't be my()
     *some_hash = fn( \%another_hash );
     sub fn {
     	local *hashsym = shift;
     	# now use %hashsym normally, and you
     	# will affect the caller's %another_hash
     	my %nhash = (); # do what you want
     	return \%nhash;
     }

   On return, the reference will overwrite the hash slot in the symbol
table specified by the *some_hash typeglob.  This is a somewhat tricky way
of passing around references cheaply when you won't want to have to
remember to dereference variables explicitly.

   Another use of symbol tables is for making "constant" scalars.

     *PI = \3.14159265358979;

   Now you cannot alter $PI, which is probably a good thing all in all.
This isn't the same as a constant subroutine, which is subject to
optimization at compile-time.  This isn't.  A constant subroutine is one
prototyped to take no arguments and to return a constant expression.  See
*Note Perlsub: perlsub, for details on these.  The `use constant' pragma
is a convenient shorthand for these.

   You can say `*foo{PACKAGE}' and `*foo{NAME}' to find out what name and
package the *foo symbol table entry comes from.  This may be useful in a
subroutine that gets passed typeglobs as arguments:

     sub identify_typeglob {
         my $glob = shift;
         print 'You gave me ', *{$glob}{PACKAGE}, '::', *{$glob}{NAME}, "\n";
     }
     identify_typeglob *foo;
     identify_typeglob *bar::baz;

   This prints

     You gave me main::foo
     You gave me bar::baz

   The `*foo{THING}' notation can also be used to obtain references to the
individual elements of *foo, see *Note Perlref: perlref,.

   Subroutine definitions (and declarations, for that matter) need not
necessarily be situated in the package whose symbol table they occupy.
You can define a subroutine outside its package by explicitly qualifying
the name of the subroutine:

     package main;
     sub Some_package::foo { ... }   # &foo defined in Some_package

   This is just a shorthand for a typeglob assignment at compile time:

     BEGIN { *Some_package::foo = sub { ... } }

   and is not the same as writing:

     {
     	package Some_package;
     	sub foo { ... }
     }

   In the first two versions, the body of the subroutine is lexically in
the main package, not in Some_package. So something like this:

     package main;

     $Some_package::name = "fred";
     $main::name = "barney";

     sub Some_package::foo {
     	print "in ", __PACKAGE__, ": \$name is '$name'\n";
     }

     Some_package::foo();

   prints:

     in main: $name is 'barney'

   rather than:

     in Some_package: $name is 'fred'

   This also has implications for the use of the SUPER:: qualifier (see
*Note Perlobj: perlobj,).

Package Constructors and Destructors
------------------------------------

   Four special subroutines act as package constructors and destructors.
These are the BEGIN, CHECK, `INIT', and END routines.  The sub is optional
for these routines.

   A BEGIN subroutine is executed as soon as possible, that is, the moment
it is completely defined, even before the rest of the containing file is
parsed.  You may have multiple BEGIN blocks within a file-they will
execute in order of definition.  Because a BEGIN block executes
immediately, it can pull in definitions of subroutines and such from other
files in time to be visible to the rest of the file.  Once a BEGIN has
run, it is immediately undefined and any code it used is returned to
Perl's memory pool.  This means you can't ever explicitly call a BEGIN.

   An END subroutine is executed as late as possible, that is, after perl
has finished running the program and just before the interpreter is being
exited, even if it is exiting as a result of a die() function.  (But not
if it's polymorphing into another program via exec, or being blown out of
the water by a signal-you have to trap that yourself (if you can).)  You
may have multiple END blocks within a file-they will execute in reverse
order of definition; that is: last in, first out (LIFO).  END blocks are
not executed when you run perl with the -c switch.

   Inside an END subroutine, $? contains the value that the program is
going to pass to exit().  You can modify $? to change the exit value of
the program.  Beware of changing $? by accident (e.g. by running something
via system).

   Similar to BEGIN blocks, `INIT' blocks are run just before the Perl
runtime begins execution, in "first in, first out" (FIFO) order.  For
example, the code generators documented in `perlcc' in this node make use
of `INIT' blocks to initialize and resolve pointers to XSUBs.

   Similar to END blocks, CHECK blocks are run just after the Perl compile
phase ends and before the run time begins, in LIFO order.  CHECK blocks
are again useful in the Perl compiler suite to save the compiled state of
the program.

   When you use the -n and -p switches to Perl, BEGIN and END work just as
they do in *awk*, as a degenerate case.  As currently implemented (and
subject to change, since its inconvenient at best), both BEGIN and<END>
blocks are run when you use the -c switch for a compile-only syntax check,
although your main code is not.

Perl Classes
------------

   There is no special class syntax in Perl, but a package may act as a
class if it provides subroutines to act as methods.  Such a package may
also derive some of its methods from another class (package) by listing
the other package name(s) in its global @ISA array (which must be a
package global, not a lexical).

   For more on this, see *Note Perltoot: perltoot, and *Note Perlobj:
perlobj,.

Perl Modules
------------

   A module is just a set of related function in a library file a Perl
package with the same name as the file.  It is specifically designed to be
reusable by other modules or programs.  It may do this by providing a
mechanism for exporting some of its symbols into the symbol table of any
package using it.  Or it may function as a class definition and make its
semantics available implicitly through method calls on the class and its
objects, without explicitly exportating anything.  Or it can do a little
of both.

   For example, to start a traditional, non-OO module called Some::Module,
create a file called `Some/Module.pm' and start with this template:

     package Some::Module;  # assumes Some/Module.pm

     use strict;
     use warnings;

     BEGIN {
         use Exporter   ();
         our ($VERSION, @ISA, @EXPORT, @EXPORT_OK, %EXPORT_TAGS);

     # set the version for version checking
     $VERSION     = 1.00;
     # if using RCS/CVS, this may be preferred
     $VERSION = do { my @r = (q$Revision: 2.21 $ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r }; # must be all one line, for MakeMaker

     @ISA         = qw(Exporter);
     @EXPORT      = qw(&func1 &func2 &func4);
     %EXPORT_TAGS = ( );     # eg: TAG => [ qw!name1 name2! ],

     # your exported package globals go here,
     # as well as any optionally exported functions
     @EXPORT_OK   = qw($Var1 %Hashit &func3);
         }
         our @EXPORT_OK;

     # non-exported package globals go here
     our @more;
     our $stuff;

     # initialize package globals, first exported ones
     $Var1   = '';
     %Hashit = ();

     # then the others (which are still accessible as $Some::Module::stuff)
     $stuff  = '';
     @more   = ();

     # all file-scoped lexicals must be created before
     # the functions below that use them.

     # file-private lexicals go here
     my $priv_var    = '';
     my %secret_hash = ();

     # here's a file-private function as a closure,
     # callable as &$priv_func;  it cannot be prototyped.
     my $priv_func = sub {
         # stuff goes here.
     };

     # make all your functions, whether exported or not;
     # remember to put something interesting in the {} stubs
     sub func1      {}    # no prototype
     sub func2()    {}    # proto'd void
     sub func3($$)  {}    # proto'd to 2 scalars

     # this one isn't exported, but could be called!
     sub func4(\%)  {}    # proto'd to 1 hash ref

     END { }       # module clean-up code here (global destructor)

     ## YOUR CODE GOES HERE

     1;  # don't forget to return a true value from the file

   Then go on to declare and use your variables in functions without any
qualifications.  See *Note Exporter: (pm.info)Exporter, and the *Note
Perlmodlib: perlmodlib, for details on mechanics and style issues in
module creation.

   Perl modules are included into your program by saying

     use Module;

   or

     use Module LIST;

   This is exactly equivalent to

     BEGIN { require Module; import Module; }

   or

     BEGIN { require Module; import Module LIST; }

   As a special case

     use Module ();

   is exactly equivalent to

     BEGIN { require Module; }

   All Perl module files have the extension `.pm'.  The use operator
assumes this so you don't have to spell out "`Module.pm'" in quotes.  This
also helps to differentiate new modules from old `.pl' and `.ph' files.
Module names are also capitalized unless they're functioning as pragmas;
pragmas are in effect compiler directives, and are sometimes called
"pragmatic modules" (or even "pragmata" if you're a classicist).

   The two statements:

     require SomeModule;
     require "SomeModule.pm";

   differ from each other in two ways.  In the first case, any double
colons in the module name, such as Some::Module, are translated into your
system's directory separator, usually "/".   The second case does not, and
would have to be specified literally.  The other difference is that seeing
the first require clues in the compiler that uses of indirect object
notation involving "SomeModule", as in `$ob = purge SomeModule', are
method calls, not function calls.  (Yes, this really can make a
difference.)

   Because the use statement implies a BEGIN block, the importing of
semantics happens as soon as the use statement is compiled, before the
rest of the file is compiled.  This is how it is able to function as a
pragma mechanism, and also how modules are able to declare subroutines
that are then visible as list or unary operators for the rest of the
current file.  This will not work if you use require instead of use.  With
require you can get into this problem:

     require Cwd;		# make Cwd:: accessible
     $here = Cwd::getcwd();

     use Cwd;			# import names from Cwd::
     $here = getcwd();

     require Cwd;	    	# make Cwd:: accessible
     $here = getcwd(); 		# oops! no main::getcwd()

   In general, `use Module ()' is recommended over `require Module',
because it determines module availability at compile time, not in the
middle of your program's execution.  An exception would be if two modules
each tried to use each other, and each also called a function from that
other module.  In that case, it's easy to use requires instead.

   Perl packages may be nested inside other package names, so we can have
package names containing `::'.  But if we used that package name directly
as a filename it would makes for unwieldy or impossible filenames on some
systems.  Therefore, if a module's name is, say, Text::Soundex, then its
definition is actually found in the library file `Text/Soundex.pm'.

   Perl modules always have a `.pm' file, but there may also be
dynamically linked executables (often ending in `.so') or autoloaded
subroutine definitions (often ending in `.al' associated with the module.
If so, these will be entirely transparent to the user of the module.  It
is the responsibility of the `.pm' file to load (or arrange to autoload)
any additional functionality.  For example, although the POSIX module
happens to do both dynamic loading and autoloading, but the user can say
just `use POSIX' to get it all.

SEE ALSO
========

   See *Note Perlmodlib: perlmodlib, for general style issues related to
building Perl modules and classes, as well as descriptions of the standard
library and CPAN, *Note Exporter: (pm.info)Exporter, for how Perl's
standard import/export mechanism works, *Note Perltoot: perltoot, and
*Note Perltootc: perltootc, for an in-depth tutorial on creating classes,
*Note Perlobj: perlobj, for a hard-core reference document on objects,
*Note Perlsub: perlsub, for an explanation of functions and scoping, and
*Note Perlxstut: perlxstut, and *Note Perlguts: perlguts, for more
information on writing extension modules.


File: perl.info,  Node: perlmodinstall,  Next: perlform,  Prev: perlmodlib,  Up: Top

Installing CPAN Modules
***********************

NAME
====

   perlmodinstall - Installing CPAN Modules

DESCRIPTION
===========

   You can think of a module as the fundamental unit of reusable Perl
code; See *Note Perlmod: perlmod, for details.  Whenever anyone creates a
chunk of Perl code that they think will be useful to the world, they
register as a Perl developer at
http://www.perl.com/CPAN/modules/04pause.html so that they can then upload
their code to CPAN.  CPAN is the Comprehensive Perl Archive Network and
can be accessed at http://www.perl.com/CPAN/, or searched via
http://cpan.perl.com/ and
http://theory.uwinnipeg.ca/mod_perl/cpan-search.pl .

   This documentation is for people who want to download CPAN modules and
install them on their own computer.

PREAMBLE
--------

   You have a file ending in `.tar.gz' (or, less often, `.zip').  You know
there's a tasty module inside.  You must now take four steps:

DECOMPRESS the file
UNPACK the file into a directory
BUILD the module (sometimes unnecessary)
INSTALL the module.
   Here's how to perform each step for each operating system.  This is not
a substitute for reading the README and INSTALL files that might have come
with your module!

   Also note that these instructions are tailored for installing the
module into your system's repository of Perl modules.  But you can install
modules into any directory you wish.  For instance, where I say `perl
Makefile.PL', you can substitute `perl Makefile.PL
PREFIX=/my/perl_directory' to install the modules into
`/my/perl_directory'.  Then you can use the modules from your Perl
programs with `use lib "/my/perl_directory/lib/site_perl"' or sometimes
just `use "/my/perl_directory"'.

   * *If you're on Unix,*

     You can use Andreas Koenig's CPAN module (which comes standard with
     Perl, or can itself be downloaded from
     http://www.perl.com/CPAN/modules/by-module/CPAN) to automate the
     following steps, from DECOMPRESS through INSTALL.

     A. DECOMPRESS

     Decompress the file with `gzip -d yourmodule.tar.gz'

     You can get gzip from ftp://prep.ai.mit.edu/pub/gnu.

     Or, you can combine this step with the next to save disk space:

          gzip -dc yourmodule.tar.gz | tar -xof -

     B. UNPACK

     Unpack the result with `tar -xof yourmodule.tar'

     C. BUILD

     Go into the newly-created directory and type:

          perl Makefile.PL
          make
          make test

     D. INSTALL

     While still in that directory, type:

          make install

     Make sure you have appropriate permissions to install the module in
     your Perl 5 library directory.  Often, you'll need to be root.

     Perl maintains a record of all module installations.  To look at this
     list, simply type:

          perldoc perllocal

     That's all you need to do on Unix systems with dynamic linking.  Most
     Unix systems have dynamic linking-if yours doesn't, or if for another
     reason you have a statically-linked perl, and the module requires
     compilation, you'll need to build a new Perl binary that includes the
     module.  Again, you'll probably need to be root.

   * *If you're running Windows 95 or NT with the ActiveState port of Perl*

          A. DECOMPRESS

     You can use the shareware *Winzip* program ( http://www.winzip.com )
     to decompress and unpack modules.

          B. UNPACK

     If you used WinZip, this was already done for you.

          C. BUILD

     Does the module require compilation (i.e. does it have files that end
     in .xs, .c, .h, .y, .cc, .cxx, or .C)?  If it does, you're on your
     own.  You can try compiling it yourself if you have a C compiler.  If
     you're successful, consider uploading the resulting binary to CPAN
     for others to use.  If it doesn't, go to INSTALL.

          D. INSTALL

     Copy the module into your Perl's lib directory.  That'll be one of
     the directories you see when you type

          perl -e 'print "@INC"'

   * *If you're running Windows 95 or NT with the core Windows
     distribution of Perl,*

          A. DECOMPRESS

     When you download the module, make sure it ends in either `.tar.gz'
     or `.zip'.  Windows browsers sometimes download `.tar.gz' files as
     `_tar.tar', because early versions of Windows prohibited more than
     one dot in a filename.

     You can use the shareware *WinZip* program ( http://www.winzip.com )
     to decompress and unpack modules.

     Or, you can use InfoZip's unzip utility (
     http://www.cdrom.com/pub/infozip/ ) to uncompress `.zip' files; type
     `unzip yourmodule.zip' in your shell.

     Or, if you have a working `tar' and `gzip', you can type

          gzip -cd yourmodule.tar.gz | tar xvf -

     in the shell to decompress `yourmodule.tar.gz'.  This will UNPACK
     your module as well.

          B. UNPACK

     The methods in DECOMPRESS will have done this for you.

          C. BUILD

     Go into the newly-created directory and type:

          perl Makefile.PL
          dmake
          dmake test

     Depending on your perl configuration, `dmake' might not be available.
     You might have to substitute whatever `perl -V:make' says. (Usually,
     that will be `nmake' or make.)

          D. INSTALL

     While still in that directory, type:

          dmake install

   * *If you're using a Macintosh,*

     A. DECOMPRESS

     In general, all Macintosh decompression utilities mentioned here can
     be found in the Info-Mac Hyperarchive (
     http://hyperarchive.lcs.mit.edu/HyperArchive.html ).  Specificly the
     "Commpress & Translate" listing (







     http://hyperarchive.lcs.mit.edu/HyperArchive/Abstracts/cmp/HyperArchive.html
     ).

     You can either use the shareware *StuffIt Expander* program (
     http://www.aladdinsys.com/expander/ ) in combination with *DropStuff
     with Expander Enhancer* ( http://www.aladdinsys.com/dropstuff/ ) or
     the freeware *MacGzip* program (
     http://persephone.cps.unizar.es/general/gente/spd/gzip/gzip.html ).

     B. UNPACK

     If you're using DropStuff or Stuffit, you can just extract the tar
     archive.  Otherwise, you can use the freeware *suntar* or Tar (
     http://hyperarchive.lcs.mit.edu/HyperArchive/Archive/cmp/ ).

     C. BUILD

     Does the module require compilation?

     1. If it does,

     Overview: You need MPW and a combination of new and old CodeWarrior
     compilers for MPW and libraries.  Makefiles created for building under
     MPW use Metrowerks compilers.  It's most likely possible to build
     without other compilers, but it has not been done successfully, to our
     knowledge.  Read the documentation in *MacPerl: Power and Ease* (
     http://www.ptf.com/macperl/ ) on porting/building extensions, or find
     an existing precompiled binary, or hire someone to build it for you.

     Or, ask someone on the mac-perl mailing list (mac-perl@iis.ee.ethz.ch)
     to build it for you.  To subscribe to the mac-perl mailing list, send
     mail to mac-perl-request@iis.ee.ethz.ch.

     2. If the module doesn't require compilation, go to INSTALL.

     D. INSTALL

     Make sure the newlines for the modules are in Mac format, not Unix
     format.  If they are not then you might have decompressed them
     incorrectly.  Check your decompression and unpacking utilities
     settings to make sure they are translating text files properly.

     As a last resort, you can use the perl one-liner:

          perl -i.bak -pe 's/(?:\015)?\012/\015/g' <filenames>

     on the source files.

     Move the files manually into the correct folders.

     Move the files to their final destination: This will most likely be
     in `$ENV{MACPERL}site_lib:' (i.e., `HD:MacPerl folder:site_lib:').
     You can add new paths to the default `@INC' in the Preferences menu
     item in the MacPerl application (`$ENV{MACPERL}site_lib:' is added
     automagically).  Create whatever directory structures are required
     (i.e., for Some::Module, create `$ENV{MACPERL}site_lib:Some:' and put
     `Module.pm' in that directory).

     Run the following script (or something like it):

          #!perl -w
          use AutoSplit;
          my $dir = "${MACPERL}site_perl";
          autosplit("$dir:Some:Module.pm", "$dir:auto", 0, 1, 1);

     Eventually there should be a way to automate the installation
     process; some solutions exist, but none are ready for the general
     public yet.

   * *If you're on the DJGPP port of DOS,*

          A. DECOMPRESS

     djtarx ( ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2/ ) will both
     uncompress and unpack.

          B. UNPACK

     See above.

          C. BUILD

     Go into the newly-created directory and type:

          perl Makefile.PL
          make
          make test

     You will need the packages mentioned in `README.dos' in the Perl
     distribution.

          D. INSTALL

     While still in that directory, type:

          make install

     You will need the packages mentioned in `README.dos' in the Perl
     distribution.

   * *If you're on OS/2,*

     Get the EMX development suite and gzip/tar, from either Hobbes (
     http://hobbes.nmsu.edu ) or Leo ( http://www.leo.org ), and then
     follow the instructions for Unix.

   * *If you're on VMS,*

     When downloading from CPAN, save your file with a `.tgz' extension
     instead of `.tar.gz'.  All other periods in the filename should be
     replaced with underscores.  For example, `Your-Module-1.33.tar.gz'
     should be downloaded as `Your-Module-1_33.tgz'.

     A. DECOMPRESS

     Type

          gzip -d Your-Module.tgz

     or, for zipped modules, type

          unzip Your-Module.zip

     Executables for gzip, zip, and VMStar ( Alphas:
     http://www.openvms.digital.com/freeware/000TOOLS/ALPHA/ and Vaxen:
     http://www.openvms.digital.com/freeware/000TOOLS/VAX/ ).

     gzip and tar are also available at ftp://ftp.digital.com/pub/VMS.

     Note that GNU's gzip/gunzip is not the same as Info-ZIP's zip/unzip
     package.  The former is a simple compression tool; the latter permits
     creation of multi-file archives.

     B. UNPACK

     If you're using VMStar:

          VMStar xf Your-Module.tar

     Or, if you're fond of VMS command syntax:

          tar/extract/verbose Your_Module.tar

     C. BUILD

     Make sure you have MMS (from Digital) or the freeware MMK ( available
     from MadGoat at  http://www.madgoat.com ).  Then type this to create
     the DESCRIP.MMS for the module:

          perl Makefile.PL

     Now you're ready to build:

          mms
          mms test

     Substitute `mmk' for `mms' above if you're using MMK.

     D. INSTALL

     Type

          mms install

     Substitute `mmk' for `mms' above if you're using MMK.

   * *If you're on MVS*,

     Introduce the `.tar.gz' file into an HFS as binary; don't translate
     from ASCII to EBCDIC.

     A. DECOMPRESS

          Decompress the file with C<gzip -d yourmodule.tar.gz>

          You can get gzip from
          http://www.s390.ibm.com/products/oe/bpxqp1.html.

     B. UNPACK

     Unpack the result with

          pax -o to=IBM-1047,from=ISO8859-1 -r < yourmodule.tar

     The BUILD and INSTALL steps are identical to those for Unix.  Some
     modules generate Makefiles that work better with GNU make, which is
     available from http://www.mks.com/s390/gnu/index.htm.

HEY
===

   If you have any suggested changes for this page, let me know.  Please
don't send me mail asking for help on how to install your modules.  There
are too many modules, and too few Orwants, for me to be able to answer or
even acknowledge all your questions.  Contact the module author instead,
or post to comp.lang.perl.modules, or ask someone familiar with Perl on
your operating system.

AUTHOR
======

   Jon Orwant

   orwant@tpj.com

   The Perl Journal, http://tpj.com

   with invaluable help from Brandon Allbery, Charles Bailey, Graham Barr,
Dominic Dunlop, Jarkko Hietaniemi, Ben Holzman, Tom Horsley, Nick
Ing-Simmons, Tuomas J. Lukka, Laszlo Molnar, Chris Nandor, Alan Olsen,
Peter Prymmer, Gurusamy Sarathy, Christoph Spalinger, Dan Sugalski, Larry
Virden, and Ilya Zakharevich.

   July 22, 1998

COPYRIGHT
=========

   Copyright (C) 1998 Jon Orwant.  All Rights Reserved.

   Permission is granted to make and distribute verbatim copies of this
documentation provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of this
documentation under the conditions for verbatim copying, provided also
that they are marked clearly as modified versions, that the authors' names
and title are unchanged (though subtitles and additional authors' names
may be added), and that the entire resulting derived work is distributed
under the terms of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
documentation into another language, under the above conditions for
modified versions.


File: perl.info,  Node: perlmodlib,  Next: perlmodinstall,  Prev: perlmod,  Up: Top

constructing new Perl modules and finding existing ones
*******************************************************

NAME
====

   perlmodlib - constructing new Perl modules and finding existing ones

DESCRIPTION
===========

THE PERL MODULE LIBRARY
=======================

   Many modules are included the Perl distribution.  These are described
below, and all end in `.pm'.  You may discover compiled library file
(usually ending in `.so') or small pieces of modules to be autoloaded
(ending in `.al'); these were automatically generated by the installation
process.  You may also discover files in the library directory that end in
either `.pl' or `.ph'.  These are old libraries supplied so that old
programs that use them still run.  The `.pl' files will all eventually be
converted into standard modules, and the `.ph' files made by h2ph will
probably end up as extension modules made by h2xs.  (Some `.ph' values may
already be available through the POSIX, Errno, or Fcntl modules.)  The
*pl2pm* file in the distribution may help in your conversion, but it's
just a mechanical process and therefore far from bulletproof.

Pragmatic Modules
-----------------

   They work somewhat like compiler directives (pragmata) in that they
tend to affect the compilation of your program, and thus will usually work
well only when used within a use, or no.  Most of these are lexically
scoped, so an inner BLOCK may countermand them by saying:

     no integer;
     no strict 'refs';
     no warnings;

   which lasts until the end of that BLOCK.

   Some pragmas are lexically scoped-typically those that affect the $^H
hints variable.  Others affect the current package instead, like `use
vars' and `use subs', which allow you to predeclare a variables or
subroutines within a particular file rather than just a block.  Such
declarations are effective for the entire file for which they were
declared.  You cannot rescind them with `no vars' or `no subs'.

   The following pragmas are defined (and have their own documentation).

attributes
     Get/set subroutine or variable attributes

attrs
     Set/get attributes of a subroutine (deprecated)

autouse
     Postpone load of modules until a function is used

base
     Establish IS-A relationship with base class at compile time

blib
     Use MakeMaker's uninstalled version of a package

caller
     Inherit pragmatic attributes from caller's context

charnames
     Define character names for `\N{named}' string literal escape.

constant
     Declare constants

diagnostics
     Force verbose warning diagnostics

fields
     Declare a class's attribute fields at compile-time

filetest
     Control the filetest operators like -r, -w for AFS, etc.

integer
     Compute arithmetic in integer instead of double

less
     Request less of something from the compiler (unimplemented)

lib
     Manipulate @INC at compile time

locale
     Use or avoid POSIX locales for built-in operations

ops
     Restrict unsafe operations when compiling

overload
     Overload Perl operations

re
     Alter regular expression behavior

sigtrap
     Enable simple signal handling

strict
     Restrict unsafe constructs

subs
     Predeclare subroutine names

utf8
     Turn on UTF-8 and Unicode support

vars
     Predeclare global variable names (obsoleted by our())

warnings
     Control optional warnings

Standard Modules
----------------

   Standard, bundled modules are all expected to behave in a well-defined
manner with respect to namespace pollution because they use the Exporter
module.  See their own documentation for details.

AnyDBM_File
     Provide framework for multiple DBM libraries

AutoLoader
     Load subroutines only on demand

AutoSplit
     Split a package for autoloading

B
     Guts of the Perl code generator (aka compiler)

B::Asmdata
     Autogenerated data about Perl ops, used to generate bytecode

B::Assembler
     Assemble Perl bytecode

B::Bblock
     Walk basic blocks

B::Bytecode
     Perl compiler's bytecode backend

B::C
     Perl compiler's C backend

B::CC
     Perl compiler's optimized C translation backend

B::Debug
     Walk Perl syntax tree, printing debug info about ops

B::Deparse
     Perl compiler backend to produce Perl code

B::Disassembler
     Disassemble Perl bytecode

B::Lint
     Module to catch dubious constructs

B::Showlex
     Show lexical variables used in functions or files

B::Stackobj
     Helper module for CC backend

     B::Stash - XXX NFI XXX

B::Terse
     Walk Perl syntax tree, printing terse info about ops

B::Xref
     Generates cross reference reports for Perl programs

Benchmark
     Benchmark running times of code

ByteLoader
     Load byte-compiled Perl code

CGI
     Simple Common Gateway Interface class

CGI::Apache
     Make things work with CGI.pm against Perl-Apache API

CGI::Carp
     CGI routines for writing to the HTTPD (or other) error log

CGI::Cookie
     Interface to Netscape Cookies

CGI::Fast
     CGI Interface for Fast CGI

CGI::Pretty
     Module to produce nicely formatted HTML code

CGI::Push
     Simple Interface to Server Push

CGI::Switch
     Try more than one constructors and return the first object available

CPAN
     Query, download, and build Perl modules from CPAN sites

CPAN::FirstTime
     Utility for CPAN::Config file initialization

CPAN::Nox
     Wrapper around CPAN.pm without using any XS module

Carp
     Act like warn/die from perspective of caller

Carp::Heavy
     Carp guts

Class::Struct
     Declare struct-like datatypes as Perl classes

Config
     Access Perl configuration information

Cwd
     Get pathname of current working directory

DB
     Programmatic interface to the Perl debugging API (experimental)

DB_File
     Perl5 access to Berkeley DB version 1.x

Data::Dumper
     Serialize Perl data structures

Devel::DProf
     A Perl execution profiler

Devel::Peek
     A data debugging tool for the XS programmer

Devel::SelfStubber
     Generate stubs for a SelfLoading module

DirHandle
     Supply object methods for directory handles

Dumpvalue
     Provide screen dump of Perl data

DynaLoader
     Dynamically load C libraries into Perl code

English
     Use English (or awk) names for ugly punctuation variables

Env
     Access environment variables as regular ones

Errno
     Load the libc errno.h defines

Exporter
     Implement default import method for modules

Exporter::Heavy
     Exporter guts

ExtUtils::Command
     Utilities to replace common Unix commands in Makefiles etc.

ExtUtils::Embed
     Utilities for embedding Perl in C/C++ programs

ExtUtils::Install
     Install files from here to there

ExtUtils::Installed
     Inventory management of installed modules

ExtUtils::Liblist
     Determine libraries to use and how to use them

ExtUtils::MM_Cygwin
     Methods to override Unix behavior in ExtUtils::MakeMaker

ExtUtils::MM_OS2
     Methods to override Unix behavior in ExtUtils::MakeMaker

ExtUtils::MM_Unix
     Methods used by ExtUtils::MakeMaker

ExtUtils::MM_VMS
     Methods to override Unix behavior in ExtUtils::MakeMaker

ExtUtils::MM_Win32
     Methods to override Unix behavior in ExtUtils::MakeMaker

ExtUtils::MakeMaker
     Create an extension Makefile

ExtUtils::Manifest
     Utilities to write and check a MANIFEST file

     ExtUtils::Miniperl, writemain - Write the C code for perlmain.c

ExtUtils::Mkbootstrap
     Make a bootstrap file for use by DynaLoader

ExtUtils::Mksymlists
     Write linker options files for dynamic extension

ExtUtils::Packlist
     Manage .packlist files

ExtUtils::testlib
     Add blib/* directories to @INC

Fatal
     Replace functions with equivalents which succeed or die

Fcntl
     Load the libc fcntl.h defines

File::Basename
     Split a pathname into pieces

File::CheckTree
     Run many filetest checks on a tree

File::Compare
     Compare files or filehandles

File::Copy
     Copy files or filehandles

File::DosGlob
     DOS-like globbing and then some

File::Find
     Traverse a file tree

File::Glob
     Perl extension for BSD filename globbing

File::Path
     Create or remove a series of directories

File::Spec
     Portably perform operations on file names

File::Spec::Functions
     Portably perform operations on file names

File::Spec::Mac
     File::Spec for MacOS

File::Spec::OS2
     Methods for OS/2 file specs

File::Spec::Unix
     Methods used by File::Spec

File::Spec::VMS
     Methods for VMS file specs

File::Spec::Win32
     Methods for Win32 file specs

File::stat
     By-name interface to Perl's built-in stat() functions

FileCache
     Keep more files open than the system permits

FileHandle
     Supply object methods for filehandles

FindBin
     Locate installation directory of running Perl program

GDBM_File
     Access to the gdbm library

Getopt::Long
     Extended processing of command line options

Getopt::Std
     Process single-character switches with switch clustering

I18N::Collate
     Compare 8-bit scalar data according to current locale

IO
     Front-end to load various IO modules

IO::Dir
     Supply object methods for directory handles

IO::File
     Supply object methods for filehandles

IO::Handle
     Supply object methods for I/O handles

IO::Pipe
     Supply object methods for pipes

IO::Poll
     Object interface to system poll call

IO::Seekable
     Supply seek based methods for I/O objects

IO::Select
     OO interface to the select system call

IO::Socket
     Object interface to socket communications

IO::Socket::INET
     Object interface for AF_INET domain sockets

IO::Socket::UNIX
     Object interface for AF_UNIX domain sockets

IPC::Msg
     SysV Msg IPC object class

IPC::Open2
     Open a process for both reading and writing

IPC::Open3
     Open a process for reading, writing, and error handling

IPC::Semaphore
     SysV Semaphore IPC object class

IPC::SysV
     SysV IPC constants

Math::BigFloat
     Arbitrary length float math package

Math::BigInt
     Arbitrary size integer math package

Math::Complex
     Complex numbers and associated mathematical functions

Math::Trig
     Trigonometric functions

Net::Ping
     Check a remote host for reachability

Net::hostent
     By-name interface to Perl's built-in gethost*() functions

Net::netent
     By-name interface to Perl's built-in getnet*() functions

Net::protoent
     By-name interface to Perl's built-in getproto*() functions

Net::servent
     By-name interface to Perl's built-in getserv*() functions

O
     Generic interface to Perl Compiler backends

Opcode
     Disable named opcodes when compiling Perl code

POSIX
     Perl interface to IEEE Std 1003.1

Pod::Checker
     Check pod documents for syntax errors

Pod::Html
     Module to convert pod files to HTML

Pod::InputObjects
     Manage POD objects

Pod::Man
     Convert POD data to formatted *roff input

Pod::Parser
     Base class for creating POD filters and translators

Pod::Select
     Extract selected sections of POD from input

Pod::Text
     Convert POD data to formatted ASCII text

Pod::Text::Color
     Convert POD data to formatted color ASCII text

Pod::Usage
     Print a usage message from embedded pod documentation

SDBM_File
     Tied access to sdbm files

Safe
     Compile and execute code in restricted compartments

Search::Dict
     Search for key in dictionary file

SelectSaver
     Save and restore selected file handle

SelfLoader
     Load functions only on demand

Shell
     Run shell commands transparently within Perl

Socket
     Load the libc socket.h defines and structure manipulators

Symbol
     Manipulate Perl symbols and their names

Sys::Hostname
     Try every conceivable way to get hostname

Sys::Syslog
     Interface to the libc syslog(3) calls

Term::Cap
     Termcap interface

Term::Complete
     Word completion module

Term::ReadLine
     Interface to various `readline' packages.

Test
     Provides a simple framework for writing test scripts

Test::Harness
     Run Perl standard test scripts with statistics

Text::Abbrev
     Create an abbreviation table from a list

Text::ParseWords
     Parse text into a list of tokens or array of arrays

Text::Soundex
     Implementation of the Soundex Algorithm as described by Knuth

     Text::Tabs - expand and unexpand tabs per expand(1) and unexpand(1)

Text::Wrap
     Line wrapping to form simple paragraphs

Tie::Array
     Base class for tied arrays

Tie::Handle
     Base class definitions for tied handles

Tie::Hash
     Base class definitions for tied hashes

Tie::RefHash
     Use references as hash keys

Tie::Scalar
     Base class definitions for tied scalars

Tie::SubstrHash
     Fixed-table-size, fixed-key-length hashing

Time::Local
     Efficiently compute time from local and GMT time

Time::gmtime
     By-name interface to Perl's built-in gmtime() function

Time::localtime
     By-name interface to Perl's built-in localtime() function

Time::tm
     Internal object used by Time::gmtime and Time::localtime

UNIVERSAL
     Base class for ALL classes (blessed references)

User::grent
     By-name interface to Perl's built-in getgr*() functions

User::pwent
     By-name interface to Perl's built-in getpw*() functions

   To find out all modules installed on your system, including those
without documentation or outside the standard release, just do this:

     % find `perl -e 'print "@INC"'` -name '*.pm' -print

   To get a log of all module distributions which have been installed
since perl was installed, just do:

     % perldoc perllocal

   Modules should all have their own documentation installed and accessible
via your system man(1) command, or via the perldoc program.  If you do not
have a find program, you can use the Perl find2perl program instead, which
generates Perl code as output you can run through perl.  If you have a man
program but it doesn't find your modules, you'll have to fix your manpath.
See *Note Perl: perl, for details.

Extension Modules
-----------------

   Extension modules are written in C (or a mix of Perl and C).  They are
usually dynamically loaded into Perl if and when you need them, but may
also be be linked in statically.  Supported extension modules include
Socket, Fcntl, and POSIX.

   Many popular C extension modules do not come bundled (at least, not
completely) due to their sizes, volatility, or simply lack of time for
adequate testing and configuration across the multitude of platforms on
which Perl was beta-tested.  You are encouraged to look for them on CPAN
(described below), or using web search engines like Alta Vista or Deja
News.

CPAN
====

   CPAN stands for Comprehensive Perl Archive Network; it's a globally
replicated trove of Perl materials, including documentation, style guides,
tricks and trap, alternate ports to non-Unix systems and occasional binary
distributions for these.   Search engines for CPAN can be found at
http://cpan.perl.com/ and at
http://theory.uwinnipeg.ca/mod_perl/cpan-search.pl .

   Most importantly, CPAN includes around a thousand unbundled modules,
some of which require a C compiler to build.  Major categories of modules
are:

   * Language Extensions and Documentation Tools

   * Development Support

   * Operating System Interfaces

   * Networking, Device Control (modems) and InterProcess Communication

   * Data Types and Data Type Utilities

   * Database Interfaces

   * User Interfaces

   * Interfaces to / Emulations of Other Programming Languages

   * File Names, File Systems and File Locking (see also File Handles)

   * String Processing, Language Text Processing, Parsing, and Searching

   * Option, Argument, Parameter, and Configuration File Processing

   * Internationalization and Locale

   * Authentication, Security, and Encryption

   * World Wide Web, HTML, HTTP, CGI, MIME

   * Server and Daemon Utilities

   * Archiving and Compression

   * Images, Pixmap and Bitmap Manipulation, Drawing, and Graphing

   * Mail and Usenet News

   * Control Flow Utilities (callbacks and exceptions etc)

   * File Handle and Input/Output Stream Utilities

   * Miscellaneous Modules

   Registered CPAN sites as of this writing include the following.  You
should try to choose one close to you:

Africa
          South Africa   ftp://ftp.is.co.za/programming/perl/CPAN/
                         ftp://ftp.saix.net/pub/CPAN/
                         ftp://ftp.sun.ac.za/CPAN/
                         ftp://ftpza.co.za/pub/mirrors/cpan/

Asia
          China          ftp://freesoft.cei.gov.cn/pub/languages/perl/CPAN/
          Hong Kong      ftp://ftp.pacific.net.hk/pub/mirror/CPAN/
          Indonesia      ftp://malone.piksi.itb.ac.id/pub/CPAN/
          Israel         ftp://bioinfo.weizmann.ac.il/pub/software/perl/CPAN/
          Japan          ftp://ftp.dti.ad.jp/pub/lang/CPAN/
                         ftp://ftp.jaist.ac.jp/pub/lang/perl/CPAN/
                         ftp://ftp.lab.kdd.co.jp/lang/perl/CPAN/
                         ftp://ftp.meisei-u.ac.jp/pub/CPAN/
                         ftp://ftp.ring.gr.jp/pub/lang/perl/CPAN/
                         ftp://mirror.nucba.ac.jp/mirror/Perl/
          Saudi-Arabia   ftp://ftp.isu.net.sa/pub/CPAN/
          Singapore      ftp://ftp.nus.edu.sg/pub/unix/perl/CPAN/
          South Korea    ftp://ftp.bora.net/pub/CPAN/
                         ftp://ftp.kornet.net/pub/CPAN/
                         ftp://ftp.nuri.net/pub/CPAN/
          Taiwan         ftp://coda.nctu.edu.tw/computer-languages/perl/CPAN/
                         ftp://ftp.ee.ncku.edu.tw/pub3/perl/CPAN/
                         ftp://ftp1.sinica.edu.tw/pub1/perl/CPAN/
          Thailand       ftp://ftp.nectec.or.th/pub/mirrors/CPAN/

Australasia
          Australia      ftp://cpan.topend.com.au/pub/CPAN/
                         ftp://ftp.labyrinth.net.au/pub/perl-CPAN/
                         ftp://ftp.sage-au.org.au/pub/compilers/perl/CPAN/
                         ftp://mirror.aarnet.edu.au/pub/perl/CPAN/
          New Zealand    ftp://ftp.auckland.ac.nz/pub/perl/CPAN/
                         ftp://sunsite.net.nz/pub/languages/perl/CPAN/

Central America
          Costa Rica     ftp://ftp.ucr.ac.cr/pub/Unix/CPAN/

Europe
          Austria        ftp://ftp.tuwien.ac.at/pub/languages/perl/CPAN/
          Belgium        ftp://ftp.kulnet.kuleuven.ac.be/pub/mirror/CPAN/
          Bulgaria       ftp://ftp.ntrl.net/pub/mirrors/CPAN/
          Croatia        ftp://ftp.linux.hr/pub/CPAN/
          Czech Republic ftp://ftp.fi.muni.cz/pub/perl/
                         ftp://sunsite.mff.cuni.cz/Languages/Perl/CPAN/
          Denmark        ftp://sunsite.auc.dk/pub/languages/perl/CPAN/
          Estonia        ftp://ftp.ut.ee/pub/languages/perl/CPAN/
          Finland        ftp://ftp.funet.fi/pub/languages/perl/CPAN/
          France         ftp://ftp.grolier.fr/pub/perl/CPAN/
                         ftp://ftp.lip6.fr/pub/perl/CPAN/
                         ftp://ftp.oleane.net/pub/mirrors/CPAN/
                         ftp://ftp.pasteur.fr/pub/computing/CPAN/
                         ftp://ftp.uvsq.fr/pub/perl/CPAN/
          German         ftp://ftp.gigabell.net/pub/CPAN/
          Germany        ftp://ftp.archive.de.uu.net/pub/CPAN/
                         ftp://ftp.freenet.de/pub/ftp.cpan.org/pub/
                         ftp://ftp.gmd.de/packages/CPAN/
                         ftp://ftp.gwdg.de/pub/languages/perl/CPAN/
                         ftp://ftp.leo.org/pub/comp/general/programming/languages/script/perl/CPAN/
                         ftp://ftp.mpi-sb.mpg.de/pub/perl/CPAN/
                         ftp://ftp.rz.ruhr-uni-bochum.de/pub/CPAN/
                         ftp://ftp.uni-erlangen.de/pub/source/CPAN/
                         ftp://ftp.uni-hamburg.de/pub/soft/lang/perl/CPAN/
          Germany        ftp://ftp.archive.de.uu.net/pub/CPAN/
                         ftp://ftp.freenet.de/pub/ftp.cpan.org/pub/
                         ftp://ftp.gmd.de/packages/CPAN/
                         ftp://ftp.gwdg.de/pub/languages/perl/CPAN/
                         ftp://ftp.leo.org/pub/comp/general/programming/languages/script/perl/CPAN/
                         ftp://ftp.mpi-sb.mpg.de/pub/perl/CPAN/
                         ftp://ftp.rz.ruhr-uni-bochum.de/pub/CPAN/
                         ftp://ftp.uni-erlangen.de/pub/source/CPAN/
                         ftp://ftp.uni-hamburg.de/pub/soft/lang/perl/CPAN/
          Greece         ftp://ftp.ntua.gr/pub/lang/perl/
          Hungary        ftp://ftp.kfki.hu/pub/packages/perl/CPAN/
          Iceland        ftp://ftp.gm.is/pub/CPAN/
          Ireland        ftp://cpan.indigo.ie/pub/CPAN/
                         ftp://sunsite.compapp.dcu.ie/pub/perl/
          Italy          ftp://cis.uniRoma2.it/CPAN/
                         ftp://ftp.flashnet.it/pub/CPAN/
                         ftp://ftp.unina.it/pub/Other/CPAN/
                         ftp://ftp.unipi.it/pub/mirror/perl/CPAN/
          Netherlands    ftp://ftp.cs.uu.nl/mirror/CPAN/
                         ftp://ftp.nluug.nl/pub/languages/perl/CPAN/
          Norway         ftp://ftp.uit.no/pub/languages/perl/cpan/
                         ftp://sunsite.uio.no/pub/languages/perl/CPAN/
          Poland         ftp://ftp.man.torun.pl/pub/CPAN/
                         ftp://ftp.pk.edu.pl/pub/lang/perl/CPAN/
                         ftp://sunsite.icm.edu.pl/pub/CPAN/
          Portugal       ftp://ftp.ci.uminho.pt/pub/mirrors/cpan/
                         ftp://ftp.ist.utl.pt/pub/CPAN/
                         ftp://ftp.ua.pt/pub/CPAN/
          Romania        ftp://ftp.dnttm.ro/pub/CPAN/
          Russia         ftp://ftp.chg.ru/pub/lang/perl/CPAN/
                         ftp://ftp.sai.msu.su/pub/lang/perl/CPAN/
          Slovakia       ftp://ftp.entry.sk/pub/languages/perl/CPAN/
          Slovenia       ftp://ftp.arnes.si/software/perl/CPAN/
          Spain          ftp://ftp.etse.urv.es/pub/perl/
                         ftp://ftp.rediris.es/mirror/CPAN/
          Sweden         ftp://ftp.sunet.se/pub/lang/perl/CPAN/
          Switzerland    ftp://sunsite.cnlab-switch.ch/mirror/CPAN/
          Turkey         ftp://sunsite.bilkent.edu.tr/pub/languages/CPAN/
          United Kingdom ftp://ftp.demon.co.uk/pub/mirrors/perl/CPAN/
                         ftp://ftp.flirble.org/pub/languages/perl/CPAN/
                         ftp://ftp.mirror.ac.uk/sites/ftp.funet.fi/pub/languages/perl/CPAN/
                         ftp://ftp.plig.org/pub/CPAN/
                         ftp://sunsite.doc.ic.ac.uk/packages/CPAN/

North America
          Alberta        ftp://sunsite.ualberta.ca/pub/Mirror/CPAN/
          California     ftp://cpan.nas.nasa.gov/pub/perl/CPAN/
                         ftp://cpan.valueclick.com/CPAN/
                         ftp://ftp.cdrom.com/pub/perl/CPAN/
                         http://download.sourceforge.net/mirrors/CPAN/
          Colorado       ftp://ftp.cs.colorado.edu/pub/perl/CPAN/
          Florida        ftp://ftp.cise.ufl.edu/pub/perl/CPAN/
          Georgia        ftp://ftp.twoguys.org/CPAN/
          Illinois       ftp://uiarchive.uiuc.edu/pub/lang/perl/CPAN/
          Indiana        ftp://csociety-ftp.ecn.purdue.edu/pub/CPAN/
                         ftp://ftp.uwsg.indiana.edu/pub/perl/CPAN/
          Kentucky       ftp://ftp.uky.edu/CPAN/
          Manitoba       ftp://theoryx5.uwinnipeg.ca/pub/CPAN/
          Massachusetts  ftp://ftp.ccs.neu.edu/net/mirrors/ftp.funet.fi/pub/languages/perl/CPAN/
                         ftp://ftp.iguide.com/pub/mirrors/packages/perl/CPAN/
          Mexico         ftp://ftp.msg.com.mx/pub/CPAN/
          New York       ftp://ftp.deao.net/pub/CPAN/
                         ftp://ftp.rge.com/pub/languages/perl/
          North Carolina ftp://ftp.duke.edu/pub/perl/
          Nova Scotia    ftp://cpan.chebucto.ns.ca/pub/CPAN/
          Oklahoma       ftp://ftp.ou.edu/mirrors/CPAN/
          Ontario        ftp://ftp.crc.ca/pub/packages/lang/perl/CPAN/
          Oregon         ftp://ftp.orst.edu/pub/packages/CPAN/
          Pennsylvania   ftp://ftp.epix.net/pub/languages/perl/
          Tennessee      ftp://ftp.sunsite.utk.edu/pub/CPAN/
          Texas          ftp://ftp.sedl.org/pub/mirrors/CPAN/
                         ftp://jhcloos.com/pub/mirror/CPAN/
          Utah           ftp://mirror.xmission.com/CPAN/
          Virginia       ftp://ftp.perl.org/pub/perl/CPAN/
                         ftp://ruff.cs.jmu.edu/pub/CPAN/
          Washington     ftp://ftp-mirror.internap.com/pub/CPAN/
                         ftp://ftp.llarian.net/pub/CPAN/
                         ftp://ftp.spu.edu/pub/CPAN/

South America
          Brazil         ftp://cpan.if.usp.br/pub/mirror/CPAN/
                         ftp://ftp.matrix.com.br/pub/perl/
          Chile          ftp://sunsite.dcc.uchile.cl/pub/Lang/PERL/

   For an up-to-date listing of CPAN sites, see
http://www.perl.com/perl/CPAN/SITES or ftp://www.perl.com/CPAN/SITES .

Modules: Creation, Use, and Abuse
=================================

   (The following section is borrowed directly from Tim Bunce's modules
file, available at your nearest CPAN site.)

   Perl implements a class using a package, but the presence of a package
doesn't imply the presence of a class.  A package is just a namespace.  A
class is a package that provides subroutines that can be used as methods.
A method is just a subroutine that expects, as its first argument, either
the name of a package (for "static" methods), or a reference to something
(for "virtual" methods).

   A module is a file that (by convention) provides a class of the same
name (sans the .pm), plus an import method in that class that can be
called to fetch exported symbols.  This module may implement some of its
methods by loading dynamic C or C++ objects, but that should be totally
transparent to the user of the module.  Likewise, the module might set up
an AUTOLOAD function to slurp in subroutine definitions on demand, but
this is also transparent.  Only the `.pm' file is required to exist.  See
*Note Perlsub: perlsub,, *Note Perltoot: perltoot,, and *Note AutoLoader:
(pm.info)AutoLoader, for details about the AUTOLOAD mechanism.

Guidelines for Module Creation
------------------------------

Do similar modules already exist in some form?
     If so, please try to reuse the existing modules either in whole or by
     inheriting useful features into a new class.  If this is not
     practical try to get together with the module authors to work on
     extending or enhancing the functionality of the existing modules.  A
     perfect example is the plethora of packages in perl4 for dealing with
     command line options.

     If you are writing a module to expand an already existing set of
     modules, please coordinate with the author of the package.  It helps
     if you follow the same naming scheme and module interaction scheme as
     the original author.

Try to design the new module to be easy to extend and reuse.
     Try to `use warnings;' (or `use warnings qw(...);').  Remember that
     you can add `no warnings qw(...);' to individual blocks of code that
     need less warnings.

     Use blessed references.  Use the two argument form of bless to bless
     into the class name given as the first parameter of the constructor,
     e.g.,:

          sub new {
          	my $class = shift;
          	return bless {}, $class;
          }

     or even this if you'd like it to be used as either a static or a
     virtual method.

          sub new {
          	my $self  = shift;
          	my $class = ref($self) || $self;
          	return bless {}, $class;
          }

     Pass arrays as references so more parameters can be added later (it's
     also faster).  Convert functions into methods where appropriate.
     Split large methods into smaller more flexible ones.  Inherit methods
     from other modules if appropriate.

     Avoid class name tests like: `die "Invalid" unless ref $ref eq 'FOO''.
     Generally you can delete the `eq 'FOO'' part with no harm at all.
     Let the objects look after themselves! Generally, avoid hard-wired
     class names as far as possible.

     Avoid `< $r-'Class::func() >> where using `@ISA=qw(... Class ...)' and
     `< $r-'func() >> would work (see *Note Perlbot: perlbot, for more
     details).

     Use autosplit so little used or newly added functions won't be a
     burden to programs that don't use them. Add test functions to the
     module after __END__ either using AutoSplit or by saying:

          eval join('',<main::DATA>) || die $@ unless caller();

     Does your module pass the 'empty subclass' test? If you say
     `@SUBCLASS::ISA = qw(YOURCLASS);' your applications should be able to
     use SUBCLASS in exactly the same way as YOURCLASS.  For example, does
     your application still work if you change:  `$obj = new YOURCLASS;'
     into: `$obj = new SUBCLASS;' ?

     Avoid keeping any state information in your packages. It makes it
     difficult for multiple other packages to use yours. Keep state
     information in objects.

     Always use -w.

     Try to `use strict;' (or `use strict qw(...);').  Remember that you
     can add `no strict qw(...);' to individual blocks of code that need
     less strictness.

     Always use -w.

     Follow the guidelines in the perlstyle(1) manual.

     Always use -w.

Some simple style guidelines
     The perlstyle manual supplied with Perl has many helpful points.

     Coding style is a matter of personal taste. Many people evolve their
     style over several years as they learn what helps them write and
     maintain good code.  Here's one set of assorted suggestions that seem
     to be widely used by experienced developers:

     Use underscores to separate words.  It is generally easier to read
     $var_names_like_this than $VarNamesLikeThis, especially for
     non-native speakers of English. It's also a simple rule that works
     consistently with VAR_NAMES_LIKE_THIS.

     Package/Module names are an exception to this rule. Perl informally
     reserves lowercase module names for 'pragma' modules like integer and
     strict. Other modules normally begin with a capital letter and use
     mixed case with no underscores (need to be short and portable).

     You may find it helpful to use letter case to indicate the scope or
     nature of a variable. For example:

          $ALL_CAPS_HERE   constants only (beware clashes with Perl vars)
          $Some_Caps_Here  package-wide global/static
          $no_caps_here    function scope my() or local() variables

     Function and method names seem to work best as all lowercase.  e.g.,
     `< $obj-'as_string() >>.

     You can use a leading underscore to indicate that a variable or
     function should not be used outside the package that defined it.

Select what to export.
     Do NOT export method names!

     Do NOT export anything else by default without a good reason!

     Exports pollute the namespace of the module user.  If you must export
     try to use @EXPORT_OK in preference to @EXPORT and avoid short or
     common names to reduce the risk of name clashes.

     Generally anything not exported is still accessible from outside the
     module using the ModuleName::item_name (or `< $blessed_ref-'method >>)
     syntax.  By convention you can use a leading underscore on names to
     indicate informally that they are 'internal' and not for public use.

     (It is actually possible to get private functions by saying: `my
     $subref = sub { ... };  &$subref;'.  But there's no way to call that
     directly as a method, because a method must have a name in the symbol
     table.)

     As a general rule, if the module is trying to be object oriented then
     export nothing. If it's just a collection of functions then
     @EXPORT_OK anything but use @EXPORT with caution.

Select a name for the module.
     This name should be as descriptive, accurate, and complete as
     possible.  Avoid any risk of ambiguity. Always try to use two or more
     whole words.  Generally the name should reflect what is special about
     what the module does rather than how it does it.  Please use nested
     module names to group informally or categorize a module.  There
     should be a very good reason for a module not to have a nested name.
     Module names should begin with a capital letter.

     Having 57 modules all called Sort will not make life easy for anyone
     (though having 23 called Sort::Quick is only marginally better :-).
     Imagine someone trying to install your module alongside many others.
     If in any doubt ask for suggestions in comp.lang.perl.misc.

     If you are developing a suite of related modules/classes it's good
     practice to use nested classes with a common prefix as this will
     avoid namespace clashes. For example: Xyz::Control, Xyz::View,
     Xyz::Model etc. Use the modules in this list as a naming guide.

     If adding a new module to a set, follow the original author's
     standards for naming modules and the interface to methods in those
     modules.

     To be portable each component of a module name should be limited to
     11 characters. If it might be used on MS-DOS then try to ensure each
     is unique in the first 8 characters. Nested modules make this easier.

Have you got it right?
     How do you know that you've made the right decisions? Have you picked
     an interface design that will cause problems later? Have you picked
     the most appropriate name? Do you have any questions?

     The best way to know for sure, and pick up many helpful suggestions,
     is to ask someone who knows. Comp.lang.perl.misc is read by just about
     all the people who develop modules and it's the best place to ask.

     All you need to do is post a short summary of the module, its purpose
     and interfaces. A few lines on each of the main methods is probably
     enough. (If you post the whole module it might be ignored by busy
     people - generally the very people you want to read it!)

     Don't worry about posting if you can't say when the module will be
     ready - just say so in the message. It might be worth inviting others
     to help you, they may be able to complete it for you!

README and other Additional Files.
     It's well known that software developers usually fully document the
     software they write. If, however, the world is in urgent need of your
     software and there is not enough time to write the full documentation
     please at least provide a README file containing:

        * A description of the module/package/extension etc.

        * A copyright notice - see below.

        * Prerequisites - what else you may need to have.

        * How to build it - possible changes to Makefile.PL etc.

        * How to install it.

        * Recent changes in this release, especially incompatibilities

        * Changes / enhancements you plan to make in the future.

     If the README file seems to be getting too large you may wish to
     split out some of the sections into separate files: INSTALL, Copying,
     ToDo etc.

    Adding a Copyright Notice.
          How you choose to license your work is a personal decision.  The
          general mechanism is to assert your Copyright and then make a
          declaration of how others may copy/use/modify your work.

          Perl, for example, is supplied with two types of licence: The GNU
          GPL and The Artistic Licence (see the files README, Copying, and
          Artistic).  Larry has good reasons for NOT just using the GNU
          GPL.

          My personal recommendation, out of respect for Larry, Perl, and
          the Perl community at large is to state something simply like:

               Copyright (c) 1995 Your Name. All rights reserved.
               This program is free software; you can redistribute it and/or
               modify it under the same terms as Perl itself.

          This statement should at least appear in the README file. You may
          also wish to include it in a Copying file and your source files.
          Remember to include the other words in addition to the Copyright.

    Give the module a version/issue/release number.
          To be fully compatible with the Exporter and MakeMaker modules
          you should store your module's version number in a non-my package
          variable called $VERSION.  This should be a floating point
          number with at least two digits after the decimal (i.e.,
          hundredths, e.g, `$VERSION = "0.01"').  Don't use a "1.3.2"
          style version.  See *Note Exporter: (pm.info)Exporter, for
          details.

          It may be handy to add a function or method to retrieve the
          number.  Use the number in announcements and archive file names
          when releasing the module (ModuleName-1.02.tar.Z).  See perldoc
          ExtUtils::MakeMaker.pm for details.

    How to release and distribute a module.
          It's good idea to post an announcement of the availability of
          your module (or the module itself if small) to the
          comp.lang.perl.announce Usenet newsgroup.  This will at least
          ensure very wide once-off distribution.

          If possible, register the module with CPAN.  You should include
          details of its location in your announcement.

          Some notes about ftp archives: Please use a long descriptive file
          name that includes the version number. Most incoming directories
          will not be readable/listable, i.e., you won't be able to see
          your file after uploading it. Remember to send your email
          notification message as soon as possible after uploading else
          your file may get deleted automatically. Allow time for the file
          to be processed and/or check the file has been processed before
          announcing its location.

          FTP Archives for Perl Modules:

          Follow the instructions and links on:

               http://www.perl.com/CPAN/modules/00modlist.long.html
               http://www.perl.com/CPAN/modules/04pause.html

          or upload to one of these sites:

               https://pause.kbx.de/pause/
               http://pause.perl.org/pause/

          and notify <modules@perl.org>.

          By using the WWW interface you can ask the Upload Server to
          mirror your modules from your ftp or WWW site into your own
          directory on CPAN!

          Please remember to send me an updated entry for the Module list!

    Take care when changing a released module.
          Always strive to remain compatible with previous released
          versions.  Otherwise try to add a mechanism to revert to the old
          behavior if people rely on it.  Document incompatible changes.

Guidelines for Converting Perl 4 Library Scripts into Modules
-------------------------------------------------------------

There is no requirement to convert anything.
     If it ain't broke, don't fix it! Perl 4 library scripts should
     continue to work with no problems. You may need to make some minor
     changes (like escaping non-array @'s in double quoted strings) but
     there is no need to convert a .pl file into a Module for just that.

Consider the implications.
     All Perl applications that make use of the script will need to be
     changed (slightly) if the script is converted into a module.  Is it
     worth it unless you plan to make other changes at the same time?

Make the most of the opportunity.
     If you are going to convert the script to a module you can use the
     opportunity to redesign the interface.  The guidelines for module
     creation above include many of the issues you should consider.

The pl2pm utility will get you started.
     This utility will read *.pl files (given as parameters) and write
     corresponding *.pm files. The pl2pm utilities does the following:

        * Adds the standard Module prologue lines

        * Converts package specifiers from ' to ::

        * Converts die(...) to croak(...)

        * Several other minor changes

     Being a mechanical process pl2pm is not bullet proof. The converted
     code will need careful checking, especially any package statements.
     Don't delete the original .pl file till the new .pm one works!

Guidelines for Reusing Application Code
---------------------------------------

Complete applications rarely belong in the Perl Module Library.
Many applications contain some Perl code that could be reused.
     Help save the world! Share your code in a form that makes it easy to
     reuse.

Break-out the reusable code into one or more separate module files.
Take the opportunity to reconsider and redesign the interfaces.
In some cases the 'application' can then be reduced to a small
     fragment of code built on top of the reusable modules. In these cases
     the application could invoked as:

          % perl -e 'use Module::Name; method(@ARGV)' ...
          or
          % perl -mModule::Name ...    (in perl5.002 or higher)

NOTE
====

   Perl does not enforce private and public parts of its modules as you may
have been used to in other languages like C++, Ada, or Modula-17.  Perl
doesn't have an infatuation with enforced privacy.  It would prefer that
you stayed out of its living room because you weren't invited, not because
it has a shotgun.

   The module and its user have a contract, part of which is common law,
and part of which is "written".  Part of the common law contract is that a
module doesn't pollute any namespace it wasn't asked to.  The written
contract for the module (A.K.A. documentation) may make other provisions.
But then you know when you `use RedefineTheWorld' that you're redefining
the world and willing to take the consequences.


