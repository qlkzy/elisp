This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Bio/Variation/AAChange,  Next: Bio/Variation/AAReverseMutate,  Prev: Bio/UnivAln,  Up: Module List

Sequence change class for polypeptides
**************************************

NAME
====

   Bio::Variation::AAChange - Sequence change class for polypeptides

SYNOPSIS
========

     $aamut = Bio::Variation::AAChange->new
         ('-start'         => $start,
      	'-end'           => $end,
      	'-length'        => $len,
      	'-proof'         => $proof,
      	'-isMutation'    => 1,
      	'-mut_number'    => $mut_number
      	);

     my $a1 = Bio::Variation::Allele->new;
     $a1->seq($ori) if $ori;
     $aamut->allele_ori($a1);
     my $a2 = Bio::Variation::Allele->new;
     $a2->seq($mut) if $mut;
     $aachange->add_Allele($a2);
     $aachange->allele_mut($a2);
     
     print  "\n";

     # add it to a SeqDiff container object
     $seqdiff->add_Variant($rnachange);

     # and create links to and from RNA level variant objects
     $aamut->RNAChange($rnachange);
     $rnachange->AAChange($rnachange);

DESCRIPTION
===========

   The instantiable class Bio::Variation::RNAChange describes basic
sequence changes at polypeptide  level. It uses methods defined in
superclass *Note Bio/Variation/VariantI: Bio/Variation/VariantI,.

   If the variation described by a AAChange object has a known
`Bio::Variation::RNAAChange' in this node object, create the link with
method AAChange().

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.

     bioperl-l@bioperl.org                         - General discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via  email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Heikki Lehvaslaiho
===========================

   Email:  heikki@ebi.ac.uk

   Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

RNAChange
---------

     Title   : RNAChange
     Usage   : $mutobj = $self->RNAChange;
             : $mutobj = $self->RNAChange($objref);
     Function: Returns or sets the link-reference to a mutation/change object.
               If there is no link, it will return undef
     Returns : an obj_ref or undef

label
-----

     Title   : label
     Usage   : $obj->label();
     Function:

     Sets and returns mutation event label(s).  If value is not
     set, or no argument is given returns false.  Each
     instantiable subclass of L<Bio::Variation::VariantI> needs
     to implement this method. Valid values are listed in
     'Mutation event controlled vocabulary' in
     http://www.ebi.ac.uk/mutations/recommendations/mutevent.html.

     Example :
     Returns : string
     Args    : string

trivname
--------

     Title   : trivname
     Usage   : $self->trivname
     Function:

     Given a Bio::Variation::AAChange object with linked
     Bio::Variation::RNAChange and Bio::Variation::DNAMutation
     objects, this subroutine creates a string corresponding to
     the 'trivial name' of the mutation. Trivial name is
     specified in Antonorakis & MDI Nomenclature Working Group:
     Human Mutation 11:1-3, 1998.
     http://www.interscience.wiley.com/jpages/1059-7794/nomenclature.html

     Returns : string


File: pm.info,  Node: Bio/Variation/AAReverseMutate,  Next: Bio/Variation/Allele,  Prev: Bio/Variation/AAChange,  Up: Module List

point mutation and codon   information from single amino acid changes
*********************************************************************

NAME
====

   Bio::Variation::AAReverseMutate - point mutation and codon
information from single amino acid changes

SYNOPSIS
========

     $aamut = new Bio::Variation::AAReverseMutate
                  (-aa_ori => 'F',
     		  -aa_mut => 'S',
     		  -codon_ori => 'ttc', # optional
     		  -codon_table => '3'  # defaults to 1
     		  );

     @points = $aamut->each_Variant;

     if (scalar @points > 0 ) {
         foreach $rnachange ( @points ) {
     	   # $rnachange is a Bio::Variation::RNAChange object
     	   print " ", $rnachange->allele_ori->seq, ">",
     	   $rnachange->allele_mut->seq, " in ",
     	   $rnachange->codon_ori, ">", $rnachange->codon_mut,
     	   " at position ", $rnachange->codon_pos, "\n";
         }
     } else  {
         print "No point mutations possible\n",
     }

DESCRIPTION
===========

   Bio::Variation::AAReverseMutate objects take in reference and mutated
amino acid information and deduces potential point mutations at RNA level
leading to this change. The choice can be further limited by letting the
object know what is the the codon in the reference sequence. The results
are returned as *Note Bio/Variation/RNAChange: Bio/Variation/RNAChange,
objects.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.

     bioperl-l@bioperl.org                         - General discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via  email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Heikki Lehvaslaiho
===========================

   Email:  heikki@ebi.ac.uk Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

aa_ori
------

     Title   : aa_ori
     Usage   : $obj->aa_ori();
     Function:

     Sets and returns original aa sequence.  If value is not
     set, returns false.

     Amino acid sequences are stored in upper case characters,
     others in lower case.

     Example :
     Returns : string
     Args    : single character amino acid code

aa_mut
------

     Title   : aa_mut
     Usage   : $obj->aa_mut();
     Function:

     Sets and returns the mutated allele sequence.  If value is not
     set, returns false.

     Example :
     Returns : string
     Args    : single character amino acid code

codon_ori
---------

     Title   : codon_ori
     Usage   : $obj->codon_ori();
     Function:

     Sets and returns codon_ori triplet.  If value is not set,
     returns false.  The string has to be three characters
     long. The chracter content is not checked.

     Example :
     Returns : string
     Args    : string

codon_table
-----------

     Title   : codon_table
     Usage   : $obj->codon_table();
     Function:

     Sets and returns the codon table id of the RNA
     If value is not set, returns 1, 'universal' code, as the default.

     Example :
     Returns : integer
     Args    : none if get, the new value if set

each_Variant
------------

     Title   : each_Variant
     Usage   : $obj->each_Variant();
     Function:

     Returns a list of Variants.

     Example :
     Returns : list of Variants
     Args    : none


File: pm.info,  Node: Bio/Variation/Allele,  Next: Bio/Variation/DNAMutation,  Prev: Bio/Variation/AAReverseMutate,  Up: Module List

Sequence object with allele-specific attributes
***********************************************

NAME
====

   Bio::Variation::Allele - Sequence object with allele-specific attributes

SYNOPSIS
========

     $allele1 = Bio::Variation::Allele->new ( -seq => 'A',
                                              -id  => 'AC00001.1',
                                              -moltype => 'dna',
                                              -is_reference => 1
                                            );

DESCRIPTION
===========

   List of alleles describe known sequence alternatives in a variable
region.  Alleles are contained in *Note Bio/Variation/VariantI:
Bio/Variation/VariantI, complying objects.

   Bio::Varation::Alleles are PrimarySeqI complying objects which can
contain database cross references as specified in Bio::DBLinkContainerI
interface, too.

   A lot of the complexity with dealing with Allele objects are caused by
null alleles; Allele objects that have zero length sequence string.

   In addition describing the allele by its sequence , it possible to give
describe repeat structure within the sequence. This done using methods
repeat_unit (e.g. 'ca') and repeat_count (e.g. 7).

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.

     bioperl-l@bioperl.org                         - General discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via  email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Heikki Lehvaslaiho
===========================

   Email:  heikki@ebi.ac.uk Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

is_reference
------------

     Title   : is_reference
     Usage   : $obj->is_reference()
     Function: sets and returns boolean values.
               Unset values return false.
     Example : $obj->is_reference()
     Returns : boolean
     Args    : optional true of false value

add_DBLink
----------

     Title   : add_DBLink
     Usage   : $self->add_DBLink($ref)
     Function: adds a link object
     Example :
     Returns :
     Args    :

each_DBLink
-----------

     Title   : each_DBLink
     Usage   : foreach $ref ( $self->each_DBlink() )
     Function: gets an array of DBlink of objects
     Example :
     Returns :
     Args    :

repeat_unit
-----------

     Title   : repeat_unit
     Usage   : $obj->repeat_unit('ca');
     Function:

     Sets and returns the sequence of the repeat_unit the
     allele is composed of.

     Example :
     Returns : string
     Args    : string

repeat_count
------------

     Title   : repeat_count
     Usage   : $obj->repeat_count();
     Function:

     Sets and returns the number of repeat units in the allele.

     Example :
     Returns : string
     Args    : string


File: pm.info,  Node: Bio/Variation/DNAMutation,  Next: Bio/Variation/IO,  Prev: Bio/Variation/Allele,  Up: Module List

DNA level mutation class
************************

NAME
====

   Bio::Variation::DNAMutation - DNA level mutation class

SYNOPSIS
========

     $dnamut = Bio::Variation::DNAMutation->new
         ('-start'         => $start,
          '-end'           => $end,
          '-length'        => $len,
          '-upStreamSeq'   => $upflank,
          '-dnStreamSeq'   => $dnflank,
          '-proof'         => $proof,
     	 '-isMutation'    => 1,
          '-mut_number'    => $mut_number
         );
     $a1 = Bio::Variation::Allele->new;
     $a1->seq('a');
     $dnamut->allele_ori($a1);
     my $a2 = Bio::Variation::Allele->new;
     $a2->seq('t');
     $dnamut->add_Allele($a2);

     print "Restriction changes are ", $dnamut->restriction_changes, "\n";

     # add it to a SeqDiff container object
     $seqdiff->add_Variant($dnamut);

DESCRIPTION
===========

   The instantiable class Bio::Variation::DNAMutation describes basic
sequence changes in genomic DNA level. It uses methods defined in
superclass *Note Bio/Variation/VariantI: Bio/Variation/VariantI,.

   If the variation described by a DNAMutation object is transcibed, link
the corresponding *Note Bio/Variation/RNAChange: Bio/Variation/RNAChange,
object to it using method RNAChange().

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.

     bioperl-l@bioperl.org                         - General discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via  email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Heikki Lehvaslaiho
===========================

   Email:  heikki@ebi.ac.uk Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

CpG
---

     Title   : CpG
     Usage   : $obj->CpG()
     Function: sets and returns boolean values for variation
               hitting a CpG site.  Unset value return -1.
     Example : $obj->CpG()
     Returns : boolean
     Args    : optional true of false value

RNAChange
---------

     Title   : RNAChange
     Usage   : $mutobj = $obj->RNAChange;
             : $mutobj = $obj->RNAChange($objref);
     Function: Returns or sets the link-reference to a mutation/change object.
               If there is no link, it will return undef
     Returns : an obj_ref or undef

label
-----

     Title   : label
     Usage   : $obj->label();
     Function:

     Sets and returns mutation event label(s).  If value is not
     set, or no argument is given returns false.  Each
     instantiable subclass of L<Bio::Variation::VariantI> needs
     to implement this method. Valid values are listed in
     'Mutation event controlled vocabulary' in
     http://www.ebi.ac.uk/mutations/recommendations/mutevent.html.

     Example :
     Returns : string
     Args    : string

sysname
-------

     Title   : sysname
     Usage   : $self->sysname
     Function:

     This subroutine creates a string corresponding to the
     'systematic name' of the mutation. Systematic name is
     specified in Antonorakis & MDI Nomenclature Working Group:
     Human Mutation 11:1-3, 1998.
     http://www.interscience.wiley.com/jpages/1059-7794/nomenclature.html
      Returns : string


File: pm.info,  Node: Bio/Variation/IO,  Next: Bio/Variation/IO/flat,  Prev: Bio/Variation/DNAMutation,  Up: Module List

Handler for sequence variation IO Formats
*****************************************

NAME
====

   Bio::Variation::IO - Handler for sequence variation IO Formats

SYNOPSIS
========

     use Bio::Variation::IO;

     $in  = Bio::Variation::IO->new(-file => "inputfilename" , '-format' => 'flat');
     $out = Bio::Variation::IO->new(-file => ">outputfilename" , '-format' => 'xml');
     # note: we quote -format to keep older perl's from complaining.

     while ( my $seq = $in->next() ) {
     	$out->write($seq);
     }

   or

     use Bio::Variation::IO;

     #input file format can be read from the file extension (dat|xml)
     $in  = Bio::Variation::IO->newFh(-file => "inputfilename");
     $out = Bio::Variation::IO->newFh('-format' => 'xml');

     # World's shortest flat<->xml format converter:
     print $output $_ while <$in>;

DESCRIPTION
===========

   Bio::Variation::IO is a handler module for the formats in the Variation
IO set (eg, Bio::Variation::IO::flat). It is the officially sanctioned way
of getting at the format objects, which most people should use.

   The structure, conventions and most of the code is inherited from *Note
Bio/SeqIO: Bio/SeqIO, module. The main difference is that instead of using
methods next_seq and write_seq, you drop '_seq' from the method names.

   The idea is that you request a stream object for a particular format.
All the stream objects have a notion of an internal file that is read from
or written to. A particular SeqIO object instance is configured for either
input or output. A specific example of a stream object is the
Bio::Variation::IO::flat object.

   Each stream object has functions

     $stream->next();

   and

     $stream->write($seqDiff);

   also

     $stream->type() # returns 'INPUT' or 'OUTPUT'

   As an added bonus, you can recover a filehandle that is tied to the
SeqIO object, allowing you to use the standard <> and print operations to
read and write sequence objects:

     use Bio::Variation::IO;

     $stream = Bio::Variation::IO->newFh(-format => 'flat'); # read from standard input

     while ( $seq = <$stream> ) {
     	# do something with $seq
     }

   and

     print $stream $seq; # when stream is in output mode

   This makes the simplest ever reformatter

     #!/usr/local/bin/perl

     $format1 = shift;
     $format2 = shift || die "Usage: reformat format1 format2 < input > output";

     use Bio::Variation::IO;

     $in  = Bio::Variation::IO->newFh(-format => $format1 );
     $out = Bio::Variation::IO->newFh(-format => $format2 );
     #note: you might want to quote -format to keep older perl's from complaining.

     print $out $_ while <$in>;

CONSTRUCTORS
============

Bio::Variation::IO->new()
-------------------------

     $seqIO = Bio::Variation::IO->new(-file => 'filename',   -format=>$format);
     $seqIO = Bio::Variation::IO->new(-fh   => \*FILEHANDLE, -format=>$format);
     $seqIO = Bio::Variation::IO->new(-format => $format);

   The new() class method constructs a new Bio::Variation::IO object.  The
returned object can be used to retrieve or print BioSeq objects. new()
accepts the following parameters:

-file
     A file path to be opened for reading or writing.  The usual Perl
     conventions apply:

          'file'       # open file for reading
          '>file'      # open file for writing
          '>>file'     # open file for appending
          '+<file'     # open file read/write
          'command |'  # open a pipe from the command
          '| command'  # open a pipe to the command

-fh
     You may provide new() with a previously-opened filehandle.  For
     example, to read from STDIN:

          $seqIO = Bio::Variation::IO->new(-fh => \*STDIN);

     Note that you must pass filehandles as references to globs.

     If neither a filehandle nor a filename is specified, then the module
     will read from the @ARGV array or STDIN, using the familiar <>
     semantics.

-format
     Specify the format of the file.  Supported formats include:

          flat        pseudo EMBL format
          xml         seqvar xml format

     If no format is specified and a filename is given, then the module
     will attempt to deduce it from the filename.  If this is unsuccessful,
     Fasta format is assumed.

     The format name is case insensitive.  'FLAT', 'Flat' and 'flat' are
     all supported.

Bio::Variation::IO->newFh()
---------------------------

     $fh = Bio::Variation::IO->newFh(-fh   => \*FILEHANDLE, -format=>$format);
     $fh = Bio::Variation::IO->newFh(-format => $format);
     # etc.

     #e.g.
     $out = Bio::Variation::IO->newFh( '-FORMAT' => 'flat');
     print $out $seqDiff;

   This constructor behaves like new(), but returns a tied filehandle
rather than a Bio::Variation::IO object.  You can read sequences from this
object using the familiar <> operator, and write to it using print().  The
usual array and $_ semantics work.  For example, you can read all sequence
objects into an array like this:

     @mutations = <$fh>;

   Other operations, such as read(), sysread(), write(), close(), and
printf() are not supported.

OBJECT METHODS
==============

   See below for more detailed summaries.  The main methods are:

$sequence = $seqIO->next()
--------------------------

   Fetch the next sequence from the stream.

$seqIO->write($sequence [,$another_sequence,...])
-------------------------------------------------

   Write the specified sequence(s) to the stream.

TIEHANDLE(), READLINE(), PRINT()
--------------------------------

   These provide the tie interface.  See *Note Perltie:
(perl.info)perltie, for more details.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.

     bioperl-l@bioperl.org                         - General discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via  email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Heikki Lehvaslaiho
===========================

   Email:  heikki@ebi.ac.uk Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

new
---

     Title   : new
     Usage   : $stream = Bio::Variation::IO->new(-file => $filename, -format => 'Format')
     Function: Returns a new seqstream
     Returns : A Bio::Variation::IO::Handler initialised with the appropriate format
     Args    : -file => $filename
               -format => format
               -fh => filehandle to attach to

next
----

     Title   : next
     Usage   : $seqDiff = stream->next
     Function: reads the next $seqDiff object from the stream
     Returns : a Bio::Variation::SeqDiff object
     Args    :

write
-----

     Title   : write
     Usage   : $stream->write($seq)
     Function: writes the $seq object into the stream
     Returns : 1 for success and 0 for error
     Args    : Bio::Variation::SeqDiff object

_guess_format
-------------

     Title   : _guess_format
     Usage   : $obj->_guess_format($filename)
     Function:
     Example :
     Returns : guessed format of filename (lower case)
     Args    :


File: pm.info,  Node: Bio/Variation/IO/flat,  Next: Bio/Variation/IO/xml,  Prev: Bio/Variation/IO,  Up: Module List

flat file sequence variation input/output stream
************************************************

NAME
====

   Bio::Variation::IO::flat - flat file sequence variation input/output
stream

SYNOPSIS
========

   Do not use this module directly.  Use it via the Bio::Variation::IO
class.

DESCRIPTION
===========

   This object can transform Bio::Variation::SeqDiff objects to and from
flat file databases. The format used is EMBL like extension of what is
used by the "EBI Mutation Checker" at
http://www.ebi.ac.uk/cgi-bin/mutations/check.cgi and will eventually
replace it.

   More information of the attributes and values use can be found at
http://www.ebi.ac.uk/mutations/recommendations/.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.

     bioperl-l@bioperl.org                         - General discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via  email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Heikki Lehvaslaiho
===========================

   Email:  heikki@ebi.ac.uk Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

next
----

     Title   : next
     Usage   : $haplo = $stream->next()
     Function: returns the next seqDiff in the stream
     Returns : Bio::Variation::SeqDiff object
     Args    : NONE

write
-----

     Title   : write
     Usage   : $stream->write(@seqDiffs)
     Function: writes the $seqDiff object into the stream
     Returns : 1 for success and 0 for error
     Args    : Bio::Variation::SeqDiff object


File: pm.info,  Node: Bio/Variation/IO/xml,  Next: Bio/Variation/RNAChange,  Prev: Bio/Variation/IO/flat,  Up: Module List

XML sequence variation input/output stream
******************************************

NAME
====

   Bio::Variation::IO::xml - XML sequence variation input/output stream

SYNOPSIS
========

   Do not use this module directly.  Use it via the Bio::Variation::IO
class.

DESCRIPTION
===========

   This object can transform Bio::Variation::SeqDiff objects to and from
XML file databases.

   The XML format, although consistent, is still evolving. The DTD is not
yet available. There is also a formatting problem: The module is not able
to write root tags around entries.

REQUIREMENTS
============

   To use this code you need the CPAN module XML::Node to read XML and
modules XML::Writer and IO::String to write XML out.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.

     bioperl-l@bioperl.org                         - General discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via  email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Heikki Lehvaslaiho
===========================

   Email:  heikki@ebi.ac.uk Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

next
----

     Title   : next
     Usage   : $haplo = $stream->next()
     Function: returns the next seqDiff in the stream
     Returns : Bio::Variation::SeqDiff object
     Args    : NONE

write
-----

     Title   : write
     Usage   : $stream->write(@haplos)
     Function: writes the $seqDiff objects into the stream
     Returns : 1 for success and 0 for error
     Args    : Bio::Variation::SeqDiff object


File: pm.info,  Node: Bio/Variation/RNAChange,  Next: Bio/Variation/SeqDiff,  Prev: Bio/Variation/IO/xml,  Up: Module List

Sequence change class for RNA level
***********************************

NAME
====

   Bio::Variation::RNAChange - Sequence change class for RNA level

SYNOPSIS
========

     $rnachange = Bio::Variation::RNAChange->new
         ('-start'         => $start,
          '-end'           => $end,
          '-length'        => $len,
          '-codon_pos'     => $cp,
          '-upStreamSeq'   => $upflank,
          '-dnStreamSeq'   => $dnflank,
          '-proof'         => $proof,
     	'-isMutation'    => 1,
          '-mut_number'    => $mut_number
         );
     $a1 = Bio::Variation::Allele->new;
     $a1->seq('a');
     $rnachange->allele_ori($a1);
     my $a2 = Bio::Variation::Allele->new;
     $a2->seq('t');
     $rnachange->add_Allele($a2);
     $rnachange->allele_mut($a2);

     print "The codon change is ", $rnachange->codon_ori,
         ">", $rnachange->codon_mut, "\n";

     # add it to a SeqDiff container object
     $seqdiff->add_Variant($rnachange);

     # and create links to and from DNA level mutation objects
     $rnachange->DNAMutation($dnamut);
     $dnamut->RNAChange($rnachange);

DESCRIPTION
===========

   The instantiable class Bio::Variation::DNAMutation describes basic
sequence changes at RNA molecule level. It uses methods defined in
superclass *Note Bio/Variation/VariantI: Bio/Variation/VariantI,.

   You are normally expected to create a corresponding *Note
Bio/Variation/DNAMutation: Bio/Variation/DNAMutation, object even if
mutation is defined at RNA level. The numbering follows then cDNA
numbering.  Link the DNAMutation object to the RNAChange object using the
method DNAMutation(). If the variation described by a RNAChange object is
translated, link the corresponding *Note Bio/Variation/AAChange:
Bio/Variation/AAChange, object to it using method AAChange().

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.

     bioperl-l@bioperl.org                         - General discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via  email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Heikki Lehvaslaiho
===========================

   Email:  heikki@ebi.ac.uk Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

codon_ori
---------

     Title   : codon_ori
     Usage   : $obj->codon_ori();
     Function:

     Sets and returns codon_ori triplet.  If value is not set,
     creates the codon triplet from the codon position and
     flanking sequences.  The string has to be three characters
     long. The character content is not checked.

     Example :
     Returns : string
     Args    : string

codon_mut
---------

     Title   : codon_mut
     Usage   : $obj->codon_mut();
     Function:

     Sets and returns codon_mut triplet.  If value is not
     set, creates the codon triplet from the codon position and
     flanking sequences. Return undef for other than point mutations.

     Example :
     Returns : string
     Args    : string

codon_pos
---------

     Title   : codon_pos
     Usage   : $obj->codon_pos();
     Function:

     Sets and returns the position of the mutation start in the
     codon. If value is not set, returns false.

     Example :
     Returns : 1,2,3
     Args    : none if get, the new value if set

codon_table
-----------

     Title   : codon_table
     Usage   : $obj->codon_table();
     Function:

     Sets and returns the codon table id of the RNA
     If value is not set, returns 1, 'universal' code, as the default.

     Example :
     Returns : integer
     Args    : none if get, the new value if set

DNAMutation
-----------

     Title   : DNAMutation
     Usage   : $mutobj = $obj->DNAMutation;
             : $mutobj = $obj->DNAMutation($objref);
     Function: Returns or sets the link-reference to a mutation/change object.
               If there is no link, it will return undef
     Returns : an obj_ref or undef

AAChange
--------

     Title   : AAChange
     Usage   : $mutobj = $obj->AAChange;
             : $mutobj = $obj->AAChange($objref);
     Function: Returns or sets the link-reference to a mutation/change object.
               If there is no link, it will return undef
     Returns : an obj_ref or undef

exons_modified
--------------

     Title   : exons_modified
     Usage   : $modified = $obj->exons_modified;
             : $modified = $obj->exons_modified(1);
     Function: Returns or sets information (example: a simple boolean flag) about
               the modification of exons as a result of a mutation.

region
------

     Title   : region
     Usage   : $obj->region();
     Function:

     Sets and returns the name of the sequence region type or
     protein domain at this location.  If value is not set,
     returns false.

     Example :
     Returns : string
     Args    : string

region_value
------------

     Title   : region_value
     Usage   : $obj->region_value();
     Function:

     Sets and returns the name of the sequence region_value type or
     protein domain at this location. Not a valid method for RNAChange.
      Example :
      Returns : string
      Args    : string

cds_end
-------

     Title   : cds_end
     Usage   : $cds_end = $obj->get_cds_end();
     Function:

     Sets or returns the cds_end from the beginning of the DNA sequence
     to the coordinate start used to describe variants.
     Should be the location of the last nucleotide of the
     terminator codon of the gene.

     Example :
     Returns : value of cds_end, a scalar
     Args    :

label
-----

     Title   : label
     Usage   : $obj->label();
     Function:

     Sets and returns mutation event label(s).  If value is not
     set, or no argument is given returns false.  Each
     instantiable subclass of L<Bio::Variation::VariantI> needs
     to implement this method. Valid values are listed in
     'Mutation event controlled vocabulary' in
     http://www.ebi.ac.uk/mutations/recommendations/mutevent.html.

     Example :
     Returns : string
     Args    : string

_change_codon_pos
-----------------

     Title   : _change_codon_pos
     Usage   : $newCodonPos = _change_codon_pos($myCodonPos, 5)
     Function:

     Keeps track of the codon position in a changeing sequence

     Returns : codon_pos = integer 1, 2 or 3
     Args    : valid codon position
               signed integer offset to a new location in sequence


File: pm.info,  Node: Bio/Variation/SeqDiff,  Next: Bio/Variation/VariantI,  Prev: Bio/Variation/RNAChange,  Up: Module List

Container class for mutation/variant descriptions
*************************************************

NAME
====

   Bio::Variation::SeqDiff - Container class for mutation/variant
descriptions

SYNOPSIS
========

     $seqDiff = Bio::Variation::SeqDiff->new (
                                              -id => $M20132,
     					   -moltype => 'rna',
                                              -gene_symbol => 'AR'
                                              -chromosome => 'X',
                                              -numbering => 'coding'
                                              );
     # get a DNAMutation object somehow
     $seqDiff->add_Variant($dnamut);
     print  $seqDiff->sys_name(), "\n";

DESCRIPTION
===========

   SeqDiff stores *Note Bio/Variation/VariantI: Bio/Variation/VariantI,
object references and descriptive information common to all changes in a
sequence. Mutations are understood to be any kind of sequence markers and
are expected to occur in the same chromosome.

   The methods of SeqDiff are geared towards describing mutations in human
genes using gene-based coordiante system where 'A' of the initiator codon
has number 1 and the one before it -1. This is according to conventions of
human genetics.

   There will be class Bio::Variation::Genotype to describe markers in
different chromosomes and diploid genototypes.

   Classes implementing *Note Bio/Variation/VariantI:
Bio/Variation/VariantI, interface are *Note Bio/Variation/DNAMutation:
Bio/Variation/DNAMutation,, *Note Bio/Variation/RNAChange:
Bio/Variation/RNAChange, and *Note Bio/Variation/AAChange:
Bio/Variation/AAChange,.

   Variant objects can be added using two ways: an array passed to the
constructor or as individual Variant objects with add_Variant method.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.

     bioperl-l@bioperl.org                         - General discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via  email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Heikki Lehvaslaiho
===========================

   Email:  heikki@ebi.ac.uk Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

new
---

     Title   : new
     Usage   : $seqDiff = Bio::Variation::SeqDiff->new;
     Function: generates a new Bio::Variation::SeqDiff
     Returns : reference to a new object of class SeqDiff
     Args    :

id
--

     Title   : id
     Usage   : $obj->id(H0001); $id = $obj->id();
     Function:

     Sets or returns the id of the seqDiff.
     Should be used to give the collection of variants a UID
     without semantic associations.

     Example :
     Returns : value of id, a scalar
     Args    : newvalue (optional)

sysname
-------

     Title   : sysname
     Usage   : $obj->sysname('5C>G'); $sysname = $obj->sysname();
     Function:

     Sets or returns the systematic name of the seqDiff.  The
     name should follow the HUGO Mutation Database Initiative
     approved nomenclature. If called without first setting the
     value, will generate it from L<Bio::Variation::DNAMutation>
     objects attached.

     Example :
     Returns : value of sysname, a scalar
     Args    : newvalue (optional)

trivname
--------

     Title   : trivname
     Usage   : $obj->trivname('[A2G;T56G]'); $trivname = $obj->trivname();
     Function:

     Sets or returns the trivial name of the seqDiff.
     The name should follow the HUGO Mutation Database Initiative
     approved nomenclature. If called without first setting the
     value, will generate it from L<Bio::Variation::AAChange>
     objects attached.

     Example :
     Returns : value of trivname, a scalar
     Args    : newvalue (optional)

chromosome
----------

     Title   : chromosome
     Usage   : $obj->chromosome('X'); $chromosome = $obj->chromosome();
     Function:

     Sets or returns the chromosome ("linkage group") of the seqDiff.

     Example :
     Returns : value of chromosome, a scalar
     Args    : newvalue (optional)

gene_symbol
-----------

     Title   : gene_symbol
     Usage   : $obj->gene_symbol('FOS'); $gene_symbol = $obj->gene_symbol;
     Function:

     Sets or returns the gene symbol for the studied CDS.

     Example :
     Returns : value of gene_symbol, a scalar
     Args    : newvalue (optional)

description
-----------

     Title   : description
     Usage   : $obj->description('short description'); $descr = $obj->description();
     Function:

     Sets or returns the short description of the seqDiff.

     Example :
     Returns : value of description, a scalar
     Args    : newvalue (optional)

moltype
-------

     Title   : moltype
     Usage   : if( $obj->moltype eq 'dna' ) { /Do Something/ }
     Function: Returns the type of primary reference sequence being one of
               'dna', 'rna' or 'protein'. This is case sensitive.

     Returns : a string either 'dna','rna','protein'.
     Args    : none

numbering
---------

     Title   : numbering
     Usage   : $obj->numbering('coding'); $numbering = $obj->numbering();
     Function:

     Sets or returns the string giving the numbering schema used
     to describe the variants.

     Example :
     Returns : value of numbering, a scalar
     Args    : newvalue (optional)

offset
------

     Title   : offset
     Usage   : $obj->offset(124); $offset = $obj->offset();
     Function:

     Sets or returns the offset from the beginning of the DNA sequence
     to the coordinate start used to describe variants. Typically
     the beginning of the coding region of the gene.
     The cds_start should be 1 + offset.

     Example :
     Returns : value of offset, a scalar
     Args    : newvalue (optional)

cds_start
---------

     Title   : cds_start
     Usage   : $obj->cds_start(123); $cds_start = $obj->cds_start();
     Function:

     Sets or returns the cds_start from the beginning of the DNA
     sequence to the coordinate start used to describe
     variants. Typically the beginning of the coding region of
     the gene. Needs to be and is implemented as 1 + offset.

     Example :
     Returns : value of cds_start, a scalar
     Args    : newvalue (optional)

cds_end
-------

     Title   : cds_end
     Usage   : $obj->cds_end(321); $cds_end = $obj->cds_end();
     Function:

     Sets or returns the position of the last nucleotitide of the
     termination codon. The coordinate system starts from cds_start.

     Example :
     Returns : value of cds_end, a scalar
     Args    : newvalue (optional)

rna_offset
----------

     Title   : rna_offset
     Usage   : $obj->rna_offset(124); $rna_offset = $obj->rna_offset();
     Function:

     Sets or returns the rna_offset from the beginning of the RNA sequence
     to the coordinate start used to describe variants. Typically
     the beginning of the coding region of the gene.

     Example :
     Returns : value of rna_offset, a scalar
     Args    : newvalue (optional)

rna_id
------

     Title   : rna_id
     Usage   : $obj->rna_id('transcript#3'); $rna_id = $obj->rna_id();
     Function:

     Sets or returns the ID for original RNA sequence of the seqDiff.

     Example :
     Returns : value of rna_id, a scalar
     Args    : newvalue (optional)

add_Variant
-----------

     Title   : add_Variant
     Usage   : $obj->add_Variant($variant)
     Function:

     Pushes one Bio::Variation::Variant into the list of variants.
     At the same time, creates a link from the Variant to SeqDiff
     using its SeqDiff method.

     Example :
     Returns : 1 when succeeds, 0 for failure.
     Args    : Variant object

each_Variant
------------

     Title   : each_Variant
     Usage   : $obj->each_Variant();
     Function:

     Returns a list of Variants.

     Example :
     Returns : list of Variants
     Args    : none

add_Gene
--------

     Title   : add_Gene
     Usage   : $obj->add_Gene($gene)
     Function:

     Pushes one L<Bio::LiveSeq::Gene> into the list of genes.

     Example :
     Returns : 1 when succeeds, 0 for failure.
     Args    : L<Bio::LiveSeq::Gene> object

each_Gene
---------

     Title   : each_Gene
     Usage   : $obj->each_Gene();
     Function:

     Returns a list of L<Bio::LiveSeq::Gene>s.

     Example :
     Returns : list of Genes
     Args    : none

dna_ori
-------

     Title   : dna_ori
     Usage   : $obj->dna_ori('atgctgctgctgct'); $dna_ori = $obj->dna_ori();
     Function:

     Sets or returns the original DNA sequence string of the seqDiff.

     Example :
     Returns : value of dna_ori, a scalar
     Args    : newvalue (optional)

dna_mut
-------

     Title   : dna_mut
     Usage   : $obj->dna_mut('atgctggtgctgct'); $dna_mut = $obj->dna_mut();
     Function:

     Sets or returns the mutated DNA sequence of the seqDiff.

     Example :
     Returns : value of dna_mut, a scalar
     Args    : newvalue (optional)

rna_ori
-------

     Title   : rna_ori
     Usage   : $obj->rna_ori('atgctgctgctgct'); $rna_ori = $obj->rna_ori();
     Function:

     Sets or returns the original RNA sequence of the seqDiff.

     Example :
     Returns : value of rna_ori, a scalar
     Args    : newvalue (optional)

rna_mut
-------

     Title   : rna_mut
     Usage   : $obj->rna_mut('atgctggtgctgct'); $rna_mut = $obj->rna_mut();
     Function:

     Sets or returns the mutated RNA sequence of the seqDiff.

     Example :
     Returns : value of rna_mut, a scalar
     Args    : newvalue (optional)

aa_ori
------

     Title   : aa_ori
     Usage   : $obj->aa_ori('MAGVLL*'); $aa_ori = $obj->aa_ori();
     Function:

     Sets or returns the original protein sequence of the seqDiff.

     Example :
     Returns : value of aa_ori, a scalar
     Args    : newvalue (optional)

aa_mut
------

     Title   : aa_mut
     Usage   : $obj->aa_mut('MA*'); $aa_mut = $obj->aa_mut();
     Function:

     Sets or returns the mutated protein sequence of the seqDiff.

     Example :
     Returns : value of aa_mut, a scalar
     Args    : newvalue (optional)

seqobj
------

     Title   : seqobj
     Usage   : $dnaobj = $obj->seqobj('dna_mut');
     Function:

     Returns the any original or mutated sequences as a
     L<Bio::PrimarySeq> object.

     Example :
     Returns : L<Bio::PrimarySeq> object for the requested sequence
     Args    : string, method name for the sequence requested

alignment
---------

     Title   : alignment
     Usage   : $obj->alignment
     Function:

     Returns a pretty RNA/AA sequence alignment from linked
     objects.  Under construction: Only simple coding region
     point mutations work.

     Example :
     Returns :
     Args    : none


File: pm.info,  Node: Bio/Variation/VariantI,  Next: Bit/ShiftReg,  Prev: Bio/Variation/SeqDiff,  Up: Module List

Sequence Change SeqFeature abstract class
*****************************************

NAME
====

   Bio::Variation::VariantI - Sequence Change SeqFeature abstract class

SYNOPSIS
========

     #get Bio::Variant::VariantI somehow
     print $var->restriction_changes, "\n";
     foreach $allele ($var->each_Allele) {
         #work on Bio::Variation::Allele objects
     }

DESCRIPTION
===========

   This superclass defines common methods to basic sequence changes.  The
instantiable classes *Note Bio/Variation/DNAMutation:
Bio/Variation/DNAMutation,, *Note Bio/Variation/RNAChange:
Bio/Variation/RNAChange, and *Note Bio/Variation/AAChange:
Bio/Variation/AAChange, use them.

   These classes store information, heavy computation to detemine allele
sequences is done elsewhere.

   The database cross-references are implemented as *Note
Bio/Annotation/DBLink: Bio/Annotation/DBLink, objects. The methods to
access them are defined in *Note Bio/DBLinkContainerI:
Bio/DBLinkContainerI,.

   Bio::Variation::VariantI redifines and extends *Note
Bio/SeqFeature/Generic: Bio/SeqFeature/Generic, for sequence variations.
This class describes specific sequence change events. These events are
always from a specific reference sequence to something different.

   IMPORTANT: The notion of reference sequence permeates all
Bio::Variation classes. This is especially important to remember when
dealing with Alleles. In a polymorphic site, there can be a large number
of alleles. One of then has to be selected to be the reference allele
(allele_ori). ALL the rest has to be passed to the Variant using the
method add_Allele, including the mutated allele in a canonical mutation.
The IO modules and generated attributes depend on it. They ignore the
allele linked to using allele_mut and circulate each Allele returned by
each_Allele into allele_mut and calculate the changes between that and
allele_ori.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.

     bioperl-l@bioperl.org                         - General discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via  email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR - Heikki Lehvaslaiho
===========================

   Email:  heikki@ebi.ac.uk Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

id
--

     Title   : id
     Usage   : $obj->id
     Function:
     
               Read only method. Returns the id of the variation object.
               The id is the id of the first DBLink object attached to this object.
     
     Example :
     Returns : scalar
     Args    : none

add_Allele
----------

     Title   : add_Allele
     Usage   : $self->add_Allele($allele)
     Function:

     Adds one Bio::Variation::Allele into the list of alleles.
                 Note that the method forces the convention that nucleotide
                 sequence is in lower case and amino acds are in upper
                 case.

     Example :
     Returns : 1 when succeeds, 0 for failure.
     Args    : Allele object

each_Allele
-----------

     Title   : alleles
     Usage   : $obj->each_Allele();
     Function:

     Returns a list of Bio::Variation::Allele objects

     Example :
     Returns : list of Alleles
     Args    : none

allele_ori
----------

     Title   : allele_ori
     Usage   : $obj->allele_ori();
     Function:

     Links to and returns the L<Bio::Variation::Allele> object.
     If value is not set, returns false. All other Alleles are
     compared to this.

     Amino acid sequences are stored in upper case characters,
     others in lower case.

     Example :
     Returns : string
     Args    : string

allele_mut
----------

     Title   : allele_mut
     Usage   : $obj->allele_mut();
     Function:

     Links to and returns the L<Bio::Variation::Allele>
     object.  Sets and returns the mutated allele sequence.
     If value is not set, returns false.

     Amino acid sequences are stored in upper case characters,
     others in lower case.

     Example :
     Returns : string
     Args    : string

length
------

     Title   : length
     Usage   : $obj->length();
     Function:

     Sets and returns the length of the affected original
     allele sequence.  If value is not set, returns false == 0.

     Value 0 means that the variant position is before the
     start=end sequence position. (Value 1 would denote a point
     mutation). This follows the convension to report an
     insertion (2insT) in equivalent way to a corresponding
     deletion (2delT) (Think about indel polymorpism ATC <=> AC
     where the origianal state is not known ).

     Example :
     Returns : string
     Args    : string

upStreamSeq
-----------

     Title   : upStreamSeq
     Usage   : $obj->upStreamSeq();
     Function:

     Sets and returns upstream flanking sequence string.  If
     value is not set, returns false. The sequence should be
     >=25 characters long, if possible.

     Example :
     Returns : string or false
     Args    : string

dnStreamSeq
-----------

     Title   : dnStreamSeq
     Usage   : $obj->dnStreamSeq();
     Function:

     Sets and returns dnstream flanking sequence string.  If
     value is not set, returns false. The sequence should be
     >=25 characters long, if possible.

     Example :
     Returns : string or false
     Args    : string

label
-----

     Title   : label
     Usage   : $obj->label();
     Function:

     Sets and returns mutation event label(s).  If value is not
     set, or no argument is given returns false.  Each
     instantiable class needs to implement this method. Valid
     values are listed in 'Mutation event controlled vocabulary' in
     http://www.ebi.ac.uk/mutations/recommendations/mutevent.html.

     Example :
     Returns : string
     Args    : string

status
------

     Title   : status
     Usage   : $obj->status()
     Function:

     Returns the status of the sequence change object.
     Valid values are: 'suspected' and 'proven'

     Example : $obj->status('proven');
     Returns : scalar
     Args    : valid string (optional, for setting)

proof
-----

     Title   : proof
     Usage   : $obj->proof()
     Function:

     Returns the proof of the sequence change object.
     Valid values are: 'suspected' and 'proven'

     Example : $obj->proof('computed');
     Returns : scalar
     Args    : valid string (optional, for setting)

region
------

     Title   : region
     Usage   : $obj->region();
     Function:

     Sets and returns the name of the sequence region type or
     protein domain at this location.  If value is not set,
     returns false.

     Example :
     Returns : string
     Args    : string

region_value
------------

     Title   : region_value
     Usage   : $obj->region_value();
     Function:

     Sets and returns the name of the sequence region_value or
     protein domain at this location.  If value is not set,
     returns false.

     Example :
     Returns : string
     Args    : string

numbering
---------

     Title   : numbering
     Usage   : $obj->numbering()
     Function:

     Returns the numbering chema used locating sequnce features.
     Valid values are: 'entry' and 'coding'

     Example : $obj->numbering('coding');
     Returns : scalar
     Args    : valid string (optional, for setting)

mut_number
----------

     Title   : mut_number
     Usage   : $num = $obj->mut_number;
             : $num = $obj->mut_number($number);
     Function:

     Returns or sets the number identifying the order in which the
     mutation has been issued. Numbers shouldstart from 1.
     If the number has never been set, the method will return ''

     If you want the output from IO modules look nice and, for
     multivariant/allele variations, make sense you better set
     this attribute.

     Returns : an integer

SeqDiff
-------

     Title   : SeqDiff
     Usage   : $mutobj = $obj->SeqDiff;
             : $mutobj = $obj->SeqDiff($objref);
     Function:

     Returns or sets the link-reference to the umbrella
     L<Bio::Variation::SeqDiff> object.  If there is no link,
     it will return undef

     Note: Adding a variant into a SeqDiff object will
     automatically set this value.

     Returns : an obj_ref or undef

add_DBLink
----------

     Title   : add_DBLink
     Usage   : $self->add_DBLink($ref)
     Function: adds a link object
     Example :
     Returns :
     Args    :

each_DBLink
-----------

     Title   : each_DBLink
     Usage   : foreach $ref ( $self->each_DBlink() )
     Function: gets an array of DBlink of objects
     Example :
     Returns :
     Args    :

restriction_changes
-------------------

     Title   : restriction_changes
     Usage   : $obj->restriction_changes();
     Function:

     Returns a string containing a list of restriction
     enzyme changes of form +EcoRI, separated by
     commas. Strings need to be valid restriction enzyme names
     as stored in REBASE. allele_ori and allele_mut need to be assigned.

     Example :
     Returns : string
     Args    : string


