This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Bio/Tools/Run/Alignment/TCoffee,  Next: Bio/Tools/Run/StandAloneBlast,  Prev: Bio/Tools/Run/Alignment/Clustalw,  Up: Module List

Object for the calculation of a multiple sequence alignment from a set of unaligned sequences or alignments using the TCoffee program
*************************************************************************************************************************************

NAME
====

   Bio::Tools::Run::Alignment::TCoffee - Object for the calculation of a
multiple sequence alignment from a set of unaligned sequences or
alignments using the TCoffee program

SYNOPSIS
========

     # Build a tcoffee alignment factory
     @params = ('ktuple' => 2, 'matrix' => 'BLOSUM');
     $factory = new Bio::Tools::Run::Alignment::TCoffee (@params);

     # Pass the factory a list of sequences to be aligned.
     $inputfilename = 't/cysprot.fa';
     # $aln is a SimpleAlign object.
     $aln = $factory->align($inputfilename);

     # or where @seq_array is an array of Bio::Seq objects
     $seq_array_ref = \@seq_array;
     $aln = $factory->align($seq_array_ref);

     # Or one can pass the factory a pair of (sub)alignments
     #to be aligned against each other, e.g.:

     # where $aln1 and $aln2 are Bio::SimpleAlign objects.
     $aln = $factory->profile_align($aln1,$aln2);

     # Or one can pass the factory an alignment and one or more
     # unaligned sequences to be added to the alignment. For example:

     # $seq is a Bio::Seq object.
     $aln = $factory->profile_align($aln1,$seq);

   There are various additional options and input formats available.  See
the DESCRIPTION section that follows for additional details.

DESCRIPTION
===========

   Note: this DESCRIPTION only documents the (Bio)perl interface to
TCoffee.

   There are a number of possible parameters one can pass in TCoffee.  One
should really read the online manual for the best explaination of all the
features.  See
http://igs-server.cnrs-mrs.fr/~cnotred/Documentation/t_coffee/t_coffee_doc.html

   These can be specified as paramters when instantiating a new TCoffee
object, or through get/set methods of the same name (lowercase).

PARAMETERS FOR ALIGNMENT COMPUTATION
====================================

IN
--

     Title       : IN
     Description : (optional) input filename, this is specified when
                   align so should not use this directly unless one
                   understand TCoffee program very well.

TYPE
----

     Title       : TYPE
     Args        : [string] DNA, PROTEIN
     Description : (optional) set the sequence type, guessed automatically
                   so should not use this directly

PARAMETERS
----------

     Title       : PARAMETERS
     Description : (optional) Indicates a file containing extra parameters

EXTEND
------

     Title       : EXTEND
     Args        : 0, 1, or positive value
     Default     : 1
     Description : Flag indicating that library extension should be
                   carried out when performing multiple alignments, if set
                   to 0 then extension is not made, if set to 1 extension
                   is made on all pairs in the library.  If extension is
                   set to another positive value, the extension is only
                   carried out on pairs having a weigth value superior to
                   the specified limit.

DP_NORMALISE
------------

     Title       : DP_NORMALISE
     Args        : 0 or positive value
     Default     : 1000
     Description : When using a value different from 0, this flag sets the
                   score of the highest scoring pair to 1000.

DP_MODE
-------

     Title       : DP_MODE
     Args        : [string] gotoh_pair_wise, myers_miller_pair_wise,
                   fasta_pair_wise cfasta_pair_wise
     Default     : cfast_fair_wise
     Description : Indicates the type of dynamic programming used by
                   the program

     gotoh_pair_wise : implementation of the gotoh algorithm
     (quadratic in memory and time)

     myers_miller_pair_wise : implementation of the Myers and Miller
     dynamic programming algorithm ( quadratic in time and linear in
     space). This algorithm is recommended for very long sequences. It
     is about 2 time slower than gotoh. It only accepts tg_mode=1.

     fasta_pair_wise: implementation of the fasta algorithm. The
     sequence is hashed, looking for ktuples words. Dynamic programming
     is only carried out on the ndiag best scoring diagonals. This is
     much faster but less accurate than the two previous.

     cfasta_pair_wise : c stands for checked. It is the same
     algorithm. The dynamic programming is made on the ndiag best
     diagonals, and then on the 2*ndiags, and so on until the scores
     converge. Complexity will depend on the level of divergence of the
     sequences, but will usually be L*log(L), with an accuracy
     comparable to the two first mode ( this was checked on BaliBase).

KTUPLE
------

     Title       : KTUPLE
     Args        : numeric value
     Default     : 1 or 2 (1 for protein, 2 for DNA )

     Description : Indicates the ktuple size for cfasta_pair_wise dp_mode
                   and fasta_pair_wise. It is set to 1 for proteins, and 2
                   for DNA. The alphabet used for protein is not the 20
                   letter code, but a mildly degenerated version, where
                   some residues are grouped under one letter, based on
                   physicochemical properties:
                   rk, de, qh, vilm, fy (the other residues are
                   not degenerated).

NDIAGS
------

     Title       : NDIAGS
     Args        : numeric value
     Default     : 0
     Description : Indicates the number of diagonals used by the
                   fasta_pair_wise algorithm. When set to 0,
                   n_diag=Log (length of the smallest sequence)

DIAG_MODE
---------

     Title       : DIAG_MODE
     Args        : numeric value
     Default     : 0

     Description : Indicates the manner in which diagonals are scored
                  during the fasta hashing.

     0 indicates that the score of a diagonal is equal to the
     sum of the scores of the exact matches it contains.

     1 indicates that this score is set equal to the score of
     the best uninterrupted segment

     1 can be useful when dealing with fragments of sequences.

SIM_MATRIX
----------

     Title       : SIM_MATRIX
     Args        : string
     Default     : vasiliky
     Description : Indicates the manner in which the amino acid is being
                   degenerated when hashing. All the substitution matrix
                   are acceptable. Categories will be defined as sub-group
                   of residues all having a positive substitution score
                   (they can overlap).

     If you wish to keep the non degenerated amino acid
     alphabet, use 'idmat'

MATRIX
------

     Title       : MATRIX
     Args        :
     Default     :
     Description : This flag is provided for compatibility with
                   ClustalW. Setting matrix = 'blosum' is equivalent to
                   -in=Xblosum62mt , -matrix=pam is equivalent to
                   in=Xpam250mt . Apart from this, the rules are similar
                   to those applying when declaring a matrix with the
                   -in=X fl

GAPOPEN
-------

     Title       : GAPOPEN
     Args        : numeric
     Default     : 0
     Description : Indicates the penalty applied for opening a gap. The
                   penalty must be negative. If you provide a positive
                   value, it will automatically be turned into a negative
                   number. We recommend a value of 10 with pam matrices,
                   and a value of 0 when a library is used.

GAPEXT
------

     Title       : GAPEXT
     Args        : numeric
     Default     : 0
     Description : Indicates the penalty applied for extending a gap.

COSMETIC_PENALTY
----------------

     Title       : COSMETIC_PENALTY
     Args        : numeric
     Default     : 100
     Description : Indicates the penalty applied for opening a gap. This
                   penalty is set to a very low value. It will only have
                   an influence on the portions of the alignment that are
                   unalignable. It will not make them more correct, but
                   only more pleasing to the eye ( i.e. Avoid stretches of
                   lonely residues).

     The cosmetic penalty is automatically turned off if a
     substitution matrix is used rather than a library.

TG_MODE
-------

     Title       : TG_MODE
     Args        : 0,1,2
     Default     : 1
     Description : (Terminal Gaps)
                   0: indicates that terminal gaps must be panelized with
                      a gapopen and a gapext penalty.
                   1: indicates that terminal gaps must be penalized only
                      with a gapext penalty
                   2: indicates that terminal gaps must not be penalized.

WEIGHT
------

     Title       : WEIGHT
     Args        : sim or sim_<matrix_name or matrix_file> or integer value
     Default     : sim

     Description : Weight defines the way alignments are weighted when
                   turned into a library.

     sim indicates that the weight equals the average
         identity within the match residues.

     sim_matrix_name indicates the average identity with two
         residues regarded as identical when their
         substitution value is positive. The valid matrices
         names are in matrices.h (pam250mt) . Matrices not
         found in this header are considered to be
         filenames. See the format section for matrices. For
         instance, -weight=sim_pam250mt indicates that the
         grouping used for similarity will be the set of
         classes with positive substitutions. Other groups
         include

     sim_clustalw_col ( categories of clustalw
     marked with :)

     sim_clustalw_dot ( categories of clustalw
     marked with .)

     Value indicates that all the pairs found in the
     alignments must be given the same weight equal to
     value. This is useful when the alignment one wishes to
     turn into a library must be given a pre-specified score
     (for instance if they come from a structure
     super-imposition program). Value is an integer:

     -weight=1000

     Note       : Weight only affects methods that return an alignment to
                  T-Coffee, such as ClustalW. On the contrary, the
                  version of Lalign we use here returns a library where
                  weights have already been applied and are therefore
                  insensitive to the -weight flag.

SEQ_TO_ALIGN
------------

     Title       : SEQ_TO_ALIGN
     Args        : filename
     Default     : no file - align all the sequences

     Description : You may not wish to align all the sequences brought in
                   by the -in flag. Supplying the seq_to_align flag allows
                   for this, the file is simply a list of names in Fasta
                   format.

     However, note that library extension will be carried out
     on all the sequences.

PARAMETERS FOR TREE COMPUTATION AND OUTPUT
==========================================

NEWTREE
-------

     Title       : NEWTREE
     Args        : treefile
     Default     : no file
     Description : Indicates the name of the new tree to compute. The
                   default will be <sequence_name>.dnd, or <run_name.dnd>.
                   Format is Phylips tree format

USETREE
-------

     Title       : USETREE
     Args        : treefile
     Default     : no file specified
     Description : This flag indicates that rather than computing a new
                   dendrogram, t_coffee can use a pre-computed one. The
                   tree files are in phylips format and compatible with
                   ClustalW. In most cases, using a pre-computed tree will
                   halve the computation time required by t_coffee. It is
                   also possible to use trees output by ClustalW or
                   Phylips. Format is Phylips tree format

TREE_MODE
---------

     Title       : TREE_MODE
     Args        : slow, fast, very_fast
     Default     : very_fast
     Description : This flag indicates the method used for computing the
                   dendrogram.
                   slow : the chosen dp_mode using the extended library,
                   fast : The fasta dp_mode using the extended library.
                   very_fast: The fasta dp_mode using pam250mt.

QUICKTREE
---------

     Title       : QUICKTREE
     Args        :
     Default     :
     Description : This flag is kept for compatibility with ClustalW.
                   It indicates that:  -tree_mode=very_fast

PARAMETERS FOR ALIGNMENT OUTPUT
===============================

OUTFILE
-------

     Title       : OUTFILE
     Args        : out_aln file, default, no
     Default     : default ( yourseqfile.aln)
     Description : indicates name of output alignment file

OUTPUT
------

     Title       : OUTPUT
     Args        : format1, format2
     Default     : clustalw
     Description : Indicated format for outputting outputfile
                   Supported formats are:

     clustalw_aln, clustalw: ClustalW format.
     gcg, msf_aln : Msf alignment.
     pir_aln : pir alignment.
     fasta_aln : fasta alignment.
     phylip : Phylip format.
     pir_seq : pir sequences (no gap).
     fasta_seq : fasta sequences (no gap).
         As well as:
      score_html : causes the output to be a reliability
                   plot in HTML
      score_pdf : idem in PDF.
      score_ps : idem in postscript.

     More than one format can be indicated:
                 -output=clustalw,gcg, score_html

CASE
----

     Title       : CASE
     Args        : upper, lower
     Default     : upper
     Description : triggers choice of the case for output

CPU
---

     Title       : CPU
     Args        : value
     Default     : 0
     Description : Indicates the cpu time (micro seconds) that must be
                   added to the t_coffee computation time.

OUT_LIB
-------

     Title       : OUT_LIB
     Args        : name of library, default, no
     Default     : default
     Description : Sets the name of the library output. Default implies
                   <run_name>.tc_lib

OUTORDER
--------

     Title       : OUTORDER
     Args        : input or aligned
     Default     : input
     Description : Sets the name of the library output. Default implies
                   <run_name>.tc_lib

SEQNOS
------

     Title       : SEQNOS
     Args        : on or off
     Default     : off
     Description : Causes the output alignment to contain residue numbers
                   at the end of each line:

PARAMETERS FOR GENERIC OUTPUT
=============================

RUN_NAME
--------

     Title       : RUN_NAME
     Args        : your run name
     Default     :
     Description : This flag causes the prefix <your sequences> to be
                   replaced by <your run name> when renaming the default
                   files.

ALIGN
-----

     Title       : ALIGN
     Args        :
     Default     :
     Description : Indicates that the program must produce the
                   alignment. This flag is here for compatibility with
                   ClustalW

QUIET
-----

     Title       : QUIET
     Args        : stderr, stdout, or filename, or nothing
     Default     : stderr
     Description : Redirects the standard output to either a file.
                  -quiet on its own redirect the output to /dev/null.

CONVERT
-------

     Title       : CONVERT
     Args        :
     Default     :
     Description : Indicates that the program must not compute the
                   alignment but simply convert all the sequences,
                   alignments and libraries into the format indicated with
                   -output. This flag can also be used if you simply want
                   to compute a library ( i.e. You have an alignment and
                   you want to turn it into a library).

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     bioperl-l@bioperl.org          - General discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via  email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR -  Jason Stajich, Peter Schattner
========================================

   Email jason@chg.mc.duke.edu, schattner@alum.mit.edu

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

exists_tcoffee
--------------

     Title   : exists_tcoffee
     Usage   : $coffeefound = Bio::Tools::Run::Alignment::TCoffee->exists_tcoffee()
     Function: Determine whether tcoffee program can be found on current host
     Example :
     Returns : 1 if tcoffee program found at expected location, 0 otherwise.
     Args    :  none

align
-----

     Title   : align
     Usage   :
     	$inputfilename = 't/cysprot.fa';
     	$aln = $factory->align($inputfilename);
     or
     	$seq_array_ref = \@seq_array; @seq_array is array of Seq objs
     	$aln = $factory->align($seq_array_ref);
     Function: Perform a multiple sequence alignment
     Example :
     Returns : Reference to a SimpleAlign object containing the
               sequence alignment.
     Args    : Name of a file containing a set of unaligned fasta sequences
               or else an array of references to Bio::Seq objects.

     Throws an exception if argument is not either a string (eg a
     filename) or a reference to an array of Bio::Seq objects.  If
     argument is string, throws exception if file corresponding to string
     name can not be found. If argument is Bio::Seq array, throws
     exception if less than two sequence objects are in array.

profile_align
-------------

     Title   : profile_align
     Usage   :
     Function: Perform an alignment of 2 (sub)alignments
     Example :
     Returns : Reference to a SimpleAlign object containing the (super)alignment.
     Args    : Names of 2 files containing the subalignments
             or references to 2 Bio::SimpleAlign objects.

   Throws an exception if arguments are not either strings (eg filenames)
or references to SimpleAlign objects.

_run
----

     Title   :  _run
     Usage   :  Internal function, not to be called directly
     Function:  makes actual system call to tcoffee program
     Example :
     Returns : nothing; tcoffee output is written to a
               temporary file $TMPOUTFILE
     Args    : Name of a file containing a set of unaligned fasta sequences
               and hash of parameters to be passed to tcoffee

_setinput
---------

     Title   :  _setinput
     Usage   :  Internal function, not to be called directly
     Function:  Create input file for tcoffee program
     Example :
     Returns : name of file containing tcoffee data input
     Args    : Seq or Align object reference or input file name

_setparams
----------

     Title   :  _setparams
     Usage   :  Internal function, not to be called directly
     Function:  Create parameter inputs for tcoffee program
     Example :
     Returns : parameter string to be passed to tcoffee
               during align or profile_align
     Args    : name of calling object


File: pm.info,  Node: Bio/Tools/Run/StandAloneBlast,  Next: Bio/Tools/SeqAnal,  Prev: Bio/Tools/Run/Alignment/TCoffee,  Up: Module List

Object for the local execution of the NCBI Blast program suite (blastall, blastpgp, bl2seq)
*******************************************************************************************

NAME
====

   Bio::Tools::Run::StandAloneBlast - Object for the local execution of the
NCBI Blast program suite (blastall, blastpgp, bl2seq)

SYNOPSIS
========

   Local-blast "factory object" creation and blast-parameter
initialization:

     @params = ('database' => 'swissprot','outfile' => 'blast1.out',
     	    '_READMETHOD' => 'Blast');

     $factory = Bio::Tools::Run::StandAloneBlast->new(@params);

   Blast a sequence against a database:

     $str = Bio::SeqIO->new(-file=>'t/amino.fa' , '-format' => 'Fasta' );
     $input = $str->next_seq();
     $input2 = $str->next_seq();
     $blast_report = $factory->blastall($input);

   Run an iterated Blast (psiblast) of a sequence against a database:

     $factory->j(3);    # 'j' is blast parameter for # of iterations
     $factory->outfile('psiblast1.out');
     $factory = Bio::Tools::Run::StandAloneBlast->new(@params);
     $blast_report = $factory->blastpgp($input);

   Use blast to align 2 sequences against each other:

     $factory = Bio::Tools::Run::StandAloneBlast->new('outfile' => 'bl2seq.out');
     $factory->bl2seq($input, $input2);

   Various additional options and input formats are available.  See the
DESCRIPTION section for details.

DESCRIPTION
===========

   This DESCRIPTION only documents Bio::Tools::Run::StandAloneBlast.pm: - a
Bioperl object for running the NCBI standAlone BLAST package.  Blast,
itself, is a large & complex program - for more information regarding
BLAST, please see the BLAST documentation which accompanies the BLAST
distribution. BLAST is available from ftp://ncbi.nlm.nih.gov/blast/.

   (A source of confusion in documenting a BLAST interface is that the
term "program" is used in - at least - three different ways in the BLAST
documentation.  In this DESCRIPTION, "program" will refer to the BLAST
routine set by BLAST's -p parameter that can be set to blastn, blastp,
tblastx etc.  We will use the term Blast "executable" to refer to the
various different executable files that may be called - ie blastall,
blastpgp or bl2seq.  In addition, there are several BLAST capabilities
(which are also referred to as "programs") and are implemented by using
specific combinations of BLAST executables, programs and parameters.  They
will be referred by their specific names - eg PSIBLAST and PHIBLAST. )

   StandAloneBlast.pm has been tested so far only under Linux. I expect
that it should also work under other Unix systems. However, since the
module is implemented using (unix) system calls, modification may be
necessary before StandAloneBlast.pm would work under non-Unix operating
systems (eg Windows, MacOS).  Before running StandAloneBlast.pm it is
necessary: to install BLAST on your system, to edit set the environmental
variable $BLASTDIR or your $PATH variable to point to the BLAST directory,
and to ensure that users have execute privilieges for the BLAST program.
If the databases which will be searched by BLAST are located in the data
subdirectory of the blast program directory (the default installation
location), StandAloneBlast.pm will find them; however, if the database
files are located in any other location, environmental variable
$BLASTDATADIR will need to be set to point to that directory.

   The use of the StandAloneBlast.pm module is as follows: Initially, a
local blast "factory object" is created. The constructor may be passed an
optional array of (non-default) parameters to be used by the factory, eg:

     @params = ('program' => 'blastn', 'database' => 'ecoli.nt');
     $factory = Bio::Tools::Run::StandAloneBlast->new(@params);

   Any parameters not explicitly set will remain as the defaults of the
BLAST executable.  Note each BLAST executable has somewhat different
parameters and options.  See the BLAST Documentation for a description or
run the BLAST executable from the command line followed solely with a "-"
to see a list of options and default values for that executable; eg
>blastall -.

   BLAST parameters can be changed and/or examined at any time after the
factory has been created.  The program checks that any parameter/switch
being set/read is valid.  Except where specifically noted, StandAloneBlast
uses the same single-letter, case-sensitive parameter names as the actual
blast program.  Currently no checks are included to verify that parameters
are of the proper type (eg string or numeric) or that their values are
within the proper range.

   As an example, to change the value of the Blast parameter 'e' ('e' is
the parameter for expectation-value cutoff)

     $expectvalue = 0.01;
     $factory->e($expectvalue);

   Note that for improved script readibility one can modify the name of
the BLAST parameters as desired as long as the initial letter (and case)
of the parameter are preserved, eg $factory->expectvalue($expectvalue);
Unfortunately, some of the BLAST parameters are not the single letter one
might expect (eg "iteration round" in blastpgp is 'j'). Again one can
check by using (eg)

     > blastpgp - .

   Once the factory has been created and the appropriate parameters set,
one can call one of the supported blast executables.  The input
sequence(s) to these executables may be fasta file(s) as described in  the
BLAST documentation.

     $inputfilename = 't/testquery.fa';
     $blast_report = $factory->blastall($inputfilename);

   In addition, sequence input may be in the form of either a Bio::Seq
object or or an array of Bio::Seq objects, eg

     $input = Bio::Seq->new(-id=>"test query",-seq=>"ACTACCCTTTAAATCAGTGGGGG");
     $blast_report = $factory->blastall($input);

   For blastall and non-psiblast blastpgp runs, report object is either a
BPlite.pm or Blast.pm object, selected by the user with the parameter
_READMETHOD.  (The leading underscore is needed to distinguish this option
from options which are passed to the BLAST executable.) The default parser
is BPlite.  For (multiple iteration) psiblast and bl2seq runs the report
is automatically parsed by the BPpsilite.pm and BPbl2seq.pm parsers
respectively, since neither Blast.pm nor BPlite can parse these reports.
In any case, the "raw" blast report is also available. The filename is set
by the in the 'outfile' parameter and has the default value of
"blastreport.out".

   When using the Blast.pm parser, only a default configuration is
currently supported:

     -signif => $self->e()  || 1e-5, # where $self->e(), if set, is the BLAST cutoff value
     	-parse  => 1,
     	-stats  => 1,
     	-check_all_hits => 1,

   If it is desired to parse the resulting report with Blast.pm with other
values, the user can save the report in the file given by
$factory->outfile('outputfilelocation') and then reading that file with
Blast.pm using any parameters desired.

   For psiblast execution in BLAST's "jumpstart" mode, the program must be
passed (in addition to the query sequence itself) an alignment containing
the query sequence (in the form of a SimpleAlign object) as well as a
"mask" specifying at what residues position-specific scoring matrices
(PSSMs) are to used and at what residues default scoring matrices (eg
BLOSUM) are to be used. See psiblast documentation for more details.  The
mask itself is a string of 0's and 1's which is the same length as each
sequence in the alignment and has a "1" at locations where (PSSMs) are to
be used and a "0" at all other locations. So for example:

     $str = Bio::AlignIO->new(-file=> "cysprot.msf", '-format' => 'msf'  );
     $aln = $str->next_aln();
     $len = $aln->length_aln();
     $mask =   '1' x $len;  # simple case where PSSM's to be used at all residues
     $report = $factory->blastpgp("cysprot1.fa", $aln, $mask);

   For bl2seq execution, StandAloneBlast.pm can be combined with
AlignIO.pm to directly produce a SimpleAlign object from the alignment of
the two sequences produced by bl2seq as in:

     #Get 2 sequences
     $str = Bio::SeqIO->new(-file=>'t/amino.fa' , '-format' => 'Fasta', );
     my $seq3 = $str->next_seq();
     my $seq4 = $str->next_seq();

     # Run bl2seq on them
     $factory = Bio::Tools::Run::StandAloneBlast->new('outfile' => 'bl2seq.out');
     my $bl2seq_report = $factory->bl2seq($seq3, $seq4);

     # Use AlignIO.pm to create a SimpleAlign object from the bl2seq report
     $str = Bio::AlignIO->new(-file=> 'bl2seq.out','-format' => 'bl2seq');
     $aln = $str->next_aln();

   For more examples of syntax and use of Blast.pm, the user is encouraged
to run the scripts standaloneblast.pl in the bioperl /examples directory
and StandAloneBlast.t in the bioperl /t directory.

   Note: There is a similar (but older) perl object interface offered by
nhgri. The nhgri module only supports blastall and does not support
blastpgp, psiblast, phiblast, bl2seq etc.  This module can be found at
http://genome.nhgri.nih.gov/blastall/.

DEVELOPERS NOTES
================

   *STILL TO BE WRITTEN*

   Note: This module is still under development.  If you would like that a
specific BLAST feature be added to this perl interface, let me know.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     bioperl-l@bioperl.org               - General discussion
     http://bio.perl.org/MailList.html   - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR -  Peter Schattner
=========================

   Email schattner@alum.mit.edu

APPENDIX
========

   The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

BLAST parameters
================

   Essentially all BLAST parameter can be set via StandAloneBlast.pm.
Some of the most commonly used parameters are listed below.  All
parameters have defaults and are optional (I think.)  For a complete
listing of settable parameters, run the relevant executable BLAST program
with the option "-" as in blastall -

Blastall
--------

     -p  Program Name [String]
           Input should be one of "blastp", "blastn", "blastx",
           "tblastn", or "tblastx".
     -d  Database [String] default = nr
           The database specified must first be formatted with formatdb.
           Multiple database names (bracketed by quotations) will be accepted.
           An example would be -d "nr est"
     -i  Query File [File In]   Set by StandAloneBlast.pm from script.
       default = stdin. The query should be in FASTA format.  If multiple FASTA entries are in the input
           file, all queries will be searched.
     -e  Expectation value (E) [Real] default = 10.0
     -o  BLAST report Output File [File Out]  Optional,
     	default = ./blastreport.out ; set by StandAloneBlast.pm
     -S  Query strands to search against database (for blast[nx], and tblastx).  3 is both, 1 is top, 2 is bottom [Integer]
     	default = 3

Blastpgp (including Psiblast)
-----------------------------

     -j   is the maximum number of rounds (default 1; i.e., regular BLAST)
     -h   is the e-value threshold for including sequences in the
     	score matrix model (default 0.001)
     -c   is the "constant" used in the pseudocount formula specified in the paper (default 10)
     -B  Multiple alignment file for PSI-BLAST "jump start mode"  Optional
     -Q  Output File for PSI-BLAST Matrix in ASCII [File Out]  Optional

Bl2seq
------

     -i  First sequence [File In]
     -j  Second sequence [File In]
     -p  Program name: blastp, blastn, blastx. For blastx 1st argument should be nucleotide [String]
       default = blastp
     -o  alignment output file [File Out] default = stdout
     -e  Expectation value (E) [Real]  default = 10.0
     -S  Query strands to search against database (blastn only).  3 is both, 1 is top, 2 is bottom [Integer]
       default = 3

Methods
=======

exists_blast
------------

     Title   : exists_blast
     Usage   : $blastfound = Bio::Tools::Run::StandAloneBlast->exists_blast()
     Function: Determine whether Blast program can be found on current host
     Returns : 1 if Blast program found at expected location, 0 otherwise.
     Args    :  none

blastall
--------

     Title   : blastall
     Usage   :  $blast_report = $factory->blastall('t/testquery.fa');
     	or
     	       $input = Bio::Seq->new(-id=>"test query",
     				      -seq=>"ACTACCCTTTAAATCAGTGGGGG");
     	       $blast_report = $factory->blastall($input);
     	or
     	      $seq_array_ref = \@seq_array;  # where @seq_array is an array of Bio::Seq objects
     	      $blast_report = $factory->blastall(\@seq_array);
     Returns :  Reference to a Blast object or BPlite object
               containing the blast report.
     Args    : Name of a file or Bio::Seq object or an array of
               Bio::Seq object containing the query sequence(s).
               Throws an exception if argument is not either a string
               (eg a filename) or a reference to a Bio::Seq object
               (or to an array of Seq objects).  If argument is string,
               throws exception if file corresponding to string name can
               not be found.

blastpgp
--------

     Title   : blastpgp
     Usage   :  $blast_report = $factory-> blastpgp('t/testquery.fa');
     	or
     	       $input = Bio::Seq->new(-id=>"test query",
     				      -seq=>"ACTADDEEQQPPTCADEEQQQVVGG");
     	       $blast_report = $factory->blastpgp ($input);
     	or
     	      $seq_array_ref = \@seq_array;  # where @seq_array is an array of Bio::Seq objects
     	      $blast_report = $factory-> blastpgp(\@seq_array);
     Returns : Reference to a Blast object or BPlite object containing
               the blast report.
     Args    : Name of a file or Bio::Seq object. In psiblast jumpstart
               mode two additional arguments are required: a SimpleAlign
               object one of whose elements is the query and a "mask" to
               determine how BLAST should select scoring matrices see
               DESCRIPTION above for more details.

     Throws an exception if argument is not either a string
     (eg a filename) or a reference to a Bio::Seq object
     (or to an array of Seq objects).  If argument is string,
     throws exception if file corresponding to string name can
     not be found.
      Returns : Reference to either a BPlite.pm, Blast.pm or BPpsilite.pm
     object containing the blast report.

bl2seq
------

     Title   : bl2seq
     Usage   : $factory-> blastpgp('t/seq1.fa', 't/seq2.fa');
     	or
     	  $input1 = Bio::Seq->new(-id=>"test query1",
     				  -seq=>"ACTADDEEQQPPTCADEEQQQVVGG");
     	  $input2 = Bio::Seq->new(-id=>"test query2",
     				  -seq=>"ACTADDEMMMMMMMDEEQQQVVGG");
     	  $blast_report = $factory->bl2seq ($input1,  $input2);
     Returns : Reference to a BPbl2seq object containing the blast report.
     Args    : Names of 2 files  or 2 Bio::Seq objects containing the
               sequences to be aligned by bl2seq.

     Throws an exception if argument is not either a pair of
     strings (eg filenames) or  references to Bio::Seq objects.
     If arguments are strings, throws exception if files
     corresponding to string names can not be found.

_generic_local_blast
--------------------

     Title   : _generic_local_blast
     Usage   :  internal function not called directly
     Returns :  Blast or BPlite object
     Args    :   Reference to calling object and name of BLAST executable

_runblast
---------

     Title   :  _runblast
     Usage   :  Internal function, not to be called directly
     Function:   makes actual system call to Blast program
     Example :
     Returns : Report object in the appropriate format (BPlite,
               BPpsilite, Blast, or BPbl2seq)
     Args    : Reference to calling object, name of BLAST executable,
               and parameter string for executable

_setinput
---------

     Title   :  _setinput
     Usage   :  Internal function, not to be called directly
     Function:   Create input file(s) for Blast executable
     Example :
     Returns : name of file containing Blast data input
     Args    : Seq object reference or input file name

_setparams
----------

     Title   : _setparams
     Usage   : Internal function, not to be called directly
     Function: Create parameter inputs for Blast program
     Example :
     Returns : parameter string to be passed to Blast
     Args    : Reference to calling object and name of BLAST executable


File: pm.info,  Node: Bio/Tools/SeqAnal,  Next: Bio/Tools/SeqPattern,  Prev: Bio/Tools/Run/StandAloneBlast,  Up: Module List

Bioperl sequence analysis base class.
*************************************

NAME
====

   Bio::Tools::SeqAnal.pm - Bioperl sequence analysis base class.

SYNOPSIS
========

Object Creation
---------------

   This module is an abstract base class. Perl will let you instantiate it,
but it provides little functionality on its own. This module should be
used via a specialized subclass. See `_initialize' in this node() for a
description of constructor parameters.

     require Bio::Tools::SeqAnal;

   To run and parse a new report:

     $hit = new Bio::Tools::SeqAnal ( -run   => \%runParams,
     				     -parse => 1);

   To parse an existing report:

     $hit = new Bio::Tools::SeqAnal ( -file  => 'filename.data',
     				     -parse => 1);

   To run a report without parsing:

     $hit = new Bio::Tools::SeqAnal ( -run   => \%runParams
     				     );

   To read an existing report without parsing:

     $hit = new Bio::Tools::SeqAnal ( -file  => 'filename.data',
     				     -read  => 1);

INSTALLATION
============

   This module is included with the central Bioperl distribution:

     http://bio.perl.org/Core/Latest
     ftp://bio.perl.org/pub/DIST

   Follow the installation instructions included in the README file.

DESCRIPTION
===========

   Bio::Tools::SeqAnal.pm is a base class for specialized sequence
analysis modules such as Bio::Tools::Blast.pm and *Bio::Tools::Fasta.pm*.
It provides some basic data and functionalities that are not unique to a
specialized module such as:

   * reading raw data into memory.

   * storing name and version of the program.

   * storing name of the query sequence.

   * storing name and version of the database.

   * storing & determining the date on which the analysis was performed.

   * basic file manipulations (compress, uncompress, delete).

   Some of these functionalities (reading, file maipulation) are inherited
from *Bio::Root::Object.pm*, from which Bio::Tools::SeqAnal.pm derives.

RUN, PARSE, and READ
====================

   A SeqAnal.pm object can be created using one of three modes: run,
parse, or read.

     MODE      DESCRIPTION
     -----     -----------
     run       Run a new sequence analysis report. New results can then
               be parsed or saved for analysis later.

     parse     Parse the data from a sequence analysis report loading it
               into the SeqAnal.pm object.

     read      Read in data from an existing raw analysis report without
               parsing it. In the future, this may also permit persistent
               SeqAnal.pm objects. This mode is considered experimental.

   The mode is set by supplying switches to the constructor, see
`_initialize' in this node().

   A key feature of SeqAnal.pm is the ability to access raw data in a
generic fashion. Regardless of what sequence analysis method is used, the
raw data always need to be read into memory.  The SeqAnal.pm class
utilizes the `read' in this node() method inherited from
*Bio::Root::Object.pm* to permit the following:

   * read from a file or STDIN.

   * read a single record or a stream containing multiple records.

   * specify a record separator.

   * store all input data in memory or process the data stream as it is
     being read.

   By permitting the parsing of data as it is being read, each record can
be analyzed as it is being read and saved or discarded as necessary.  This
can be useful when cruching through thousands of reports.  For examples of
this, see the `parse' in this node() methods defined in
Bio::Tools::Blast.pm and *Bio::Tools::Fasta.pm*.

Parsing & Running
-----------------

   Parsing and running of sequence analysis reports must be implemented
for each specific subclass of SeqAnal.pm. No-op stubs ("virtual methods")
are provided here for the `parse' in this node() and `run' in this node()
methods. See Bio::Tools::Blast.pm and *Bio::Tools::Fasta.pm* for examples.

DEPENDENCIES
============

   Bio::Tools::SeqAnal.pm is a concrete class that inherits from
*Bio::Root::Object.pm*.  This module also makes use of a number of
functionalities inherited from *Bio::Root::Object.pm* (file manipulations
such as reading, compressing, decompressing, deleting, and obtaining date.

FEEDBACK
========

Mailing Lists
-------------

   User feedback is an integral part of the evolution of this and other
Bioperl modules.  Send your comments and suggestions preferably to one of
the Bioperl mailing lists.  Your participation is much appreciated.

     bioperl-l@bioperl.org          - General discussion
     http://bio.perl.org/MailList.html             - About the mailing lists

Reporting Bugs
--------------

   Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via email or
the web:

     bioperl-bugs@bio.perl.org
     http://bio.perl.org/bioperl-bugs/

AUTHOR
======

   Steve A. Chervitz, sac@genome.stanford.edu

   See the `FEEDBACK' in this node section for where to send bug reports
and comments.

VERSION
=======

   Bio::Tools::SeqAnal.pm, 0.011

COPYRIGHT
=========

   Copyright (c) 1998 Steve A. Chervitz. All Rights Reserved.  This module
is free software; you can redistribute it and/or modify it under the same
terms as Perl itself.

SEE ALSO
========

     http://bio.perl.org/Projects/modules.html  - Online module documentation
     http://bio.perl.org/Projects/Blast/        - Bioperl Blast Project
     http://bio.perl.org/                       - Bioperl Project Homepage

APPENDIX
========

   Methods beginning with a leading underscore are considered private and
are intended for internal use by this module. They are not considered part
of the public interface and are described here for documentation purposes
only.

_initialize
-----------

     Usage     : n/a; automatically called by Bio::Root::Object::new()
     Purpose   : Calls private methods to extract the raw report data,
               : Calls superclass constructor first (Bio::Root::Object.pm).
     Returns   : string containing the make parameter value.
     Argument  : Named parameters (TAGS CAN BE ALL UPPER OR ALL LOWER CASE).
               : The SeqAnal.pm constructor only processes the following
               : parameters passed from new()
               :     -RUN     => hash reference for named parameters to be used
               :                 for running a sequence analysis program.
               :                 These are dereferenced and passed to the run() method.
     	   :     -PARSE   => boolean,
     	   :     -READ    => boolean,
               :
               : If -RUN is HASH ref, the run() method will be called with the
               :   dereferenced hash.
               : If -PARSE is true, all parameters passed from new() are passed
               :   to the parse() method. This occurs after the run method call
               :   to enable combined running + parsing.
               : If -READ is true, all parameters passed from new() are passed
               :   to the read() method.
               : Either -PARSE or -READ should be true, not both.
     Comments  : Does not calls _rearrange() to handle parameters since only
               : a few are required and there may be potentially many.

   See Also   : *Bio::Root::Object::new()*,
*Bio::Root::Object::_rearrange()*

best
----

     Usage     : $object->best();
     Purpose   : Set/Get the indicator for processing only the best match.
     Returns   : Boolean (1 | 0)
     Argument  : n/a

_set_db_stats
-------------

     Usage     : $object->_set_db_stats(<named parameters>);
     Purpose   : Set stats about the database searched.
     Returns   : String
     Argument  : named parameters:
               :   -LETTERS => <int>  (number of letters in db)
               :   -SEQS    => <int>  (number of sequences in db)

database
--------

     Usage     : $object->database();
     Purpose   : Set/Get the name of the database searched.
     Returns   : String
     Argument  : n/a

database_release
----------------

     Usage     : $object->database_release();
     Purpose   : Set/Get the release date of the queried database.
     Returns   : String
     Argument  : n/a

database_letters
----------------

     Usage     : $object->database_letters();
     Purpose   : Set/Get the number of letters in the queried database.
     Returns   : Integer
     Argument  : n/a

database_seqs
-------------

     Usage     : $object->database_seqs();
     Purpose   : Set/Get the number of sequences in the queried database.
     Returns   : Integer
     Argument  : n/a

set_date
--------

     Usage     : $object->set_date([<string>]);
     Purpose   : Set the name of the date on which the analysis was performed.
     Argument  : The optional string argument ca be the date or the
               : string 'file' in which case the date will be obtained from
               : the report file
     Returns   : String
     Throws    : Exception if no date is supplied and no file exists.
     Comments  : This method attempts to set the date in either of two ways:
               :   1) using data passed in as an argument,
               :   2) using the Bio::Root::Utilities.pm file_date() method
               :      on the output file.
               : Another way is to extract the date from the contents of the
               : raw output data. Such parsing will have to be specialized
               : for different seq analysis reports. Override this method
               : to create such custom parsing code if desired.

   See Also   : `date' in this node(), *Bio::Root::Object::file_date()*

date
----

     Usage     : $object->date();
     Purpose   : Get the name of the date on which the analysis was performed.
     Returns   : String
     Argument  : n/a
     Comments  : This method is not a combination set/get, it only gets.

   See Also   : `set_date' in this node()

length
------

     Usage     : $object->length();
     Purpose   : Set/Get the length of the query sequence (number of monomers).
     Returns   : Integer
     Argument  : n/a
     Comments  : Developer note: when using the built-in length function within
               : this module, call it as CORE::length().

program
-------

     Usage     : $object->program();
     Purpose   : Set/Get the name of the sequence analysis (BLASTP, FASTA, etc.)
     Returns   : String
     Argument  : n/a

program_version
---------------

     Usage     : $object->program_version();
     Purpose   : Set/Get the version number of the sequence analysis program.
               : (e.g., 1.4.9MP, 2.0a19MP-WashU).
     Returns   : String
     Argument  : n/a

query
-----

     Usage     : $name = $object->query();
     Purpose   : Get the name of the query sequence used to generate the report.
     Argument  : n/a
     Returns   : String
     Comments  : Equivalent to $object->name().

query_desc
----------

     Usage     : $object->desc();
     Purpose   : Set/Get the description of the query sequence for the analysis.
     Returns   : String
     Argument  : n/a

display
-------

     Usage     : $object->display(<named parameters>);
     Purpose   : Display information about Bio::Tools::SeqAnal.pm data members.
               : Overrides Bio::Root::Object::display().
     Example   : $object->display(-SHOW=>'stats');
     Argument  : Named parameters: -SHOW  => 'file' | 'stats'
               :                   -WHERE => filehandle (default = STDOUT)
     Returns   : n/a
     Status    : Experimental

   See Also   : `_display_stats' in this node(), `_display_file' in this
node(), *Bio::Root::Object::display*

_display_file
-------------

     Usage     : n/a; called automatically by display()
     Purpose   : Print the contents of the raw report file.
     Example   : n/a
     Argument  : one argument = filehandle object.
     Returns   : true (1)
     Status    : Experimental

   See Also   : `display' in this node()

_display_stats
--------------

     Usage     : n/a; called automatically by display()
     Purpose   : Display information about Bio::Tools::SeqAnal.pm data members.
               : Prints the file name, program, program version, database name,
               : database version, query name, query length,
     Example   : n/a
     Argument  : one argument = filehandle object.
     Returns   : printf call.
     Status    : Experimental

   See Also   : *Bio::Root::Object.pm*::display()

VIRTUAL METHODS
===============

parse
-----

     Usage     : $object->parse( %named_parameters )
     Purpose   : Parse a raw sequence analysis report.
     Returns   : Integer (number of sequence analysis reports parsed).
     Argument  : Named parameters.
     Throws    : Exception: virtual method not defined.
               : Propagates any exception thrown by read()
     Status    : Virtual
     Comments  : This is virtual method that should be overridden to
               : parse a specific type of data.

   See Also   : *Bio::Root::Object::read()*

run
---

     Usage     : $object->run( %named_parameters )
     Purpose   : Run a sequence analysis program on one or more sequences.
     Returns   : n/a
               : Run mode should be configurable to return a parsed object or
               : the raw results data.
     Argument  : Named parameters:
     Throws    : Exception: virtual method not defined.
     Status    : Virtual

FOR DEVELOPERS ONLY
===================

Data Members
------------

   Information about the various data members of this module is provided
for those wishing to modify or understand the code. Two things to bear in
mind:

  1. Do NOT rely on these in any code outside of this module.  All data
     members are prefixed with an underscore to signify that they are
     private.  Always use accessor methods. If the accessor doesn't exist
     or is inadequate, create or modify an accessor (and let me know,
     too!).

  2. This documentation may be incomplete and out of date.  It is easy for
     these data member descriptions to become obsolete as this module is
     still evolving. Always double check this info and search for members
     not described here.

        An instance of Bio::Tools::SeqAnal.pm is a blessed reference to a
hash containing all or some of the following fields:

     FIELD           VALUE
     --------------------------------------------------------------
      _file            Full path to file containing raw sequence analysis report.

     _mode            Affects how much detail to extract from the raw report.
      		   Future mode will also distinguish 'running' from 'parsing'

     THE FOLLOWING MAY BE EXTRACTABLE FROM THE RAW REPORT FILE:

     _prog            Name of the sequence analysis program.

     _progVersion     Version number of the program.

     _db              Database searched.

     _dbRelease       Version or date of the database searched.

     _dbLetters       Total number of letters in the database.

     _dbSequences     Total number of sequences in the database.

     _query           Name of query sequence.

     _length          Length of the query sequence.

     _date            Date on which the analysis was performed.

     INHERITED DATA MEMBERS

     _name            From Bio::Root::Object.pm. String representing the name of the query sequence.
      		   Typically obtained from the report file.

     _parent          From Bio::Root::Object.pm. This member contains a reference to the
      		   object to which this seq anal report belongs. Optional & experimenta.
                      (E.g., a protein object could create and own a Blast object.)


