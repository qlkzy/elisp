This is Info file perl.info, produced by Makeinfo version 1.68 from the
input file bigperl.texi.

   settitle perl


File: perl.info,  Node: perlcompile,  Next: perldebug,  Prev: perldbmfilter,  Up: Top

Introduction to the Perl Compiler-Translator
********************************************

NAME
====

   perlcompile - Introduction to the Perl Compiler-Translator

DESCRIPTION
===========

   Perl has always had a compiler: your source is compiled into an
internal form (a parse tree) which is then optimized before being run.
Since version 5.005, Perl has shipped with a module capable of inspecting
the optimized parse tree (B), and this has been used to write many useful
utilities, including a module that lets you turn your Perl into C source
code that can be compiled into an native executable.

   The B module provides access to the parse tree, and other modules
("back ends") do things with the tree.  Some write it out as bytecode, C
source code, or a semi-human-readable text.  Another traverses the parse
tree to build a cross-reference of which subroutines, formats, and
variables are used where.  Another checks your code for dubious
constructs.  Yet another back end dumps the parse tree back out as Perl
source, acting as a source code beautifier or deobfuscator.

   Because its original purpose was to be a way to produce C code
corresponding to a Perl program, and in turn a native executable, the B
module and its associated back ends are known as "the compiler", even
though they don't really compile anything.  Different parts of the
compiler are more accurately a "translator", or an "inspector", but people
want Perl to have a "compiler option" not an "inspector gadget".  What can
you do?

   This document covers the use of the Perl compiler: which modules it
comprises, how to use the most important of the back end modules, what
problems there are, and how to work around them.

Layout
------

   The compiler back ends are in the `B::' hierarchy, and the front-end
(the module that you, the user of the compiler, will sometimes interact
with) is the O module.  Some back ends (e.g., B::C) have programs (e.g.,
perlcc) to hide the modules' complexity.

   Here are the important back ends to know about, with their status
expressed as a number from 0 (outline for later implementation) to 10 (if
there's a bug in it, we're very surprised):

B::Bytecode
     Stores the parse tree in a machine-independent format, suitable for
     later reloading through the ByteLoader module.  Status: 5 (some
     things work, some things don't, some things are untested).

B::C
     Creates a C source file containing code to rebuild the parse tree and
     resume the interpreter.  Status: 6 (many things work adequately,
     including programs using Tk).

B::CC
     Creates a C source file corresponding to the run time code path in
     the parse tree.  This is the closest to a Perl-to-C translator there
     is, but the code it generates is almost incomprehensible because it
     translates the parse tree into a giant switch structure that
     manipulates Perl structures.  Eventual goal is to reduce (given
     sufficient type information in the Perl program) some of the Perl
     data structure manipulations into manipulations of C-level ints,
     floats, etc.  Status: 5 (some things work, including uncomplicated Tk
     examples).

B::Lint
     Complains if it finds dubious constructs in your source code.  Status:
     6 (it works adequately, but only has a very limited number of areas
     that it checks).

B::Deparse
     Recreates the Perl source, making an attempt to format it coherently.
     Status: 8 (it works nicely, but a few obscure things are missing).

B::Xref
     Reports on the declaration and use of subroutines and variables.
     Status: 8 (it works nicely, but still has a few lingering bugs).

Using The Back Ends
===================

   The following sections describe how to use the various compiler back
ends.  They're presented roughly in order of maturity, so that the most
stable and proven back ends are described first, and the most experimental
and incomplete back ends are described last.

   The O module automatically enabled the -c flag to Perl, which prevents
Perl from executing your code once it has been compiled.  This is why all
the back ends print:

     myperlprogram syntax OK

   before producing any other output.

The Cross Referencing Back End
------------------------------

   The cross referencing back end (B::Xref) produces a report on your
program, breaking down declarations and uses of subroutines and variables
(and formats) by file and subroutine.  For instance, here's part of the
report from the pod2man program that comes with Perl:

     Subroutine clear_noremap
       Package (lexical)
         $ready_to_print   i1069, 1079
       Package main
         $&                1086
         $.                1086
         $0                1086
         $1                1087
         $2                1085, 1085
         $3                1085, 1085
         $ARGV             1086
         %HTML_Escapes     1085, 1085

   This shows the variables used in the subroutine `clear_noremap'.  The
variable `$ready_to_print' is a my() (lexical) variable, introduced (first
declared with my()) on line 1069, and used on line 1079.  The variable $&
from the main package is used on 1086, and so on.

   A line number may be prefixed by a single letter:

i
     Lexical variable introduced (declared with my()) for the first time.

&
     Subroutine or method call.

s
     Subroutine defined.

r
     Format defined.

   The most useful option the cross referencer has is to save the report
to a separate file.  For instance, to save the report on *myperlprogram*
to the file report:

     $ perl -MO=Xref,-oreport myperlprogram

The Decompiling Back End
------------------------

   The Deparse back end turns your Perl source back into Perl source.  It
can reformat along the way, making it useful as a de-obfuscator.  The most
basic way to use it is:

     $ perl -MO=Deparse myperlprogram

   You'll notice immediately that Perl has no idea of how to paragraph
your code.  You'll have to separate chunks of code from each other with
newlines by hand.  However, watch what it will do with one-liners:

     $ perl -MO=Deparse -e '$op=shift||die "usage: $0
     code [...]";chomp(@ARGV=<>)unless@ARGV; for(@ARGV){$was=$_;eval$op;
     die$@ if$@; rename$was,$_ unless$was eq $_}'
     -e syntax OK
     $op = shift @ARGV || die("usage: $0 code [...]");
     chomp(@ARGV = <ARGV>) unless @ARGV;
     foreach $_ (@ARGV) {
         $was = $_;
         eval $op;
         die $@ if $@;
         rename $was, $_ unless $was eq $_;
     }

   (this is the rename program that comes in the *eg/* directory of the
Perl source distribution).

   The decompiler has several options for the code it generates.  For
instance, you can set the size of each indent from 4 (as above) to 2 with:

     $ perl -MO=Deparse,-si2 myperlprogram

   The -p option adds parentheses where normally they are omitted:

     $ perl -MO=Deparse -e 'print "Hello, world\n"'
     -e syntax OK
     print "Hello, world\n";
     $ perl -MO=Deparse,-p -e 'print "Hello, world\n"'
     -e syntax OK
     print("Hello, world\n");

   See *Note B/Deparse: (pm.info)B/Deparse, for more information on the
formatting options.

The Lint Back End
-----------------

   The lint back end (B::Lint) inspects programs for poor style.  One
programmer's bad style is another programmer's useful tool, so options let
you select what is complained about.

   To run the style checker across your source code:

     $ perl -MO=Lint myperlprogram

   To disable context checks and undefined subroutines:

     $ perl -MO=Lint,-context,-undefined-subs myperlprogram

   See *Note B/Lint: (pm.info)B/Lint, for information on the options.

The Simple C Back End
---------------------

   This module saves the internal compiled state of your Perl program to a
C source file, which can be turned into a native executable for that
particular platform using a C compiler.  The resulting program links
against the Perl interpreter library, so it will not save you disk space
(unless you build Perl with a shared library) or program size.  It may,
however, save you startup time.

   The perlcc tool generates such executables by default.

     perlcc myperlprogram.pl

The Bytecode Back End
---------------------

   This back end is only useful if you also have a way to load and execute
the bytecode that it produces.  The ByteLoader module provides this
functionality.

   To turn a Perl program into executable byte code, you can use perlcc
with the -b switch:

     perlcc -b myperlprogram.pl

   The byte code is machine independent, so once you have a compiled
module or program, it is as portable as Perl source (assuming that the
user of the module or program has a modern-enough Perl interpreter to
decode the byte code).

   See B::Bytecode for information on options to control the optimization
and nature of the code generated by the Bytecode module.

The Optimized C Back End
------------------------

   The optimized C back end will turn your Perl program's run time
code-path into an equivalent (but optimized) C program that manipulates
the Perl data structures directly.  The program will still link against
the Perl interpreter library, to allow for eval(), `s///e', require, etc.

   The perlcc tool generates such executables when using the -opt switch.
To compile a Perl program (ending in `.pl' or `.p'):

     perlcc -opt myperlprogram.pl

   To produce a shared library from a Perl module (ending in `.pm'):

     perlcc -opt Myperlmodule.pm

   For more information, see `perlcc' in this node and *Note B/CC:
(pm.info)B/CC,.

B
     This module is the introspective ("reflective" in Java terms) module,
     which allows a Perl program to inspect its innards.  The back end
     modules all use this module to gain access to the compiled parse
     tree.  You, the user of a back end module, will not need to interact
     with B.

O
     This module is the front-end to the compiler's back ends.  Normally
     called something like this:

          $ perl -MO=Deparse myperlprogram

     This is like saying `use O 'Deparse'' in your Perl program.

B::Asmdata
     This module is used by the B::Assembler module, which is in turn used
     by the B::Bytecode module, which stores a parse-tree as bytecode for
     later loading.  It's not a back end itself, but rather a component of
     a back end.

B::Assembler
     This module turns a parse-tree into data suitable for storing and
     later decoding back into a parse-tree.  It's not a back end itself,
     but rather a component of a back end.  It's used by the *assemble*
     program that produces bytecode.

B::Bblock
     This module is used by the B::CC back end.  It walks "basic blocks".
     A basic block is a series of operations which is known to execute from
     start to finish, with no possiblity of branching or halting.

B::Bytecode
     This module is a back end that generates bytecode from a program's
     parse tree.  This bytecode is written to a file, from where it can
     later be reconstructed back into a parse tree.  The goal is to do the
     expensive program compilation once, save the interpreter's state into
     a file, and then restore the state from the file when the program is
     to be executed.  See `' in this node for details about usage.

B::C
     This module writes out C code corresponding to the parse tree and
     other interpreter internal structures.  You compile the corresponding
     C file, and get an executable file that will restore the internal
     structures and the Perl interpreter will begin running the program.
     See `' in this node for details about usage.

B::CC
     This module writes out C code corresponding to your program's
     operations.  Unlike the B::C module, which merely stores the
     interpreter and its state in a C program, the B::CC module makes a C
     program that does not involve the interpreter.  As a consequence,
     programs translated into C by B::CC can execute faster than normal
     interpreted programs.  See `' in this node for details about usage.

B::Debug
     This module dumps the Perl parse tree in verbose detail to STDOUT.
     It's useful for people who are writing their own back end, or who are
     learning about the Perl internals.  It's not useful to the average
     programmer.

B::Deparse
     This module produces Perl source code from the compiled parse tree.
     It is useful in debugging and deconstructing other people's code,
     also as a pretty-printer for your own source.  See `' in this node
     for details about usage.

B::Disassembler
     This module turns bytecode back into a parse tree.  It's not a back
     end itself, but rather a component of a back end.  It's used by the
     *disassemble* program that comes with the bytecode.

B::Lint
     This module inspects the compiled form of your source code for things
     which, while some people frown on them, aren't necessarily bad enough
     to justify a warning.  For instance, use of an array in scalar context
     without explicitly saying `scalar(@array)' is something that Lint can
     identify.  See `' in this node for details about usage.

B::Showlex
     This module prints out the my() variables used in a function or a
     file.  To gt a list of the my() variables used in the subroutine
     mysub() defined in the file myperlprogram:

          $ perl -MO=Showlex,mysub myperlprogram

     To gt a list of the my() variables used in the file myperlprogram:

          $ perl -MO=Showlex myperlprogram

     [BROKEN]

B::Stackobj
     This module is used by the B::CC module.  It's not a back end itself,
     but rather a component of a back end.

B::Stash
     This module is used by the `perlcc' in this node program, which
     compiles a module into an executable.  B::Stash prints the symbol
     tables in use by a program, and is used to prevent B::CC from
     producing C code for the B::* and O modules.  It's not a back end
     itself, but rather a component of a back end.

B::Terse
     This module prints the contents of the parse tree, but without as much
     information as B::Debug.  For comparison, `print "Hello, world."'
     produced 96 lines of output from B::Debug, but only 6 from B::Terse.

     This module is useful for people who are writing their own back end,
     or who are learning about the Perl internals.  It's not useful to the
     average programmer.

B::Xref
     This module prints a report on where the variables, subroutines, and
     formats are defined and used within a program and the modules it
     loads.  See `' in this node for details about usage.

KNOWN PROBLEMS
==============

   The simple C backend currently only saves typeglobs with alphanumeric
names.

   The optimized C backend outputs code for more modules than it should
(e.g., DirHandle).  It also has little hope of properly handling `goto
LABEL' outside the running subroutine (`goto &sub' is ok).  `goto LABEL'
currently does not work at all in this backend.  It also creates a huge
initialization function that gives C compilers headaches.  Splitting the
initialization function gives better results.  Other problems include:
unsigned math does not work correctly; some opcodes are handled
incorrectly by default opcode handling mechanism.

   BEGIN{} blocks are executed while compiling your code.  Any external
state that is initialized in BEGIN{}, such as opening files, initiating
database connections etc., do not behave properly.  To work around this,
Perl has an INIT{} block that corresponds to code being executed before
your program begins running but after your program has finished being
compiled.  Execution order: BEGIN{}, (possible save of state through
compiler back-end), INIT{}, program runs, END{}.

AUTHOR
======

   This document was originally written by Nathan Torkington, and is now
maintained by the perl5-porters mailing list *perl5-porters@perl.org*.


File: perl.info,  Node: perlcygwin,  Next: perldos,  Prev: perlamiga,  Up: Top

Perl for Cygwin
***************

NAME
====

   README.cygwin - Perl for Cygwin

SYNOPSIS
========

   This document will help you configure, make, test and install Perl on
Cygwin.  This document also describes features of Cygwin that will affect
how Perl behaves at runtime.

   NOTE: There are pre-built Perl packages available for Cygwin and a
version of Perl is provided on the Cygwin CD.  If you have no need to
customize the configuration, consider using one of these packages:

     http://cygutils.netpedia.net/

PREREQUISITES
=============

Cygwin = GNU+Cygnus+Windows (Don't leave UNIX without it)
---------------------------------------------------------

   The Cygwin tools are ports of the popular GNU development tools for
Win32 platforms.  They run thanks to the Cygwin library which provides the
UNIX system calls and environment these programs expect.  More information
about this project can be found at:

     http://sourceware.cygnus.com/cygwin/

   A recent net or commercial release of Cygwin is required.

   At the time this document was written, the port required recent
development snapshots that were expected to stabilize early in 2000 and be
released to the net as B21 and commercially as v1.1.

   NOTE: At this point, minimal effort has been made to provide
compatibility with old (beta) Cygwin releases.  The focus has been to
provide a high quality release and not worry about working around old
Cygwin bugs.  If you wish to use Perl with Cygwin B20.1 or earlier,
consider using either perl5.005_03 or perl5.005_62, which are available in
source and binary form at `http://cygutils.netpedia.net/' or on the Cygwin
CD.  If there is significant demand, a patch kit can be developed to port
back to earlier Cygwin versions.

Compiler
--------

   A recent net or commercial release of *gcc* is required.

   At the time this document was written, *gcc-2.95.2* was current and
could be downloaded from:

     ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/cygwin/gcc-2.95.2/

Cygwin Configuration
--------------------

   While building Perl some changes may be necessary to your Cygwin setup
so that Perl builds cleanly.  These changes are not required for normal
Perl usage.

   NOTE: The binaries that are built will run on all Win32 versions.  They
do not depend on your host system (Win9x, WinNT) or your Cygwin
configuration (*ntea*, *ntsec*, binary/text mounts).  The only
dependencies come from hardcoded pathnames like `/usr/local'.  However,
your host system and Cygwin configuration will affect Perl's runtime
behavior (see `' in this node).  Some regression tests may fail in
different ways depending on your setup.  For now, the test suite does not
skip tests that do not make sense given a particular setup.  If a test can
pass in some Cygwin setup, it is left in and explainable test failures are
documented.

   * PATH

     Set the PATH environment variable so that Configure finds the Cygwin
     versions of programs.  Any Windows directories should be removed or
     moved to the end of your PATH.

   * `/bin/cat.exe'

     There should be an instance of cat in `/bin' (or `/usr/bin').
     Configure tests `#!/bin/cat' and if it is not found, you will see the
     error:

          Configure: ./try: No such file or directory

   * `/usr/bin'

     If you do not have a `/usr/bin' directory, Configure will not prompt
     you to install *perl* into `/usr/bin'.

   * *nroff*

     If you do not have *nroff* (which is part of the *groff* package),
     Configure will not prompt you to install man pages.

   * Permissions

     On WinNT with either the *ntea* or *ntsec* `CYGWIN' settings,
     directory and file permissions may not be set correctly.  Since the
     build process creates files and directories, to be safe you may want
     to run a ``chmod -R +w *'' on the entire Perl source tree.

     Also, it is a well known WinNT "feature" that files created by a login
     that is a member of the *Administrators* group will be owned by the
     *Administrators* group.  Depending on your umask, you may find that
     you can not write to files that you just created (because you are no
     longer the owner).  When using the *ntsec* `CYGWIN' setting, this is
     not an issue because it "corrects" the ownership to what you would
     expect on a UNIX system.

CONFIGURE
=========

   The default options gathered by Configure with the assistance of
`hints/cygwin.sh' will build a Perl that supports dynamic loading (which
requires a shared `libperl.dll').

   This will run Configure and keep a record:

     ./Configure 2>&1 | tee log.configure

   If you are willing to accept all the defaults add a -d option.
However, several useful customizations are available.

Strip Binaries
--------------

   It is possible to strip the EXEs and DLLs created by the build process.
The resulting binaries will be significantly smaller.  If you want the
binaries to be stripped, you can either add a -s option when Configure
prompts you,

     Any additional ld flags (NOT including libraries)? [none] -s
     Any special flags to pass to gcc to use dynamic linking? [none] -s
     Any special flags to pass to ld2 to create a dynamically loaded library?
     [none] -s

   or you can edit `hints/cygwin.sh' and uncomment the relevant variables
near the end of the file.

Optional Libraries
------------------

   Several Perl functions and modules depend on the existence of some
optional libraries.  Configure will find them if they are installed in one
of the directories listed as being used for library searches.  Pre-built
packages for most of these are available at
`http://cygutils.netpedia.net/'.

   * `-lcrypt'

     The crypt libraries in GNU libc have been ported to Cygwin.

     The DES based Ultra Fast Crypt port was done by Alexey Truhan:

          http://dome.weeg.uiowa.edu/pub/domestic/sos/cw32crypt-dist-0.tgz

     NOTE: There are various export restrictions on DES implementations,
     see the glibc README for more details.

     The MD5 port was done by Andy Piper:

          http://dome.weeg.uiowa.edu/pub/domestic/sos/libcrypt.tgz

     More information can also be found at:

          http://miracle.geol.msu.ru/sos/

   * `-lgdbm' (`use GDBM_File')

     GDBM is available for Cygwin.  GDBM's ndbm/dbm compatibility feature
     also makes `NDBM_File' and `ODBM_File' possible (although they add
     little extra value).

   * `-ldb' (`use DB_File')

     BerkeleyDB is available for Cygwin.  Some details can be found in
     `ext/DB_File/DB_File.pm'.

   * `-lcygipc' (`use IPC::SysV')

     A port of SysV IPC is available for Cygwin.

     NOTE: This has not been extensively tested.  In particular,
     `d_semctl_semun' is undefined because it fails a configure test and on
     Win9x the shm*() functions seem to hang.

Configure-time Options
----------------------

   The INSTALL document describes several Configure-time options.  Some of
these will work with Cygwin, others are not yet possible.  Also, some of
these are experimental.  You can either select an option when Configure
prompts you or you can define (undefine) symbols on the command line.

   * `-Uusedl'

     Undefining this symbol forces Perl to be compiled statically.

   * `-Uusemymalloc'

     By default Perl uses the malloc() included with the Perl source.  If
     you want to force Perl to build with the system malloc() undefine
     this symbol.

   * `-Dusemultiplicity'

     Multiplicity is required when embedding Perl in a C program and using
     more than one interpreter instance.  This works with the Cygwin port.

   * `-Duseperlio'

     The PerlIO abstraction works with the Cygwin port.

   * `-Duse64bitint'

     *gcc* supports 64-bit integers.  However, several additional long long
     functions are necessary to use them within Perl (*{strtol,strtoul}l*).
     These are not yet available with Cygwin.

   * `-Duselongdouble'

     *gcc* supports long doubles (12 bytes).  However, several additional
     long double math functions are necessary to use them within Perl
     (*{atan2,cos,exp,floor,fmod,frexp,log,modf,pow,sin,sqrt}l,strtold*).
     These are not yet available with Cygwin.

   * `-Dusethreads'

     POSIX threads are not yet implemented in Cygwin.

   * -Duselargefiles

     Although Win32 supports large files, Cygwin currently uses 32-bit
     integers for internal size and position calculations.

Suspicious Warnings
-------------------

   You may see some messages during Configure that seem suspicious.

   * Whoa There

     Cygwin does not yet implement chroot(), setegid() or seteuid()
     functionality, but has stub functions that return `ENOSYS'.  You will
     see a message when Configure detects that its guess conflicts with the
     hint file.

          *** WHOA THERE!!! ***
              The recommended value for $d_chroot on this machine was "undef"!
              Keep the recommended value? [y]

     You should keep the recommended value.

   * dlsym

     ld2 is needed to build dynamic libraries, but it does not exist when
     dlsym() checking occurs (it is not created until `make' runs).  You
     will see the following message:

          Checking whether your dlsym() needs a leading underscore ...
          I can't compile and run the test program.
          I'm guessing that dlsym doesn't need a leading underscore.

     Since the guess is correct, this is not a problem.

   * Win9x and d_eofnblk

     Win9x does not correctly report EOF with a non-blocking read on a
     closed pipe.  You will see the following messages:

          But it also returns -1 to signal EOF, so be careful!
          WARNING: you can't distinguish between EOF and no data!

          *** WHOA THERE!!! ***
              The recommended value for $d_eofnblk on this machine was "define"!
              Keep the recommended value? [y]

     At least for consistency with WinNT, you should keep the recommended
     value.

   * Checking how std your stdio is...

     Configure reports:

          Your stdio doesn't appear very std.

     This is correct.

   * Compiler/Preprocessor defines

     The following error occurs because of the Cygwin `#define' of
     `_LONG_DOUBLE':

          Guessing which symbols your C compiler and preprocessor define...
          try.c:3847: parse error

     This failure does not seem to cause any problems.

MAKE
====

   Simply run make and wait:

     make 2>&1 | tee log.make

Warnings
--------

   Warnings like these are normal:

     warning: overriding commands for target <file>
     warning: ignoring old commands for target <file>

     Warning: no export definition file provided
     dllwrap will create one, but may not be what you want

ld2
---

   During `make', ld2 will be created and installed in your $installbin
directory (where you said to put public executables).  It does not wait
until the `make install' process to install the ld2 script, this is
because the remainder of the `make' refers to ld2 without fully specifying
its path and does this from multiple subdirectories.  The assumption is
that $installbin is in your current PATH.  If this is not the case or if
you do not have an install program, `make' will fail at some point.  If
this happens, just manually copy ld2 from the source directory to
someplace in your PATH.

TEST
====

   There are two steps to running the test suite:

     make test 2>&1 | tee log.make-test

     cd t;./perl harness 2>&1 | tee ../log.harness

   The same tests are run both times, but more information is provided when
running as ``./perl harness''.

   Test results vary depending on your host system and your Cygwin
configuration.  It is possible that Cygwin will pass all the tests, but it
is more likely that some tests will fail for one of these reasons.

File Permissions
----------------

   UNIX file permissions are based on sets of mode bits for
{read,write,execute} for each {user,group,other}.  By default Cygwin only
tracks the Win32 readonly attribute represented as the UNIX file user
write bit (files are always readable, files are executable if they have a
`.{com,bat,exe}' extension or begin with #!, directories are always
readable and executable).  On WinNT with the *ntea* `CYGWIN' setting, the
remaining mode bits are stored as extended attributes.  On WinNT with the
*ntsec* `CYGWIN' setting, permissions use the standard WinNT security
descriptors and access control lists.  Without one of these options, these
tests will fail:

     Failed Test           List of failed
     ------------------------------------
     io/fs.t               5, 7, 9-10
     lib/anydbm.t          2
     lib/db-btree.t        20
     lib/db-hash.t         16
     lib/db-recno.t        18
     lib/gdbm.t            2
     lib/ndbm.t            2
     lib/odbm.t            2
     lib/sdbm.t            2
     op/stat.t             9, 20 (.tmp not an executable extension)

Hard Links
----------

   FAT partitions do not support hard links (whereas NTFS does), in which
case Cygwin implements link() by copying the file.  These tests will fail:

     Failed Test           List of failed
     ------------------------------------
     io/fs.t               4
     op/stat.t             3

Filetime Granularity
--------------------

   On FAT partitions the filetime granularity is 2 seconds.  The following
test will fail:

     Failed Test           List of failed
     ------------------------------------
     io/fs.t               18

Tainting Checks
---------------

   When Perl is running in taint mode, `$ENV{PATH}' is considered tainted
and not used, so DLLs not in the default system directories will not be
found.  While the tests are running you will see warnings popup from the
system with messages like:

     Win9x
       Error Starting Program
       A required .DLL file, CYGWIN1.DLL, was not found

     WinNT
       perl.exe or sh.exe - Unable to Locate DLL
       The dynamic link library cygwin1.dll could not be found in the
         specified path ...

   Just click OK and ignore them.  When running `make test', 2 popups
occur.  During ``./perl harness'', 4 popups occur.  Also, these tests will
fail:

     Failed Test           List of failed
     ------------------------------------
     op/taint.t            1, 3, 31, 37

   Alternatively, you can copy `cygwin1.dll' into one of the Windows system
directories (although, this is not recommended).

/etc/group
----------

   Cygwin does not require /etc/group, in which case the `op/grent.t' test
will be skipped.  The check performed by `op/grent.t' expects to see
entries that use the members field, otherwise this test will fail:

     Failed Test           List of failed
     ------------------------------------
     op/grent.t            1

Unexplained Failures
--------------------

   Any additional tests that fail are likely due to bugs in Cygwin or the
optional libraries.  It is expected that by the time of the next net
release most of these will be solved so they are not described here.

Script Portability
------------------

   Cygwin does an outstanding job of providing UNIX-like semantics on top
of Win32 systems.  However, in addition to the items noted above, there
are some differences that you should know about.  This is only a very
brief guide to portability, more information can be found in the Cygwin
documentation.

   * Pathnames

     Cygwin pathnames can be separated by forward (/) or backward (\)
     slashes.  They may also begin with drive letters (`C:') or Universal
     Naming Codes (`//UNC').  DOS device names (`aux', `con', `prn',
     `com*', `lpt?') are invalid as base filenames.  However, they can be
     used in extensions (e.g., `hello.aux').  Names may not contain these
     characters:

          : * ? " < > |

     File names are case insensitive, but case preserving.  With the
     *mixed* `CYGWIN' setting, file names are mixed-case (although,
     directory names remain case insensitive).

     The *mixed* setting is only available with the "coolview" version of
     `cygwin1.dll' provided by Sergey Okhapkin at:

          ftp://ftp.franken.de/pub/win32/develop/gnuwin32/cygwin/porters/Okhapkin_Sergey/

   * Text/Binary

     When a file is opened it is in either text or binary mode.  In text
     mode a file is subject to CR/LF/Ctrl-Z translations.  With Cygwin,
     the default mode for an open() is determined by the mode of the mount
     that underlies the file.  Perl provides a binmode() function to set
     binary mode on files that otherwise would be treated as text.
     sysopen() with the `O_TEXT' flag sets text mode on files that
     otherwise would be treated as binary:

          sysopen(FOO, "bar", O_WRONLY|O_CREAT|O_TEXT)

     lseek(), tell() and sysseek() only work with files opened in binary
     mode.

     The text/binary issue is covered at length in the Cygwin
     documentation.

   * `.exe'

     The Cygwin stat() makes the `.exe' extension transparent by looking
     for a `foo.exe' when you ask for foo (unless a foo also exists).
     Cygwin does not require a `.exe' extension, but *gcc* adds it
     automatically when building a program.  However, when accessing an
     executable as a normal file (e.g., install or cp in a makefile) the
     `.exe' is not transparent.

     NOTE: There is a version of install that understands the `.exe'
     semantics, it can be found at:

          ftp://ftp.franken.de/pub/win32/develop/gnuwin32/cygwin/porters/Humblet_Pierre_A/

   * chown()

     On WinNT with the *ntsec* `CYGWIN' setting, chown() can change a
     file's user and group IDs.  In all other configurations chown() is a
     no-op, although this is appropriate on Win9x since there is no
     security model.

   * Miscellaneous

     File locking using the `F_GETLK' command to fcntl() is a stub that
     returns `ENOSYS'.

     Win9x can not rename() an open file (although WinNT can).

INSTALL
=======

   This will install Perl, including man pages.

     make install | tee log.make-install

   NOTE: If `STDERR' is redirected `make install' will not prompt you to
install *perl* into `/usr/bin'.

   You may need to be *Administrator* to run `make install'.  If you are
not, you must have write access to the directories in question.

   Information on installing the Perl documentation in HTML format can be
found in the INSTALL document.

MANIFEST
========

   These are the files in the Perl release that contain references to
Cygwin.  These very brief notes attempt to explain the reason for all
conditional code.  Hopefully, keeping this up to date will allow the
Cygwin port to be kept as clean as possible.

Documentation
          INSTALL README.cygwin
          Changes Changes5.005 Changes5.004
          AUTHORS MAINTAIN MANIFEST README.win32
          pod/perl.pod pod/perlfaq3.pod pod/perlhist.pod pod/perlmodlib.pod
          pod/perlport.pod pod/perltoc.pod pod/perl5004delta.pod

Build, Configure, Make, Install
          cygwin/Makefile.SHs
          cygwin/ld2.in
          cygwin/perlld.in
          ext/IPC/SysV/hints/cygwin.pl
          ext/NDBM_File/hints/cygwin.pl
          ext/ODBM_File/hints/cygwin.pl
          hints/cygwin.sh
          Configure             - help finding hints from uname,
                                  shared libperl required for dynamic loading
          Makefile.SH           - linklibperl
          Porting/patchls       - cygwin in port list
          installman            - man pages with :: translated to .
          installperl           - install dll/ld2/perlld, install to pods
          makedepend.SH         - uwinfix

Tests
          t/io/tell.t           - binmode
          t/lib/glob-basic.t    - Win32 directory list access differs from read mode
          t/op/magic.t          - $^X/symlink WORKAROUND, s/.exe//
          t/op/stat.t           - no /dev, skip Win32 ftCreationTime quirk
                                  (cache manager sometimes preserves ctime of file
                                  previously created and deleted), no -u (setuid)

Compiled Perl Source
          EXTERN.h              - __declspec(dllimport)
          XSUB.h                - __declspec(dllexport)
          cygwin/cygwin.c       - os_extras (getcwd)
          perl.c                - os_extras
          perl.h                - binmode
          doio.c                - win9x can not rename a file when it is open
          pp_sys.c              - do not define h_errno
          mg.c                  - environ WORKAROUND
          unixish.h             - environ WORKAROUND
          util.c                - environ WORKAROUND

Compiled Module Source
          ext/POSIX/POSIX.xs    - tzname defined externally
          ext/SDBM_File/sdbm/pair.c
                                - EXTCONST needs to be redefined from EXTERN.h
          ext/SDBM_File/sdbm/sdbm.c
                                - binary open

Perl Modules/Scripts
          lib/Cwd.pm            - hook to internal Cwd::cwd
          lib/ExtUtils/MakeMaker.pm
                                - require MM_Cygwin.pm
          lib/ExtUtils/MM_Cygwin.pm
                                - canonpath, cflags, manifypods, perl_archive
          lib/File/Spec/Unix.pm - preserve //unc
          lib/perl5db.pl        - use stdin not /dev/tty
          utils/perlcc.PL       - DynaLoader.a in compile, -DUSEIMPORTLIB
          utils/perldoc.PL      - version comment

BUGS
====

   Upon each start, make warns that a rule for `perlmain.o' is overridden
(but there seems to be no better solution than adding an explicit define).

   ``make clean'' does not remove library `.def' and `.exe.stackdump'
files.

   The ld2 script contains references to the source directory.  You should
change these to `/usr/local/bin' (or whatever) after install.

AUTHORS
=======

   Charles Wilson <cwilson@ece.gatech.edu>, Eric Fifer
<efifer@sanwaint.com>, alexander smishlajev <als@turnhere.com>, Steven
Morlock <newspost@morlock.net>, Sebastien Barre <Sebastien.Barre@utc.fr>,
Teun Burgers <burgers@ecn.nl>.

HISTORY
=======

   Last updated: 1 March 2000


File: perl.info,  Node: perldata,  Next: perlsyn,  Prev: perltoc,  Up: Top

Perl data types
***************

NAME
====

   perldata - Perl data types

DESCRIPTION
===========

Variable names
--------------

   Perl has three built-in data types: scalars, arrays of scalars, and
associative arrays of scalars, known as "hashes".  Normal arrays are
ordered lists of scalars indexed by number, starting with 0 and with
negative subscripts counting from the end.  Hashes are unordered
collections of scalar values indexed by their associated string key.

   Values are usually referred to by name, or through a named reference.
The first character of the name tells you to what sort of data structure
it refers.  The rest of the name tells you the particular value to which
it refers.  Usually this name is a single identifier, that is, a string
beginning with a letter or underscore, and containing letters,
underscores, and digits.  In some cases, it may be a chain of identifiers,
separated by `::' (or by the slightly archaic `''); all but the last are
interpreted as names of packages, to locate the namespace in which to look
up the final identifier (see `Packages', *Note Perlmod: perlmod, for
details).  It's possible to substitute for a simple identifier, an
expression that produces a reference to the value at runtime.   This is
described in more detail below and in `Packages', *Note Perlref: perlref,.

   Perl also has its own built-in variables whose names don't follow these
rules.  They have strange names so they don't accidentally collide with
one of your normal variables.  Strings that match parenthesized parts of a
regular expression are saved under names containing only digits after the
`$' (see *Note Perlop: perlop, and *Note Perlre: perlre,).  In addition,
several special variables that provide windows into the inner working of
Perl have names containing punctuation characters and control characters.
These are documented in *Note Perlvar: perlvar,.

   Scalar values are always named with '$', even when referring to a
scalar that is part of an array or a hash.  The '$' symbol works
semantically like the English word "the" in that it indicates a single
value is expected.

     $days		# the simple scalar value "days"
     $days[28]		# the 29th element of array @days
     $days{'Feb'}	# the 'Feb' value from hash %days
     $#days		# the last index of array @days

   Entire arrays (and slices of arrays and hashes) are denoted by '@',
which works much like the word "these" or "those" does in English, in that
it indicates multiple values are expected.

     @days		# ($days[0], $days[1],... $days[n])
     @days[3,4,5]	# same as ($days[3],$days[4],$days[5])
     @days{'a','c'}	# same as ($days{'a'},$days{'c'})

   Entire hashes are denoted by '%':

     %days		# (key1, val1, key2, val2 ...)

   In addition, subroutines are named with an initial '&', though this is
optional when unambiguous, just as the word "do" is often redundant in
English.  Symbol table entries can be named with an initial '*', but you
don't really care about that yet (if ever :-).

   Every variable type has its own namespace, as do several non-variable
identifiers.  This means that you can, without fear of conflict, use the
same name for a scalar variable, an array, or a hash-or, for that matter,
for a filehandle, a directory handle, a subroutine name, a format name, or
a label.  This means that $foo and @foo are two different variables.  It
also means that `$foo[1]' is a part of @foo, not a part of $foo.  This may
seem a bit weird, but that's okay, because it is weird.

   Because variable references always start with '$', '@', or '%', the
"reserved" words aren't in fact reserved with respect to variable names.
They *are* reserved with respect to labels and filehandles, however, which
don't have an initial special character.  You can't have a filehandle
named "log", for instance.  Hint: you could say `open(LOG,'logfile')'
rather than `open(log,'logfile')'.  Using uppercase filehandles also
improves readability and protects you from conflict with future reserved
words.  Case *is* significant-"FOO", "Foo", and "foo" are all different
names.  Names that start with a letter or underscore may also contain
digits and underscores.

   It is possible to replace such an alphanumeric name with an expression
that returns a reference to the appropriate type.  For a description of
this, see *Note Perlref: perlref,.

   Names that start with a digit may contain only more digits.  Names that
do not start with a letter, underscore, or digit are limited to one
character, e.g.,  $% or $$.  (Most of these one character names have a
predefined significance to Perl.  For instance, $$ is the current process
id.)

Context
-------

   The interpretation of operations and values in Perl sometimes depends
on the requirements of the context around the operation or value.  There
are two major contexts: list and scalar.  Certain operations return list
values in contexts wanting a list, and scalar values otherwise.  If this
is true of an operation it will be mentioned in the documentation for that
operation.  In other words, Perl overloads certain operations based on
whether the expected return value is singular or plural.  Some words in
English work this way, like "fish" and "sheep".

   In a reciprocal fashion, an operation provides either a scalar or a
list context to each of its arguments.  For example, if you say

     int( <STDIN> )

   the integer operation provides scalar context for the <> operator,
which responds by reading one line from STDIN and passing it back to the
integer operation, which will then find the integer value of that line and
return that.  If, on the other hand, you say

     sort( <STDIN> )

   then the sort operation provides list context for <>, which will
proceed to read every line available up to the end of file, and pass that
list of lines back to the sort routine, which will then sort those lines
and return them as a list to whatever the context of the sort was.

   Assignment is a little bit special in that it uses its left argument to
determine the context for the right argument.  Assignment to a scalar
evaluates the right-hand side in scalar context, while assignment to an
array or hash evaluates the righthand side in list context.  Assignment to
a list (or slice, which is just a list anyway) also evaluates the
righthand side in list context.

   When you use the `use warnings' pragma or Perl's -w command-line
option, you may see warnings about useless uses of constants or functions
in "void context".  Void context just means the value has been discarded,
such as a statement containing only `"fred";' or `getpwuid(0);'.  It still
counts as scalar context for functions that care whether or not they're
being called in list context.

   User-defined subroutines may choose to care whether they are being
called in a void, scalar, or list context.  Most subroutines do not need
to bother, though.  That's because both scalars and lists are
automatically interpolated into lists.  See `wantarray', *Note Perlfunc:
perlfunc, for how you would dynamically discern your function's calling
context.

Scalar values
-------------

   All data in Perl is a scalar, an array of scalars, or a hash of
scalars.  A scalar may contain one single value in any of three different
flavors: a number, a string, or a reference.  In general, conversion from
one form to another is transparent.  Although a scalar may not directly
hold multiple values, it may contain a reference to an array or hash which
in turn contains multiple values.

   Scalars aren't necessarily one thing or another.  There's no place to
declare a scalar variable to be of type "string", type "number", type
"reference", or anything else.  Because of the automatic conversion of
scalars, operations that return scalars don't need to care (and in fact,
cannot care) whether their caller is looking for a string, a number, or a
reference.  Perl is a contextually polymorphic language whose scalars can
be strings, numbers, or references (which includes objects).  Although
strings and numbers are considered pretty much the same thing for nearly
all purposes, references are strongly-typed, uncastable pointers with
builtin reference-counting and destructor invocation.

   A scalar value is interpreted as TRUE in the Boolean sense if it is not
the null string or the number 0 (or its string equivalent, "0").  The
Boolean context is just a special kind of scalar context where no
conversion to a string or a number is ever performed.

   There are actually two varieties of null strings (sometimes referred to
as "empty" strings), a defined one and an undefined one.  The defined
version is just a string of length zero, such as "".  The undefined
version is the value that indicates that there is no real value for
something, such as when there was an error, or at end of file, or when you
refer to an uninitialized variable or element of an array or hash.
Although in early versions of Perl, an undefined scalar could become
defined when first used in a place expecting a defined value, this no
longer happens except for rare cases of autovivification as explained in
*Note Perlref: perlref,.  You can use the defined() operator to determine
whether a scalar value is defined (this has no meaning on arrays or
hashes), and the undef() operator to produce an undefined value.

   To find out whether a given string is a valid non-zero number, it's
sometimes enough to test it against both numeric 0 and also lexical "0"
(although this will cause -w noises).  That's because strings that aren't
numbers count as 0, just as they do in *awk*:

     if ($str == 0 && $str ne "0")  {
     	warn "That doesn't look like a number";
     }

   That method may be best because otherwise you won't treat IEEE
notations like NaN or `Infinity' properly.  At other times, you might
prefer to determine whether string data can be used numerically by calling
the POSIX::strtod() function or by inspecting your string with a regular
expression (as documented in *Note Perlre: perlre,).

     warn "has nondigits"	if     /\D/;
     warn "not a natural number" unless /^\d+$/;             # rejects -3
     warn "not an integer"       unless /^-?\d+$/;           # rejects +3
     warn "not an integer"       unless /^[+-]?\d+$/;
     warn "not a decimal number" unless /^-?\d+\.?\d*$/;     # rejects .2
     warn "not a decimal number" unless /^-?(?:\d+(?:\.\d*)?|\.\d+)$/;
     warn "not a C float"
     	unless /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/;

   The length of an array is a scalar value.  You may find the length of
array @days by evaluating `$#days', as in *csh*.  Technically speaking,
this isn't the length of the array; it's the subscript of the last
element, since there is ordinarily a 0th element.  Assigning to `$#days'
actually changes the length of the array.  Shortening an array this way
destroys intervening values.  Lengthening an array that was previously
shortened does not recover values that were in those elements.  (It used
to do so in Perl 4, but we had to break this to make sure destructors were
called when expected.)

   You can also gain some miniscule measure of efficiency by pre-extending
an array that is going to get big.  You can also extend an array by
assigning to an element that is off the end of the array.  You can
truncate an array down to nothing by assigning the null list () to it.
The following are equivalent:

     @whatever = ();
     $#whatever = -1;

   If you evaluate an array in scalar context, it returns the length of
the array.  (Note that this is not true of lists, which return the last
value, like the C comma operator, nor of built-in functions, which return
whatever they feel like returning.)  The following is always true:

     scalar(@whatever) == $#whatever - $[ + 1;

   Version 5 of Perl changed the semantics of $[: files that don't set the
value of $[ no longer need to worry about whether another file changed its
value.  (In other words, use of $[ is deprecated.)  So in general you can
assume that

     scalar(@whatever) == $#whatever + 1;

   Some programmers choose to use an explicit conversion so as to leave
nothing to doubt:

     $element_count = scalar(@whatever);

   If you evaluate a hash in scalar context, it returns false if the hash
is empty.  If there are any key/value pairs, it returns true; more
precisely, the value returned is a string consisting of the number of used
buckets and the number of allocated buckets, separated by a slash.  This
is pretty much useful only to find out whether Perl's internal hashing
algorithm is performing poorly on your data set.  For example, you stick
10,000 things in a hash, but evaluating %HASH in scalar context reveals
`"1/16"', which means only one out of sixteen buckets has been touched,
and presumably contains all 10,000 of your items.  This isn't supposed to
happen.

   You can preallocate space for a hash by assigning to the keys()
function.  This rounds up the allocated bucked to the next power of two:

     keys(%users) = 1000;		# allocate 1024 buckets

Scalar value constructors
-------------------------

   Numeric literals are specified in any of the following floating point or
integer formats:

     12345
     12345.67
     .23E-10             # a very small number
     4_294_967_296       # underline for legibility
     0xff                # hex
     0377                # octal
     0b011011            # binary

   String literals are usually delimited by either single or double
quotes.  They work much like quotes in the standard Unix shells:
double-quoted string literals are subject to backslash and variable
substitution; single-quoted strings are not (except for `\'' and \\).  The
usual C-style backslash rules apply for making characters such as newline,
tab, etc., as well as some more exotic forms.  See `"Quote and Quote-like
Operators"', *Note Perlop: perlop, for a list.

   Hexadecimal, octal, or binary, representations in string literals (e.g.
'0xff') are not automatically converted to their integer representation.
The hex() and oct() functions make these conversions for you.  See `hex',
*Note Perlfunc: perlfunc, and `oct', *Note Perlfunc: perlfunc, for more
details.

   You can also embed newlines directly in your strings, i.e., they can end
on a different line than they begin.  This is nice, but if you forget your
trailing quote, the error will not be reported until Perl finds another
line containing the quote character, which may be much further on in the
script.  Variable substitution inside strings is limited to scalar
variables, arrays, and array or hash slices.  (In other words, names
beginning with $ or @, followed by an optional bracketed expression as a
subscript.)  The following code segment prints out "The price is $100."

     $Price = '$100';	# not interpreted
     print "The price is $Price.\n";	# interpreted

   As in some shells, you can enclose the variable name in braces to
disambiguate it from following alphanumerics.  You must also do this when
interpolating a variable into a string to separate the variable name from
a following double-colon or an apostrophe, since these would be otherwise
treated as a package separator:

     $who = "Larry";
     print PASSWD "${who}::0:0:Superuser:/:/bin/perl\n";
     print "We use ${who}speak when ${who}'s here.\n";

   Without the braces, Perl would have looked for a $whospeak, a
`$who::0', and a `$who's' variable.  The last two would be the $0 and the
$s variables in the (presumably) non-existent package who.

   In fact, an identifier within such curlies is forced to be a string, as
is any simple identifier within a hash subscript.  Neither need quoting.
Our earlier example, `$days{'Feb'}' can be written as `$days{Feb}' and the
quotes will be assumed automatically.  But anything more complicated in
the subscript will be interpreted as an expression.

   A literal of the form `v1.20.300.4000' is parsed as a string composed
of characters with the specified ordinals.  This provides an alternative,
more readable way to construct strings, rather than use the somewhat less
readable interpolation form `"\x{1}\x{14}\x{12c}\x{fa0}"'.  This is useful
for representing Unicode strings, and for comparing version "numbers"
using the string comparison operators, cmp, gt, lt etc.  If there are two
or more dots in the literal, the leading v may be omitted.

     print v9786;              # prints UTF-8 encoded SMILEY, "\x{263a}"
     print v102.111.111;       # prints "foo"
     print 102.111.111;        # same

   Such literals are accepted by both require and use for doing a version
check.  The $^V special variable also contains the running Perl
interpreter's version in this form.  See `$^V', *Note Perlvar: perlvar,.

   The special literals __FILE__, __LINE__, and __PACKAGE__ represent the
current filename, line number, and package name at that point in your
program.  They may be used only as separate tokens; they will not be
interpolated into strings.  If there is no current package (due to an
empty `package;' directive), __PACKAGE__ is the undefined value.

   The two control characters ^D and ^Z, and the tokens __END__ and
__DATA__ may be used to indicate the logical end of the script before the
actual end of file.  Any following text is ignored.

   Text after __DATA__ but may be read via the filehandle `PACKNAME::DATA',
where `PACKNAME' is the package that was current when the __DATA__ token
was encountered.  The filehandle is left open pointing to the contents
after __DATA__.  It is the program's responsibility to `close DATA' when
it is done reading from it.  For compatibility with older scripts written
before __DATA__ was introduced, __END__ behaves like __DATA__ in the
toplevel script (but not in files loaded with require or do) and leaves
the remaining contents of the file accessible via `main::DATA'.

   See *Note SelfLoader: (pm.info)SelfLoader, for more description of
__DATA__, and an example of its use.  Note that you cannot read from the
DATA filehandle in a BEGIN block: the BEGIN block is executed as soon as
it is seen (during compilation), at which point the corresponding __DATA__
(or __END__) token has not yet been seen.

   A word that has no other interpretation in the grammar will be treated
as if it were a quoted string.  These are known as "barewords".  As with
filehandles and labels, a bareword that consists entirely of lowercase
letters risks conflict with future reserved words, and if you use the `use
warnings' pragma or the -w switch, Perl will warn you about any such
words.  Some people may wish to outlaw barewords entirely.  If you say

     use strict 'subs';

   then any bareword that would NOT be interpreted as a subroutine call
produces a compile-time error instead.  The restriction lasts to the end
of the enclosing block.  An inner block may countermand this by saying `no
strict 'subs''.

   Arrays and slices are interpolated into double-quoted strings by
joining the elements with the delimiter specified in the $" variable
($LIST_SEPARATOR in English), space by default.  The following are
equivalent:

     $temp = join($", @ARGV);
     system "echo $temp";

     system "echo @ARGV";

   Within search patterns (which also undergo double-quotish substitution)
there is an unfortunate ambiguity:  Is `/$foo[bar]/' to be interpreted as
`/${foo}[bar]/' (where `[bar]' is a character class for the regular
expression) or as `/${foo[bar]}/' (where `[bar]' is the subscript to array
@foo)?  If @foo doesn't otherwise exist, then it's obviously a character
class.  If @foo exists, Perl takes a good guess about `[bar]', and is
almost always right.  If it does guess wrong, or if you're just plain
paranoid, you can force the correct interpretation with curly braces as
above.

   A line-oriented form of quoting is based on the shell "here-document"
syntax.  Following a `< << '> you specify a string to terminate the quoted
material, and all lines following the current line down to the terminating
string are the value of the item.  The terminating string may be either an
identifier (a word), or some quoted text.  If quoted, the type of quotes
you use determines the treatment of the text, just as in regular quoting.
An unquoted identifier works like double quotes.  There must be no space
between the `< << '> and the identifier.  (If you put a space it will be
treated as a null identifier, which is valid, and matches the first empty
line.)  The terminating string must appear by itself (unquoted and with no
surrounding whitespace) on the terminating line.

     print <<EOF;
         The price is $Price.
         EOF

     print <<"EOF";	# same as above
         The price is $Price.
         EOF

     print <<`EOC`;	# execute commands
         echo hi there
         echo lo there
         EOC

     print <<"foo", <<"bar";	# you can stack them
         I said foo.
         foo
         I said bar.
         bar

     myfunc(<<"THIS", 23, <<'THAT');
         Here's a line
         or two.
         THIS
         and here's another.
         THAT

   Just don't forget that you have to put a semicolon on the end to finish
the statement, as Perl doesn't know you're not going to try to do this:

     print <<ABC
         179231
         ABC
     + 20;

   If you want your here-docs to be indented with the rest of the code,
you'll need to remove leading whitespace from each line manually:

     ($quote = <<'FINIS') =~ s/^\s+//gm;
     	The Road goes ever on and on,
     	down from the door where it began.
     FINIS

List value constructors
-----------------------

   List values are denoted by separating individual values by commas (and
enclosing the list in parentheses where precedence requires it):

     (LIST)

   In a context not requiring a list value, the value of what appears to
be a list literal is simply the value of the final element, as with the C
comma operator.  For example,

     @foo = ('cc', '-E', $bar);

   assigns the entire list value to array @foo, but

     $foo = ('cc', '-E', $bar);

   assigns the value of variable $bar to the scalar variable $foo.  Note
that the value of an actual array in scalar context is the length of the
array; the following assigns the value 3 to $foo:

     @foo = ('cc', '-E', $bar);
     $foo = @foo;		# $foo gets 3

   You may have an optional comma before the closing parenthesis of a list
literal, so that you can say:

     @foo = (
     	1,
     	2,
     	3,
     );

   To use a here-document to assign an array, one line per element, you
might use an approach like this:

     @sauces = <<End_Lines =~ m/(\S.*\S)/g;
     	normal tomato
     	spicy tomato
     	green chile
     	pesto
     	white wine
     End_Lines

   LISTs do automatic interpolation of sublists.  That is, when a LIST is
evaluated, each element of the list is evaluated in list context, and the
resulting list value is interpolated into LIST just as if each individual
element were a member of LIST.  Thus arrays and hashes lose their identity
in a LIST-the list

     (@foo,@bar,&SomeSub,%glarch)

   contains all the elements of @foo followed by all the elements of @bar,
followed by all the elements returned by the subroutine named SomeSub
called in list context, followed by the key/value pairs of %glarch.  To
make a list reference that does *NOT* interpolate, see *Note Perlref:
perlref,.

   The null list is represented by ().  Interpolating it in a list has no
effect.  Thus ((),(),()) is equivalent to ().  Similarly, interpolating an
array with no elements is the same as if no array had been interpolated at
that point.

   A list value may also be subscripted like a normal array.  You must put
the list in parentheses to avoid ambiguity.  For example:

     # Stat returns list value.
     $time = (stat($file))[8];

     # SYNTAX ERROR HERE.
     $time = stat($file)[8];  # OOPS, FORGOT PARENTHESES

     # Find a hex digit.
     $hexdigit = ('a','b','c','d','e','f')[$digit-10];

     # A "reverse comma operator".
     return (pop(@foo),pop(@foo))[0];

   Lists may be assigned to only when each element of the list is itself
legal to assign to:

     ($a, $b, $c) = (1, 2, 3);

     ($map{'red'}, $map{'blue'}, $map{'green'}) = (0x00f, 0x0f0, 0xf00);

   An exception to this is that you may assign to undef in a list.  This
is useful for throwing away some of the return values of a function:

     ($dev, $ino, undef, undef, $uid, $gid) = stat($file);

   List assignment in scalar context returns the number of elements
produced by the expression on the right side of the assignment:

     $x = (($foo,$bar) = (3,2,1));	# set $x to 3, not 2
     $x = (($foo,$bar) = f());	        # set $x to f()'s return count

   This is handy when you want to do a list assignment in a Boolean
context, because most list functions return a null list when finished,
which when assigned produces a 0, which is interpreted as FALSE.

   The final element may be an array or a hash:

     ($a, $b, @rest) = split;
     my($a, $b, %rest) = @_;

   You can actually put an array or hash anywhere in the list, but the
first one in the list will soak up all the values, and anything after it
will become undefined.  This may be useful in a my() or local().

   A hash can be initialized using a literal list holding pairs of items
to be interpreted as a key and a value:

     # same as map assignment above
     %map = ('red',0x00f,'blue',0x0f0,'green',0xf00);

   While literal lists and named arrays are often interchangeable, that's
not the case for hashes.  Just because you can subscript a list value like
a normal array does not mean that you can subscript a list value as a
hash.  Likewise, hashes included as parts of other lists (including
parameters lists and return lists from functions) always flatten out into
key/value pairs.  That's why it's good to use references sometimes.

   It is often more readable to use the `< =' >> operator between key/value
pairs.  The `< =' >> operator is mostly just a more visually distinctive
synonym for a comma, but it also arranges for its left-hand operand to be
interpreted as a string-if it's a bareword that would be a legal
identifier.  This makes it nice for initializing hashes:

     %map = (
     		 red   => 0x00f,
     		 blue  => 0x0f0,
     		 green => 0xf00,
        );

   or for initializing hash references to be used as records:

     $rec = {
     		witch => 'Mable the Merciless',
     		cat   => 'Fluffy the Ferocious',
     		date  => '10/31/1776',
     };

   or for using call-by-named-parameter to complicated functions:

     $field = $query->radio_group(
     	       name      => 'group_name',
                 values    => ['eenie','meenie','minie'],
                 default   => 'meenie',
                 linebreak => 'true',
                 labels    => \%labels
     );

   Note that just because a hash is initialized in that order doesn't mean
that it comes out in that order.  See `sort', *Note Perlfunc: perlfunc,
for examples of how to arrange for an output ordering.

Slices
------

   A common way to access an array or a hash is one scalar element at a
time.  You can also subscript a list to get a single element from it.

     $whoami = $ENV{"USER"};		# one element from the hash
     $parent = $ISA[0];		        # one element from the array
     $dir    = (getpwnam("daemon"))[7];	# likewise, but with list

   A slice accesses several elements of a list, an array, or a hash
simultaneously using a list of subscripts.  It's more convenient than
writing out the individual elements as a list of separate scalar values.

     ($him, $her)   = @folks[0,-1];		# array slice
     @them          = @folks[0 .. 3];		# array slice
     ($who, $home)  = @ENV{"USER", "HOME"};	# hash slice
     ($uid, $dir)   = (getpwnam("daemon"))[2,7];	# list slice

   Since you can assign to a list of variables, you can also assign to an
array or hash slice.

     @days[3..5]    = qw/Wed Thu Fri/;
     @colors{'red','blue','green'}
     		   = (0xff0000, 0x0000ff, 0x00ff00);
     @folks[0, -1]  = @folks[-1, 0];

   The previous assignments are exactly equivalent to

     ($days[3], $days[4], $days[5]) = qw/Wed Thu Fri/;
     ($colors{'red'}, $colors{'blue'}, $colors{'green'})
     		   = (0xff0000, 0x0000ff, 0x00ff00);
     ($folks[0], $folks[-1]) = ($folks[0], $folks[-1]);

   Since changing a slice changes the original array or hash that it's
slicing, a foreach construct will alter some-or even all-of the values of
the array or hash.

     foreach (@array[ 4 .. 10 ]) { s/peter/paul/ }

     foreach (@hash{keys %hash}) {
     	s/^\s+//;	    # trim leading whitespace
     	s/\s+$//;	    # trim trailing whitespace
     	s/(\w+)/\u\L$1/g;   # "titlecase" words
     }

   A slice of an empty list is still an empty list.  Thus:

     @a = ()[1,0];           # @a has no elements
     @b = (@a)[0,1];         # @b has no elements
     @c = (0,1)[2,3];        # @c has no elements

   But:

     @a = (1)[1,0];          # @a has two elements
     @b = (1,undef)[1,0,2];  # @b has three elements

   This makes it easy to write loops that terminate when a null list is
returned:

     while ( ($home, $user) = (getpwent)[7,0]) {
     	printf "%-8s %s\n", $user, $home;
     }

   As noted earlier in this document, the scalar sense of list assignment
is the number of elements on the right-hand side of the assignment.  The
null list contains no elements, so when the password file is exhausted,
the result is 0, not 2.

   If you're confused about why you use an '@' there on a hash slice
instead of a '%', think of it like this.  The type of bracket (square or
curly) governs whether it's an array or a hash being looked at.  On the
other hand, the leading symbol ('$' or '@') on the array or hash indicates
whether you are getting back a singular value (a scalar) or a plural one
(a list).

Typeglobs and Filehandles
-------------------------

   Perl uses an internal type called a *typeglob* to hold an entire symbol
table entry.  The type prefix of a typeglob is a *, because it represents
all types.  This used to be the preferred way to pass arrays and hashes by
reference into a function, but now that we have real references, this is
seldom needed.

   The main use of typeglobs in modern Perl is create symbol table aliases.
This assignment:

     *this = *that;

   makes $this an alias for $that, @this an alias for @that, %this an alias
for %that, &this an alias for &that, etc.  Much safer is to use a
reference.  This:

     local *Here::blue = \$There::green;

   temporarily makes $Here::blue an alias for $There::green, but doesn't
make @Here::blue an alias for @There::green, or %Here::blue an alias for
%There::green, etc.  See `"Symbol Tables"', *Note Perlmod: perlmod, for
more examples of this.  Strange though this may seem, this is the basis
for the whole module import/export system.

   Another use for typeglobs is to pass filehandles into a function or to
create new filehandles.  If you need to use a typeglob to save away a
filehandle, do it this way:

     $fh = *STDOUT;

   or perhaps as a real reference, like this:

     $fh = \*STDOUT;

   See *Note Perlsub: perlsub, for examples of using these as indirect
filehandles in functions.

   Typeglobs are also a way to create a local filehandle using the local()
operator.  These last until their block is exited, but may be passed back.
For example:

     sub newopen {
     	my $path = shift;
     	local  *FH;  # not my!
     	open   (FH, $path) 	    or  return undef;
     	return *FH;
     }
     $fh = newopen('/etc/passwd');

   Now that we have the `*foo{THING}' notation, typeglobs aren't used as
much for filehandle manipulations, although they're still needed to pass
brand new file and directory handles into or out of functions. That's
because `*HANDLE{IO}' only works if HANDLE has already been used as a
handle.  In other words, `*FH' must be used to create new symbol table
entries; `*foo{THING}' cannot.  When in doubt, use `*FH'.

   All functions that are capable of creating filehandles (open(),
opendir(), pipe(), socketpair(), sysopen(), socket(), and accept())
automatically create an anonymous filehandle if the handle passed to them
is an uninitialized scalar variable. This allows the constructs such as
`open(my $fh, ...)' and `open(local $fh,...)' to be used to create
filehandles that will conveniently be closed automatically when the scope
ends, provided there are no other references to them. This largely
eliminates the need for typeglobs when opening filehandles that must be
passed around, as in the following example:

     sub myopen {
         open my $fh, "@_"
     	     or die "Can't open '@_': $!";
     	return $fh;
     }

     {
         my $f = myopen("</etc/motd");
     	print <$f>;
     	# $f implicitly closed here
     }

   Another way to create anonymous filehandles is with the Symbol module
or with the IO::Handle module and its ilk.  These modules have the
advantage of not hiding different types of the same name during the
local().  See the bottom of `open()', *Note Perlfunc: perlfunc, for an
example.

SEE ALSO
========

   See *Note Perlvar: perlvar, for a description of Perl's built-in
variables and a discussion of legal variable names.  See *Note Perlref:
perlref,, *Note Perlsub: perlsub,, and `"Symbol Tables"', *Note Perlmod:
perlmod, for more discussion on typeglobs and the `*foo{THING}' syntax.


