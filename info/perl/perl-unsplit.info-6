This is Info file perl.info, produced by Makeinfo version 1.68 from the
input file bigperl.texi.

   settitle perl


File: perl.info,  Node: perlmodlib,  Next: perlmodinstall,  Prev: perlmod,  Up: Top

constructing new Perl modules and finding existing ones
*******************************************************

NAME
====

   perlmodlib - constructing new Perl modules and finding existing ones

DESCRIPTION
===========

THE PERL MODULE LIBRARY
=======================

   Many modules are included the Perl distribution.  These are described
below, and all end in `.pm'.  You may discover compiled library file
(usually ending in `.so') or small pieces of modules to be autoloaded
(ending in `.al'); these were automatically generated by the installation
process.  You may also discover files in the library directory that end in
either `.pl' or `.ph'.  These are old libraries supplied so that old
programs that use them still run.  The `.pl' files will all eventually be
converted into standard modules, and the `.ph' files made by h2ph will
probably end up as extension modules made by h2xs.  (Some `.ph' values may
already be available through the POSIX, Errno, or Fcntl modules.)  The
*pl2pm* file in the distribution may help in your conversion, but it's
just a mechanical process and therefore far from bulletproof.

Pragmatic Modules
-----------------

   They work somewhat like compiler directives (pragmata) in that they
tend to affect the compilation of your program, and thus will usually work
well only when used within a use, or no.  Most of these are lexically
scoped, so an inner BLOCK may countermand them by saying:

     no integer;
     no strict 'refs';
     no warnings;

   which lasts until the end of that BLOCK.

   Some pragmas are lexically scoped-typically those that affect the $^H
hints variable.  Others affect the current package instead, like `use
vars' and `use subs', which allow you to predeclare a variables or
subroutines within a particular file rather than just a block.  Such
declarations are effective for the entire file for which they were
declared.  You cannot rescind them with `no vars' or `no subs'.

   The following pragmas are defined (and have their own documentation).

attributes
     Get/set subroutine or variable attributes

attrs
     Set/get attributes of a subroutine (deprecated)

autouse
     Postpone load of modules until a function is used

base
     Establish IS-A relationship with base class at compile time

blib
     Use MakeMaker's uninstalled version of a package

caller
     Inherit pragmatic attributes from caller's context

charnames
     Define character names for `\N{named}' string literal escape.

constant
     Declare constants

diagnostics
     Force verbose warning diagnostics

fields
     Declare a class's attribute fields at compile-time

filetest
     Control the filetest operators like -r, -w for AFS, etc.

integer
     Compute arithmetic in integer instead of double

less
     Request less of something from the compiler (unimplemented)

lib
     Manipulate @INC at compile time

locale
     Use or avoid POSIX locales for built-in operations

ops
     Restrict unsafe operations when compiling

overload
     Overload Perl operations

re
     Alter regular expression behavior

sigtrap
     Enable simple signal handling

strict
     Restrict unsafe constructs

subs
     Predeclare subroutine names

utf8
     Turn on UTF-8 and Unicode support

vars
     Predeclare global variable names (obsoleted by our())

warnings
     Control optional warnings

Standard Modules
----------------

   Standard, bundled modules are all expected to behave in a well-defined
manner with respect to namespace pollution because they use the Exporter
module.  See their own documentation for details.

AnyDBM_File
     Provide framework for multiple DBM libraries

AutoLoader
     Load subroutines only on demand

AutoSplit
     Split a package for autoloading

B
     Guts of the Perl code generator (aka compiler)

B::Asmdata
     Autogenerated data about Perl ops, used to generate bytecode

B::Assembler
     Assemble Perl bytecode

B::Bblock
     Walk basic blocks

B::Bytecode
     Perl compiler's bytecode backend

B::C
     Perl compiler's C backend

B::CC
     Perl compiler's optimized C translation backend

B::Debug
     Walk Perl syntax tree, printing debug info about ops

B::Deparse
     Perl compiler backend to produce Perl code

B::Disassembler
     Disassemble Perl bytecode

B::Lint
     Module to catch dubious constructs

B::Showlex
     Show lexical variables used in functions or files

B::Stackobj
     Helper module for CC backend

     B::Stash - XXX NFI XXX

B::Terse
     Walk Perl syntax tree, printing terse info about ops

B::Xref
     Generates cross reference reports for Perl programs

Benchmark
     Benchmark running times of code

ByteLoader
     Load byte-compiled Perl code

CGI
     Simple Common Gateway Interface class

CGI::Apache
     Make things work with CGI.pm against Perl-Apache API

CGI::Carp
     CGI routines for writing to the HTTPD (or other) error log

CGI::Cookie
     Interface to Netscape Cookies

CGI::Fast
     CGI Interface for Fast CGI

CGI::Pretty
     Module to produce nicely formatted HTML code

CGI::Push
     Simple Interface to Server Push

CGI::Switch
     Try more than one constructors and return the first object available

CPAN
     Query, download, and build Perl modules from CPAN sites

CPAN::FirstTime
     Utility for CPAN::Config file initialization

CPAN::Nox
     Wrapper around CPAN.pm without using any XS module

Carp
     Act like warn/die from perspective of caller

Carp::Heavy
     Carp guts

Class::Struct
     Declare struct-like datatypes as Perl classes

Config
     Access Perl configuration information

Cwd
     Get pathname of current working directory

DB
     Programmatic interface to the Perl debugging API (experimental)

DB_File
     Perl5 access to Berkeley DB version 1.x

Data::Dumper
     Serialize Perl data structures

Devel::DProf
     A Perl execution profiler

Devel::Peek
     A data debugging tool for the XS programmer

Devel::SelfStubber
     Generate stubs for a SelfLoading module

DirHandle
     Supply object methods for directory handles

Dumpvalue
     Provide screen dump of Perl data

DynaLoader
     Dynamically load C libraries into Perl code

English
     Use English (or awk) names for ugly punctuation variables

Env
     Access environment variables as regular ones

Errno
     Load the libc errno.h defines

Exporter
     Implement default import method for modules

Exporter::Heavy
     Exporter guts

ExtUtils::Command
     Utilities to replace common Unix commands in Makefiles etc.

ExtUtils::Embed
     Utilities for embedding Perl in C/C++ programs

ExtUtils::Install
     Install files from here to there

ExtUtils::Installed
     Inventory management of installed modules

ExtUtils::Liblist
     Determine libraries to use and how to use them

ExtUtils::MM_Cygwin
     Methods to override Unix behavior in ExtUtils::MakeMaker

ExtUtils::MM_OS2
     Methods to override Unix behavior in ExtUtils::MakeMaker

ExtUtils::MM_Unix
     Methods used by ExtUtils::MakeMaker

ExtUtils::MM_VMS
     Methods to override Unix behavior in ExtUtils::MakeMaker

ExtUtils::MM_Win32
     Methods to override Unix behavior in ExtUtils::MakeMaker

ExtUtils::MakeMaker
     Create an extension Makefile

ExtUtils::Manifest
     Utilities to write and check a MANIFEST file

     ExtUtils::Miniperl, writemain - Write the C code for perlmain.c

ExtUtils::Mkbootstrap
     Make a bootstrap file for use by DynaLoader

ExtUtils::Mksymlists
     Write linker options files for dynamic extension

ExtUtils::Packlist
     Manage .packlist files

ExtUtils::testlib
     Add blib/* directories to @INC

Fatal
     Replace functions with equivalents which succeed or die

Fcntl
     Load the libc fcntl.h defines

File::Basename
     Split a pathname into pieces

File::CheckTree
     Run many filetest checks on a tree

File::Compare
     Compare files or filehandles

File::Copy
     Copy files or filehandles

File::DosGlob
     DOS-like globbing and then some

File::Find
     Traverse a file tree

File::Glob
     Perl extension for BSD filename globbing

File::Path
     Create or remove a series of directories

File::Spec
     Portably perform operations on file names

File::Spec::Functions
     Portably perform operations on file names

File::Spec::Mac
     File::Spec for MacOS

File::Spec::OS2
     Methods for OS/2 file specs

File::Spec::Unix
     Methods used by File::Spec

File::Spec::VMS
     Methods for VMS file specs

File::Spec::Win32
     Methods for Win32 file specs

File::stat
     By-name interface to Perl's built-in stat() functions

FileCache
     Keep more files open than the system permits

FileHandle
     Supply object methods for filehandles

FindBin
     Locate installation directory of running Perl program

GDBM_File
     Access to the gdbm library

Getopt::Long
     Extended processing of command line options

Getopt::Std
     Process single-character switches with switch clustering

I18N::Collate
     Compare 8-bit scalar data according to current locale

IO
     Front-end to load various IO modules

IO::Dir
     Supply object methods for directory handles

IO::File
     Supply object methods for filehandles

IO::Handle
     Supply object methods for I/O handles

IO::Pipe
     Supply object methods for pipes

IO::Poll
     Object interface to system poll call

IO::Seekable
     Supply seek based methods for I/O objects

IO::Select
     OO interface to the select system call

IO::Socket
     Object interface to socket communications

IO::Socket::INET
     Object interface for AF_INET domain sockets

IO::Socket::UNIX
     Object interface for AF_UNIX domain sockets

IPC::Msg
     SysV Msg IPC object class

IPC::Open2
     Open a process for both reading and writing

IPC::Open3
     Open a process for reading, writing, and error handling

IPC::Semaphore
     SysV Semaphore IPC object class

IPC::SysV
     SysV IPC constants

Math::BigFloat
     Arbitrary length float math package

Math::BigInt
     Arbitrary size integer math package

Math::Complex
     Complex numbers and associated mathematical functions

Math::Trig
     Trigonometric functions

Net::Ping
     Check a remote host for reachability

Net::hostent
     By-name interface to Perl's built-in gethost*() functions

Net::netent
     By-name interface to Perl's built-in getnet*() functions

Net::protoent
     By-name interface to Perl's built-in getproto*() functions

Net::servent
     By-name interface to Perl's built-in getserv*() functions

O
     Generic interface to Perl Compiler backends

Opcode
     Disable named opcodes when compiling Perl code

POSIX
     Perl interface to IEEE Std 1003.1

Pod::Checker
     Check pod documents for syntax errors

Pod::Html
     Module to convert pod files to HTML

Pod::InputObjects
     Manage POD objects

Pod::Man
     Convert POD data to formatted *roff input

Pod::Parser
     Base class for creating POD filters and translators

Pod::Select
     Extract selected sections of POD from input

Pod::Text
     Convert POD data to formatted ASCII text

Pod::Text::Color
     Convert POD data to formatted color ASCII text

Pod::Usage
     Print a usage message from embedded pod documentation

SDBM_File
     Tied access to sdbm files

Safe
     Compile and execute code in restricted compartments

Search::Dict
     Search for key in dictionary file

SelectSaver
     Save and restore selected file handle

SelfLoader
     Load functions only on demand

Shell
     Run shell commands transparently within Perl

Socket
     Load the libc socket.h defines and structure manipulators

Symbol
     Manipulate Perl symbols and their names

Sys::Hostname
     Try every conceivable way to get hostname

Sys::Syslog
     Interface to the libc syslog(3) calls

Term::Cap
     Termcap interface

Term::Complete
     Word completion module

Term::ReadLine
     Interface to various `readline' packages.

Test
     Provides a simple framework for writing test scripts

Test::Harness
     Run Perl standard test scripts with statistics

Text::Abbrev
     Create an abbreviation table from a list

Text::ParseWords
     Parse text into a list of tokens or array of arrays

Text::Soundex
     Implementation of the Soundex Algorithm as described by Knuth

     Text::Tabs - expand and unexpand tabs per expand(1) and unexpand(1)

Text::Wrap
     Line wrapping to form simple paragraphs

Tie::Array
     Base class for tied arrays

Tie::Handle
     Base class definitions for tied handles

Tie::Hash
     Base class definitions for tied hashes

Tie::RefHash
     Use references as hash keys

Tie::Scalar
     Base class definitions for tied scalars

Tie::SubstrHash
     Fixed-table-size, fixed-key-length hashing

Time::Local
     Efficiently compute time from local and GMT time

Time::gmtime
     By-name interface to Perl's built-in gmtime() function

Time::localtime
     By-name interface to Perl's built-in localtime() function

Time::tm
     Internal object used by Time::gmtime and Time::localtime

UNIVERSAL
     Base class for ALL classes (blessed references)

User::grent
     By-name interface to Perl's built-in getgr*() functions

User::pwent
     By-name interface to Perl's built-in getpw*() functions

   To find out all modules installed on your system, including those
without documentation or outside the standard release, just do this:

     % find `perl -e 'print "@INC"'` -name '*.pm' -print

   To get a log of all module distributions which have been installed
since perl was installed, just do:

     % perldoc perllocal

   Modules should all have their own documentation installed and accessible
via your system man(1) command, or via the perldoc program.  If you do not
have a find program, you can use the Perl find2perl program instead, which
generates Perl code as output you can run through perl.  If you have a man
program but it doesn't find your modules, you'll have to fix your manpath.
See *Note Perl: perl, for details.

Extension Modules
-----------------

   Extension modules are written in C (or a mix of Perl and C).  They are
usually dynamically loaded into Perl if and when you need them, but may
also be be linked in statically.  Supported extension modules include
Socket, Fcntl, and POSIX.

   Many popular C extension modules do not come bundled (at least, not
completely) due to their sizes, volatility, or simply lack of time for
adequate testing and configuration across the multitude of platforms on
which Perl was beta-tested.  You are encouraged to look for them on CPAN
(described below), or using web search engines like Alta Vista or Deja
News.

CPAN
====

   CPAN stands for Comprehensive Perl Archive Network; it's a globally
replicated trove of Perl materials, including documentation, style guides,
tricks and trap, alternate ports to non-Unix systems and occasional binary
distributions for these.   Search engines for CPAN can be found at
http://cpan.perl.com/ and at
http://theory.uwinnipeg.ca/mod_perl/cpan-search.pl .

   Most importantly, CPAN includes around a thousand unbundled modules,
some of which require a C compiler to build.  Major categories of modules
are:

   * Language Extensions and Documentation Tools

   * Development Support

   * Operating System Interfaces

   * Networking, Device Control (modems) and InterProcess Communication

   * Data Types and Data Type Utilities

   * Database Interfaces

   * User Interfaces

   * Interfaces to / Emulations of Other Programming Languages

   * File Names, File Systems and File Locking (see also File Handles)

   * String Processing, Language Text Processing, Parsing, and Searching

   * Option, Argument, Parameter, and Configuration File Processing

   * Internationalization and Locale

   * Authentication, Security, and Encryption

   * World Wide Web, HTML, HTTP, CGI, MIME

   * Server and Daemon Utilities

   * Archiving and Compression

   * Images, Pixmap and Bitmap Manipulation, Drawing, and Graphing

   * Mail and Usenet News

   * Control Flow Utilities (callbacks and exceptions etc)

   * File Handle and Input/Output Stream Utilities

   * Miscellaneous Modules

   Registered CPAN sites as of this writing include the following.  You
should try to choose one close to you:

Africa
          South Africa   ftp://ftp.is.co.za/programming/perl/CPAN/
                         ftp://ftp.saix.net/pub/CPAN/
                         ftp://ftp.sun.ac.za/CPAN/
                         ftp://ftpza.co.za/pub/mirrors/cpan/

Asia
          China          ftp://freesoft.cei.gov.cn/pub/languages/perl/CPAN/
          Hong Kong      ftp://ftp.pacific.net.hk/pub/mirror/CPAN/
          Indonesia      ftp://malone.piksi.itb.ac.id/pub/CPAN/
          Israel         ftp://bioinfo.weizmann.ac.il/pub/software/perl/CPAN/
          Japan          ftp://ftp.dti.ad.jp/pub/lang/CPAN/
                         ftp://ftp.jaist.ac.jp/pub/lang/perl/CPAN/
                         ftp://ftp.lab.kdd.co.jp/lang/perl/CPAN/
                         ftp://ftp.meisei-u.ac.jp/pub/CPAN/
                         ftp://ftp.ring.gr.jp/pub/lang/perl/CPAN/
                         ftp://mirror.nucba.ac.jp/mirror/Perl/
          Saudi-Arabia   ftp://ftp.isu.net.sa/pub/CPAN/
          Singapore      ftp://ftp.nus.edu.sg/pub/unix/perl/CPAN/
          South Korea    ftp://ftp.bora.net/pub/CPAN/
                         ftp://ftp.kornet.net/pub/CPAN/
                         ftp://ftp.nuri.net/pub/CPAN/
          Taiwan         ftp://coda.nctu.edu.tw/computer-languages/perl/CPAN/
                         ftp://ftp.ee.ncku.edu.tw/pub3/perl/CPAN/
                         ftp://ftp1.sinica.edu.tw/pub1/perl/CPAN/
          Thailand       ftp://ftp.nectec.or.th/pub/mirrors/CPAN/

Australasia
          Australia      ftp://cpan.topend.com.au/pub/CPAN/
                         ftp://ftp.labyrinth.net.au/pub/perl-CPAN/
                         ftp://ftp.sage-au.org.au/pub/compilers/perl/CPAN/
                         ftp://mirror.aarnet.edu.au/pub/perl/CPAN/
          New Zealand    ftp://ftp.auckland.ac.nz/pub/perl/CPAN/
                         ftp://sunsite.net.nz/pub/languages/perl/CPAN/

Central America
          Costa Rica     ftp://ftp.ucr.ac.cr/pub/Unix/CPAN/

Europe
          Austria        ftp://ftp.tuwien.ac.at/pub/languages/perl/CPAN/
          Belgium        ftp://ftp.kulnet.kuleuven.ac.be/pub/mirror/CPAN/
          Bulgaria       ftp://ftp.ntrl.net/pub/mirrors/CPAN/
          Croatia        ftp://ftp.linux.hr/pub/CPAN/
          Czech Republic ftp://ftp.fi.muni.cz/pub/perl/
                         ftp://sunsite.mff.cuni.cz/Languages/Perl/CPAN/
          Denmark        ftp://sunsite.auc.dk/pub/languages/perl/CPAN/
          Estonia        ftp://ftp.ut.ee/pub/languages/perl/CPAN/
          Finland        ftp://ftp.funet.fi/pub/languages/perl/CPAN/
          France         ftp://ftp.grolier.fr/pub/perl/CPAN/
                         ftp://ftp.lip6.fr/pub/perl/CPAN/
                         ftp://ftp.oleane.net/pub/mirrors/CPAN/
                         ftp://ftp.pasteur.fr/pub/computing/CPAN/
                         ftp://ftp.uvsq.fr/pub/perl/CPAN/
          German         ftp://ftp.gigabell.net/pub/CPAN/
          Germany        ftp://ftp.archive.de.uu.net/pub/CPAN/
                         ftp://ftp.freenet.de/pub/ftp.cpan.org/pub/
                         ftp://ftp.gmd.de/packages/CPAN/
                         ftp://ftp.gwdg.de/pub/languages/perl/CPAN/
                         ftp://ftp.leo.org/pub/comp/general/programming/languages/script/perl/CPAN/
                         ftp://ftp.mpi-sb.mpg.de/pub/perl/CPAN/
                         ftp://ftp.rz.ruhr-uni-bochum.de/pub/CPAN/
                         ftp://ftp.uni-erlangen.de/pub/source/CPAN/
                         ftp://ftp.uni-hamburg.de/pub/soft/lang/perl/CPAN/
          Germany        ftp://ftp.archive.de.uu.net/pub/CPAN/
                         ftp://ftp.freenet.de/pub/ftp.cpan.org/pub/
                         ftp://ftp.gmd.de/packages/CPAN/
                         ftp://ftp.gwdg.de/pub/languages/perl/CPAN/
                         ftp://ftp.leo.org/pub/comp/general/programming/languages/script/perl/CPAN/
                         ftp://ftp.mpi-sb.mpg.de/pub/perl/CPAN/
                         ftp://ftp.rz.ruhr-uni-bochum.de/pub/CPAN/
                         ftp://ftp.uni-erlangen.de/pub/source/CPAN/
                         ftp://ftp.uni-hamburg.de/pub/soft/lang/perl/CPAN/
          Greece         ftp://ftp.ntua.gr/pub/lang/perl/
          Hungary        ftp://ftp.kfki.hu/pub/packages/perl/CPAN/
          Iceland        ftp://ftp.gm.is/pub/CPAN/
          Ireland        ftp://cpan.indigo.ie/pub/CPAN/
                         ftp://sunsite.compapp.dcu.ie/pub/perl/
          Italy          ftp://cis.uniRoma2.it/CPAN/
                         ftp://ftp.flashnet.it/pub/CPAN/
                         ftp://ftp.unina.it/pub/Other/CPAN/
                         ftp://ftp.unipi.it/pub/mirror/perl/CPAN/
          Netherlands    ftp://ftp.cs.uu.nl/mirror/CPAN/
                         ftp://ftp.nluug.nl/pub/languages/perl/CPAN/
          Norway         ftp://ftp.uit.no/pub/languages/perl/cpan/
                         ftp://sunsite.uio.no/pub/languages/perl/CPAN/
          Poland         ftp://ftp.man.torun.pl/pub/CPAN/
                         ftp://ftp.pk.edu.pl/pub/lang/perl/CPAN/
                         ftp://sunsite.icm.edu.pl/pub/CPAN/
          Portugal       ftp://ftp.ci.uminho.pt/pub/mirrors/cpan/
                         ftp://ftp.ist.utl.pt/pub/CPAN/
                         ftp://ftp.ua.pt/pub/CPAN/
          Romania        ftp://ftp.dnttm.ro/pub/CPAN/
          Russia         ftp://ftp.chg.ru/pub/lang/perl/CPAN/
                         ftp://ftp.sai.msu.su/pub/lang/perl/CPAN/
          Slovakia       ftp://ftp.entry.sk/pub/languages/perl/CPAN/
          Slovenia       ftp://ftp.arnes.si/software/perl/CPAN/
          Spain          ftp://ftp.etse.urv.es/pub/perl/
                         ftp://ftp.rediris.es/mirror/CPAN/
          Sweden         ftp://ftp.sunet.se/pub/lang/perl/CPAN/
          Switzerland    ftp://sunsite.cnlab-switch.ch/mirror/CPAN/
          Turkey         ftp://sunsite.bilkent.edu.tr/pub/languages/CPAN/
          United Kingdom ftp://ftp.demon.co.uk/pub/mirrors/perl/CPAN/
                         ftp://ftp.flirble.org/pub/languages/perl/CPAN/
                         ftp://ftp.mirror.ac.uk/sites/ftp.funet.fi/pub/languages/perl/CPAN/
                         ftp://ftp.plig.org/pub/CPAN/
                         ftp://sunsite.doc.ic.ac.uk/packages/CPAN/

North America
          Alberta        ftp://sunsite.ualberta.ca/pub/Mirror/CPAN/
          California     ftp://cpan.nas.nasa.gov/pub/perl/CPAN/
                         ftp://cpan.valueclick.com/CPAN/
                         ftp://ftp.cdrom.com/pub/perl/CPAN/
                         http://download.sourceforge.net/mirrors/CPAN/
          Colorado       ftp://ftp.cs.colorado.edu/pub/perl/CPAN/
          Florida        ftp://ftp.cise.ufl.edu/pub/perl/CPAN/
          Georgia        ftp://ftp.twoguys.org/CPAN/
          Illinois       ftp://uiarchive.uiuc.edu/pub/lang/perl/CPAN/
          Indiana        ftp://csociety-ftp.ecn.purdue.edu/pub/CPAN/
                         ftp://ftp.uwsg.indiana.edu/pub/perl/CPAN/
          Kentucky       ftp://ftp.uky.edu/CPAN/
          Manitoba       ftp://theoryx5.uwinnipeg.ca/pub/CPAN/
          Massachusetts  ftp://ftp.ccs.neu.edu/net/mirrors/ftp.funet.fi/pub/languages/perl/CPAN/
                         ftp://ftp.iguide.com/pub/mirrors/packages/perl/CPAN/
          Mexico         ftp://ftp.msg.com.mx/pub/CPAN/
          New York       ftp://ftp.deao.net/pub/CPAN/
                         ftp://ftp.rge.com/pub/languages/perl/
          North Carolina ftp://ftp.duke.edu/pub/perl/
          Nova Scotia    ftp://cpan.chebucto.ns.ca/pub/CPAN/
          Oklahoma       ftp://ftp.ou.edu/mirrors/CPAN/
          Ontario        ftp://ftp.crc.ca/pub/packages/lang/perl/CPAN/
          Oregon         ftp://ftp.orst.edu/pub/packages/CPAN/
          Pennsylvania   ftp://ftp.epix.net/pub/languages/perl/
          Tennessee      ftp://ftp.sunsite.utk.edu/pub/CPAN/
          Texas          ftp://ftp.sedl.org/pub/mirrors/CPAN/
                         ftp://jhcloos.com/pub/mirror/CPAN/
          Utah           ftp://mirror.xmission.com/CPAN/
          Virginia       ftp://ftp.perl.org/pub/perl/CPAN/
                         ftp://ruff.cs.jmu.edu/pub/CPAN/
          Washington     ftp://ftp-mirror.internap.com/pub/CPAN/
                         ftp://ftp.llarian.net/pub/CPAN/
                         ftp://ftp.spu.edu/pub/CPAN/

South America
          Brazil         ftp://cpan.if.usp.br/pub/mirror/CPAN/
                         ftp://ftp.matrix.com.br/pub/perl/
          Chile          ftp://sunsite.dcc.uchile.cl/pub/Lang/PERL/

   For an up-to-date listing of CPAN sites, see
http://www.perl.com/perl/CPAN/SITES or ftp://www.perl.com/CPAN/SITES .

Modules: Creation, Use, and Abuse
=================================

   (The following section is borrowed directly from Tim Bunce's modules
file, available at your nearest CPAN site.)

   Perl implements a class using a package, but the presence of a package
doesn't imply the presence of a class.  A package is just a namespace.  A
class is a package that provides subroutines that can be used as methods.
A method is just a subroutine that expects, as its first argument, either
the name of a package (for "static" methods), or a reference to something
(for "virtual" methods).

   A module is a file that (by convention) provides a class of the same
name (sans the .pm), plus an import method in that class that can be
called to fetch exported symbols.  This module may implement some of its
methods by loading dynamic C or C++ objects, but that should be totally
transparent to the user of the module.  Likewise, the module might set up
an AUTOLOAD function to slurp in subroutine definitions on demand, but
this is also transparent.  Only the `.pm' file is required to exist.  See
*Note Perlsub: perlsub,, *Note Perltoot: perltoot,, and *Note AutoLoader:
(pm.info)AutoLoader, for details about the AUTOLOAD mechanism.

Guidelines for Module Creation
------------------------------

Do similar modules already exist in some form?
     If so, please try to reuse the existing modules either in whole or by
     inheriting useful features into a new class.  If this is not
     practical try to get together with the module authors to work on
     extending or enhancing the functionality of the existing modules.  A
     perfect example is the plethora of packages in perl4 for dealing with
     command line options.

     If you are writing a module to expand an already existing set of
     modules, please coordinate with the author of the package.  It helps
     if you follow the same naming scheme and module interaction scheme as
     the original author.

Try to design the new module to be easy to extend and reuse.
     Try to `use warnings;' (or `use warnings qw(...);').  Remember that
     you can add `no warnings qw(...);' to individual blocks of code that
     need less warnings.

     Use blessed references.  Use the two argument form of bless to bless
     into the class name given as the first parameter of the constructor,
     e.g.,:

          sub new {
          	my $class = shift;
          	return bless {}, $class;
          }

     or even this if you'd like it to be used as either a static or a
     virtual method.

          sub new {
          	my $self  = shift;
          	my $class = ref($self) || $self;
          	return bless {}, $class;
          }

     Pass arrays as references so more parameters can be added later (it's
     also faster).  Convert functions into methods where appropriate.
     Split large methods into smaller more flexible ones.  Inherit methods
     from other modules if appropriate.

     Avoid class name tests like: `die "Invalid" unless ref $ref eq 'FOO''.
     Generally you can delete the `eq 'FOO'' part with no harm at all.
     Let the objects look after themselves! Generally, avoid hard-wired
     class names as far as possible.

     Avoid `< $r-'Class::func() >> where using `@ISA=qw(... Class ...)' and
     `< $r-'func() >> would work (see *Note Perlbot: perlbot, for more
     details).

     Use autosplit so little used or newly added functions won't be a
     burden to programs that don't use them. Add test functions to the
     module after __END__ either using AutoSplit or by saying:

          eval join('',<main::DATA>) || die $@ unless caller();

     Does your module pass the 'empty subclass' test? If you say
     `@SUBCLASS::ISA = qw(YOURCLASS);' your applications should be able to
     use SUBCLASS in exactly the same way as YOURCLASS.  For example, does
     your application still work if you change:  `$obj = new YOURCLASS;'
     into: `$obj = new SUBCLASS;' ?

     Avoid keeping any state information in your packages. It makes it
     difficult for multiple other packages to use yours. Keep state
     information in objects.

     Always use -w.

     Try to `use strict;' (or `use strict qw(...);').  Remember that you
     can add `no strict qw(...);' to individual blocks of code that need
     less strictness.

     Always use -w.

     Follow the guidelines in the perlstyle(1) manual.

     Always use -w.

Some simple style guidelines
     The perlstyle manual supplied with Perl has many helpful points.

     Coding style is a matter of personal taste. Many people evolve their
     style over several years as they learn what helps them write and
     maintain good code.  Here's one set of assorted suggestions that seem
     to be widely used by experienced developers:

     Use underscores to separate words.  It is generally easier to read
     $var_names_like_this than $VarNamesLikeThis, especially for
     non-native speakers of English. It's also a simple rule that works
     consistently with VAR_NAMES_LIKE_THIS.

     Package/Module names are an exception to this rule. Perl informally
     reserves lowercase module names for 'pragma' modules like integer and
     strict. Other modules normally begin with a capital letter and use
     mixed case with no underscores (need to be short and portable).

     You may find it helpful to use letter case to indicate the scope or
     nature of a variable. For example:

          $ALL_CAPS_HERE   constants only (beware clashes with Perl vars)
          $Some_Caps_Here  package-wide global/static
          $no_caps_here    function scope my() or local() variables

     Function and method names seem to work best as all lowercase.  e.g.,
     `< $obj-'as_string() >>.

     You can use a leading underscore to indicate that a variable or
     function should not be used outside the package that defined it.

Select what to export.
     Do NOT export method names!

     Do NOT export anything else by default without a good reason!

     Exports pollute the namespace of the module user.  If you must export
     try to use @EXPORT_OK in preference to @EXPORT and avoid short or
     common names to reduce the risk of name clashes.

     Generally anything not exported is still accessible from outside the
     module using the ModuleName::item_name (or `< $blessed_ref-'method >>)
     syntax.  By convention you can use a leading underscore on names to
     indicate informally that they are 'internal' and not for public use.

     (It is actually possible to get private functions by saying: `my
     $subref = sub { ... };  &$subref;'.  But there's no way to call that
     directly as a method, because a method must have a name in the symbol
     table.)

     As a general rule, if the module is trying to be object oriented then
     export nothing. If it's just a collection of functions then
     @EXPORT_OK anything but use @EXPORT with caution.

Select a name for the module.
     This name should be as descriptive, accurate, and complete as
     possible.  Avoid any risk of ambiguity. Always try to use two or more
     whole words.  Generally the name should reflect what is special about
     what the module does rather than how it does it.  Please use nested
     module names to group informally or categorize a module.  There
     should be a very good reason for a module not to have a nested name.
     Module names should begin with a capital letter.

     Having 57 modules all called Sort will not make life easy for anyone
     (though having 23 called Sort::Quick is only marginally better :-).
     Imagine someone trying to install your module alongside many others.
     If in any doubt ask for suggestions in comp.lang.perl.misc.

     If you are developing a suite of related modules/classes it's good
     practice to use nested classes with a common prefix as this will
     avoid namespace clashes. For example: Xyz::Control, Xyz::View,
     Xyz::Model etc. Use the modules in this list as a naming guide.

     If adding a new module to a set, follow the original author's
     standards for naming modules and the interface to methods in those
     modules.

     To be portable each component of a module name should be limited to
     11 characters. If it might be used on MS-DOS then try to ensure each
     is unique in the first 8 characters. Nested modules make this easier.

Have you got it right?
     How do you know that you've made the right decisions? Have you picked
     an interface design that will cause problems later? Have you picked
     the most appropriate name? Do you have any questions?

     The best way to know for sure, and pick up many helpful suggestions,
     is to ask someone who knows. Comp.lang.perl.misc is read by just about
     all the people who develop modules and it's the best place to ask.

     All you need to do is post a short summary of the module, its purpose
     and interfaces. A few lines on each of the main methods is probably
     enough. (If you post the whole module it might be ignored by busy
     people - generally the very people you want to read it!)

     Don't worry about posting if you can't say when the module will be
     ready - just say so in the message. It might be worth inviting others
     to help you, they may be able to complete it for you!

README and other Additional Files.
     It's well known that software developers usually fully document the
     software they write. If, however, the world is in urgent need of your
     software and there is not enough time to write the full documentation
     please at least provide a README file containing:

        * A description of the module/package/extension etc.

        * A copyright notice - see below.

        * Prerequisites - what else you may need to have.

        * How to build it - possible changes to Makefile.PL etc.

        * How to install it.

        * Recent changes in this release, especially incompatibilities

        * Changes / enhancements you plan to make in the future.

     If the README file seems to be getting too large you may wish to
     split out some of the sections into separate files: INSTALL, Copying,
     ToDo etc.

    Adding a Copyright Notice.
          How you choose to license your work is a personal decision.  The
          general mechanism is to assert your Copyright and then make a
          declaration of how others may copy/use/modify your work.

          Perl, for example, is supplied with two types of licence: The GNU
          GPL and The Artistic Licence (see the files README, Copying, and
          Artistic).  Larry has good reasons for NOT just using the GNU
          GPL.

          My personal recommendation, out of respect for Larry, Perl, and
          the Perl community at large is to state something simply like:

               Copyright (c) 1995 Your Name. All rights reserved.
               This program is free software; you can redistribute it and/or
               modify it under the same terms as Perl itself.

          This statement should at least appear in the README file. You may
          also wish to include it in a Copying file and your source files.
          Remember to include the other words in addition to the Copyright.

    Give the module a version/issue/release number.
          To be fully compatible with the Exporter and MakeMaker modules
          you should store your module's version number in a non-my package
          variable called $VERSION.  This should be a floating point
          number with at least two digits after the decimal (i.e.,
          hundredths, e.g, `$VERSION = "0.01"').  Don't use a "1.3.2"
          style version.  See *Note Exporter: (pm.info)Exporter, for
          details.

          It may be handy to add a function or method to retrieve the
          number.  Use the number in announcements and archive file names
          when releasing the module (ModuleName-1.02.tar.Z).  See perldoc
          ExtUtils::MakeMaker.pm for details.

    How to release and distribute a module.
          It's good idea to post an announcement of the availability of
          your module (or the module itself if small) to the
          comp.lang.perl.announce Usenet newsgroup.  This will at least
          ensure very wide once-off distribution.

          If possible, register the module with CPAN.  You should include
          details of its location in your announcement.

          Some notes about ftp archives: Please use a long descriptive file
          name that includes the version number. Most incoming directories
          will not be readable/listable, i.e., you won't be able to see
          your file after uploading it. Remember to send your email
          notification message as soon as possible after uploading else
          your file may get deleted automatically. Allow time for the file
          to be processed and/or check the file has been processed before
          announcing its location.

          FTP Archives for Perl Modules:

          Follow the instructions and links on:

               http://www.perl.com/CPAN/modules/00modlist.long.html
               http://www.perl.com/CPAN/modules/04pause.html

          or upload to one of these sites:

               https://pause.kbx.de/pause/
               http://pause.perl.org/pause/

          and notify <modules@perl.org>.

          By using the WWW interface you can ask the Upload Server to
          mirror your modules from your ftp or WWW site into your own
          directory on CPAN!

          Please remember to send me an updated entry for the Module list!

    Take care when changing a released module.
          Always strive to remain compatible with previous released
          versions.  Otherwise try to add a mechanism to revert to the old
          behavior if people rely on it.  Document incompatible changes.

Guidelines for Converting Perl 4 Library Scripts into Modules
-------------------------------------------------------------

There is no requirement to convert anything.
     If it ain't broke, don't fix it! Perl 4 library scripts should
     continue to work with no problems. You may need to make some minor
     changes (like escaping non-array @'s in double quoted strings) but
     there is no need to convert a .pl file into a Module for just that.

Consider the implications.
     All Perl applications that make use of the script will need to be
     changed (slightly) if the script is converted into a module.  Is it
     worth it unless you plan to make other changes at the same time?

Make the most of the opportunity.
     If you are going to convert the script to a module you can use the
     opportunity to redesign the interface.  The guidelines for module
     creation above include many of the issues you should consider.

The pl2pm utility will get you started.
     This utility will read *.pl files (given as parameters) and write
     corresponding *.pm files. The pl2pm utilities does the following:

        * Adds the standard Module prologue lines

        * Converts package specifiers from ' to ::

        * Converts die(...) to croak(...)

        * Several other minor changes

     Being a mechanical process pl2pm is not bullet proof. The converted
     code will need careful checking, especially any package statements.
     Don't delete the original .pl file till the new .pm one works!

Guidelines for Reusing Application Code
---------------------------------------

Complete applications rarely belong in the Perl Module Library.
Many applications contain some Perl code that could be reused.
     Help save the world! Share your code in a form that makes it easy to
     reuse.

Break-out the reusable code into one or more separate module files.
Take the opportunity to reconsider and redesign the interfaces.
In some cases the 'application' can then be reduced to a small
     fragment of code built on top of the reusable modules. In these cases
     the application could invoked as:

          % perl -e 'use Module::Name; method(@ARGV)' ...
          or
          % perl -mModule::Name ...    (in perl5.002 or higher)

NOTE
====

   Perl does not enforce private and public parts of its modules as you may
have been used to in other languages like C++, Ada, or Modula-17.  Perl
doesn't have an infatuation with enforced privacy.  It would prefer that
you stayed out of its living room because you weren't invited, not because
it has a shotgun.

   The module and its user have a contract, part of which is common law,
and part of which is "written".  Part of the common law contract is that a
module doesn't pollute any namespace it wasn't asked to.  The written
contract for the module (A.K.A. documentation) may make other provisions.
But then you know when you `use RedefineTheWorld' that you're redefining
the world and willing to take the consequences.


File: perl.info,  Node: perlnumber,  Next: perlsec,  Prev: perldiag,  Up: Top

semantics of numbers and numeric operations in Perl
***************************************************

NAME
====

   perlnumber - semantics of numbers and numeric operations in Perl

SYNOPSIS
========

     $n = 1234;			# decimal integer
     $n = 0b1110011;		# binary integer
     $n = 01234;			# octal integer
     $n = 0x1234;		# hexadecimal integer
     $n = 12.34e-56;		# exponential notation
     $n = "-12.34e56";		# number specified as a string
     $n = "1234";		# number specified as a string
     $n = v49.50.51.52;		# number specified as a string, which in
     				# turn is specified in terms of numbers :-)

DESCRIPTION
===========

   This document describes how Perl internally handles numeric values.

   Perl's operator overloading facility is completely ignored here.
Operator overloading allows user-defined behaviors for numbers, such as
operations over arbitrarily large integers, floating points numbers with
arbitrary precision, operations over "exotic" numbers such as modular
arithmetic or p-adic arithmetic, and so on.  See *Note Overload:
(pm.info)overload, for details.

Storing numbers
===============

   Perl can internally represent numbers in 3 different ways: as native
integers, as native floating point numbers, and as decimal strings.
Decimal strings may have an exponential notation part, as in `"12.34e-56"'.
*Native* here means "a format supported by the C compiler which was used
to build perl".

   The term "native" does not mean quite as much when we talk about native
integers, as it does when native floating point numbers are involved.  The
only implication of the term "native" on integers is that the limits for
the maximal and the minimal supported true integral quantities are close to
powers of 2.  However, "native" floats have a most fundamental
restriction: they may represent only those numbers which have a relatively
"short" representation when converted to a binary fraction.  For example,
0.9 cannot be respresented by a native float, since the binary fraction
for 0.9 is infinite:

     binary0.1110011001100...

   with the sequence `1100' repeating again and again.  In addition to this
limitation,  the exponent of the binary number is also restricted when it
is represented as a floating point number.  On typical hardware, floating
point values can store numbers with up to 53 binary digits, and with binary
exponents between -1024 and 1024.  In decimal representation this is close
to 16 decimal digits and decimal exponents in the range of -304..304.  The
upshot of all this is that Perl cannot store a number like
12345678901234567 as a floating point number on such architectures without
loss of information.

   Similarly, decimal strings can represent only those numbers which have a
finite decimal expansion.  Being strings, and thus of arbitrary length,
there is no practical limit for the exponent or number of decimal digits
for these numbers.  (But realize that what we are discussing the rules for
just the storage of these numbers.  The fact that you can store such
"large" numbers does not mean that that the operations over these numbers
will use all of the significant digits.  See `"Numeric operators and
numeric conversions"' in this node for details.)

   In fact numbers stored in the native integer format may be stored either
in the signed native form, or in the unsigned native form.  Thus the limits
for Perl numbers stored as native integers would typically be
-2**31..2**32-1, with appropriate modifications in the case of 64-bit
integers.  Again, this does not mean that Perl can do operations only over
integers in this range: it is possible to store many more integers in
floating point format.

   Summing up, Perl numeric values can store only those numbers which have
a finite decimal expansion or a "short" binary expansion.

Numeric operators and numeric conversions
=========================================

   As mentioned earlier, Perl can store a number in any one of three
formats, but most operators typically understand only one of those
formats.  When a numeric value is passed as an argument to such an
operator, it will be converted to the format understood by the operator.

   Six such conversions are possible:

     native integer        --> native floating point	(*)
     native integer        --> decimal string
     native floating_point --> native integer		(*)
     native floating_point --> decimal string		(*)
     decimal string        --> native integer
     decimal string        --> native floating point	(*)

   These conversions are governed by the following general rules:

   * If the source number can be represented in the target form, that
     representation is used.

   * If the source number is outside of the limits representable in the
     target form, a representation of the closest limit is used.  (*Loss
     of information*)

   * If the source number is between two numbers representable in the
     target form, a representation of one of these numbers is used.
     (*Loss of information*)

   * In `< native floating point --' native integer >> conversions the
     magnitude of the result is less than or equal to the magnitude of the
     source.  (*"Rounding to zero".*)

   * If the `< decimal string --' native integer >> conversion cannot be
     done without loss of information, the result is compatible with the
     conversion sequence `< decimal_string --' native_floating_point ->
     native_integer >>.  In particular, rounding is strongly biased to 0,
     though a number like `"0.99999999999999999999"' has a chance of being
     rounded to 1.

   *RESTRICTION*: The conversions marked with `(*)' above involve steps
performed by the C compiler.  In particular, bugs/features of the compiler
used may lead to breakage of some of the above rules.

Flavors of Perl numeric operations
==================================

   Perl operations which take a numeric argument treat that argument in one
of four different ways: they may force it to one of the integer/floating/
string formats, or they may behave differently depending on the format of
the operand.  Forcing a numeric value to a particular format does not
change the number stored in the value.

   All the operators which need an argument in the integer format treat the
argument as in modular arithmetic, e.g., `mod 2**32' on a 32-bit
architecture.  `sprintf "%u", -1' therefore provides the same result as
`sprintf "%u", ~0'.

Arithmetic operators except, `no integer'
     force the argument into the floating point format.

Arithmetic operators except, `use integer'
Bitwise operators, `no integer'
     force the argument into the integer format if it is not a string.

Bitwise operators, `use integer'
     force the argument into the integer format

Operators which expect an integer
     force the argument into the integer format.  This is applicable to
     the third and fourth arguments of sysread, for example.

Operators which expect a string
     force the argument into the string format.  For example, this is
     applicable to `printf "%s", $value'.

   Though forcing an argument into a particular form does not change the
stored number, Perl remembers the result of such conversions.  In
particular, though the first such conversion may be time-consuming,
repeated operations will not need to redo the conversion.

AUTHOR
======

   Ilya Zakharevich `ilya@math.ohio-state.edu'

   Editorial adjustments by Gurusamy Sarathy <gsar@ActiveState.com>

SEE ALSO
========

   *Note Overload: (pm.info)overload,


File: perl.info,  Node: perlobj,  Next: perltie,  Prev: perltootc,  Up: Top

Perl objects
************

NAME
====

   perlobj - Perl objects

DESCRIPTION
===========

   First you need to understand what references are in Perl.  See *Note
Perlref: perlref, for that.  Second, if you still find the following
reference work too complicated, a tutorial on object-oriented programming
in Perl can be found in *Note Perltoot: perltoot, and *Note Perltootc:
perltootc,.

   If you're still with us, then here are three very simple definitions
that you should find reassuring.

  1. An object is simply a reference that happens to know which class it
     belongs to.

  2. A class is simply a package that happens to provide methods to deal
     with object references.

  3. A method is simply a subroutine that expects an object reference (or
     a package name, for class methods) as the first argument.

        We'll cover these points now in more depth.

An Object is Simply a Reference
-------------------------------

   Unlike say C++, Perl doesn't provide any special syntax for
constructors.  A constructor is merely a subroutine that returns a
reference to something "blessed" into a class, generally the class that
the subroutine is defined in.  Here is a typical constructor:

     package Critter;
     sub new { bless {} }

   That word new isn't special.  You could have written a construct this
way, too:

     package Critter;
     sub spawn { bless {} }

   This might even be preferable, because the C++ programmers won't be
tricked into thinking that new works in Perl as it does in C++.  It
doesn't.  We recommend that you name your constructors whatever makes
sense in the context of the problem you're solving.  For example,
constructors in the Tk extension to Perl are named after the widgets they
create.

   One thing that's different about Perl constructors compared with those
in C++ is that in Perl, they have to allocate their own memory.  (The other
things is that they don't automatically call overridden base-class
constructors.)  The `{}' allocates an anonymous hash containing no
key/value pairs, and returns it  The bless() takes that reference and
tells the object it references that it's now a Critter, and returns the
reference.  This is for convenience, because the referenced object itself
knows that it has been blessed, and the reference to it could have been
returned directly, like this:

     sub new {
     	my $self = {};
     	bless $self;
     	return $self;
     }

   You often see such a thing in more complicated constructors that wish
to call methods in the class as part of the construction:

     sub new {
     	my $self = {};
     	bless $self;
     	$self->initialize();
     	return $self;
     }

   If you care about inheritance (and you should; see `"Modules: Creation,
Use, and Abuse"', *Note Perlmodlib: perlmodlib,), then you want to use the
two-arg form of bless so that your constructors may be inherited:

     sub new {
     	my $class = shift;
     	my $self = {};
     	bless $self, $class;
     	$self->initialize();
     	return $self;
     }

   Or if you expect people to call not just `< CLASS-'new() >> but also `<
$obj-'new() >>, then use something like this.  The initialize() method
used will be of whatever $class we blessed the object into:

     sub new {
     	my $this = shift;
     	my $class = ref($this) || $this;
     	my $self = {};
     	bless $self, $class;
     	$self->initialize();
     	return $self;
     }

   Within the class package, the methods will typically deal with the
reference as an ordinary reference.  Outside the class package, the
reference is generally treated as an opaque value that may be accessed
only through the class's methods.

   Although a constructor can in theory re-bless a referenced object
currently belonging to another class, this is almost certainly going to
get you into trouble.  The new class is responsible for all cleanup later.
The previous blessing is forgotten, as an object may belong to only one
class at a time.  (Although of course it's free to inherit methods from
many classes.)  If you find yourself having to do this, the parent class
is probably misbehaving, though.

   A clarification:  Perl objects are blessed.  References are not.
Objects know which package they belong to.  References do not.  The bless()
function uses the reference to find the object.  Consider the following
example:

     $a = {};
     $b = $a;
     bless $a, BLAH;
     print "\$b is a ", ref($b), "\n";

   This reports $b as being a BLAH, so obviously bless() operated on the
object and not on the reference.

A Class is Simply a Package
---------------------------

   Unlike say C++, Perl doesn't provide any special syntax for class
definitions.  You use a package as a class by putting method definitions
into the class.

   There is a special array within each package called @ISA, which says
where else to look for a method if you can't find it in the current
package.  This is how Perl implements inheritance.  Each element of the
@ISA array is just the name of another package that happens to be a class
package.  The classes are searched (depth first) for missing methods in
the order that they occur in @ISA.  The classes accessible through @ISA
are known as base classes of the current class.

   All classes implicitly inherit from class UNIVERSAL as their last base
class.  Several commonly used methods are automatically supplied in the
UNIVERSAL class; see `"Default UNIVERSAL methods"' in this node for more
details.

   If a missing method is found in a base class, it is cached in the
current class for efficiency.  Changing @ISA or defining new subroutines
invalidates the cache and causes Perl to do the lookup again.

   If neither the current class, its named base classes, nor the UNIVERSAL
class contains the requested method, these three places are searched all
over again, this time looking for a method named AUTOLOAD().  If an
AUTOLOAD is found, this method is called on behalf of the missing method,
setting the package global $AUTOLOAD to be the fully qualified name of the
method that was intended to be called.

   If none of that works, Perl finally gives up and complains.

   Perl classes do method inheritance only.  Data inheritance is left up
to the class itself.  By and large, this is not a problem in Perl, because
most classes model the attributes of their object using an anonymous hash,
which serves as its own little namespace to be carved up by the various
classes that might want to do something with the object.  The only problem
with this is that you can't sure that you aren't using a piece of the hash
that isn't already used.  A reasonable workaround is to prepend your
fieldname in the hash with the package name.

     sub bump {
     	my $self = shift;
     	$self->{ __PACKAGE__ . ".count"}++;
     }

A Method is Simply a Subroutine
-------------------------------

   Unlike say C++, Perl doesn't provide any special syntax for method
definition.  (It does provide a little syntax for method invocation
though.  More on that later.)  A method expects its first argument to be
the object (reference) or package (string) it is being invoked on.  There
are two ways of calling methods, which we'll call class methods and
instance methods.

   A class method expects a class name as the first argument.  It provides
functionality for the class as a whole, not for any individual object
belonging to the class.  Constructors are often class methods, but see
*Note Perltoot: perltoot, and *Note Perltootc: perltootc, for alternatives.
Many class methods simply ignore their first argument, because they
already know what package they're in and don't care what package they were
invoked via.  (These aren't necessarily the same, because class methods
follow the inheritance tree just like ordinary instance methods.)  Another
typical use for class methods is to look up an object by name:

     sub find {
     	my ($class, $name) = @_;
     	$objtable{$name};
     }

   An instance method expects an object reference as its first argument.
Typically it shifts the first argument into a "self" or "this" variable,
and then uses that as an ordinary reference.

     sub display {
     	my $self = shift;
     	my @keys = @_ ? @_ : sort keys %$self;
     	foreach $key (@keys) {
     	    print "\t$key => $self->{$key}\n";
     	}
     }

Method Invocation
-----------------

   There are two ways to invoke a method, one of which you're already
familiar with, and the other of which will look familiar.  Perl 4 already
had an "indirect object" syntax that you use when you say

     print STDERR "help!!!\n";

   This same syntax can be used to call either class or instance methods.
We'll use the two methods defined above, the class method to lookup an
object reference and the instance method to print out its attributes.

     $fred = find Critter "Fred";
     display $fred 'Height', 'Weight';

   These could be combined into one statement by using a BLOCK in the
indirect object slot:

     display {find Critter "Fred"} 'Height', 'Weight';

   For C++ fans, there's also a syntax using -> notation that does exactly
the same thing.  The parentheses are required if there are any arguments.

     $fred = Critter->find("Fred");
     $fred->display('Height', 'Weight');

   or in one statement,

     Critter->find("Fred")->display('Height', 'Weight');

   There are times when one syntax is more readable, and times when the
other syntax is more readable.  The indirect object syntax is less
cluttered, but it has the same ambiguity as ordinary list operators.
Indirect object method calls are usually parsed using the same rule as list
operators: "If it looks like a function, it is a function".  (Presuming
for the moment that you think two words in a row can look like a function
name.  C++ programmers seem to think so with some regularity, especially
when the first word is "new".)  Thus, the parentheses of

     new Critter ('Barney', 1.5, 70)

   are assumed to surround ALL the arguments of the method call, regardless
of what comes after.  Saying

     new Critter ('Bam' x 2), 1.4, 45

   would be equivalent to

     Critter->new('Bam' x 2), 1.4, 45

   which is unlikely to do what you want.  Confusingly, however, this rule
applies only when the indirect object is a bareword package name, not when
it's a scalar, a BLOCK, or a `Package::' qualified package name.  In those
cases, the arguments are parsed in the same way as an indirect object list
operator like print, so

     new Critter:: ('Bam' x 2), 1.4, 45

   is the same as

     Critter::->new(('Bam' x 2), 1.4, 45)

   For more reasons why the indirect object syntax is ambiguous, see
`"WARNING"' in this node below.

   There are times when you wish to specify which class's method to use.
Here you can call your method as an ordinary subroutine call, being sure
to pass the requisite first argument explicitly:

     $fred =  MyCritter::find("Critter", "Fred");
     MyCritter::display($fred, 'Height', 'Weight');

   Unlike method calls, function calls don't consider inheritance.  If you
wish merely to specify that Perl should START looking for a method in a
particular package, use an ordinary method call, but qualify the method
name with the package like this:

     $fred = Critter->MyCritter::find("Fred");
     $fred->MyCritter::display('Height', 'Weight');

   If you're trying to control where the method search begins and you're
executing in the class itself, then you may use the SUPER pseudo class,
which says to start looking in your base class's @ISA list without having
to name it explicitly:

     $self->SUPER::display('Height', 'Weight');

   Please note that the `SUPER::' construct is meaningful *only* within the
class.

   Sometimes you want to call a method when you don't know the method name
ahead of time.  You can use the arrow form, replacing the method name with
a simple scalar variable containing the method name or a reference to the
function.

     $method = $fast ? "findfirst" : "findbest";
     $fred->$method(@args);  	    # call by name

     if ($coderef = $fred->can($parent . "::findbest")) {
     	$self->$coderef(@args);	    # call by coderef
     }

WARNING
-------

   While indirect object syntax may well be appealing to English speakers
and to C++ programmers, be not seduced!  It suffers from two grave
problems.

   The first problem is that an indirect object is limited to a name, a
scalar variable, or a block, because it would have to do too much
lookahead otherwise, just like any other postfix dereference in the
language.  (These are the same quirky rules as are used for the filehandle
slot in functions like print and printf.)  This can lead to horribly
confusing precedence problems, as in these next two lines:

     move $obj->{FIELD};                 # probably wrong!
     move $ary[$i];                      # probably wrong!

   Those actually parse as the very surprising:

     $obj->move->{FIELD};                # Well, lookee here
     $ary->move([$i]);                   # Didn't expect this one, eh?

   Rather than what you might have expected:

     $obj->{FIELD}->move();              # You should be so lucky.
     $ary[$i]->move;                     # Yeah, sure.

   The left side of "->" is not so limited, because it's an infix operator,
not a postfix operator.

   As if that weren't bad enough, think about this: Perl must guess *at
compile time* whether name and move above are functions or methods.
Usually Perl gets it right, but when it doesn't it, you get a function
call compiled as a method, or vice versa.  This can introduce subtle bugs
that are hard to unravel.  For example, calling a method new in indirect
notation-as C++ programmers are so wont to do-can be miscompiled into a
subroutine call if there's already a new function in scope.  You'd end up
calling the current package's new as a subroutine, rather than the desired
class's method.  The compiler tries to cheat by remembering bareword
requires, but the grief if it messes up just isn't worth the years of
debugging it would likely take you to track such subtle bugs down.

   The infix arrow notation using "`< -' >>" doesn't suffer from either of
these disturbing ambiguities, so we recommend you use it exclusively.

Default UNIVERSAL methods
-------------------------

   The UNIVERSAL package automatically contains the following methods that
are inherited by all other classes:

isa(CLASS)
     isa returns *true* if its object is blessed into a subclass of CLASS

     isa is also exportable and can be called as a sub with two arguments.
     This allows the ability to check what a reference points to. Example

          use UNIVERSAL qw(isa);

          if(isa($ref, 'ARRAY')) {
          	#...
          }

can(METHOD)
     can checks to see if its object has a method called METHOD, if it
     does then a reference to the sub is returned, if it does not then
     undef is returned.

VERSION( [NEED] )
     VERSION returns the version number of the class (package).  If the
     NEED argument is given then it will check that the current version (as
     defined by the $VERSION variable in the given package) not less than
     NEED; it will die if this is not the case.  This method is normally
     called as a class method.  This method is called automatically by the
     VERSION form of use.

          use A 1.2 qw(some imported subs);
          # implies:
          A->VERSION(1.2);

   NOTE: can directly uses Perl's internal code for method lookup, and isa
uses a very similar method and cache-ing strategy. This may cause strange
effects if the Perl code dynamically changes @ISA in any package.

   You may add other methods to the UNIVERSAL class via Perl or XS code.
You do not need to `use UNIVERSAL' to make these methods available to your
program.  This is necessary only if you wish to have isa available as a
plain subroutine in the current package.

Destructors
-----------

   When the last reference to an object goes away, the object is
automatically destroyed.  (This may even be after you exit, if you've
stored references in global variables.)  If you want to capture control
just before the object is freed, you may define a DESTROY method in your
class.  It will automatically be called at the appropriate moment, and you
can do any extra cleanup you need to do.  Perl passes a reference to the
object under destruction as the first (and only) argument.  Beware that
the reference is a read-only value, and cannot be modified by manipulating
`$_[0]' within the destructor.  The object itself (i.e.  the thingy the
reference points to, namely `${$_[0]}', `@{$_[0]}', `%{$_[0]}' etc.) is
not similarly constrained.

   If you arrange to re-bless the reference before the destructor returns,
perl will again call the DESTROY method for the re-blessed object after
the current one returns.  This can be used for clean delegation of object
destruction, or for ensuring that destructors in the base classes of your
choosing get called.  Explicitly calling DESTROY is also possible, but is
usually never needed.

   Do not confuse the previous discussion with how objects *CONTAINED* in
the current one are destroyed.  Such objects will be freed and destroyed
automatically when the current object is freed, provided no other
references to them exist elsewhere.

Summary
-------

   That's about all there is to it.  Now you need just to go off and buy a
book about object-oriented design methodology, and bang your forehead with
it for the next six months or so.

Two-Phased Garbage Collection
-----------------------------

   For most purposes, Perl uses a fast and simple, reference-based garbage
collection system.  That means there's an extra dereference going on at
some level, so if you haven't built your Perl executable using your C
compiler's -O flag, performance will suffer.  If you *have* built Perl
with `cc -O', then this probably won't matter.

   A more serious concern is that unreachable memory with a non-zero
reference count will not normally get freed.  Therefore, this is a bad
idea:

     {
     	my $a;
     	$a = \$a;
     }

   Even thought $a should go away, it can't.  When building recursive data
structures, you'll have to break the self-reference yourself explicitly if
you don't care to leak.  For example, here's a self-referential node such
as one might use in a sophisticated tree structure:

     sub new_node {
     	my $self = shift;
     	my $class = ref($self) || $self;
     	my $node = {};
     	$node->{LEFT} = $node->{RIGHT} = $node;
     	$node->{DATA} = [ @_ ];
     	return bless $node => $class;
     }

   If you create nodes like that, they (currently) won't go away unless you
break their self reference yourself.  (In other words, this is not to be
construed as a feature, and you shouldn't depend on it.)

   Almost.

   When an interpreter thread finally shuts down (usually when your program
exits), then a rather costly but complete mark-and-sweep style of garbage
collection is performed, and everything allocated by that thread gets
destroyed.  This is essential to support Perl as an embedded or a
multithreadable language.  For example, this program demonstrates Perl's
two-phased garbage collection:

     #!/usr/bin/perl
     package Subtle;

     sub new {
     	my $test;
     	$test = \$test;
     	warn "CREATING " . \$test;
     	return bless \$test;
     }

     sub DESTROY {
     	my $self = shift;
     	warn "DESTROYING $self";
     }

     package main;

     warn "starting program";
     {
     	my $a = Subtle->new;
     	my $b = Subtle->new;
     	$$a = 0;  # break selfref
     	warn "leaving block";
     }

     warn "just exited block";
     warn "time to die...";
     exit;

   When run as `/tmp/test', the following output is produced:

     starting program at /tmp/test line 18.
     CREATING SCALAR(0x8e5b8) at /tmp/test line 7.
     CREATING SCALAR(0x8e57c) at /tmp/test line 7.
     leaving block at /tmp/test line 23.
     DESTROYING Subtle=SCALAR(0x8e5b8) at /tmp/test line 13.
     just exited block at /tmp/test line 26.
     time to die... at /tmp/test line 27.
     DESTROYING Subtle=SCALAR(0x8e57c) during global destruction.

   Notice that "global destruction" bit there?  That's the thread garbage
collector reaching the unreachable.

   Objects are always destructed, even when regular refs aren't.  Objects
are destructed in a separate pass before ordinary refs just to prevent
object destructors from using refs that have been themselves destructed.
Plain refs are only garbage-collected if the destruct level is greater
than 0.  You can test the higher levels of global destruction by setting
the PERL_DESTRUCT_LEVEL environment variable, presuming `-DDEBUGGING' was
enabled during perl build time.

   A more complete garbage collection strategy will be implemented at a
future date.

   In the meantime, the best solution is to create a non-recursive
container class that holds a pointer to the self-referential data
structure.  Define a DESTROY method for the containing object's class that
manually breaks the circularities in the self-referential structure.

SEE ALSO
========

   A kinder, gentler tutorial on object-oriented programming in Perl can
be found in *Note Perltoot: perltoot, and *Note Perltootc: perltootc,.
You should also check out *Note Perlbot: perlbot, for other object tricks,
traps, and tips, as well as *Note Perlmodlib: perlmodlib, for some style
guides on constructing both modules and classes.


File: perl.info,  Node: perlop,  Next: perlre,  Prev: perlsyn,  Up: Top

Perl operators and precedence
*****************************

NAME
====

   perlop - Perl operators and precedence

SYNOPSIS
========

   Perl operators have the following associativity and precedence, listed
from highest precedence to lowest.  Operators borrowed from C keep the
same precedence relationship with each other, even where C's precedence is
slightly screwy.  (This makes learning Perl easier for C folks.)  With
very few exceptions, these all operate on scalar values only, not array
values.

     left	terms and list operators (leftward)
     left	->
     nonassoc	++ --
     right	**
     right	! ~ \ and unary + and -
     left	=~ !~
     left	* / % x
     left	+ - .
     left	<< >>
     nonassoc	named unary operators
     nonassoc	< > <= >= lt gt le ge
     nonassoc	== != <=> eq ne cmp
     left	&
     left	| ^
     left	&&
     left	||
     nonassoc	..  ...
     right	?:
     right	= += -= *= etc.
     left	, =>
     nonassoc	list operators (rightward)
     right	not
     left	and
     left	or xor

   In the following sections, these operators are covered in precedence
order.

   Many operators can be overloaded for objects.  See *Note Overload:
(pm.info)overload,.

DESCRIPTION
===========

Terms and List Operators (Leftward)
-----------------------------------

   A TERM has the highest precedence in Perl.  They include variables,
quote and quote-like operators, any expression in parentheses, and any
function whose arguments are parenthesized.  Actually, there aren't really
functions in this sense, just list operators and unary operators behaving
as functions because you put parentheses around the arguments.  These are
all documented in *Note Perlfunc: perlfunc,.

   If any list operator (print(), etc.) or any unary operator (chdir(),
etc.)  is followed by a left parenthesis as the next token, the operator
and arguments within parentheses are taken to be of highest precedence,
just like a normal function call.

   In the absence of parentheses, the precedence of list operators such as
print, sort, or chmod is either very high or very low depending on whether
you are looking at the left side or the right side of the operator.  For
example, in

     @ary = (1, 3, sort 4, 2);
     print @ary;		# prints 1324

   the commas on the right of the sort are evaluated before the sort, but
the commas on the left are evaluated after.  In other words, list
operators tend to gobble up all arguments that follow, and then act like a
simple TERM with regard to the preceding expression.  Be careful with
parentheses:

     # These evaluate exit before doing the print:
     print($foo, exit);	# Obviously not what you want.
     print $foo, exit;	# Nor is this.

     # These do the print before evaluating exit:
     (print $foo), exit;	# This is what you want.
     print($foo), exit;	# Or this.
     print ($foo), exit;	# Or even this.

   Also note that

     print ($foo & 255) + 1, "\n";

   probably doesn't do what you expect at first glance.  See `Named Unary
Operators' in this node for more discussion of this.

   Also parsed as terms are the `do {}' and `eval {}' constructs, as well
as subroutine and method calls, and the anonymous constructors [] and `{}'.

   See also `Quote and Quote-like Operators' in this node toward the end
of this section, as well as `"I' in this node.

The Arrow Operator
------------------

   "`< -' >>" is an infix dereference operator, just as it is in C and
C++.  If the right side is either a `[...]', `{...}', or a `(...)'
subscript, then the left side must be either a hard or symbolic reference
to an array, a hash, or a subroutine respectively.  (Or technically
speaking, a location capable of holding a hard reference, if it's an array
or hash reference being used for assignment.)  See *Note Perlreftut:
perlreftut, and *Note Perlref: perlref,.

   Otherwise, the right side is a method name or a simple scalar variable
containing either the method name or a subroutine reference, and the left
side must be either an object (a blessed reference) or a class name (that
is, a package name).  See *Note Perlobj: perlobj,.

Auto-increment and Auto-decrement
---------------------------------

   "++" and "-" work as in C.  That is, if placed before a variable, they
increment or decrement the variable before returning the value, and if
placed after, increment or decrement the variable after returning the
value.

   The auto-increment operator has a little extra builtin magic to it.  If
you increment a variable that is numeric, or that has ever been used in a
numeric context, you get a normal increment.  If, however, the variable
has been used in only string contexts since it was set, and has a value
that is not the empty string and matches the pattern
`/^[a-zA-Z]*[0-9]*$/', the increment is done as a string, preserving each
character within its range, with carry:

     print ++($foo = '99');	# prints '100'
     print ++($foo = 'a0');	# prints 'a1'
     print ++($foo = 'Az');	# prints 'Ba'
     print ++($foo = 'zz');	# prints 'aaa'

   The auto-decrement operator is not magical.

Exponentiation
--------------

   Binary "**" is the exponentiation operator.  It binds even more tightly
than unary minus, so -2**4 is -(2**4), not (-2)**4. (This is implemented
using C's pow(3) function, which actually works on doubles internally.)

Symbolic Unary Operators
------------------------

   Unary "!" performs logical negation, i.e., "not".  See also not for a
lower precedence version of this.

   Unary "-" performs arithmetic negation if the operand is numeric.  If
the operand is an identifier, a string consisting of a minus sign
concatenated with the identifier is returned.  Otherwise, if the string
starts with a plus or minus, a string starting with the opposite sign is
returned.  One effect of these rules is that `-bareword' is equivalent to
`"-bareword"'.

   Unary "~" performs bitwise negation, i.e., 1's complement.  For
example, `0666 & ~027' is 0640.  (See also `Integer Arithmetic' in this
node and `Bitwise String Operators' in this node.)  Note that the width of
the result is platform-dependent: ~0 is 32 bits wide on a 32-bit platform,
but 64 bits wide on a 64-bit platform, so if you are expecting a certain
bit width, remember use the & operator to mask off the excess bits.

   Unary "+" has no effect whatsoever, even on strings.  It is useful
syntactically for separating a function name from a parenthesized
expression that would otherwise be interpreted as the complete list of
function arguments.  (See examples above under `Terms and List Operators
(Leftward)' in this node.)

   Unary "\" creates a reference to whatever follows it.  See *Note
Perlreftut: perlreftut, and *Note Perlref: perlref,.  Do not confuse this
behavior with the behavior of backslash within a string, although both
forms do convey the notion of protecting the next thing from interpolation.

Binding Operators
-----------------

   Binary "=~" binds a scalar expression to a pattern match.  Certain
operations search or modify the string $_ by default.  This operator makes
that kind of operation work on some other string.  The right argument is a
search pattern, substitution, or transliteration.  The left argument is
what is supposed to be searched, substituted, or transliterated instead of
the default $_.  When used in scalar context, the return value generally
indicates the success of the operation.  Behavior in list context depends
on the particular operator.  See `' in this node for details.

   If the right argument is an expression rather than a search pattern,
substitution, or transliteration, it is interpreted as a search pattern at
run time.  This can be less efficient than an explicit search, because the
pattern must be compiled every time the expression is evaluated.

   Binary "!~" is just like "=~" except the return value is negated in the
logical sense.

Multiplicative Operators
------------------------

   Binary "*" multiplies two numbers.

   Binary "/" divides two numbers.

   Binary "%" computes the modulus of two numbers.  Given integer operands
`$a' and $b: If $b is positive, then `$a % $b' is `$a' minus the largest
multiple of $b that is not greater than `$a'.  If $b is negative, then `$a
% $b' is `$a' minus the smallest multiple of $b that is not less than `$a'
(i.e. the result will be less than or equal to zero).  Note than when `use
integer' is in scope, "%" give you direct access to the modulus operator
as implemented by your C compiler.  This operator is not as well defined
for negative operands, but it will execute faster.

   Binary "x" is the repetition operator.  In scalar context or if the left
operand is not enclosed in parentheses, it returns a string consisting of
the left operand repeated the number of times specified by the right
operand.  In list context, if the left operand is enclosed in parentheses,
it repeats the list.

     print '-' x 80;		# print row of dashes

     print "\t" x ($tab/8), ' ' x ($tab%8);	# tab over

     @ones = (1) x 80;		# a list of 80 1's
     @ones = (5) x @ones;	# set all elements to 5

Additive Operators
------------------

   Binary "+" returns the sum of two numbers.

   Binary "-" returns the difference of two numbers.

   Binary "." concatenates two strings.

Shift Operators
---------------

   Binary "<<" returns the value of its left argument shifted left by the
number of bits specified by the right argument.  Arguments should be
integers.  (See also `Integer Arithmetic' in this node.)

   Binary ">>" returns the value of its left argument shifted right by the
number of bits specified by the right argument.  Arguments should be
integers.  (See also `Integer Arithmetic' in this node.)

Named Unary Operators
---------------------

   The various named unary operators are treated as functions with one
argument, with optional parentheses.  These include the filetest
operators, like -f, -M, etc.  See *Note Perlfunc: perlfunc,.

   If any list operator (print(), etc.) or any unary operator (chdir(),
etc.)  is followed by a left parenthesis as the next token, the operator
and arguments within parentheses are taken to be of highest precedence,
just like a normal function call.  Examples:

     chdir $foo    || die;	# (chdir $foo) || die
     chdir($foo)   || die;	# (chdir $foo) || die
     chdir ($foo)  || die;	# (chdir $foo) || die
     chdir +($foo) || die;	# (chdir $foo) || die

   but, because * is higher precedence than ||:

     chdir $foo * 20;	# chdir ($foo * 20)
     chdir($foo) * 20;	# (chdir $foo) * 20
     chdir ($foo) * 20;	# (chdir $foo) * 20
     chdir +($foo) * 20;	# chdir ($foo * 20)

     rand 10 * 20;	# rand (10 * 20)
     rand(10) * 20;	# (rand 10) * 20
     rand (10) * 20;	# (rand 10) * 20
     rand +(10) * 20;	# rand (10 * 20)

   See also `"Terms and List Operators (Leftward)"' in this node.

Relational Operators
--------------------

   Binary "<" returns true if the left argument is numerically less than
the right argument.

   Binary ">" returns true if the left argument is numerically greater
than the right argument.

   Binary "<=" returns true if the left argument is numerically less than
or equal to the right argument.

   Binary ">=" returns true if the left argument is numerically greater
than or equal to the right argument.

   Binary "lt" returns true if the left argument is stringwise less than
the right argument.

   Binary "gt" returns true if the left argument is stringwise greater
than the right argument.

   Binary "le" returns true if the left argument is stringwise less than
or equal to the right argument.

   Binary "ge" returns true if the left argument is stringwise greater
than or equal to the right argument.

Equality Operators
------------------

   Binary "==" returns true if the left argument is numerically equal to
the right argument.

   Binary "!=" returns true if the left argument is numerically not equal
to the right argument.

   Binary "<=>" returns -1, 0, or 1 depending on whether the left argument
is numerically less than, equal to, or greater than the right argument.

   Binary "eq" returns true if the left argument is stringwise equal to
the right argument.

   Binary "ne" returns true if the left argument is stringwise not equal
to the right argument.

   Binary "cmp" returns -1, 0, or 1 depending on whether the left argument
is stringwise less than, equal to, or greater than the right argument.

   "lt", "le", "ge", "gt" and "cmp" use the collation (sort) order
specified by the current locale if `use locale' is in effect.  See *Note
Perllocale: perllocale,.

Bitwise And
-----------

   Binary "&" returns its operators ANDed together bit by bit.  (See also
`Integer Arithmetic' in this node and `Bitwise String Operators' in this
node.)

Bitwise Or and Exclusive Or
---------------------------

   Binary "|" returns its operators ORed together bit by bit.  (See also
`Integer Arithmetic' in this node and `Bitwise String Operators' in this
node.)

   Binary "^" returns its operators XORed together bit by bit.  (See also
`Integer Arithmetic' in this node and `Bitwise String Operators' in this
node.)

C-style Logical And
-------------------

   Binary "&&" performs a short-circuit logical AND operation.  That is,
if the left operand is false, the right operand is not even evaluated.
Scalar or list context propagates down to the right operand if it is
evaluated.

C-style Logical Or
------------------

   Binary "||" performs a short-circuit logical OR operation.  That is, if
the left operand is true, the right operand is not even evaluated.  Scalar
or list context propagates down to the right operand if it is evaluated.

   The `||' and `&&' operators differ from C's in that, rather than
returning 0 or 1, they return the last value evaluated.  Thus, a
reasonably portable way to find out the home directory (assuming it's not
"0") might be:

     $home = $ENV{'HOME'} || $ENV{'LOGDIR'} ||
     	(getpwuid($<))[7] || die "You're homeless!\n";

   In particular, this means that you shouldn't use this for selecting
between two aggregates for assignment:

     @a = @b || @c;		# this is wrong
     @a = scalar(@b) || @c;	# really meant this
     @a = @b ? @b : @c;		# this works fine, though

   As more readable alternatives to `&&' and `||' when used for control
flow, Perl provides and and or operators (see below).  The short-circuit
behavior is identical.  The precedence of "and" and "or" is much lower,
however, so that you can safely use them after a list operator without the
need for parentheses:

     unlink "alpha", "beta", "gamma"
     	    or gripe(), next LINE;

   With the C-style operators that would have been written like this:

     unlink("alpha", "beta", "gamma")
     	    || (gripe(), next LINE);

   Using "or" for assignment is unlikely to do what you want; see below.

Range Operators
---------------

   Binary ".." is the range operator, which is really two different
operators depending on the context.  In list context, it returns an array
of values counting (up by ones) from the left value to the right value.
If the left value is greater than the right value then it returns the
empty array.  The range operator is useful for writing `foreach (1..10)'
loops and for doing slice operations on arrays.  In the current
implementation, no temporary array is created when the range operator is
used as the expression in foreach loops, but older versions of Perl might
burn a lot of memory when you write something like this:

     for (1 .. 1_000_000) {
     	# code
     }

   In scalar context, ".." returns a boolean value.  The operator is
bistable, like a flip-flop, and emulates the line-range (comma) operator
of *sed*, *awk*, and various editors.  Each ".." operator maintains its
own boolean state.  It is false as long as its left operand is false.
Once the left operand is true, the range operator stays true until the
right operand is true, *AFTER* which the range operator becomes false
again.  It doesn't become false till the next time the range operator is
evaluated.  It can test the right operand and become false on the same
evaluation it became true (as in *awk*), but it still returns true once.
If you don't want it to test the right operand till the next evaluation,
as in *sed*, just use three dots ("...") instead of two.  In all other
regards, "..." behaves just like ".." does.

   The right operand is not evaluated while the operator is in the "false"
state, and the left operand is not evaluated while the operator is in the
"true" state.  The precedence is a little lower than || and &&.  The value
returned is either the empty string for false, or a sequence number
(beginning with 1) for true.  The sequence number is reset for each range
encountered.  The final sequence number in a range has the string "E0"
appended to it, which doesn't affect its numeric value, but gives you
something to search for if you want to exclude the endpoint.  You can
exclude the beginning point by waiting for the sequence number to be
greater than 1.  If either operand of scalar ".." is a constant expression,
that operand is implicitly compared to the $. variable, the current line
number.  Examples:

   As a scalar operator:

     if (101 .. 200) { print; }	# print 2nd hundred lines
     next line if (1 .. /^$/);	# skip header lines
     s/^/> / if (/^$/ .. eof());	# quote body

     # parse mail messages
     while (<>) {
         $in_header =   1  .. /^$/;
         $in_body   = /^$/ .. eof();
     	# do something based on those
     } continue {
     	close ARGV if eof; 		# reset $. each file
     }

   As a list operator:

     for (101 .. 200) { print; }	# print $_ 100 times
     @foo = @foo[0 .. $#foo];	# an expensive no-op
     @foo = @foo[$#foo-4 .. $#foo];	# slice last 5 items

   The range operator (in list context) makes use of the magical
auto-increment algorithm if the operands are strings.  You can say

     @alphabet = ('A' .. 'Z');

   to get all normal letters of the alphabet, or

     $hexdigit = (0 .. 9, 'a' .. 'f')[$num & 15];

   to get a hexadecimal digit, or

     @z2 = ('01' .. '31');  print $z2[$mday];

   to get dates with leading zeros.  If the final value specified is not
in the sequence that the magical increment would produce, the sequence
goes until the next value would be longer than the final value specified.

Conditional Operator
--------------------

   Ternary "?:" is the conditional operator, just as in C.  It works much
like an if-then-else.  If the argument before the ? is true, the argument
before the : is returned, otherwise the argument after the : is returned.
For example:

     printf "I have %d dog%s.\n", $n,
     	    ($n == 1) ? '' : "s";

   Scalar or list context propagates downward into the 2nd or 3rd
argument, whichever is selected.

     $a = $ok ? $b : $c;  # get a scalar
     @a = $ok ? @b : @c;  # get an array
     $a = $ok ? @b : @c;  # oops, that's just a count!

   The operator may be assigned to if both the 2nd and 3rd arguments are
legal lvalues (meaning that you can assign to them):

     ($a_or_b ? $a : $b) = $c;

   Because this operator produces an assignable result, using assignments
without parentheses will get you in trouble.  For example, this:

     $a % 2 ? $a += 10 : $a += 2

   Really means this:

     (($a % 2) ? ($a += 10) : $a) += 2

   Rather than this:

     ($a % 2) ? ($a += 10) : ($a += 2)

   That should probably be written more simply as:

     $a += ($a % 2) ? 10 : 2;

Assignment Operators
--------------------

   "=" is the ordinary assignment operator.

   Assignment operators work as in C.  That is,

     $a += 2;

   is equivalent to

     $a = $a + 2;

   although without duplicating any side effects that dereferencing the
lvalue might trigger, such as from tie().  Other assignment operators work
similarly.  The following are recognized:

     **=    +=    *=    &=    <<=    &&=
            -=    /=    |=    >>=    ||=
            .=    %=    ^=
     	         x=

   Although these are grouped by family, they all have the precedence of
assignment.

   Unlike in C, the scalar assignment operator produces a valid lvalue.
Modifying an assignment is equivalent to doing the assignment and then
modifying the variable that was assigned to.  This is useful for modifying
a copy of something, like this:

     ($tmp = $global) =~ tr [A-Z] [a-z];

   Likewise,

     ($a += 2) *= 3;

   is equivalent to

     $a += 2;
     $a *= 3;

   Similarly, a list assignment in list context produces the list of
lvalues assigned to, and a list assignment in scalar context returns the
number of elements produced by the expression on the right hand side of
the assignment.

Comma Operator
--------------

   Binary "," is the comma operator.  In scalar context it evaluates its
left argument, throws that value away, then evaluates its right argument
and returns that value.  This is just like C's comma operator.

   In list context, it's just the list argument separator, and inserts
both its arguments into the list.

   The => digraph is mostly just a synonym for the comma operator.  It's
useful for documenting arguments that come in pairs.  As of release 5.001,
it also forces any word to the left of it to be interpreted as a string.

List Operators (Rightward)
--------------------------

   On the right side of a list operator, it has very low precedence, such
that it controls all comma-separated expressions found there.  The only
operators with lower precedence are the logical operators "and", "or", and
"not", which may be used to evaluate calls to list operators without the
need for extra parentheses:

     open HANDLE, "filename"
     	or die "Can't open: $!\n";

   See also discussion of list operators in `Terms and List Operators
(Leftward)' in this node.

Logical Not
-----------

   Unary "not" returns the logical negation of the expression to its right.
It's the equivalent of "!" except for the very low precedence.

Logical And
-----------

   Binary "and" returns the logical conjunction of the two surrounding
expressions.  It's equivalent to && except for the very low precedence.
This means that it short-circuits: i.e., the right expression is evaluated
only if the left expression is true.

Logical or and Exclusive Or
---------------------------

   Binary "or" returns the logical disjunction of the two surrounding
expressions.  It's equivalent to || except for the very low precedence.
This makes it useful for control flow

     print FH $data		or die "Can't write to FH: $!";

   This means that it short-circuits: i.e., the right expression is
evaluated only if the left expression is false.  Due to its precedence,
you should probably avoid using this for assignment, only for control flow.

     $a = $b or $c;		# bug: this is wrong
     ($a = $b) or $c;		# really means this
     $a = $b || $c;		# better written this way

   However, when it's a list-context assignment and you're trying to use
"||" for control flow, you probably need "or" so that the assignment takes
higher precedence.

     @info = stat($file) || die;     # oops, scalar sense of stat!
     @info = stat($file) or die;     # better, now @info gets its due

   Then again, you could always use parentheses.

   Binary "xor" returns the exclusive-OR of the two surrounding
expressions.  It cannot short circuit, of course.

C Operators Missing From Perl
-----------------------------

   Here is what C has that Perl doesn't:

unary &
     Address-of operator.  (But see the "\" operator for taking a
     reference.)

unary *
     Dereference-address operator. (Perl's prefix dereferencing operators
     are typed: $, @, %, and &.)

(TYPE)
     Type-casting operator.

Quote and Quote-like Operators
------------------------------

   While we usually think of quotes as literal values, in Perl they
function as operators, providing various kinds of interpolating and
pattern matching capabilities.  Perl provides customary quote characters
for these behaviors, but also provides a way for you to choose your quote
character for any of them.  In the following table, a `{}' represents any
pair of delimiters you choose.

     Customary  Generic        Meaning	     Interpolates
     	''	 q{}	      Literal		  no
     	""	qq{}	      Literal		  yes
     	``	qx{}	      Command		  yes (unless '' is delimiter)
     		qw{}	     Word list		  no
     	//	 m{}	   Pattern match	  yes (unless '' is delimiter)
     		qr{}	      Pattern		  yes (unless '' is delimiter)
     		 s{}{}	    Substitution	  yes (unless '' is delimiter)
     		tr{}{}	  Transliteration	  no (but see below)

   Non-bracketing delimiters use the same character fore and aft, but the
four sorts of brackets (round, angle, square, curly) will all nest, which
means that

     q{foo{bar}baz}

   is the same as

     'foo{bar}baz'

   Note, however, that this does not always work for quoting Perl code:

     $s = q{ if($a eq "}") ... }; # WRONG

   is a syntax error. The `Text::Balanced' module on CPAN is able to do
this properly.

   There can be whitespace between the operator and the quoting
characters, except when `#' is being used as the quoting character.
`q#foo#' is parsed as the string foo, while `q #foo#' is the operator q
followed by a comment.  Its argument will be taken from the next line.
This allows you to write:

     s {foo}  # Replace foo
       {bar}  # with bar.

   For constructs that do interpolate, variables beginning with "`$'" or
"`@'" are interpolated, as are the following escape sequences.  Within a
transliteration, the first eleven of these sequences may be used.

     \t		tab             (HT, TAB)
     \n		newline         (NL)
     \r		return          (CR)
     \f		form feed       (FF)
     \b		backspace       (BS)
     \a		alarm (bell)    (BEL)
     \e		escape          (ESC)
     \033	octal char	(ESC)
     \x1b	hex char	(ESC)
     \x{263a}	wide hex char	(SMILEY)
     \c[		control char    (ESC)
     \N{name}	named char

     \l		lowercase next char
     \u		uppercase next char
     \L		lowercase till \E
     \U		uppercase till \E
     \E		end case modification
     \Q		quote non-word characters till \E

   If `use locale' is in effect, the case map used by `\l', `\L', `\u' and
`\U' is taken from the current locale.  See *Note Perllocale: perllocale,.
For documentation of `\N{name}', see *Note Charnames: (pm.info)charnames,.

   All systems use the virtual `"\n"' to represent a line terminator,
called a "newline".  There is no such thing as an unvarying, physical
newline character.  It is only an illusion that the operating system,
device drivers, C libraries, and Perl all conspire to preserve.  Not all
systems read `"\r"' as ASCII CR and `"\n"' as ASCII LF.  For example, on a
Mac, these are reversed, and on systems without line terminator, printing
`"\n"' may emit no actual data.  In general, use `"\n"' when you mean a
"newline" for your system, but use the literal ASCII when you need an
exact character.  For example, most networking protocols expect and prefer
a CR+LF (`"\012\015"' or `"\cJ\cM"') for line terminators, and although
they often accept just `"\012"', they seldom tolerate just `"\015"'.  If
you get in the habit of using `"\n"' for networking, you may be burned
some day.

   You cannot include a literal `$' or `@' within a `\Q' sequence.  An
unescaped `$' or `@' interpolates the corresponding variable, while
escaping will cause the literal string `\$' to be inserted.  You'll need
to write something like `m/\Quser\E\@\Qhost/'.

   Patterns are subject to an additional level of interpretation as a
regular expression.  This is done as a second pass, after variables are
interpolated, so that regular expressions may be incorporated into the
pattern from the variables.  If this is not what you want, use `\Q' to
interpolate a variable literally.

   Apart from the behavior described above, Perl does not expand multiple
levels of interpolation.  In particular, contrary to the expectations of
shell programmers, back-quotes do *NOT* interpolate within double quotes,
nor do single quotes impede evaluation of variables when used within
double quotes.

Regexp Quote-Like Operators
---------------------------

   Here are the quote-like operators that apply to pattern matching and
related activities.

?PATTERN?
     This is just like the /pattern/ search, except that it matches only
     once between calls to the reset() operator.  This is a useful
     optimization when you want to see only the first occurrence of
     something in each file of a set of files, for instance.  Only `??'
     patterns local to the current package are reset.

          while (<>) {
          	if (?^$?) {
          			    # blank line between header and body
          	}
          } continue {
          	reset if eof;	    # clear ?? status for next file
          }

     This usage is vaguely depreciated, which means it just might possibly
     be removed in some distant future version of Perl, perhaps somewhere
     around the year 2168.

m/PATTERN/cgimosx
/PATTERN/cgimosx
     Searches a string for a pattern match, and in scalar context returns
     true if it succeeds, false if it fails.  If no string is specified
     via the `=~' or `!~' operator, the $_ string is searched.  (The
     string specified with `=~' need not be an lvalue-it may be the result
     of an expression evaluation, but remember the `=~' binds rather
     tightly.)  See also *Note Perlre: perlre,.  See *Note Perllocale:
     perllocale, for discussion of additional considerations that apply
     when `use locale' is in effect.

     Options are:

          c	Do not reset search position on a failed match when /g is in effect.
          g	Match globally, i.e., find all occurrences.
          i	Do case-insensitive pattern matching.
          m	Treat string as multiple lines.
          o	Compile pattern only once.
          s	Treat string as single line.
          x	Use extended regular expressions.

     If "/" is the delimiter then the initial m is optional.  With the m
     you can use any pair of non-alphanumeric, non-whitespace characters
     as delimiters.  This is particularly useful for matching path names
     that contain "/", to avoid LTS (leaning toothpick syndrome).  If "?"
     is the delimiter, then the match-only-once rule of ?PATTERN? applies.
     If "'" is the delimiter, no interpolation is performed on the PATTERN.

     PATTERN may contain variables, which will be interpolated (and the
     pattern recompiled) every time the pattern search is evaluated, except
     for when the delimiter is a single quote.  (Note that $) and $| might
     not be interpolated because they look like end-of-string tests.)  If
     you want such a pattern to be compiled only once, add a `/o' after
     the trailing delimiter.  This avoids expensive run-time
     recompilations, and is useful when the value you are interpolating
     won't change over the life of the script.  However, mentioning `/o'
     constitutes a promise that you won't change the variables in the
     pattern.  If you change them, Perl won't even notice.  See also `"qr'
     in this node.

     If the PATTERN evaluates to the empty string, the last *successfully*
     matched regular expression is used instead.

     If the `/g' option is not used, m// in list context returns a list
     consisting of the subexpressions matched by the parentheses in the
     pattern, i.e., ($1, $2, $3...).  (Note that here $1 etc. are also
     set, and that this differs from Perl 4's behavior.)  When there are
     no parentheses in the pattern, the return value is the list (1) for
     success.  With or without parentheses, an empty list is returned upon
     failure.

     Examples:

          open(TTY, '/dev/tty');
          <TTY> =~ /^y/i && foo();	# do foo if desired

          if (/Version: *([0-9.]*)/) { $version = $1; }

          next if m#^/usr/spool/uucp#;

          # poor man's grep
          $arg = shift;
          while (<>) {
          	print if /$arg/o;	# compile only once
          }

          if (($F1, $F2, $Etc) = ($foo =~ /^(\S+)\s+(\S+)\s*(.*)/))

     This last example splits $foo into the first two words and the
     remainder of the line, and assigns those three fields to $F1, $F2, and
     $Etc.  The conditional is true if any variables were assigned, i.e.,
     if the pattern matched.

     The `/g' modifier specifies global pattern matching-that is, matching
     as many times as possible within the string.  How it behaves depends
     on the context.  In list context, it returns a list of the substrings
     matched by any capturing parentheses in the regular expression.  If
     there are no parentheses, it returns a list of all the matched
     strings, as if there were parentheses around the whole pattern.

     In scalar context, each execution of `m//g' finds the next match,
     returning true if it matches, and false if there is no further match.
     The position after the last match can be read or set using the pos()
     function; see `pos', *Note Perlfunc: perlfunc,.   A failed match
     normally resets the search position to the beginning of the string,
     but you can avoid that by adding the `/c' modifier (e.g. `m//gc').
     Modifying the target string also resets the search position.

     You can intermix `m//g' matches with `m/\G.../g', where `\G' is a
     zero-width assertion that matches the exact position where the
     previous `m//g', if any, left off.  The `\G' assertion is not
     supported without the `/g' modifier.  (Currently, without `/g', `\G'
     behaves just like `\A', but that's accidental and may change in the
     future.)

     Examples:

          # list context
          ($one,$five,$fifteen) = (`uptime` =~ /(\d+\.\d+)/g);

          # scalar context
          $/ = ""; $* = 1;  # $* deprecated in modern perls
          while (defined($paragraph = <>)) {
          	while ($paragraph =~ /[a-z]['")]*[.!?]+['")]*\s/g) {
          	    $sentences++;
          	}
          }
          print "$sentences\n";

          # using m//gc with \G
          $_ = "ppooqppqq";
          while ($i++ < 2) {
              print "1: '";
              print $1 while /(o)/gc; print "', pos=", pos, "\n";
              print "2: '";
              print $1 if /\G(q)/gc;  print "', pos=", pos, "\n";
              print "3: '";
              print $1 while /(p)/gc; print "', pos=", pos, "\n";
          }

     The last example should print:

          1: 'oo', pos=4
          2: 'q', pos=5
          3: 'pp', pos=7
          1: '', pos=7
          2: 'q', pos=8
          3: '', pos=8

     A useful idiom for lex-like scanners is `/\G.../gc'.  You can combine
     several regexps like this to process a string part-by-part, doing
     different actions depending on which regexp matched.  Each regexp
     tries to match where the previous one leaves off.

          $_ = <<'EOL';
               $url = new URI::URL "http://www/";   die if $url eq "xXx";
          EOL
          LOOP:
             {
               print(" digits"),		redo LOOP if /\G\d+\b[,.;]?\s*/gc;
               print(" lowercase"),	redo LOOP if /\G[a-z]+\b[,.;]?\s*/gc;
               print(" UPPERCASE"),	redo LOOP if /\G[A-Z]+\b[,.;]?\s*/gc;
               print(" Capitalized"),	redo LOOP if /\G[A-Z][a-z]+\b[,.;]?\s*/gc;
               print(" MiXeD"),		redo LOOP if /\G[A-Za-z]+\b[,.;]?\s*/gc;
               print(" alphanumeric"),	redo LOOP if /\G[A-Za-z0-9]+\b[,.;]?\s*/gc;
               print(" line-noise"),	redo LOOP if /\G[^A-Za-z0-9]+/gc;
               print ". That's all!\n";
             }

     Here is the output (split into several lines):

          line-noise lowercase line-noise lowercase UPPERCASE line-noise
          UPPERCASE line-noise lowercase line-noise lowercase line-noise
          lowercase lowercase line-noise lowercase lowercase line-noise
          MiXeD line-noise. That's all!

q/STRING/
`'STRING''
     A single-quoted, literal string.  A backslash represents a backslash
     unless followed by the delimiter or another backslash, in which case
     the delimiter or backslash is interpolated.

          $foo = q!I said, "You said, 'She said it.'"!;
          $bar = q('This is it.');
          $baz = '\n';		# a two-character string

qq/STRING/
"STRING"
     A double-quoted, interpolated string.

          $_ .= qq
           (*** The previous line contains the naughty word "$1".\n)
          		if /\b(tcl|java|python)\b/i;      # :-)
          $baz = "\n";		# a one-character string

qr/STRING/imosx
     This operators quotes-and compiles-its STRING as a regular
     expression.  STRING is interpolated the same way as PATTERN in
     `m/PATTERN/'.  If "'" is used as the delimiter, no interpolation is
     done.  Returns a Perl value which may be used instead of the
     corresponding `/STRING/imosx' expression.

     For example,

          $rex = qr/my.STRING/is;
          s/$rex/foo/;

     is equivalent to

          s/my.STRING/foo/is;

     The result may be used as a subpattern in a match:

          $re = qr/$pattern/;
          $string =~ /foo${re}bar/;	# can be interpolated in other patterns
          $string =~ $re;		# or used standalone
          $string =~ /$re/;		# or this way

     Since Perl may compile the pattern at the moment of execution of qr()
     operator, using qr() may have speed advantages in some situations,
     notably if the result of qr() is used standalone:

          sub match {
          	my $patterns = shift;
          	my @compiled = map qr/$_/i, @$patterns;
          	grep {
          	    my $success = 0;
          	    foreach my $pat (@compiled) {
          		$success = 1, last if /$pat/;
          	    }
          	    $success;
          	} @_;
          }

     Precompilation of the pattern into an internal representation at the
     moment of qr() avoids a need to recompile the pattern every time a
     match `/$pat/' is attempted.  (Perl has many other internal
     optimizations, but none would be triggered in the above example if we
     did not use qr() operator.)

     Options are:

          i	Do case-insensitive pattern matching.
          m	Treat string as multiple lines.
          o	Compile pattern only once.
          s	Treat string as single line.
          x	Use extended regular expressions.

     See *Note Perlre: perlre, for additional information on valid syntax
     for STRING, and for a detailed look at the semantics of regular
     expressions.

qx/STRING/
`STRING`
     A string which is (possibly) interpolated and then executed as a
     system command with `/bin/sh' or its equivalent.  Shell wildcards,
     pipes, and redirections will be honored.  The collected standard
     output of the command is returned; standard error is unaffected.  In
     scalar context, it comes back as a single (potentially multi-line)
     string.  In list context, returns a list of lines (however you've
     defined lines with $/ or $INPUT_RECORD_SEPARATOR).

     Because backticks do not affect standard error, use shell file
     descriptor syntax (assuming the shell supports this) if you care to
     address this.  To capture a command's STDERR and STDOUT together:

          $output = `cmd 2>&1`;

     To capture a command's STDOUT but discard its STDERR:

          $output = `cmd 2>/dev/null`;

     To capture a command's STDERR but discard its STDOUT (ordering is
     important here):

          $output = `cmd 2>&1 1>/dev/null`;

     To exchange a command's STDOUT and STDERR in order to capture the
     STDERR but leave its STDOUT to come out the old STDERR:

          $output = `cmd 3>&1 1>&2 2>&3 3>&-`;

     To read both a command's STDOUT and its STDERR separately, it's
     easiest and safest to redirect them separately to files, and then
     read from those files when the program is done:

          system("program args 1>/tmp/program.stdout 2>/tmp/program.stderr");

     Using single-quote as a delimiter protects the command from Perl's
     double-quote interpolation, passing it on to the shell instead:

          $perl_info  = qx(ps $$);            # that's Perl's $$
          $shell_info = qx'ps $$';            # that's the new shell's $$

     How that string gets evaluated is entirely subject to the command
     interpreter on your system.  On most platforms, you will have to
     protect shell metacharacters if you want them treated literally.
     This is in practice difficult to do, as it's unclear how to escape
     which characters.  See *Note Perlsec: perlsec, for a clean and safe
     example of a manual fork() and exec() to emulate backticks safely.

     On some platforms (notably DOS-like ones), the shell may not be
     capable of dealing with multiline commands, so putting newlines in
     the string may not get you what you want.  You may be able to evaluate
     multiple commands in a single line by separating them with the command
     separator character, if your shell supports that (e.g. `;' on many
     Unix shells; & on the Windows NT cmd shell).

     Beginning with v5.6.0, Perl will attempt to flush all files opened for
     output before starting the child process, but this may not be
     supported on some platforms (see *Note Perlport: perlport,).  To be
     safe, you may need to set $| ($AUTOFLUSH in English) or call the
     autoflush() method of IO::Handle on any open handles.

     Beware that some command shells may place restrictions on the length
     of the command line.  You must ensure your strings don't exceed this
     limit after any necessary interpolations.  See the platform-specific
     release notes for more details about your particular environment.

     Using this operator can lead to programs that are difficult to port,
     because the shell commands called vary between systems, and may in
     fact not be present at all.  As one example, the type command under
     the POSIX shell is very different from the type command under DOS.
     That doesn't mean you should go out of your way to avoid backticks
     when they're the right way to get something done.  Perl was made to be
     a glue language, and one of the things it glues together is commands.
     Just understand what you're getting yourself into.

     See `"I' in this node for more discussion.

qw/STRING/
     Evaluates to a list of the words extracted out of STRING, using
     embedded whitespace as the word delimiters.  It can be understood as
     being roughly equivalent to:

          split(' ', q/STRING/);

     the difference being that it generates a real list at compile time.
     So this expression:

          qw(foo bar baz)

     is semantically equivalent to the list:

          'foo', 'bar', 'baz'

     Some frequently seen examples:

          use POSIX qw( setlocale localeconv )
          @EXPORT = qw( foo bar baz );

     A common mistake is to try to separate the words with comma or to put
     comments into a multi-line `qw'-string.  For this reason, the `use
     warnings' pragma and the -w switch (that is, the $^W variable)
     produces warnings if the STRING contains the "," or the "#" character.

s/PATTERN/REPLACEMENT/egimosx
     Searches a string for a pattern, and if found, replaces that pattern
     with the replacement text and returns the number of substitutions
     made.  Otherwise it returns false (specifically, the empty string).

     If no string is specified via the `=~' or `!~' operator, the $_
     variable is searched and modified.  (The string specified with `=~'
     must be scalar variable, an array element, a hash element, or an
     assignment to one of those, i.e., an lvalue.)

     If the delimiter chosen is a single quote, no interpolation is done
     on either the PATTERN or the REPLACEMENT.  Otherwise, if the PATTERN
     contains a $ that looks like a variable rather than an end-of-string
     test, the variable will be interpolated into the pattern at run-time.
     If you want the pattern compiled only once the first time the
     variable is interpolated, use the `/o' option.  If the pattern
     evaluates to the empty string, the last successfully executed regular
     expression is used instead.  See *Note Perlre: perlre, for further
     explanation on these.  See *Note Perllocale: perllocale, for
     discussion of additional considerations that apply when `use locale'
     is in effect.

     Options are:

          e	Evaluate the right side as an expression.
          g	Replace globally, i.e., all occurrences.
          i	Do case-insensitive pattern matching.
          m	Treat string as multiple lines.
          o	Compile pattern only once.
          s	Treat string as single line.
          x	Use extended regular expressions.

     Any non-alphanumeric, non-whitespace delimiter may replace the
     slashes.  If single quotes are used, no interpretation is done on the
     replacement string (the `/e' modifier overrides this, however).
     Unlike Perl 4, Perl 5 treats backticks as normal delimiters; the
     replacement text is not evaluated as a command.  If the PATTERN is
     delimited by bracketing quotes, the REPLACEMENT has its own pair of
     quotes, which may or may not be bracketing quotes, e.g.,
     `s(foo)(bar)' or `< s<foo'/bar/ >>.  A `/e' will cause the
     replacement portion to be treated as a full-fledged Perl expression
     and evaluated right then and there.  It is, however, syntax checked at
     compile-time. A second e modifier will cause the replacement portion
     to be evaled before being run as a Perl expression.

     Examples:

          s/\bgreen\b/mauve/g;		# don't change wintergreen

          $path =~ s|/usr/bin|/usr/local/bin|;

          s/Login: $foo/Login: $bar/; # run-time pattern

          ($foo = $bar) =~ s/this/that/;	# copy first, then change

          $count = ($paragraph =~ s/Mister\b/Mr./g);  # get change-count

          $_ = 'abc123xyz';
          s/\d+/$&*2/e;		# yields 'abc246xyz'
          s/\d+/sprintf("%5d",$&)/e;	# yields 'abc  246xyz'
          s/\w/$& x 2/eg;		# yields 'aabbcc  224466xxyyzz'

          s/%(.)/$percent{$1}/g;	# change percent escapes; no /e
          s/%(.)/$percent{$1} || $&/ge;	# expr now, so /e
          s/^=(\w+)/&pod($1)/ge;	# use function call

          # expand variables in $_, but dynamics only, using
          # symbolic dereferencing
          s/\$(\w+)/${$1}/g;

          # Add one to the value of any numbers in the string
          s/(\d+)/1 + $1/eg;

          # This will expand any embedded scalar variable
          # (including lexicals) in $_ : First $1 is interpolated
          # to the variable name, and then evaluated
          s/(\$\w+)/$1/eeg;

          # Delete (most) C comments.
          $program =~ s {
          	/\*	# Match the opening delimiter.
          	.*?	# Match a minimal number of characters.
          	\*/	# Match the closing delimiter.
          } []gsx;

          s/^\s*(.*?)\s*$/$1/;	# trim white space in $_, expensively

          for ($variable) {		# trim white space in $variable, cheap
          	s/^\s+//;
          	s/\s+$//;
          }

          s/([^ ]*) *([^ ]*)/$2 $1/;	# reverse 1st two fields

     Note the use of $ instead of \ in the last example.  Unlike *sed*, we
     use the \<digit> form in only the left hand side.  Anywhere else it's
     $<digit>.

     Occasionally, you can't use just a `/g' to get all the changes to
     occur that you might want.  Here are two common cases:

          # put commas in the right places in an integer
          1 while s/(\d)(\d\d\d)(?!\d)/$1,$2/g;

          # expand tabs to 8-column spacing
          1 while s/\t+/' ' x (length($&)*8 - length($`)%8)/e;

tr/SEARCHLIST/REPLACEMENTLIST/cdsUC
y/SEARCHLIST/REPLACEMENTLIST/cdsUC
     Transliterates all occurrences of the characters found in the search
     list with the corresponding character in the replacement list.  It
     returns the number of characters replaced or deleted.  If no string is
     specified via the =~ or !~ operator, the $_ string is transliterated.
     (The string specified with =~ must be a scalar variable, an array
     element, a hash element, or an assignment to one of those, i.e., an
     lvalue.)

     A character range may be specified with a hyphen, so `tr/A-J/0-9/'
     does the same replacement as `tr/ACEGIBDFHJ/0246813579/'.  For *sed*
     devotees, y is provided as a synonym for tr.  If the SEARCHLIST is
     delimited by bracketing quotes, the REPLACEMENTLIST has its own pair
     of quotes, which may or may not be bracketing quotes, e.g.,
     `tr[A-Z][a-z]' or `tr(+\-*/)/ABCD/'.

     Note also that the whole range idea is rather unportable between
     character sets-and even within character sets they may cause results
     you probably didn't expect.  A sound principle is to use only ranges
     that begin from and end at either alphabets of equal case (a-e, A-E),
     or digits (0-4).  Anything else is unsafe.  If in doubt, spell out the
     character sets in full.

     Options:

          c	Complement the SEARCHLIST.
          d	Delete found but unreplaced characters.
          s	Squash duplicate replaced characters.
          U	Translate to/from UTF-8.
          C	Translate to/from 8-bit char (octet).

     If the `/c' modifier is specified, the SEARCHLIST character set is
     complemented.  If the `/d' modifier is specified, any characters
     specified by SEARCHLIST not found in REPLACEMENTLIST are deleted.
     (Note that this is slightly more flexible than the behavior of some
     tr programs, which delete anything they find in the SEARCHLIST,
     period.) If the `/s' modifier is specified, sequences of characters
     that were transliterated to the same character are squashed down to a
     single instance of the character.

     If the `/d' modifier is used, the REPLACEMENTLIST is always
     interpreted exactly as specified.  Otherwise, if the REPLACEMENTLIST
     is shorter than the SEARCHLIST, the final character is replicated
     till it is long enough.  If the REPLACEMENTLIST is empty, the
     SEARCHLIST is replicated.  This latter is useful for counting
     characters in a class or for squashing character sequences in a class.

     The first `/U' or `/C' modifier applies to the left side of the
     translation.  The second one applies to the right side.  If present,
     these modifiers override the current utf8 state.

     Examples:

          $ARGV[1] =~ tr/A-Z/a-z/;	# canonicalize to lower case

          $cnt = tr/*/*/;		# count the stars in $_

          $cnt = $sky =~ tr/*/*/;	# count the stars in $sky

          $cnt = tr/0-9//;		# count the digits in $_

          tr/a-zA-Z//s;		# bookkeeper -> bokeper

          ($HOST = $host) =~ tr/a-z/A-Z/;

          tr/a-zA-Z/ /cs;		# change non-alphas to single space

          tr [\200-\377]
             [\000-\177];		# delete 8th bit

          tr/\0-\xFF//CU;		# change Latin-1 to Unicode
          tr/\0-\x{FF}//UC;		# change Unicode to Latin-1

     If multiple transliterations are given for a character, only the
     first one is used:

          tr/AAA/XYZ/

     will transliterate any A to X.

     Because the transliteration table is built at compile time, neither
     the SEARCHLIST nor the REPLACEMENTLIST are subjected to double quote
     interpolation.  That means that if you want to use variables, you
     must use an eval():

          eval "tr/$oldlist/$newlist/";
          die $@ if $@;

          eval "tr/$oldlist/$newlist/, 1" or die $@;

Gory details of parsing quoted constructs
-----------------------------------------

   When presented with something that might have several different
interpretations, Perl uses the *DWIM* (that's "Do What I Mean") principle
to pick the most probable interpretation.  This strategy is so successful
that Perl programmers often do not suspect the ambivalence of what they
write.  But from time to time, Perl's notions differ substantially from
what the author honestly meant.

   This section hopes to clarify how Perl handles quoted constructs.
Although the most common reason to learn this is to unravel labyrinthine
regular expressions, because the initial steps of parsing are the same for
all quoting operators, they are all discussed together.

   The most important Perl parsing rule is the first one discussed below:
when processing a quoted construct, Perl first finds the end of that
construct, then interprets its contents.  If you understand this rule, you
may skip the rest of this section on the first reading.  The other rules
are likely to contradict the user's expectations much less frequently than
this first one.

   Some passes discussed below are performed concurrently, but because
their results are the same, we consider them individually.  For different
quoting constructs, Perl performs different numbers of passes, from one to
five, but these passes are always performed in the same order.

Finding the end
     The first pass is finding the end of the quoted construct, whether it
     be a multicharacter delimiter `"\nEOF\n"' in the `<<EOF' construct, a
     / that terminates a `qq//' construct, a ] which terminates `qq[]'
     construct, or a `< ' >> which terminates a fileglob started with `< <
     '>.

     When searching for single-character non-pairing delimiters, such as
     /, combinations of \\ and `\/' are skipped.  However, when searching
     for single-character pairing delimiter like [, combinations of \\,
     `\]', and `\[' are all skipped, and nested [, ] are skipped as well.
     When searching for multicharacter delimiters, nothing is skipped.

     For constructs with three-part delimiters (s///, y///, and tr///),
     the search is repeated once more.

     During this search no attention is paid to the semantics of the
     construct.  Thus:

          "$hash{"$foo/$bar"}"

     or:

          m/
            bar	# NOT a comment, this slash / terminated m//!
           /x

     do not form legal quoted expressions.   The quoted part ends on the
     first `"' and /, and the rest happens to be a syntax error.  Because
     the slash that terminated m// was followed by a `SPACE', the example
     above is not `m//x', but rather m// with no `/x' modifier.  So the
     embedded `#' is interpreted as a literal `#'.

Removal of backslashes before delimiters
     During the second pass, text between the starting and ending
     delimiters is copied to a safe location, and the \ is removed from
     combinations consisting of \ and delimiter-or delimiters, meaning
     both starting and ending delimiters will should these differ.  This
     removal does not happen for multi-character delimiters.  Note that
     the combination \\ is left intact, just as it was.

     Starting from this step no information about the delimiters is used
     in parsing.

Interpolation
     The next step is interpolation in the text obtained, which is now
     delimiter-independent.  There are four different cases.

    `<<'EOF'', `m''', `s'''', tr///, y///
          No interpolation is performed.

    ", q//
          The only interpolation is removal of \ from pairs \\.

    "", ```', `qq//', qx//, `< <file*glob' >>
          `\Q', `\U', `\u', `\L', `\l' (possibly paired with `\E') are
          converted to corresponding Perl constructs.  Thus,
          `"$foo\Qbaz$bar"' is converted to `$foo . (quotemeta("baz" .
          $bar))' internally.  The other combinations are replaced with
          appropriate expansions.

          Let it be stressed that *whatever falls between `\Q' and `\E'*
          is interpolated in the usual way.  Something like `"\Q\\E"' has
          no `\E' inside.  instead, it has `\Q', \\, and E, so the result
          is the same as for `"\\\\E"'.  As a general rule, backslashes
          between `\Q' and `\E' may lead to counterintuitive results.  So,
          `"\Q\t\E"' is converted to `quotemeta("\t")', which is the same
          as `"\\\t"' (since TAB is not alphanumeric).  Note also that:

               $str = '\t';
               return "\Q$str";

          may be closer to the conjectural *intention* of the writer of
          `"\Q\t\E"'.

          Interpolated scalars and arrays are converted internally to the
          join and . catentation operations.  Thus, `"$foo XXX '@arr'"'
          becomes:

               $foo . " XXX '" . (join $", @arr) . "'";

          All operations above are performed simultaneously, left to right.

          Because the result of `"\Q STRING \E"' has all metacharacters
          quoted, there is no way to insert a literal `$' or `@' inside a
          `\Q\E' pair.  If protected by \, `$' will be quoted to became
          `"\\\$"'; if not, it is interpreted as the start of an
          interpolated scalar.

          Note also that the interpolation code needs to make a decision on
          where the interpolated scalar ends.  For instance, whether `< "a
          $b -' {c}" >> really means:

               "a " . $b . " -> {c}";

          or:

               "a " . $b -> {c};

          Most of the time, the longest possible text that does not include
          spaces between components and which contains matching braces or
          brackets.  because the outcome may be determined by voting based
          on heuristic estimators, the result is not strictly predictable.
          Fortunately, it's usually correct for ambiguous cases.

    `?RE?', `/RE/', `m/RE/', `s/RE/foo/',
          Processing of `\Q', `\U', `\u', `\L', `\l', and interpolation
          happens (almost) as with `qq//' constructs, but the substitution
          of \ followed by RE-special chars (including \) is not
          performed.  Moreover, inside `(?{BLOCK})', `(?# comment )', and
          a `#'-comment in a `//x'-regular expression, no processing is
          performed whatsoever.  This is the first step at which the
          presence of the `//x' modifier is relevant.

          Interpolation has several quirks: $|, $(, and $) are not
          interpolated, and constructs `$var[SOMETHING]' are voted (by
          several different estimators) to be either an array element or
          `$var' followed by an RE alternative.  This is where the notation
          `${arr[$bar]}' comes handy: `/${arr[0-9]}/' is interpreted as
          array element `-9', not as a regular expression from the variable
          `$arr' followed by a digit, which would be the interpretation of
          `/$arr[0-9]/'.  Since voting among different estimators may
          occur, the result is not predictable.

          It is at this step that \1 is begrudgingly converted to $1 in
          the replacement text of s/// to correct the incorrigible *sed*
          hackers who haven't picked up the saner idiom yet.  A warning is
          emitted if the `use warnings' pragma or the -w command-line flag
          (that is, the $^W variable) was set.

          The lack of processing of \\ creates specific restrictions on
          the post-processed text.  If the delimiter is /, one cannot get
          the combination `\/' into the result of this step.  / will
          finish the regular expression, `\/' will be stripped to / on the
          previous step, and `\\/' will be left as is.  Because / is
          equivalent to `\/' inside a regular expression, this does not
          matter unless the delimiter happens to be character special to
          the RE engine, such as in `s*foo*bar*', `m[foo]', or `?foo?'; or
          an alphanumeric char, as in:

               m m ^ a \s* b mmx;

          In the RE above, which is intentionally obfuscated for
          illustration, the delimiter is m, the modifier is mx, and after
          backslash-removal the RE is the same as for `m/ ^ a s* b /mx').
          There's more than one reason you're encouraged to restrict your
          delimiters to non-alphanumeric, non-whitespace choices.

     This step is the last one for all constructs except regular
     expressions, which are processed further.

Interpolation of regular expressions
     Previous steps were performed during the compilation of Perl code,
     but this one happens at run time-although it may be optimized to be
     calculated at compile time if appropriate.  After preprocessing
     described above, and possibly after evaluation if catenation,
     joining, casing translation, or metaquoting are involved, the
     resulting string is passed to the RE engine for compilation.

     Whatever happens in the RE engine might be better discussed in *Note
     Perlre: perlre,, but for the sake of continuity, we shall do so here.

     This is another step where the presence of the `//x' modifier is
     relevant.  The RE engine scans the string from left to right and
     converts it to a finite automaton.

     Backslashed characters are either replaced with corresponding literal
     strings (as with `\{'), or else they generate special nodes in the
     finite automaton (as with `\b').  Characters special to the RE engine
     (such as |) generate corresponding nodes or groups of nodes.
     `(?#...)' comments are ignored.  All the rest is either converted to
     literal strings to match, or else is ignored (as is whitespace and
     `#'-style comments if `//x' is present).

     Parsing of the bracketed character class construct, `[...]', is
     rather different than the rule used for the rest of the pattern.  The
     terminator of this construct is found using the same rules as for
     finding the terminator of a `{}'-delimited construct, the only
     exception being that ] immediately following [ is treated as though
     preceded by a backslash.  Similarly, the terminator of `(?{...})' is
     found using the same rules as for finding the terminator of a
     `{}'-delimited construct.

     It is possible to inspect both the string given to RE engine and the
     resulting finite automaton.  See the arguments debug/`debugcolor' in
     the `use *Note Re: (pm.info)re,' pragma, as well as Perl's *-Dr*
     command-line switch documented in `"Command Switches"', *Note
     Perlrun: perlrun,.

Optimization of regular expressions
     This step is listed for completeness only.  Since it does not change
     semantics, details of this step are not documented and are subject to
     change without notice.  This step is performed over the finite
     automaton that was generated during the previous pass.

     It is at this stage that `split()' silently optimizes `/^/' to mean
     `/^/m'.

I/O Operators
-------------

   There are several I/O operators you should know about.

   A string enclosed by backticks (grave accents) first undergoes
double-quote interpolation.  It is then interpreted as an external
command, and the output of that command is the value of the
pseudo-literal, j string consisting of all output is returned.  In list
context, a list of values is returned, one per line of output.  (You can
set $/ to use a different line terminator.)  The command is executed each
time the pseudo-literal is evaluated.  The status value of the command is
returned in $? (see *Note Perlvar: perlvar, for the interpretation of $?).
Unlike in *csh*, no translation is done on the return data-newlines
remain newlines.  Unlike in any of the shells, single quotes do not hide
variable names in the command from interpretation.  To pass a literal
dollar-sign through to the shell you need to hide it with a backslash.
The generalized form of backticks is qx//.  (Because backticks always
undergo shell expansion as well, see *Note Perlsec: perlsec, for security
concerns.)

   In scalar context, evaluating a filehandle in angle brackets yields the
next line from that file (the newline, if any, included), or undef at
end-of-file or on error.  When $/ is set to undef (sometimes known as
file-slurp mode) and the file is empty, it returns " the first time,
followed by undef subsequently.

   Ordinarily you must assign the returned value to a variable, but there
is one situation where an automatic assignment happens.  If and only if
the input symbol is the only thing inside the conditional of a while
statement (even if disguised as a `for(;;)' loop), the value is
automatically assigned to the global variable $_, destroying whatever was
there previously.  (This may seem like an odd thing to you, but you'll use
the construct in almost every Perl script you write.)  The $_ variables is
not implicitly localized.  You'll have to put a `local $_;' before the
loop if you want that to happen.

   The following lines are equivalent:

     while (defined($_ = <STDIN>)) { print; }
     while ($_ = <STDIN>) { print; }
     while (<STDIN>) { print; }
     for (;<STDIN>;) { print; }
     print while defined($_ = <STDIN>);
     print while ($_ = <STDIN>);
     print while <STDIN>;

   This also behaves similarly, but avoids $_ :

     while (my $line = <STDIN>) { print $line }

   In these loop constructs, the assigned value (whether assignment is
automatic or explicit) is then tested to see whether it is defined.  The
defined test avoids problems where line has a string value that would be
treated as false by Perl, for example a "" or a "0" with no trailing
newline.  If you really mean for such values to terminate the loop, they
should be tested for explicitly:

     while (($_ = <STDIN>) ne '0') { ... }
     while (<STDIN>) { last unless $_; ... }

   In other boolean contexts, `< <*filehandle*' >> without an explicit
defined test or comparison elicit a warning if the `use warnings' pragma
or the -w command-line switch (the $^W variable) is in effect.

   The filehandles STDIN, STDOUT, and STDERR are predefined.  (The
filehandles stdin, stdout, and stderr will also work except in packages,
where they would be interpreted as local identifiers rather than global.)
Additional filehandles may be created with the open() function, amongst
others.  See *Note Perlopentut: perlopentut, and `open', *Note Perlfunc:
perlfunc, for details on this.

   If a <FILEHANDLE> is used in a context that is looking for a list, a
list comprising all input lines is returned, one line per list element.
It's easy to grow to a rather large data space this way, so use with care.

   <FILEHANDLE> may also be spelled `readline(*FILEHANDLE)'.  See
`readline', *Note Perlfunc: perlfunc,.

   The null filehandle <> is special: it can be used to emulate the
behavior of *sed* and *awk*.  Input from <> comes either from standard
input, or from each file listed on the command line.  Here's how it works:
the first time <> is evaluated, the @ARGV array is checked, and if it is
empty, `$ARGV[0]' is set to "-", which when opened gives you standard
input.  The @ARGV array is then processed as a list of filenames.  The loop

     while (<>) {
     	...			# code for each line
     }

   is equivalent to the following Perl-like pseudo code:

     unshift(@ARGV, '-') unless @ARGV;
     while ($ARGV = shift) {
     	open(ARGV, $ARGV);
     	while (<ARGV>) {
     	    ...		# code for each line
     	}
     }

   except that it isn't so cumbersome to say, and will actually work.  It
really does shift the @ARGV array and put the current filename into the
$ARGV variable.  It also uses filehandle *ARGV* internally-<> is just a
synonym for <ARGV>, which is magical.  (The pseudo code above doesn't work
because it treats <ARGV> as non-magical.)

   You can modify @ARGV before the first <> as long as the array ends up
containing the list of filenames you really want.  Line numbers ($.)
continue as though the input were one big happy file.  See the example in
`eof', *Note Perlfunc: perlfunc, for how to reset line numbers on each
file.

   If you want to set @ARGV to your own list of files, go right ahead.
This sets @ARGV to all plain text files if no @ARGV was given:

     @ARGV = grep { -f && -T } glob('*') unless @ARGV;

   You can even set them to pipe commands.  For example, this automatically
filters compressed arguments through *gzip*:

     @ARGV = map { /\.(gz|Z)$/ ? "gzip -dc < $_ |" : $_ } @ARGV;

   If you want to pass switches into your script, you can use one of the
Getopts modules or put a loop on the front like this:

     while ($_ = $ARGV[0], /^-/) {
     	shift;
         last if /^--$/;
     	if (/^-D(.*)/) { $debug = $1 }
     	if (/^-v/)     { $verbose++  }
     	# ...		# other switches
     }

     while (<>) {
     	# ...		# code for each line
     }

   The <> symbol will return undef for end-of-file only once.  If you call
it again after this, it will assume you are processing another  @ARGV
list, and if you haven't set @ARGV, will read input from STDIN.

   If angle brackets contain is a simple scalar variable (e.g., <$foo>),
then that variable contains the name of the filehandle to input from, or
its typeglob, or a reference to the same.  For example:

     $fh = \*STDIN;
     $line = <$fh>;

   If what's within the angle brackets is neither a filehandle nor a simple
scalar variable containing a filehandle name, typeglob, or typeglob
reference, it is interpreted as a filename pattern to be globbed, and
either a list of filenames or the next filename in the list is returned,
depending on context.  This distinction is determined on syntactic grounds
alone.  That means `< <$x' >> is always a readline() from an indirect
handle, but `< <$hash{key}' >> is always a glob().  That's because $x is a
simple scalar variable, but `$hash{key}' is not-it's a hash element.

   One level of double-quote interpretation is done first, but you can't
say `< <$foo' >> because that's an indirect filehandle as explained in the
previous paragraph.  (In older versions of Perl, programmers would insert
curly brackets to force interpretation as a filename glob: `< <${foo}' >>.
These days, it's considered cleaner to call the internal function
directly as `glob($foo)', which is probably the right way to have done it
in the first place.)  For example:

     while (<*.c>) {
     	chmod 0644, $_;
     }

   is roughly equivalent to:

     open(FOO, "echo *.c | tr -s ' \t\r\f' '\\012\\012\\012\\012'|");
     while (<FOO>) {
     	chop;
     	chmod 0644, $_;
     }

   except that the globbing is actually done internally using the standard
File::Glob extension.  Of course, the shortest way to do the above is:

     chmod 0644, <*.c>;

   A (file)glob evaluates its (embedded) argument only when it is starting
a new list.  All values must be read before it will start over.  In list
context, this isn't important because you automatically get them all
anyway.  However, in scalar context the operator returns the next value
each time it's called, or C run out.  As with filehandle reads, an
automatic defined is generated when the glob occurs in the test part of a
while, because legal glob returns (e.g. a file called 0) would otherwise
terminate the loop.  Again, undef is returned only once.  So if you're
expecting a single value from a glob, it is much better to say

     ($file) = <blurch*>;

   than

     $file = <blurch*>;

   because the latter will alternate between returning a filename and
returning false.

   It you're trying to do variable interpolation, it's definitely better
to use the glob() function, because the older notation can cause people to
become confused with the indirect filehandle notation.

     @files = glob("$dir/*.[ch]");
     @files = glob($files[$i]);

Constant Folding
----------------

   Like C, Perl does a certain amount of expression evaluation at compile
time whenever it determines that all arguments to an operator are static
and have no side effects.  In particular, string concatenation happens at
compile time between literals that don't do variable substitution.
Backslash interpolation also happens at compile time.  You can say

     'Now is the time for all' . "\n" .
     	'good men to come to.'

   and this all reduces to one string internally.  Likewise, if you say

     foreach $file (@filenames) {
     	if (-s $file > 5 + 100 * 2**16) {  }
     }

   the compiler will precompute the number which that expression
represents so that the interpreter won't have to.

Bitwise String Operators
------------------------

   Bitstrings of any size may be manipulated by the bitwise operators (`~
| & ^').

   If the operands to a binary bitwise op are strings of different sizes,
| and ^ ops act as though the shorter operand had additional zero bits on
the right, while the & op acts as though the longer operand were truncated
to the length of the shorter.  The granularity for such extension or
truncation is one or more bytes.

     # ASCII-based examples
     print "j p \n" ^ " a h";        	# prints "JAPH\n"
     print "JA" | "  ph\n";          	# prints "japh\n"
     print "japh\nJunk" & '_____';   	# prints "JAPH\n";
     print 'p N$' ^ " E<H\n";		# prints "Perl\n";

   If you are intending to manipulate bitstrings, be certain that you're
supplying bitstrings: If an operand is a number, that will imply a numeric
bitwise operation.  You may explicitly show which type of operation you
intend by using "" or `0+', as in the examples below.

     $foo =  150  |  105 ;	# yields 255  (0x96 | 0x69 is 0xFF)
     $foo = '150' |  105 ;	# yields 255
     $foo =  150  | '105';	# yields 255
     $foo = '150' | '105';	# yields string '155' (under ASCII)

     $baz = 0+$foo & 0+$bar;	# both ops explicitly numeric
     $biz = "$foo" ^ "$bar";	# both ops explicitly stringy

   See `vec', *Note Perlfunc: perlfunc, for information on how to
manipulate individual bits in a bit vector.

Integer Arithmetic
------------------

   By default, Perl assumes that it must do most of its arithmetic in
floating point.  But by saying

     use integer;

   you may tell the compiler that it's okay to use integer operations (if
it feels like it) from here to the end of the enclosing BLOCK.  An inner
BLOCK may countermand this by saying

     no integer;

   which lasts until the end of that BLOCK.  Note that this doesn't mean
everything is only an integer, merely that Perl may use integer operations
if it is so inclined.  For example, even under `use integer', if you take
the `sqrt(2)', you'll still get `1.4142135623731' or so.

   Used on numbers, the bitwise operators ("&", "|", "^", "~", "<<", and
">>") always produce integral results.  (But see also `Bitwise String
Operators' in this node.)  However, `use integer' still has meaning for
them.  By default, their results are interpreted as unsigned integers, but
if `use integer' is in effect, their results are interpreted as signed
integers.  For example, `~0' usually evaluates to a large integral value.
However, `use integer; ~0' is `-1' on twos-complement machines.

Floating-point Arithmetic
-------------------------

   While `use integer' provides integer-only arithmetic, there is no
analogous mechanism to provide automatic rounding or truncation to a
certain number of decimal places.  For rounding to a certain number of
digits, sprintf() or printf() is usually the easiest route.  See *Note
Perlfaq4: perlfaq4,.

   Floating-point numbers are only approximations to what a mathematician
would call real numbers.  There are infinitely more reals than floats, so
some corners must be cut.  For example:

     printf "%.20g\n", 123456789123456789;
     #        produces 123456789123456784

   Testing for exact equality of floating-point equality or inequality is
not a good idea.  Here's a (relatively expensive) work-around to compare
whether two floating-point numbers are equal to a particular number of
decimal places.  See Knuth, volume II, for a more robust treatment of this
topic.

     sub fp_equal {
     	my ($X, $Y, $POINTS) = @_;
     	my ($tX, $tY);
     	$tX = sprintf("%.${POINTS}g", $X);
     	$tY = sprintf("%.${POINTS}g", $Y);
     	return $tX eq $tY;
     }

   The POSIX module (part of the standard perl distribution) implements
ceil(), floor(), and other mathematical and trigonometric functions.  The
Math::Complex module (part of the standard perl distribution) defines
mathematical functions that work on both the reals and the imaginary
numbers.  Math::Complex not as efficient as POSIX, but POSIX can't work
with complex numbers.

   Rounding in financial applications can have serious implications, and
the rounding method used should be specified precisely.  In these cases,
it probably pays not to trust whichever system rounding is being used by
Perl, but to instead implement the rounding function you need yourself.

Bigger Numbers
--------------

   The standard Math::BigInt and Math::BigFloat modules provide
variable-precision arithmetic and overloaded operators, although they're
currently pretty slow.  At the cost of some space and considerable speed,
they avoid the normal pitfalls associated with limited-precision
representations.

     use Math::BigInt;
     $x = Math::BigInt->new('123456789123456789');
     print $x * $x;

     # prints +15241578780673678515622620750190521

   The non-standard modules SSLeay::BN and Math::Pari provide equivalent
functionality (and much more) with a substantial performance savings.


File: perl.info,  Node: perlopentut,  Next: perlvar,  Prev: perlfunc,  Up: Top

tutorial on opening things in Perl
**********************************

NAME
====

   perlopentut - tutorial on opening things in Perl

DESCRIPTION
===========

   Perl has two simple, built-in ways to open files: the shell way for
convenience, and the C way for precision.  The choice is yours.

Open E<agrave> la shell
=======================

   Perl's open function was designed to mimic the way command-line
redirection in the shell works.  Here are some basic examples from the
shell:

     $ myprogram file1 file2 file3
     $ myprogram    <  inputfile
     $ myprogram    >  outputfile
     $ myprogram    >> outputfile
     $ myprogram    |  otherprogram
     $ otherprogram |  myprogram

   And here are some more advanced examples:

     $ otherprogram      | myprogram f1 - f2
     $ otherprogram 2>&1 | myprogram -
     $ myprogram     <&3
     $ myprogram     >&4

   Programmers accustomed to constructs like those above can take comfort
in learning that Perl directly supports these familiar constructs using
virtually the same syntax as the shell.

Simple Opens
------------

   The open function takes two arguments: the first is a filehandle, and
the second is a single string comprising both what to open and how to open
it.  open returns true when it works, and when it fails, returns a false
value and sets the special variable $! to reflect the system error.  If
the filehandle was previously opened, it will be implicitly closed first.

   For example:

     open(INFO,      "datafile") || die("can't open datafile: $!");
     open(INFO,   "<  datafile") || die("can't open datafile: $!");
     open(RESULTS,">  runstats") || die("can't open runstats: $!");
     open(LOG,    ">> logfile ") || die("can't open logfile:  $!");

   If you prefer the low-punctuation version, you could write that this
way:

     open INFO,   "<  datafile"  or die "can't open datafile: $!";
     open RESULTS,">  runstats"  or die "can't open runstats: $!";
     open LOG,    ">> logfile "  or die "can't open logfile:  $!";

   A few things to notice.  First, the leading less-than is optional.  If
omitted, Perl assumes that you want to open the file for reading.

   The other important thing to notice is that, just as in the shell, any
white space before or after the filename is ignored.  This is good,
because you wouldn't want these to do different things:

     open INFO,   "<datafile"
     open INFO,   "< datafile"
     open INFO,   "<  datafile"

   Ignoring surround whitespace also helps for when you read a filename in
from a different file, and forget to trim it before opening:

     $filename = <INFO>;         # oops, \n still there
     open(EXTRA, "< $filename") || die "can't open $filename: $!";

   This is not a bug, but a feature.  Because open mimics the shell in its
style of using redirection arrows to specify how to open the file, it also
does so with respect to extra white space around the filename itself as
well.  For accessing files with naughty names, see `"Dispelling the
Dweomer"' in this node.

Pipe Opens
----------

   In C, when you want to open a file using the standard I/O library, you
use the fopen function, but when opening a pipe, you use the `popen'
function.  But in the shell, you just use a different redirection
character.  That's also the case for Perl.  The open call remains the
same-just its argument differs.

   If the leading character is a pipe symbol, open starts up a new command
and open a write-only filehandle leading into that command.  This lets you
write into that handle and have what you write show up on that command's
standard input.  For example:

     open(PRINTER, "| lpr -Plp1")    || die "cannot fork: $!";
     print PRINTER "stuff\n";
     close(PRINTER)                  || die "can't close lpr: $!";

   If the trailing character is a pipe, you start up a new command and
open a read-only filehandle leading out of that command.  This lets
whatever that command writes to its standard output show up on your handle
for reading.  For example:

     open(NET, "netstat -i -n |")    || die "cannot fork: $!";
     while (<NET>) { }               # do something with input
     close(NET)                      || die "can't close netstat: $!";

   What happens if you try to open a pipe to or from a non-existent
command?  In most systems, such an open will not return an error. That's
because in the traditional fork/exec model, running the other program
happens only in the forked child process, which means that the failed exec
can't be reflected in the return value of open.  Only a failed fork shows
up there.  See `"Why doesn't open() return an error when a pipe open
fails?"', *Note Perlfaq8: perlfaq8, to see how to cope with this.  There's
also an explanation in `"Why doesn't open() return an error when a pipe
open fails?"', *Note Perlipc: perlipc,.

   If you would like to open a bidirectional pipe, the IPC::Open2 library
will handle this for you.  Check out `"Bidirectional Communication with
Another Process"', *Note Perlipc: perlipc,

The Minus File
--------------

   Again following the lead of the standard shell utilities, Perl's open
function treats a file whose name is a single minus, "-", in a special
way.  If you open minus for reading, it really means to access the
standard input.  If you open minus for writing, it really means to access
the standard output.

   If minus can be used as the default input or default output, what
happens if you open a pipe into or out of minus?  What's the default
command it would run?  The same script as you're currently running!  This
is actually a stealth fork hidden inside an open call.  See `"Safe Pipe
Opens"', *Note Perlipc: perlipc, for details.

Mixing Reads and Writes
-----------------------

   It is possible to specify both read and write access.  All you do is
add a "+" symbol in front of the redirection.  But as in the shell, using
a less-than on a file never creates a new file; it only opens an existing
one.  On the other hand, using a greater-than always clobbers (truncates
to zero length) an existing file, or creates a brand-new one if there
isn't an old one.  Adding a "+" for read-write doesn't affect whether it
only works on existing files or always clobbers existing ones.

     open(WTMP, "+< /usr/adm/wtmp")
         || die "can't open /usr/adm/wtmp: $!";

     open(SCREEN, "+> /tmp/lkscreen")
         || die "can't open /tmp/lkscreen: $!";

     open(LOGFILE, "+>> /tmp/applog"
         || die "can't open /tmp/applog: $!";

   The first one won't create a new file, and the second one will always
clobber an old one.  The third one will create a new file if necessary and
not clobber an old one, and it will allow you to read at any point in the
file, but all writes will always go to the end.  In short, the first case
is substantially more common than the second and third cases, which are
almost always wrong.  (If you know C, the plus in Perl's open is
historically derived from the one in C's fopen(3S), which it ultimately
calls.)

   In fact, when it comes to updating a file, unless you're working on a
binary file as in the WTMP case above, you probably don't want to use this
approach for updating.  Instead, Perl's -i flag comes to the rescue.  The
following command takes all the C, C++, or yacc source or header files and
changes all their foo's to bar's, leaving the old version in the original
file name with a ".orig" tacked on the end:

     $ perl -i.orig -pe 's/\bfoo\b/bar/g' *.[Cchy]

   This is a short cut for some renaming games that are really the best
way to update textfiles.  See the second question in *Note Perlfaq5:
perlfaq5, for more details.

Filters
-------

   One of the most common uses for open is one you never even notice.
When you process the ARGV filehandle using `< <ARGV' >>, Perl actually
does an implicit open on each file in @ARGV.  Thus a program called like
this:

     $ myprogram file1 file2 file3

   Can have all its files opened and processed one at a time using a
construct no more complex than:

     while (<>) {
         # do something with $_
     }

   If @ARGV is empty when the loop first begins, Perl pretends you've
opened up minus, that is, the standard input.  In fact, $ARGV, the
currently open file during `< <ARGV' >> processing, is even set to "-" in
these circumstances.

   You are welcome to pre-process your @ARGV before starting the loop to
make sure it's to your liking.  One reason to do this might be to remove
command options beginning with a minus.  While you can always roll the
simple ones by hand, the Getopts modules are good for this.

     use Getopt::Std;

     # -v, -D, -o ARG, sets $opt_v, $opt_D, $opt_o
     getopts("vDo:");

     # -v, -D, -o ARG, sets $args{v}, $args{D}, $args{o}
     getopts("vDo:", \%args);

   Or the standard Getopt::Long module to permit named arguments:

     use Getopt::Long;
     GetOptions( "verbose"  => \$verbose,        # --verbose
                 "Debug"    => \$debug,          # --Debug
                 "output=s" => \$output );
     	    # --output=somestring or --output somestring

   Another reason for preprocessing arguments is to make an empty argument
list default to all files:

     @ARGV = glob("*") unless @ARGV;

   You could even filter out all but plain, text files.  This is a bit
silent, of course, and you might prefer to mention them on the way.

     @ARGV = grep { -f && -T } @ARGV;

   If you're using the -n or -p command-line options, you should put
changes to @ARGV in a `BEGIN{}' block.

   Remember that a normal open has special properties, in that it might
call fopen(3S) or it might called popen(3S), depending on what its
argument looks like; that's why it's sometimes called "magic open".
Here's an example:

     $pwdinfo = `domainname` =~ /^(\(none\))?$/
                     ? '< /etc/passwd'
                     : 'ypcat passwd |';

     open(PWD, $pwdinfo)
                 or die "can't open $pwdinfo: $!";

   This sort of thing also comes into play in filter processing.  Because
`< <ARGV' >> processing employs the normal, shell-style Perl open, it
respects all the special things we've already seen:

     $ myprogram f1 "cmd1|" - f2 "cmd2|" f3 < tmpfile

   That program will read from the file `f1', the process `cmd1', standard
input (tmpfile in this case), the `f2' file, the `cmd2' command, and
finally the `f3' file.

   Yes, this also means that if you have a file named "-" (and so on) in
your directory, that they won't be processed as literal files by open.
You'll need to pass them as "./-" much as you would for the rm program.
Or you could use sysopen as described below.

   One of the more interesting applications is to change files of a certain
name into pipes.  For example, to autoprocess gzipped or compressed files
by decompressing them with *gzip*:

     @ARGV = map { /^\.(gz|Z)$/ ? "gzip -dc $_ |" : $_  } @ARGV;

   Or, if you have the GET program installed from LWP, you can fetch URLs
before processing them:

     @ARGV = map { m#^\w+://# ? "GET $_ |" : $_ } @ARGV;

   It's not for nothing that this is called magic `< <ARGV' >>.  Pretty
nifty, eh?

Open E<agrave> la C
===================

   If you want the convenience of the shell, then Perl's open is
definitely the way to go.  On the other hand, if you want finer precision
than C's simplistic fopen(3S) provides, then you should look to Perl's
sysopen, which is a direct hook into the open(2) system call.  That does
mean it's a bit more involved, but that's the price of precision.

   sysopen takes 3 (or 4) arguments.

     sysopen HANDLE, PATH, FLAGS, [MASK]

   The HANDLE argument is a filehandle just as with open.  The PATH is a
literal path, one that doesn't pay attention to any greater-thans or
less-thans or pipes or minuses, nor ignore white space.  If it's there,
it's part of the path.  The FLAGS argument contains one or more values
derived from the Fcntl module that have been or'd together using the
bitwise "|" operator.  The final argument, the MASK, is optional; if
present, it is combined with the user's current umask for the creation
mode of the file.  You should usually omit this.

   Although the traditional values of read-only, write-only, and read-write
are 0, 1, and 2 respectively, this is known not to hold true on some
systems.  Instead, it's best to load in the appropriate constants first
from the Fcntl module, which supplies the following standard flags:

     O_RDONLY            Read only
     O_WRONLY            Write only
     O_RDWR              Read and write
     O_CREAT             Create the file if it doesn't exist
     O_EXCL              Fail if the file already exists
     O_APPEND            Append to the file
     O_TRUNC             Truncate the file
     O_NONBLOCK          Non-blocking access

   Less common flags that are sometimes available on some operating
systems include `O_BINARY', `O_TEXT', `O_SHLOCK', `O_EXLOCK', `O_DEFER',
`O_SYNC', `O_ASYNC', `O_DSYNC', `O_RSYNC', `O_NOCTTY', `O_NDELAY' and
`O_LARGEFILE'.  Consult your open(2) manpage or its local equivalent for
details.  (Note: starting from Perl release 5.6 the O_LARGEFILE flag, if
available, is automatically added to the sysopen() flags because large
files are the the default.)

   Here's how to use sysopen to emulate the simple open calls we had
before.  We'll omit the `|| die $!' checks for clarity, but make sure you
always check the return values in real code.  These aren't quite the same,
since open will trim leading and trailing white space, but you'll get the
idea:

   To open a file for reading:

     open(FH, "< $path");
     sysopen(FH, $path, O_RDONLY);

   To open a file for writing, creating a new file if needed or else
truncating an old file:

     open(FH, "> $path");
     sysopen(FH, $path, O_WRONLY | O_TRUNC | O_CREAT);

   To open a file for appending, creating one if necessary:

     open(FH, ">> $path");
     sysopen(FH, $path, O_WRONLY | O_APPEND | O_CREAT);

   To open a file for update, where the file must already exist:

     open(FH, "+< $path");
     sysopen(FH, $path, O_RDWR);

   And here are things you can do with sysopen that you cannot do with a
regular open.  As you see, it's just a matter of controlling the flags in
the third argument.

   To open a file for writing, creating a new file which must not
previously exist:

     sysopen(FH, $path, O_WRONLY | O_EXCL | O_CREAT);

   To open a file for appending, where that file must already exist:

     sysopen(FH, $path, O_WRONLY | O_APPEND);

   To open a file for update, creating a new file if necessary:

     sysopen(FH, $path, O_RDWR | O_CREAT);

   To open a file for update, where that file must not already exist:

     sysopen(FH, $path, O_RDWR | O_EXCL | O_CREAT);

   To open a file without blocking, creating one if necessary:

     sysopen(FH, $path, O_WRONLY | O_NONBLOCK | O_CREAT);

Permissions E<agrave> la mode
-----------------------------

   If you omit the MASK argument to sysopen, Perl uses the octal value
0666.  The normal MASK to use for executables and directories should be
0777, and for anything else, 0666.

   Why so permissive?  Well, it isn't really.  The MASK will be modified
by your process's current umask.  A umask is a number representing
disabled permissions bits; that is, bits that will not be turned on in the
created files' permissions field.

   For example, if your umask were 027, then the 020 part would disable
the group from writing, and the 007 part would disable others from
reading, writing, or executing.  Under these conditions, passing sysopen
0666 would create a file with mode 0640, since `0666 &~ 027' is 0640.

   You should seldom use the MASK argument to `sysopen()'.  That takes
away the user's freedom to choose what permission new files will have.
Denying choice is almost always a bad thing.  One exception would be for
cases where sensitive or private data is being stored, such as with mail
folders, cookie files, and internal temporary files.

Obscure Open Tricks
===================

Re-Opening Files (dups)
-----------------------

   Sometimes you already have a filehandle open, and want to make another
handle that's a duplicate of the first one.  In the shell, we place an
ampersand in front of a file descriptor number when doing redirections.
For example, `< 2'&1 >> makes descriptor 2 (that's STDERR in Perl) be
redirected into descriptor 1 (which is usually Perl's STDOUT).  The same
is essentially true in Perl: a filename that begins with an ampersand is
treated instead as a file descriptor if a number, or as a filehandle if a
string.

     open(SAVEOUT, ">&SAVEERR") || die "couldn't dup SAVEERR: $!";
     open(MHCONTEXT, "<&4")     || die "couldn't dup fd4: $!";

   That means that if a function is expecting a filename, but you don't
want to give it a filename because you already have the file open, you can
just pass the filehandle with a leading ampersand.  It's best to use a
fully qualified handle though, just in case the function happens to be in
a different package:

     somefunction("&main::LOGFILE");

   This way if somefunction() is planning on opening its argument, it can
just use the already opened handle.  This differs from passing a handle,
because with a handle, you don't open the file.  Here you have something
you can pass to open.

   If you have one of those tricky, newfangled I/O objects that the C++
folks are raving about, then this doesn't work because those aren't a
proper filehandle in the native Perl sense.  You'll have to use fileno()
to pull out the proper descriptor number, assuming you can:

     use IO::Socket;
     $handle = IO::Socket::INET->new("www.perl.com:80");
     $fd = $handle->fileno;
     somefunction("&$fd");  # not an indirect function call

   It can be easier (and certainly will be faster) just to use real
filehandles though:

     use IO::Socket;
     local *REMOTE = IO::Socket::INET->new("www.perl.com:80");
     die "can't connect" unless defined(fileno(REMOTE));
     somefunction("&main::REMOTE");

   If the filehandle or descriptor number is preceded not just with a
simple "&" but rather with a "&=" combination, then Perl will not create a
completely new descriptor opened to the same place using the dup(2) system
call.  Instead, it will just make something of an alias to the existing
one using the fdopen(3S) library call  This is slightly more parsimonious
of systems resources, although this is less a concern these days.  Here's
an example of that:

     $fd = $ENV{"MHCONTEXTFD"};
     open(MHCONTEXT, "<&=$fd")   or die "couldn't fdopen $fd: $!";

   If you're using magic `< <ARGV' >>, you could even pass in as a command
line argument in @ARGV something like `"<&=$MHCONTEXTFD"', but we've never
seen anyone actually do this.

Dispelling the Dweomer
----------------------

   Perl is more of a DWIMmer language than something like Java-where DWIM
is an acronym for "do what I mean".  But this principle sometimes leads to
more hidden magic than one knows what to do with.  In this way, Perl is
also filled with *dweomer*, an obscure word meaning an enchantment.
Sometimes, Perl's DWIMmer is just too much like dweomer for comfort.

   If magic open is a bit too magical for you, you don't have to turn to
sysopen.  To open a file with arbitrary weird characters in it, it's
necessary to protect any leading and trailing whitespace.  Leading
whitespace is protected by inserting a `"./"' in front of a filename that
starts with whitespace.  Trailing whitespace is protected by appending an
ASCII NUL byte (`"\0"') at the end off the string.

     $file =~ s#^(\s)#./$1#;
     open(FH, "< $file\0")   || die "can't open $file: $!";

   This assumes, of course, that your system considers dot the current
working directory, slash the directory separator, and disallows ASCII NULs
within a valid filename.  Most systems follow these conventions, including
all POSIX systems as well as proprietary Microsoft systems.  The only
vaguely popular system that doesn't work this way is the proprietary
Macintosh system, which uses a colon where the rest of us use a slash.
Maybe sysopen isn't such a bad idea after all.

   If you want to use `< <ARGV' >> processing in a totally boring and
non-magical way, you could do this first:

     #   "Sam sat on the ground and put his head in his hands.
     #   'I wish I had never come here, and I don't want to see
     #   no more magic,' he said, and fell silent."
     for (@ARGV) {
         s#^([^./])#./$1#;
         $_ .= "\0";
     }
     while (<>) {
         # now process $_
     }

   But be warned that users will not appreciate being unable to use "-" to
mean standard input, per the standard convention.

Paths as Opens
--------------

   You've probably noticed how Perl's warn and die functions can produce
messages like:

     Some warning at scriptname line 29, <FH> line 7.

   That's because you opened a filehandle FH, and had read in seven records
from it.  But what was the name of the file, not the handle?

   If you aren't running with `strict refs', or if you've turn them off
temporarily, then all you have to do is this:

     open($path, "< $path") || die "can't open $path: $!";
     while (<$path>) {
         # whatever
     }

   Since you're using the pathname of the file as its handle, you'll get
warnings more like

     Some warning at scriptname line 29, </etc/motd> line 7.

Single Argument Open
--------------------

   Remember how we said that Perl's open took two arguments?  That was a
passive prevarication.  You see, it can also take just one argument.  If
and only if the variable is a global variable, not a lexical, you can pass
open just one argument, the filehandle, and it will get the path from the
global scalar variable of the same name.

     $FILE = "/etc/motd";
     open FILE or die "can't open $FILE: $!";
     while (<FILE>) {
         # whatever
     }

   Why is this here?  Someone has to cater to the hysterical porpoises.
It's something that's been in Perl since the very beginning, if not before.

Playing with STDIN and STDOUT
-----------------------------

   One clever move with STDOUT is to explicitly close it when you're done
with the program.

     END { close(STDOUT) || die "can't close stdout: $!" }

   If you don't do this, and your program fills up the disk partition due
to a command line redirection, it won't report the error exit with a
failure status.

   You don't have to accept the STDIN and STDOUT you were given.  You are
welcome to reopen them if you'd like.

     open(STDIN, "< datafile")
     	|| die "can't open datafile: $!";

     open(STDOUT, "> output")
     	|| die "can't open output: $!";

   And then these can be read directly or passed on to subprocesses.  This
makes it look as though the program were initially invoked with those
redirections from the command line.

   It's probably more interesting to connect these to pipes.  For example:

     $pager = $ENV{PAGER} || "(less || more)";
     open(STDOUT, "| $pager")
     	|| die "can't fork a pager: $!";

   This makes it appear as though your program were called with its stdout
already piped into your pager.  You can also use this kind of thing in
conjunction with an implicit fork to yourself.  You might do this if you
would rather handle the post processing in your own program, just in a
different process:

     head(100);
     while (<>) {
         print;
     }

     sub head {
         my $lines = shift || 20;
         return unless $pid = open(STDOUT, "|-");
         die "cannot fork: $!" unless defined $pid;
         while (<STDIN>) {
             print;
             last if --$lines < 0;
         }
         exit;
     }

   This technique can be applied to repeatedly push as many filters on your
output stream as you wish.

Other I/O Issues
================

   These topics aren't really arguments related to open or sysopen, but
they do affect what you do with your open files.

Opening Non-File Files
----------------------

   When is a file not a file?  Well, you could say when it exists but
isn't a plain file.   We'll check whether it's a symbolic link first, just
in case.

     if (-l $file || ! -f _) {
         print "$file is not a plain file\n";
     }

   What other kinds of files are there than, well, files?  Directories,
symbolic links, named pipes, Unix-domain sockets, and block and character
devices.  Those are all files, too-just not *plain* files.  This isn't the
same issue as being a text file. Not all text files are plain files.  Not
all plain files are textfiles.  That's why there are separate -f and -T
file tests.

   To open a directory, you should use the opendir function, then process
it with readdir, carefully restoring the directory name if necessary:

     opendir(DIR, $dirname) or die "can't opendir $dirname: $!";
     while (defined($file = readdir(DIR))) {
         # do something with "$dirname/$file"
     }
     closedir(DIR);

   If you want to process directories recursively, it's better to use the
File::Find module.  For example, this prints out all files recursively,
add adds a slash to their names if the file is a directory.

     @ARGV = qw(.) unless @ARGV;
     use File::Find;
     find sub { print $File::Find::name, -d && '/', "\n" }, @ARGV;

   This finds all bogus symbolic links beneath a particular directory:

     find sub { print "$File::Find::name\n" if -l && !-e }, $dir;

   As you see, with symbolic links, you can just pretend that it is what
it points to.  Or, if you want to know *what* it points to, then readlink
is called for:

     if (-l $file) {
         if (defined($whither = readlink($file))) {
             print "$file points to $whither\n";
         } else {
             print "$file points nowhere: $!\n";
         }
     }

   Named pipes are a different matter.  You pretend they're regular files,
but their opens will normally block until there is both a reader and a
writer.  You can read more about them in `"Named Pipes"', *Note Perlipc:
perlipc,.  Unix-domain sockets are rather different beasts as well; they're
described in `"Unix-Domain TCP Clients and Servers"', *Note Perlipc:
perlipc,.

   When it comes to opening devices, it can be easy and it can tricky.
We'll assume that if you're opening up a block device, you know what
you're doing.  The character devices are more interesting.  These are
typically used for modems, mice, and some kinds of printers.  This is
described in `"How do I read and write the serial port?"', *Note Perlfaq8:
perlfaq8, It's often enough to open them carefully:

     sysopen(TTYIN, "/dev/ttyS1", O_RDWR | O_NDELAY | O_NOCTTY)
     		# (O_NOCTTY no longer needed on POSIX systems)
         or die "can't open /dev/ttyS1: $!";
     open(TTYOUT, "+>&TTYIN")
         or die "can't dup TTYIN: $!";

     $ofh = select(TTYOUT); $| = 1; select($ofh);

     print TTYOUT "+++at\015";
     $answer = <TTYIN>;

   With descriptors that you haven't opened using sysopen, such as a
socket, you can set them to be non-blocking using fcntl:

     use Fcntl;
     fcntl(Connection, F_SETFL, O_NONBLOCK)
         or die "can't set non blocking: $!";

   Rather than losing yourself in a morass of twisting, turning ioctls,
all dissimilar, if you're going to manipulate ttys, it's best to make
calls out to the stty(1) program if you have it, or else use the portable
POSIX interface.  To figure this all out, you'll need to read the
termios(3) manpage, which describes the POSIX interface to tty devices,
and then *Note POSIX: (pm.info)POSIX,, which describes Perl's interface to
POSIX.  There are also some high-level modules on CPAN that can help you
with these games.  Check out Term::ReadKey and Term::ReadLine.

   What else can you open?  To open a connection using sockets, you won't
use one of Perl's two open functions.  See `"Sockets: Client', *Note
Perlipc: perlipc, for that.  Here's an example.  Once you have it, you can
use FH as a bidirectional filehandle.

     use IO::Socket;
     local *FH = IO::Socket::INET->new("www.perl.com:80");

   For opening up a URL, the LWP modules from CPAN are just what the
doctor ordered.  There's no filehandle interface, but it's still easy to
get the contents of a document:

     use LWP::Simple;
     $doc = get('http://www.linpro.no/lwp/');

Binary Files
------------

   On certain legacy systems with what could charitably be called
terminally convoluted (some would say broken) I/O models, a file isn't a
file-at least, not with respect to the C standard I/O library.  On these
old systems whose libraries (but not kernels) distinguish between text and
binary streams, to get files to behave properly you'll have to bend over
backwards to avoid nasty problems.  On such infelicitous systems, sockets
and pipes are already opened in binary mode, and there is currently no way
to turn that off.  With files, you have more options.

   Another option is to use the binmode function on the appropriate
handles before doing regular I/O on them:

     binmode(STDIN);
     binmode(STDOUT);
     while (<STDIN>) { print }

   Passing sysopen a non-standard flag option will also open the file in
binary mode on those systems that support it.  This is the equivalent of
opening the file normally, then calling binmodeing on the handle.

     sysopen(BINDAT, "records.data", O_RDWR | O_BINARY)
         || die "can't open records.data: $!";

   Now you can use read and print on that handle without worrying about
the system non-standard I/O library breaking your data.  It's not a pretty
picture, but then, legacy systems seldom are.  CP/M will be with us until
the end of days, and after.

   On systems with exotic I/O systems, it turns out that, astonishingly
enough, even unbuffered I/O using sysread and syswrite might do sneaky
data mutilation behind your back.

     while (sysread(WHENCE, $buf, 1024)) {
         syswrite(WHITHER, $buf, length($buf));
     }

   Depending on the vicissitudes of your runtime system, even these calls
may need binmode or `O_BINARY' first.  Systems known to be free of such
difficulties include Unix, the Mac OS, Plan9, and Inferno.

File Locking
------------

   In a multitasking environment, you may need to be careful not to collide
with other processes who want to do I/O on the same files as others are
working on.  You'll often need shared or exclusive locks on files for
reading and writing respectively.  You might just pretend that only
exclusive locks exist.

   Never use the existence of a file `-e $file' as a locking indication,
because there is a race condition between the test for the existence of
the file and its creation.  Atomicity is critical.

   Perl's most portable locking interface is via the flock function, whose
simplicity is emulated on systems that don't directly support it, such as
SysV or WindowsNT.  The underlying semantics may affect how it all works,
so you should learn how flock is implemented on your system's port of Perl.

   File locking *does not* lock out another process that would like to do
I/O.  A file lock only locks out others trying to get a lock, not
processes trying to do I/O.  Because locks are advisory, if one process
uses locking and another doesn't, all bets are off.

   By default, the flock call will block until a lock is granted.  A
request for a shared lock will be granted as soon as there is no exclusive
locker.  A request for a exclusive lock will be granted as soon as there
is no locker of any kind.  Locks are on file descriptors, not file names.
You can't lock a file until you open it, and you can't hold on to a lock
once the file has been closed.

   Here's how to get a blocking shared lock on a file, typically used for
reading:

     use 5.004;
     use Fcntl qw(:DEFAULT :flock);
     open(FH, "< filename")  or die "can't open filename: $!";
     flock(FH, LOCK_SH) 	    or die "can't lock filename: $!";
     # now read from FH

   You can get a non-blocking lock by using `LOCK_NB'.

     flock(FH, LOCK_SH | LOCK_NB)
         or die "can't lock filename: $!";

   This can be useful for producing more user-friendly behaviour by warning
if you're going to be blocking:

     use 5.004;
     use Fcntl qw(:DEFAULT :flock);
     open(FH, "< filename")  or die "can't open filename: $!";
     unless (flock(FH, LOCK_SH | LOCK_NB)) {
     	$| = 1;
     	print "Waiting for lock...";
     	flock(FH, LOCK_SH)  or die "can't lock filename: $!";
     	print "got it.\n"
     }
     # now read from FH

   To get an exclusive lock, typically used for writing, you have to be
careful.  We sysopen the file so it can be locked before it gets emptied.
You can get a nonblocking version using `LOCK_EX | LOCK_NB'.

     use 5.004;
     use Fcntl qw(:DEFAULT :flock);
     sysopen(FH, "filename", O_WRONLY | O_CREAT)
         or die "can't open filename: $!";
     flock(FH, LOCK_EX)
         or die "can't lock filename: $!";
     truncate(FH, 0)
         or die "can't truncate filename: $!";
     # now write to FH

   Finally, due to the uncounted millions who cannot be dissuaded from
wasting cycles on useless vanity devices called hit counters, here's how
to increment a number in a file safely:

     use Fcntl qw(:DEFAULT :flock);

     sysopen(FH, "numfile", O_RDWR | O_CREAT)
         or die "can't open numfile: $!";
     # autoflush FH
     $ofh = select(FH); $| = 1; select ($ofh);
     flock(FH, LOCK_EX)
         or die "can't write-lock numfile: $!";

     $num = <FH> || 0;
     seek(FH, 0, 0)
         or die "can't rewind numfile : $!";
     print FH $num+1, "\n"
         or die "can't write numfile: $!";

     truncate(FH, tell(FH))
         or die "can't truncate numfile: $!";
     close(FH)
         or die "can't close numfile: $!";

SEE ALSO
========

   The open and sysopen function in perlfunc(1); the standard open(2),
dup(2), fopen(3), and fdopen(3) manpages; the POSIX documentation.

AUTHOR and COPYRIGHT
====================

   Copyright 1998 Tom Christiansen.

   When included as part of the Standard Version of Perl, or as part of
its complete documentation whether printed or otherwise, this work may be
distributed only under the terms of Perl's Artistic License.  Any
distribution of this file or derivatives thereof outside of that package
require that special arrangements be made with copyright holder.

   Irrespective of its distribution, all code examples in these files are
hereby placed into the public domain.  You are permitted and encouraged to
use this code in your own programs for fun or for profit as you see fit.
A simple comment in the code giving credit would be courteous but is not
required.

HISTORY
=======

   First release: Sat Jan  9 08:09:11 MST 1999


File: perl.info,  Node: perlos2,  Next: perlos390,  Prev: perlmachten,  Up: Top

Perl under OS/2, DOS, Win0.3*, Win0.95 and WinNT.
*************************************************

NAME
====

   perlos2 - Perl under OS/2, DOS, Win0.3*, Win0.95 and WinNT.

SYNOPSIS
========

   One can read this document in the following formats:

     man perlos2
     view perl perlos2
     explorer perlos2.html
     info perlos2

   to list some (not all may be available simultaneously), or it may be
read *as is*: either as `README.os2', or `pod/perlos2.pod'.

   To read the `.INF' version of documentation (*very* recommended)
outside of OS/2, one needs an IBM's reader (may be available on IBM ftp
sites (?)  (URL anyone?)) or shipped with PC DOS 7.0 and IBM's Visual Age
C++ 3.5.

   A copy of a Win* viewer is contained in the "Just add OS/2 Warp" package

     ftp://ftp.software.ibm.com/ps/products/os2/tools/jaow/jaow.zip

   in `?:\JUST_ADD\view.exe'. This gives one an access to EMX's `.INF'
docs as well (text form is available in `/emx/doc' in EMX's distribution).

   Note that if you have `lynx.exe' installed, you can follow WWW links
from this document in `.INF' format. If you have EMX docs installed
correctly, you can follow library links (you need to have `view emxbook'
working by setting `EMXBOOK' environment variable as it is described in
EMX docs).

Target
------

   The target is to make OS/2 the best supported platform for
using/building/developing Perl and *Perl applications*, as well as make
Perl the best language to use under OS/2. The secondary target is to try
to make this work under DOS and Win* as well (but not *too* hard).

   The current state is quite close to this target. Known limitations:

   * Some *nix programs use fork() a lot, but currently fork() is not
     supported after useing dynamically loaded extensions.

   * You need a separate perl executable `perl__.exe' (see `perl__.exe' in
     this node) to use PM code in your application (like the forthcoming
     Perl/Tk).

   * There is no simple way to access WPS objects. The only way I know is
     via `OS2::REXX' extension (see `OS2::REXX' in this node), and we do
     not have access to convenience methods of Object-REXX. (Is it
     possible at all? I know of no Object-REXX API.)

   Please keep this list up-to-date by informing me about other items.

Other OSes
----------

   Since OS/2 port of perl uses a remarkable EMX environment, it can run
(and build extensions, and - possibly - be build itself) under any
environment which can run EMX. The current list is DOS, DOS-inside-OS/2,
Win0.3*, Win0.95 and WinNT. Out of many perl flavors, only one works, see
`"perl_.exe"' in this node.

   Note that not all features of Perl are available under these
environments. This depends on the features the *extender* - most probably
RSX - decided to implement.

   Cf. `Prerequisites' in this node.

Prerequisites
-------------

EMX
     EMX runtime is required (may be substituted by RSX). Note that it is
     possible to make `perl_.exe' to run under DOS without any external
     support by binding `emx.exe'/`rsx.exe' to it, see `emxbind' in this
     node. Note that under DOS for best results one should use RSX
     runtime, which has much more functions working (like fork, `popen'
     and so on). In fact RSX is required if there is no VCPI present. Note
     the RSX requires DPMI.

     Only the latest runtime is supported, currently `0.9c'. Perl may run
     under earlier versions of EMX, but this is not tested.

     One can get different parts of EMX from, say

          ftp://ftp.cdrom.com/pub/os2/emx09c/
          ftp://hobbes.nmsu.edu/os2/unix/emx09c/

     The runtime component should have the name `emxrt.zip'.

     NOTE. It is enough to have `emx.exe'/`rsx.exe' on your path. One does
     not need to specify them explicitly (though this

          emx perl_.exe -de 0

     will work as well.)

RSX
     To run Perl on DPMI platforms one needs RSX runtime. This is needed
     under DOS-inside-OS/2, Win0.3*, Win0.95 and WinNT (see `"Other OSes"'
     in this node). RSX would not work with VCPI only, as EMX would, it
     requires DMPI.

     Having RSX and the latest `sh.exe' one gets a fully functional
     **nix*-ish environment under DOS, say, fork, ```' and pipe-open work.
     In fact, MakeMaker works (for static build), so one can have Perl
     development environment under DOS.

     One can get RSX from, say

          ftp://ftp.cdrom.com/pub/os2/emx09c/contrib
          ftp://ftp.uni-bielefeld.de/pub/systems/msdos/misc
          ftp://ftp.leo.org/pub/comp/os/os2/leo/devtools/emx+gcc/contrib

     Contact the author on `rainer@mathematik.uni-bielefeld.de'.

     The latest `sh.exe' with DOS hooks is available at

          ftp://ftp.math.ohio-state.edu/pub/users/ilya/os2/sh_dos.zip

HPFS
     Perl does not care about file systems, but to install the whole perl
     library intact one needs a file system which supports long file names.

     Note that if you do not plan to build the perl itself, it may be
     possible to fool EMX to truncate file names. This is not supported,
     read EMX docs to see how to do it.

pdksh
     To start external programs with complicated command lines (like with
     pipes in between, and/or quoting of arguments), Perl uses an external
     shell. With EMX port such shell should be named <sh.exe>, and located
     either in the wired-in-during-compile locations (usually `F:/bin'),
     or in configurable location (see `"PERL_SH_DIR"' in this node).

     For best results use EMX pdksh. The soon-to-be-available standard
     binary (5.2.12?) runs under DOS (with `RSX' in this node) as well,
     meanwhile use the binary from

          ftp://ftp.math.ohio-state.edu/pub/users/ilya/os2/sh_dos.zip

Starting Perl programs under OS/2 (and DOS and...)
--------------------------------------------------

   Start your Perl program `foo.pl' with arguments `arg1 arg2 arg3' the
same way as on any other platform, by

     perl foo.pl arg1 arg2 arg3

   If you want to specify perl options `-my_opts' to the perl itself (as
opposed to to your program), use

     perl -my_opts foo.pl arg1 arg2 arg3

   Alternately, if you use OS/2-ish shell, like CMD or 4os2, put the
following at the start of your perl script:

     extproc perl -S -my_opts

   rename your program to `foo.cmd', and start it by typing

     foo arg1 arg2 arg3

   Note that because of stupid OS/2 limitations the full path of the perl
script is not available when you use `extproc', thus you are forced to use
-S perl switch, and your script should be on path. As a plus side, if you
know a full path to your script, you may still start it with

     perl ../../blah/foo.cmd arg1 arg2 arg3

   (note that the argument `-my_opts' is taken care of by the `extproc'
line in your script, see ``extproc' in this node on the first line').

   To understand what the above magic does, read perl docs about -S switch
- see *Note Perlrun: perlrun,, and cmdref about `extproc':

     view perl perlrun
     man perlrun
     view cmdref extproc
     help extproc

   or whatever method you prefer.

   There are also endless possibilities to use *executable extensions* of
4os2, associations of WPS and so on... However, if you use *nixish shell
(like `sh.exe' supplied in the binary distribution), you need to follow
the syntax specified in `"Switches"', *Note Perlrun: perlrun,.

   Note that -S switch enables a search with additional extensions `.cmd',
`.btm', `.bat', `.pl' as well.

Starting OS/2 (and DOS) programs under Perl
-------------------------------------------

   This is what system() (see `system', *Note Perlfunc: perlfunc,), ```'
(see `"I', *Note Perlop: perlop,), and *open pipe* (see `open', *Note
Perlfunc: perlfunc,) are for. (Avoid exec() (see `exec', *Note Perlfunc:
perlfunc,) unless you know what you do).

   Note however that to use some of these operators you need to have a
sh-syntax shell installed (see `"Pdksh"' in this node, `"Frequently asked
questions"' in this node), and perl should be able to find it (see
`"PERL_SH_DIR"' in this node).

   The cases when the shell is used are:

  1. One-argument system() (see `system', *Note Perlfunc: perlfunc,),
     exec() (see `exec', *Note Perlfunc: perlfunc,) with redirection or
     shell meta-characters;

  2. Pipe-open (see `open', *Note Perlfunc: perlfunc,) with the command
     which contains redirection or shell meta-characters;

  3. Backticks ```' (see `"I', *Note Perlop: perlop,) with the command
     which contains redirection or shell meta-characters;

  4. If the executable called by system()/exec()/pipe-open()/```' is a
     script with the "magic" #! line or `extproc' line which specifies
     shell;

  5. If the executable called by system()/exec()/pipe-open()/```' is a
     script without "magic" line, and `$ENV{EXECSHELL}' is set to shell;

  6. If the executable called by system()/exec()/pipe-open()/```' is not
     found;

  7. For globbing (see `glob', *Note Perlfunc: perlfunc,, `"I', *Note
     Perlop: perlop,).

        For the sake of speed for a common case, in the above algorithms
backslashes in the command name are not considered as shell metacharacters.

   Perl starts scripts which begin with cookies `extproc' or #! directly,
without an intervention of shell.  Perl uses the same algorithm to find
the executable as pdksh: if the path on #! line does not work, and
contains /, then the executable is searched in . and on PATH.  To find
arguments for these scripts Perl uses a different algorithm than pdksh: up
to 3 arguments are recognized, and trailing whitespace is stripped.

   If a script does not contain such a cooky, then to avoid calling
`sh.exe', Perl uses the same algorithm as pdksh: if `$ENV{EXECSHELL}' is
set, the script is given as the first argument to this command, if not
set, then `$ENV{COMSPEC} /c' is used (or a hardwired guess if
`$ENV{COMSPEC}' is not set).

   If starting scripts directly, Perl will use exactly the same algorithm
as for the search of script given by -S command-line option: it will look
in the current directory, then on components of `$ENV{PATH}' using the
following order of appended extensions: no extension, `.cmd', `.btm',
`.bat', `.pl'.

   Note that Perl will start to look for scripts only if OS/2 cannot start
the specified application, thus `system 'blah'' will not look for a script
if there is an executable file `blah.exe' *anywhere* on PATH.

   Note also that executable files on OS/2 can have an arbitrary extension,
but `.exe' will be automatically appended if no dot is present in the name.
The workaround as as simple as that:  since `blah.' and `blah' denote the
same file, to start an executable residing in file `n:/bin/blah' (no
extension) give an argument `n:/bin/blah.' to system().

   The last note is that currently it is not straightforward to start PM
programs from VIO (=text-mode) Perl process and visa versa.  Either ensure
that shell will be used, as in `system 'cmd /c epm'', or start it using
optional arguments to system() documented in `OS2::Process' module.  This
is considered a bug and should be fixed soon.

Frequently asked questions
==========================

I cannot run external programs
------------------------------


     Did you run your programs with -w switch? See `Starting OS' in this
     node.


     Do you try to run internal shell commands, like ``copy a b`'
     (internal for `cmd.exe'), or ``glob a*b`' (internal for ksh)? You
     need to specify your shell explicitly, like ``cmd /c copy a b`',
     since Perl cannot deduce which commands are internal to your shell.

I cannot embed perl into my program, or use `perl.dll' from my program.
-----------------------------------------------------------------------

Is your program EMX-compiled with `-Zmt -Zcrtdll'?
     If not, you need to build a stand-alone DLL for perl. Contact me, I
     did it once. Sockets would not work, as a lot of other stuff.

Did you use *Note ExtUtils/Embed: (pm.info)ExtUtils/Embed,?
     I had reports it does not work. Somebody would need to fix it.

```' and pipe-open do not work under DOS.
-----------------------------------------

   This may a variant of just `"I cannot run external programs"' in this
node, or a deeper problem. Basically: you *need* RSX (see
`"Prerequisites"' in this node) for these commands to work, and you may
need a port of `sh.exe' which understands command arguments. One of such
ports is listed in `"Prerequisites"' in this node under RSX. Do not forget
to set variable ``"PERL_SH_DIR"' in this node' as well.

   DPMI is required for RSX.

Cannot start `find.exe "pattern" file'
--------------------------------------

   Use one of

     system 'cmd', '/c', 'find "pattern" file';
     `cmd /c 'find "pattern" file'`

   This would start `find.exe' via `cmd.exe' via `sh.exe' via `perl.exe',
but this is a price to pay if you want to use non-conforming program. In
fact `find.exe' cannot be started at all using C library API only.
Otherwise the following command-lines were equivalent:

     find "pattern" file
     find pattern file

INSTALLATION
============

Automatic binary installation
-----------------------------

   The most convenient way of installing perl is via perl installer
`install.exe'. Just follow the instructions, and 99% of the installation
blues would go away.

   Note however, that you need to have `unzip.exe' on your path, and EMX
environment running. The latter means that if you just installed EMX, and
made all the needed changes to `Config.sys', you may need to reboot in
between. Check EMX runtime by running

     emxrev

   A folder is created on your desktop which contains some useful objects.

   *Things not taken care of by automatic binary installation:*

PERL_BADLANG
     may be needed if you change your codepage after perl installation,
     and the new value is not supported by EMX. See `"PERL_BADLANG"' in
     this node.

`PERL_BADFREE'
     see `"PERL_BADFREE"' in this node.

Config.pm
     This file resides somewhere deep in the location you installed your
     perl library, find it out by

          perl -MConfig -le "print $INC{'Config.pm'}"

     While most important values in this file *are* updated by the binary
     installer, some of them may need to be hand-edited. I know no such
     data, please keep me informed if you find one.

   NOTE. Because of a typo the binary installer of 5.00305 would install a
variable `PERL_SHPATH' into `Config.sys'. Please remove this variable and
put ``PERL_SH_DIR' in this node' instead.

Manual binary installation
--------------------------

   As of version 5.00305, OS/2 perl binary distribution comes split into
11 components. Unfortunately, to enable configurable binary installation,
the file paths in the zip files are not absolute, but relative to some
directory.

   Note that the extraction with the stored paths is still necessary
(default with unzip, specify -d to pkunzip). However, you need to know
where to extract the files. You need also to manually change entries in
`Config.sys' to reflect where did you put the files. Note that if you have
some primitive unzipper (like pkunzip), you may get a lot of
warnings/errors during unzipping. Upgrade to `(w)unzip'.

   Below is the sample of what to do to reproduce the configuration on my
machine:

Perl VIO and PM executables (dynamically linked)
          unzip perl_exc.zip *.exe *.ico -d f:/emx.add/bin
          unzip perl_exc.zip *.dll -d f:/emx.add/dll

     (have the directories with `*.exe' on PATH, and `*.dll' on LIBPATH);

Perl_ VIO executable (statically linked)
          unzip perl_aou.zip -d f:/emx.add/bin

     (have the directory on PATH);

Executables for Perl utilities
          unzip perl_utl.zip -d f:/emx.add/bin

     (have the directory on PATH);

Main Perl library
          unzip perl_mlb.zip -d f:/perllib/lib

     If this directory is preserved, you do not need to change anything.
     However, for perl to find it if it is changed, you need to `set
     PERLLIB_PREFIX' in `Config.sys', see `"PERLLIB_PREFIX"' in this node.

Additional Perl modules
          unzip perl_ste.zip -d f:/perllib/lib/site_perl

     If you do not change this directory, do nothing. Otherwise put this
     directory and subdirectory `./os2' in PERLLIB or PERL5LIB variable.
     Do not use PERL5LIB unless you have it set already. See
     `"ENVIRONMENT"', *Note Perl: perl,.

Tools to compile Perl modules
          unzip perl_blb.zip -d f:/perllib/lib

     If this directory is preserved, you do not need to change anything.
     However, for perl to find it if it is changed, you need to `set
     PERLLIB_PREFIX' in `Config.sys', see `"PERLLIB_PREFIX"' in this node.

Manpages for Perl and utilities
          unzip perl_man.zip -d f:/perllib/man

     This directory should better be on `MANPATH'. You need to have a
     working man to access these files.

Manpages for Perl modules
          unzip perl_mam.zip -d f:/perllib/man

     This directory should better be on `MANPATH'. You need to have a
     working man to access these files.

Source for Perl documentation
          unzip perl_pod.zip -d f:/perllib/lib

     This is used by by perldoc program (see `perldoc' in this node), and
     may be used to generate HTML documentation usable by WWW browsers, and
     documentation in zillions of other formats: info, `LaTeX', `Acrobat',
     `FrameMaker' and so on.

Perl manual in `.INF' format
          unzip perl_inf.zip -d d:/os2/book

     This directory should better be on `BOOKSHELF'.

Pdksh
          unzip perl_sh.zip -d f:/bin

     This is used by perl to run external commands which explicitly
     require shell, like the commands using *redirection* and *shell
     metacharacters*. It is also used instead of explicit `/bin/sh'.

     Set PERL_SH_DIR (see `"PERL_SH_DIR"' in this node) if you move
     `sh.exe' from the above location.

     *Note.* It may be possible to use some other sh-compatible shell
     (*not tested*).

   After you installed the components you needed and updated the
`Config.sys' correspondingly, you need to hand-edit Config.pm. This file
resides somewhere deep in the location you installed your perl library,
find it out by

     perl -MConfig -le "print $INC{'Config.pm'}"

   You need to correct all the entries which look like file paths (they
currently start with `f:/').

Warning
-------

   The automatic and manual perl installation leave precompiled paths
inside perl executables. While these paths are overwriteable (see
`"PERLLIB_PREFIX"' in this node, `"PERL_SH_DIR"' in this node), one may
get better results by binary editing of paths inside the executables/DLLs.

Accessing documentation
=======================

   Depending on how you built/installed perl you may have (otherwise
identical) Perl documentation in the following formats:

OS/2 `.INF' file
----------------

   Most probably the most convenient form. Under OS/2 view it as

     view perl
     view perl perlfunc
     view perl less
     view perl ExtUtils::MakeMaker

   (currently the last two may hit a wrong location, but this may improve
soon). Under Win* see `"SYNOPSIS"' in this node.

   If you want to build the docs yourself, and have *OS/2 toolkit*, run

     pod2ipf > perl.ipf

   in `/perllib/lib/pod' directory, then

     ipfc /inf perl.ipf

   (Expect a lot of errors during the both steps.) Now move it on your
BOOKSHELF path.

Plain text
----------

   If you have perl documentation in the source form, perl utilities
installed, and GNU groff installed, you may use

     perldoc perlfunc
     perldoc less
     perldoc ExtUtils::MakeMaker

   to access the perl documentation in the text form (note that you may get
better results using perl manpages).

   Alternately, try running pod2text on `.pod' files.

Manpages
--------

   If you have man installed on your system, and you installed perl
manpages, use something like this:

     man perlfunc
     man 3 less
     man ExtUtils.MakeMaker

   to access documentation for different components of Perl. Start with

     man perl

   Note that dot (.) is used as a package separator for documentation for
packages, and as usual, sometimes you need to give the section - 3 above -
to avoid shadowing by the *less(1) manpage*.

   Make sure that the directory above the directory with manpages is on
our `MANPATH', like this

     set MANPATH=c:/man;f:/perllib/man

HTML
----

   If you have some WWW browser available, installed the Perl
documentation in the source form, and Perl utilities, you can build HTML
docs. Cd to directory with `.pod' files, and do like this

     cd f:/perllib/lib/pod
     pod2html

   After this you can direct your browser the file `perl.html' in this
directory, and go ahead with reading docs, like this:

     explore file:///f:/perllib/lib/pod/perl.html

   Alternatively you may be able to get these docs prebuilt from CPAN.

GNU info files
--------------

   Users of Emacs would appreciate it very much, especially with `CPerl'
mode loaded. You need to get latest `pod2info' from CPAN, or, alternately,
prebuilt info pages.

`.PDF' files
------------

   for `Acrobat' are available on CPAN (for slightly old version of perl).

`LaTeX' docs
------------

   can be constructed using `pod2latex'.

BUILD
=====

   Here we discuss how to build Perl under OS/2. There is an alternative
(but maybe older) view on `http:' in this node.

Prerequisites
-------------

   You need to have the latest EMX development environment, the full GNU
tool suite (gawk renamed to awk, and GNU `find.exe' earlier on path than
the OS/2 `find.exe', same with `sort.exe', to check use

     find --version
     sort --version

   ). You need the latest version of pdksh installed as `sh.exe'.

   Check that you have *BSD* libraries and headers installed, and -
optionally - Berkeley DB headers and libraries, and crypt.

   Possible locations to get this from are

     ftp://hobbes.nmsu.edu/os2/unix/
     ftp://ftp.cdrom.com/pub/os2/unix/
     ftp://ftp.cdrom.com/pub/os2/dev32/
     ftp://ftp.cdrom.com/pub/os2/emx09c/

   It is reported that the following archives contain enough utils to
build perl: gnufutil.zip, gnusutil.zip, gnututil.zip, gnused.zip,
gnupatch.zip, gnuawk.zip, gnumake.zip and ksh527rt.zip.  Note that all
these utilities are known to be available from LEO:

     ftp://ftp.leo.org/pub/comp/os/os2/leo/gnu

   Make sure that no copies or perl are currently running.  Later steps of
the build may fail since an older version of perl.dll loaded into memory
may be found.

   Also make sure that you have `/tmp' directory on the current drive, and
. directory in your `LIBPATH'. One may try to correct the latter condition
by

     set BEGINLIBPATH .

   if you use something like `CMD.EXE' or latest versions of `4os2.exe'.

   Make sure your gcc is good for `-Zomf' linking: run `omflibs' script in
`/emx/lib' directory.

   Check that you have link386 installed. It comes standard with OS/2, but
may be not installed due to customization. If typing

     link386

   shows you do not have it, do *Selective install*, and choose `Link
object modules' in *Optional system utilities/More*. If you get into
link386, press `Ctrl-C'.

Getting perl source
-------------------

   You need to fetch the latest perl source (including developers
releases). With some probability it is located in

     http://www.perl.com/CPAN/src/5.0
     http://www.perl.com/CPAN/src/5.0/unsupported

   If not, you may need to dig in the indices to find it in the directory
of the current maintainer.

   Quick cycle of developers release may break the OS/2 build time to
time, looking into

     http://www.perl.com/CPAN/ports/os2/ilyaz/

   may indicate the latest release which was publicly released by the
maintainer. Note that the release may include some additional patches to
apply to the current source of perl.

   Extract it like this

     tar vzxf perl5.00409.tar.gz

   You may see a message about errors while extracting Configure. This is
because there is a conflict with a similarly-named file configure.

   Change to the directory of extraction.

Application of the patches
--------------------------

   You need to apply the patches in `./os2/diff.*' like this:

     gnupatch -p0 < os2\diff.configure

   You may also need to apply the patches supplied with the binary
distribution of perl.

   Note also that the `db.lib' and `db.a' from the EMX distribution are
not suitable for multi-threaded compile (note that currently perl is not
multithread-safe, but is compiled as multithreaded for compatibility with
XFree86-OS/2). Get a corrected one from

     ftp://ftp.math.ohio-state.edu/pub/users/ilya/os2/db_mt.zip

   To make -p filetest work, one may also need to apply the following patch
to EMX headers:

     --- /emx/include/sys/stat.h.orig	Thu May 23 13:48:16 1996
     +++ /emx/include/sys/stat.h	Sun Jul 12 14:11:32 1998
     @@ -53,7 +53,7 @@ struct stat
      #endif

     #if !defined (S_IFMT)
       -#define S_IFMT   0160000  /* Mask for file type */
       +#define S_IFMT   0170000  /* Mask for file type */
     #define S_IFIFO  0010000  /* Pipe */
     #define S_IFCHR  0020000  /* Character device */
     #define S_IFDIR  0040000  /* Directory */

Hand-editing
------------

   You may look into the file `./hints/os2.sh' and correct anything wrong
you find there. I do not expect it is needed anywhere.

Making
------

     sh Configure -des -D prefix=f:/perllib

   prefix means: where to install the resulting perl library. Giving
correct prefix you may avoid the need to specify `PERLLIB_PREFIX', see
`"PERLLIB_PREFIX"' in this node.

   *Ignore the message about missing `ln', and about -c option to tr*. In
fact if you can trace where the latter spurious warning comes from, please
inform me.

   Now

     make

   At some moment the built may die, reporting a *version mismatch* or
*unable to run `perl'*. This means that most of the build has been
finished, and it is the time to move the constructed `perl.dll' to some
*absolute* location in LIBPATH. After this is done the build should finish
without a lot of fuss. *One can avoid the interruption if one has the
correct prebuilt version of `perl.dll' on LIBPATH, but probably this is
not needed anymore, since `miniperl.exe' is linked statically now.*

   Warnings which are safe to ignore: *mkfifo() redefined* inside
`POSIX.c'.

Testing
-------

   If you haven't yet moved perl.dll onto LIBPATH, do it now
(alternatively, if you have a previous perl installation you'd rather not
disrupt until this one is installed, copy perl.dll to the t directory).

   Now run

     make test

   All tests should succeed (with some of them skipped).  Note that on one
of the systems I see intermittent failures of `io/pipe.t' subtest 9.  Any
help to track what happens with this test is appreciated.

   Some tests may generate extra messages similar to

A lot of `bad free'
     in database tests related to Berkeley DB. This is a confirmed bug of
     DB. You may disable this warnings, see `"PERL_BADFREE"' in this node.

     There is not much we can do with it (but apparently it does not cause
     any real error with data).

Process terminated by SIGTERM/SIGINT
     This is a standard message issued by OS/2 applications. *nix
     applications die in silence. It is considered a feature. One can
     easily disable this by appropriate sighandlers.

     However the test engine bleeds these message to screen in unexpected
     moments. Two messages of this kind should be present during testing.

   Two `lib/io_*' tests may generate popups (system error `SYS3175'), but
should succeed anyway.  This is due to a bug of EMX related to fork()ing
with dynamically loaded libraries.

   I submitted a patch to EMX which makes it possible to fork() with EMX
dynamic libraries loaded, which makes `lib/io*' tests pass without
skipping offended tests. This means that soon the number of skipped tests
may decrease yet more.

   To get finer test reports, call

     perl t/harness

   The report with `io/pipe.t' failing may look like this:

     Failed Test  Status Wstat Total Fail  Failed  List of failed
     ------------------------------------------------------------
     io/pipe.t                    12    1   8.33%  9
     7 tests skipped, plus 56 subtests skipped.
     Failed 1/195 test scripts, 99.49% okay. 1/6542 subtests failed, 99.98% okay.

   The reasons for most important skipped tests are:

`op/fs.t'
       1. Checks atime and mtime of stat() - unfortunately, HPFS provides
          only 2sec time granularity (for compatibility with FAT?).

       2. Checks `truncate()' on a filehandle just opened for write - I do
          not know why this should or should not work.


`lib/io_pipe.t'
     Checks IO::Pipe module. Some feature of EMX - test fork()s with
     dynamic extension loaded - unsupported now.

`lib/io_sock.t'
     Checks IO::Socket module. Some feature of EMX - test fork()s with
     dynamic extension loaded - unsupported now.

`op/stat.t'
     Checks stat(). Tests:

       1. Checks atime and mtime of stat() - unfortunately, HPFS provides
          only 2sec time granularity (for compatibility with FAT?).


`lib/io_udp.t'
     It never terminates, apparently some bug in storing the last socket
     from which we obtained a message.

Installing the built perl
-------------------------

   If you haven't yet moved perl.dll onto LIBPATH, do it now.

   Run

     make install

   It would put the generated files into needed locations. Manually put
`perl.exe', `perl__.exe' and `perl___.exe' to a location on your PATH,
`perl.dll' to a location on your LIBPATH.

   Run

     make cmdscripts INSTALLCMDDIR=d:/ir/on/path

   to convert perl utilities to `.cmd' files and put them on PATH. You
need to put `.EXE'-utilities on path manually. They are installed in
`$prefix/bin', here `$prefix' is what you gave to Configure, see `Making'
in this node.

`a.out'-style build
-------------------

   Proceed as above, but make `perl_.exe' (see `"perl_.exe"' in this node)
by

     make perl_

   test and install by

     make aout_test
     make aout_install

   Manually put `perl_.exe' to a location on your PATH.

   Since `perl_' has the extensions prebuilt, it does not suffer from the
*dynamic extensions + fork()* syndrome, thus the failing tests look like

     Failed Test  Status Wstat Total Fail  Failed  List of failed
     ---------------------------------------------------------------
     io/fs.t                      26   11  42.31%  2-5, 7-11, 18, 25
     op/stat.t                    56    5   8.93%  3-4, 20, 35, 39
     Failed 2/118 test scripts, 98.31% okay. 16/2445 subtests failed, 99.35% okay.

   *Note.* The build process for `perl_' *does not know* about all the
dependencies, so you should make sure that anything is up-to-date, say, by
doing

     make perl.dll

   first.

Build FAQ
=========

Some / became \ in pdksh.
-------------------------

   You have a very old pdksh. See `Prerequisites' in this node.

`'errno'' - unresolved external
-------------------------------

   You do not have MT-safe `db.lib'. See `Prerequisites' in this node.

Problems with tr or sed
-----------------------

   reported with very old version of tr and sed.

Some problem (forget which ;-)
------------------------------

   You have an older version of `perl.dll' on your LIBPATH, which broke
the build of extensions.

Library ... not found
---------------------

   You did not run `omflibs'. See `Prerequisites' in this node.

Segfault in make
----------------

   You use an old version of GNU make. See `Prerequisites' in this node.

Specific (mis)features of OS/2 port
===================================

setpriority, getpriority
------------------------

   Note that these functions are compatible with *nix, not with the older
ports of '94 - 95. The priorities are absolute, go from 32 to -95, lower
is quicker. 0 is the default priority.

`system()'
----------

   Multi-argument form of `system()' allows an additional numeric
argument. The meaning of this argument is described in *Note OS2/Process:
(pm.info)OS2/Process,.

`extproc' on the first line
---------------------------

   If the first chars of a script are `"extproc "', this line is treated
as #!-line, thus all the switches on this line are processed (twice if
script was started via cmd.exe).

Additional modules:
-------------------

   *Note OS2/Process: (pm.info)OS2/Process,, `OS2::REXX' in this node,
`OS2::PrfDB' in this node, `OS2::ExtAttr' in this node. These modules
provide access to additional numeric argument for system and to the list
of the running processes, to DLLs having functions with REXX signature and
to REXX runtime, to OS/2 databases in the `.INI' format, and to Extended
Attributes.

   Two additional extensions by Andreas Kaiser, `OS2::UPM', and
`OS2::FTP', are included into my ftp directory, mirrored on CPAN.

Prebuilt methods:
-----------------

`File::Copy::syscopy'
     used by `File::Copy::copy', see *Note File/Copy: (pm.info)File/Copy,.

`DynaLoader::mod2fname'
     used by DynaLoader for DLL name mangling.

`Cwd::current_drive()'
     Self explanatory.

`Cwd::sys_chdir(name)'
     leaves drive as it is.

`Cwd::change_drive(name)'
`Cwd::sys_is_absolute(name)'
     means has drive letter and is_rooted.

`Cwd::sys_is_rooted(name)'
     means has leading `[/\\]' (maybe after a drive-letter:).

`Cwd::sys_is_relative(name)'
     means changes with current dir.

`Cwd::sys_cwd(name)'
     Interface to cwd from EMX. Used by `Cwd::cwd'.

`Cwd::sys_abspath(name, dir)'
     Really really odious function to implement. Returns absolute name of
     file which would have name if CWD were dir.  Dir defaults to the
     current dir.

`Cwd::extLibpath([type])'
     Get current value of extended library search path. If type is present
     and *true*, works with END_LIBPATH, otherwise with `BEGIN_LIBPATH'.

`Cwd::extLibpath_set( path [, type ] )'
     Set current value of extended library search path. If type is present
     and *true*, works with END_LIBPATH, otherwise with `BEGIN_LIBPATH'.

   (Note that some of these may be moved to different libraries -
eventually).

Misfeatures
-----------


     Since `flock(3)' in this node is present in EMX, but is not
     functional, it is emulated by perl.  To disable the emulations, set
     environment variable `USE_PERL_FLOCK=0'.


     Here is the list of things which may be "broken" on EMX (from EMX
     docs):

        * The functions `recvmsg(3)' in this node, `sendmsg(3)' in this
          node, and `socketpair(3)' in this node are not implemented.

        * `sock_init(3)' in this node is not required and not implemented.

        * `flock(3)' in this node is not yet implemented (dummy function).
          (Perl has a workaround.)

        * `kill(3)' in this node:  Special treatment of PID=0, PID=1 and
          PID=-1 is not implemented.

        * `waitpid(3)' in this node:

               WUNTRACED
               	      Not implemented.
               waitpid() is not implemented for negative values of PID.

     Note that `kill -9' does not work with the current version of EMX.


     Since `sh.exe' is used for globing (see `glob', *Note Perlfunc:
     perlfunc,), the bugs of `sh.exe' plague perl as well.

     In particular, uppercase letters do not work in `[...]'-patterns with
     the current pdksh.

Modifications
-------------

   Perl modifies some standard C library calls in the following ways:

`popen'
     `my_popen' uses `sh.exe' if shell is required, cf. `"PERL_SH_DIR"' in
     this node.

tmpnam
     is created using `TMP' or `TEMP' environment variable, via tempnam.

tmpfile
     If the current directory is not writable, file is created using
     modified tmpnam, so there may be a race condition.

ctermid
     a dummy implementation.

stat
     `os2_stat' special-cases `/dev/tty' and `/dev/con'.

flock
     Since `flock(3)' in this node is present in EMX, but is not
     functional, it is emulated by perl.  To disable the emulations, set
     environment variable `USE_PERL_FLOCK=0'.

Perl flavors
============

   Because of idiosyncrasies of OS/2 one cannot have all the eggs in the
same basket (though EMX environment tries hard to overcome this
limitations, so the situation may somehow improve). There are 4
executables for Perl provided by the distribution:

`perl.exe'
----------

   The main workhorse. This is a chimera executable: it is compiled as an
`a.out'-style executable, but is linked with `omf'-style dynamic library
`perl.dll', and with dynamic CRT DLL. This executable is a VIO application.

   It can load perl dynamic extensions, and it can fork(). Unfortunately,
with the current version of EMX it cannot fork() with dynamic extensions
loaded (may be fixed by patches to EMX).

   *Note.* Keep in mind that fork() is needed to open a pipe to yourself.

`perl_.exe'
-----------

   This is a statically linked `a.out'-style executable. It can fork(),
but cannot load dynamic Perl extensions. The supplied executable has a lot
of extensions prebuilt, thus there are situations when it can perform
tasks not possible using `perl.exe', like fork()ing when having some
standard extension loaded. This executable is a VIO application.

   *Note.* A better behaviour could be obtained from `perl.exe' if it were
statically linked with standard *Perl extensions*, but dynamically linked
with the *Perl DLL* and CRT DLL. Then it would be able to fork() with
standard extensions, and would be able to dynamically load arbitrary
extensions. Some changes to Makefiles and hint files should be necessary
to achieve this.

   *This is also the only executable with does not require OS/2.* The
friends locked into `M$' world would appreciate the fact that this
executable runs under DOS, Win0.3*, Win0.95 and WinNT with an appropriate
extender. See `"Other OSes"' in this node.

`perl__.exe'
------------

   This is the same executable as `perl___.exe', but it is a PM
application.

   *Note.* Usually STDIN, STDERR, and STDOUT of a PM application are
redirected to `nul'. However, it is possible to see them if you start
`perl__.exe' from a PM program which emulates a console window, like
*Shell mode* of Emacs or EPM. Thus it *is possible* to use Perl debugger
(see *Note Perldebug: perldebug,) to debug your PM application.

   This flavor is required if you load extensions which use PM, like the
forthcoming `Perl/Tk'.

`perl___.exe'
-------------

   This is an `omf'-style executable which is dynamically linked to
`perl.dll' and CRT DLL. I know no advantages of this executable over
`perl.exe', but it cannot fork() at all. Well, one advantage is that the
build process is not so convoluted as with `perl.exe'.

   It is a VIO application.

Why strange names?
------------------

   Since Perl processes the #!-line (cf.  `DESCRIPTION', *Note Perlrun:
perlrun,, `Switches', *Note Perlrun: perlrun,, `"Not a perl script"',
*Note Perldiag: perldiag,, `"No Perl script found in input"', *Note
Perldiag: perldiag,), it should know when a program *is a Perl*. There is
some naming convention which allows Perl to distinguish correct lines from
wrong ones. The above names are almost the only names allowed by this
convention which do not contain digits (which have absolutely different
semantics).

Why dynamic linking?
--------------------

   Well, having several executables dynamically linked to the same huge
library has its advantages, but this would not substantiate the additional
work to make it compile. The reason is stupid-but-quick "hard" dynamic
linking used by OS/2.

   The address tables of DLLs are patched only once, when they are loaded.
The addresses of entry points into DLLs are guaranteed to be the same for
all programs which use the same DLL, which reduces the amount of runtime
patching - once DLL is loaded, its code is read-only.

   While this allows some performance advantages, this makes life terrible
for developers, since the above scheme makes it impossible for a DLL to be
resolved to a symbol in the .EXE file, since this would need a DLL to have
different relocations tables for the executables which use it.

   However, a Perl extension is forced to use some symbols from the perl
executable, say to know how to find the arguments provided on the perl
internal evaluation stack. The solution is that the main code of
interpreter should be contained in a DLL, and the `.EXE' file just loads
this DLL into memory and supplies command-arguments.

   This *greatly* increases the load time for the application (as well as
the number of problems during compilation). Since interpreter is in a DLL,
the CRT is basically forced to reside in a DLL as well (otherwise
extensions would not be able to use CRT).

Why chimera build?
------------------

   Current EMX environment does not allow DLLs compiled using Unixish
`a.out' format to export symbols for data. This forces `omf'-style compile
of `perl.dll'.

   Current EMX environment does not allow `.EXE' files compiled in `omf'
format to fork(). fork() is needed for exactly three Perl operations:

explicit fork()
     in the script, and

open FH, "|-"
open FH, "-|"
     opening pipes to itself.

   While these operations are not questions of life and death, a lot of
useful scripts use them. This forces `a.out'-style compile of `perl.exe'.

ENVIRONMENT
===========

   Here we list environment variables with are either OS/2- and DOS- and
Win*-specific, or are more important under OS/2 than under other OSes.

`PERLLIB_PREFIX'
----------------

   Specific for EMX port. Should have the form

     path1;path2

   or

     path1 path2

   If the beginning of some prebuilt path matches `path1', it is
substituted with `path2'.

   Should be used if the perl library is moved from the default location
in preference to `PERL(5)LIB', since this would not leave wrong entries in
@INC.  Say, if the compiled version of perl looks for @INC in
`f:/perllib/lib', and you want to install the library in `h:/opt/gnu', do

     set PERLLIB_PREFIX=f:/perllib/lib;h:/opt/gnu

PERL_BADLANG
------------

   If 1, perl ignores setlocale() failing. May be useful with some strange
locales.

`PERL_BADFREE'
--------------

   If 1, perl would not warn of in case of unwarranted free(). May be
useful in conjunction with the module DB_File, since Berkeley DB memory
handling code is buggy.

PERL_SH_DIR
-----------

   Specific for EMX port. Gives the directory part of the location for
`sh.exe'.

`USE_PERL_FLOCK'
----------------

   Specific for EMX port. Since `flock(3)' in this node is present in EMX,
but is not functional, it is emulated by perl.  To disable the emulations,
set environment variable `USE_PERL_FLOCK=0'.

`TMP' or `TEMP'
---------------

   Specific for EMX port. Used as storage place for temporary files, most
notably -e scripts.

Evolution
=========

   Here we list major changes which could make you by surprise.

Priorities
----------

   setpriority and getpriority are not compatible with earlier ports by
Andreas Kaiser. See `"setpriority, getpriority"'.

DLL name mangling
-----------------

   With the release 5.003_01 the dynamically loadable libraries should be
rebuilt. In particular, DLLs are now created with the names which contain
a checksum, thus allowing workaround for OS/2 scheme of caching DLLs.

Threading
---------

   As of release 5.003_01 perl is linked to multithreaded CRT DLL.  If
perl itself is not compiled multithread-enabled, so will not be perl
malloc(). However, extensions may use multiple thread on their own risk.

   Needed to compile `Perl/Tk' for XFree86-OS/2 out-of-the-box.

Calls to external programs
--------------------------

   Due to a popular demand the perl external program calling has been
changed wrt Andreas Kaiser's port.  If perl needs to call an external
program *via shell*, the `f:/bin/sh.exe' will be called, or whatever is
the override, see `"PERL_SH_DIR"' in this node.

   Thus means that you need to get some copy of a `sh.exe' as well (I use
one from pdksh). The drive `F:' above is set up automatically during the
build to a correct value on the builder machine, but is overridable at
runtime,

   *Reasons:* a consensus on `perl5-porters' was that perl should use one
non-overridable shell per platform. The obvious choices for OS/2 are
`cmd.exe' and `sh.exe'. Having perl build itself would be impossible with
`cmd.exe' as a shell, thus I picked up `sh.exe'. Thus assures almost 100%
compatibility with the scripts coming from *nix. As an added benefit this
works as well under DOS if you use DOS-enabled port of pdksh (see
`"Prerequisites"' in this node).

   *Disadvantages:* currently `sh.exe' of pdksh calls external programs
via fork()/exec(), and there is no functioning exec() on OS/2. exec() is
emulated by EMX by asyncroneous call while the caller waits for child
completion (to pretend that the pid did not change). This means that 1
*extra* copy of `sh.exe' is made active via fork()/exec(), which may lead
to some resources taken from the system (even if we do not count extra
work needed for fork()ing).

   Note that this a lesser issue now when we do not spawn `sh.exe' unless
needed (metachars found).

   One can always start `cmd.exe' explicitly via

     system 'cmd', '/c', 'mycmd', 'arg1', 'arg2', ...

   If you need to use `cmd.exe', and do not want to hand-edit thousands of
your scripts, the long-term solution proposed on p5-p is to have a
directive

     use OS2::Cmd;

   which will override system(), exec(), ```', and `open(,'...|')'. With
current perl you may override only system(), readpipe() - the explicit
version of ```', and maybe exec(). The code will substitute the
one-argument call to system() by `CORE::system('cmd.exe', '/c', shift)'.

   If you have some working code for `OS2::Cmd', please send it to me, I
will include it into distribution. I have no need for such a module, so
cannot test it.

   For the details of the current situation with calling external programs,
see `Starting OS' in this node.


     External scripts may be called by name.  Perl will try the same
     extensions as when processing -S command-line switch.

Memory allocation
-----------------

   Perl uses its own malloc() under OS/2 - interpreters are usually
malloc-bound for speed, but perl is not, since its malloc is
lightning-fast.  Perl-memory-usage-tuned benchmarks show that Perl's
malloc is 5 times quickier than EMX one.  I do not have convincing data
about memory footpring, but a (pretty random) benchmark showed that Perl
one is 5% better.

   Combination of perl's malloc() and rigid DLL name resolution creates a
special problem with library functions which expect their return value to
be free()d by system's free(). To facilitate extensions which need to call
such functions, system memory-allocation functions are still available with
the prefix `emx_' added. (Currently only DLL perl has this, it should
propagate to `perl_.exe' shortly.)

Threads
-------

   One can build perl with thread support enabled by providing `-D
usethreads' option to Configure.  Currently OS/2 support of threads is very
preliminary.

   Most notable problems:

`COND_WAIT'
     may have a race condition.  Needs a reimplementation (in terms of
     chaining waiting threads, with linker list stored in per-thread
     structure?).

`os2.c'
     has a couple of static variables used in OS/2-specific functions.
     (Need to be moved to per-thread structure, or serialized?)

   Note that these problems should not discourage experimenting, since they
have a low probability of affecting small programs.

AUTHOR
======

   Ilya Zakharevich, ilya@math.ohio-state.edu

SEE ALSO
========

   perl(1).


File: perl.info,  Node: perlos390,  Next: perlvms,  Prev: perlos2,  Up: Top

building and installing Perl for OS/390.
****************************************

NAME
====

   README.os390 - building and installing Perl for OS/390.

SYNOPSIS
========

   This document will help you Configure, build, test and install Perl on
OS/390 Unix System Services.

DESCRIPTION
===========

   This is a fully ported perl for OS/390 Release 3, 5 and 6.  It may work
on other versions, but those are the ones we've tested it on.

   You may need to carry out some system configuration tasks before
running the Configure script for perl.

Unpacking
---------

   Gunzip/gzip for OS/390 is discussed at:

     http://www.s390.ibm.com/products/oe/bpxqp1.html

   to extract an ASCII tar archive on OS/390, try this:

     pax -o to=IBM-1047,from=ISO8859-1 -r < latest.tar

Setup and utilities
-------------------

   Be sure that your yacc installation is in place including any necessary
parser template files. If you have not already done so then be sure to:

     cp /samples/yyparse.c /etc

   This may also be a good time to ensure that your /etc/protocol file and
either your /etc/resolv.conf or /etc/hosts files are in place.

   GNU make for OS/390, which may be required for the build of perl, is
available from:

     http://www.mks.com/s390/gnu/index.htm

Configure
---------

   Once you've unpacked the distribution, run "sh Configure" (see INSTALL
for a full discussion of the Configure options).  There is a "hints" file
for os390 that specifies the correct values for most things.  Some things
to watch out for include:

   * Some of the parser default template files in /samples are needed in
     /etc.  In particular be sure that you at least copy
     /samples/yyparse.c to /etc before running perl's Configure.  This
     step ensures successful extraction of EBCDIC versions of parser files
     such as perly.c.

   * This port doesn't support dynamic loading.  Although OS/390 has
     support for DLLs, there are some differences that cause problems for
     perl.

   * You may see a "WHOA THERE!!!" message for $d_shmatprototype it is OK
     to keep the recommended "define".

   * Don't turn on the compiler optimization flag "-O".  There's a bug in
     either the optimizer or perl that causes perl to not work correctly
     when the optimizer is on.

   * Some of the configuration files in /etc used by the networking APIs
     are either missing or have the wrong names.  In particular, make sure
     that there's either an /etc/resolv.conf or and /etc/hosts, so that
     gethostbyname() works, and make sure that the file /etc/proto has
     been renamed to /etc/protocol (NOT /etc/protocols, as used by other
     Unix systems).

Build, test, install
--------------------

   Simply put:

     sh Configure
     make
     make test

   if everything looks ok then:

     make install

   this last step may or may not require UID=0 privileges depending on how
you answered the questions that Configure asked and whether or not you
have write access to the directories you specified.

Usage Hints
-----------

   When using perl on OS/390 please keep in mind that the EBCDIC and ASCII
character sets are different.  Perl builtin functions that may behave
differently under EBCDIC are mentioned in the perlport.pod document.

   OpenEdition (UNIX System Services) does not (yet) support the #! means
of script invokation.  See:

     head `whence perldoc`

   for an example of how to use the "eval exec" trick to ask the shell to
have perl run your scripts for you.

Extensions
----------

   You can build xs based extensions to Perl for OS/390 but will need to
follow the instructions in ExtUtils::MakeMaker for building statically
linked perl binaries.  In most cases people have reported better results
with GNU make rather than the system's /bin/make.

AUTHORS
=======

   David Fiander and Peter Prymmer.

SEE ALSO
========

   `INSTALL' in this node, *Note Perlport: perlport,, *Note
ExtUtils/MakeMaker: (pm.info)ExtUtils/MakeMaker,.

Mailing list
------------

   The Perl Institute (http://www.perl.org/) maintains a perl-mvs mailing
list of interest to all folks building and/or using perl on EBCDIC
platforms.  To subscibe, send a message of:

     subscribe perl-mvs

   to majordomo@perl.org.

HISTORY
=======

   This document was originally written by David Fiander for the 5.005
release of Perl.

   This document was podified for the 5.005_03 release of perl 11 March
1999.


File: perl.info,  Node: perlpod,  Next: perlbook,  Prev: perlstyle,  Up: Top

plain old documentation
***********************

NAME
====

   perlpod - plain old documentation

DESCRIPTION
===========

   A pod-to-whatever translator reads a pod file paragraph by paragraph,
and translates it to the appropriate output format.  There are three kinds
of paragraphs: `verbatim|' in this node, `command|' in this node, and
`ordinary text|' in this node.

Verbatim Paragraph
------------------

   A verbatim paragraph, distinguished by being indented (that is, it
starts with space or tab).  It should be reproduced exactly, with tabs
assumed to be on 8-column boundaries.  There are no special formatting
escapes, so you can't italicize or anything like that.  A \ means \, and
nothing else.

Command Paragraph
-----------------

   All command paragraphs start with "=", followed by an identifier,
followed by arbitrary text that the command can use however it pleases.
Currently recognized commands are

     =head1 heading
     =head2 heading
     =item text
     =over N
     =back
     =cut
     =pod
     =for X
     =begin X
     =end X

=pod
=cut
     The "=pod" directive does nothing beyond telling the compiler to lay
     off parsing code through the next "=cut".  It's useful for adding
     another paragraph to the doc if you're mixing up code and pod a lot.

=head1

=head2
     Head1 and head2 produce first and second level headings, with the
     text in the same paragraph as the "=headn" directive forming the
     heading description.

=over
=back
=item
     Item, over, and back require a little more explanation: "=over"
     starts a section specifically for the generation of a list using
     "=item" commands. At the end of your list, use "=back" to end it. You
     will probably want to give "4" as the number to "=over", as some
     formatters will use this for indentation.  This should probably be a
     default. Note also that there are some basic rules to using =item:
     don't use them outside of an =over/=back block, use at least one
     inside an =over/=back block, you don't _have_ to include the =back if
     the list just runs off the document, and perhaps most importantly,
     keep the items consistent: either use "=item *" for all of them, to
     produce bullets, or use "=item 1.", "=item 2.", etc., to produce
     numbered lists, or use "=item foo", "=item bar", etc., i.e., things
     that looks nothing like bullets or numbers. If you start with bullets
     or numbers, stick with them, as many formatters use the first "=item"
     type to decide how to format the list.

=for
=begin
=end
     For, begin, and end let you include sections that are not interpreted
     as pod text, but passed directly to particular formatters. A formatter
     that can utilize that format will use the section, otherwise it will
     be completely ignored.  The directive "=for" specifies that the
     entire next paragraph is in the format indicated by the first word
     after "=for", like this:

          =for html <br>
           <p> This is a raw HTML paragraph </p>

     The paired commands "=begin" and "=end" work very similarly to
     "=for", but instead of only accepting a single paragraph, all text
     from "=begin" to a paragraph with a matching "=end" are treated as a
     particular format.

     Here are some examples of how to use these:

          =begin html

          <br>Figure 1.<IMG SRC="figure1.png"><br>

          =end html

          =begin text

          ---------------
          |  foo        |
          |        bar  |
          ---------------

          ^^^^ Figure 1. ^^^^

          =end text

     Some format names that formatters currently are known to accept
     include "roff", "man", "latex", "tex", "text", and "html". (Some
     formatters will treat some of these as synonyms.)

     And don't forget, when using any command, that the command lasts up
     until the end of the *paragraph*, not the line. Hence in the examples
     below, you can see the empty lines after each command to end its
     paragraph.

     Some examples of lists include:

          =over 4

          =item *

          First item

          =item *

          Second item

          =back

          =over 4

          =item Foo()

          Description of Foo function

          =item Bar()

          Description of Bar function

          =back

Ordinary Block of Text
----------------------

   It will be filled, and maybe even justified.  Certain interior
sequences are recognized both here and in commands:

     I<text>     Italicize text, used for emphasis or variables
     B<text>     Embolden text, used for switches and programs
     S<text>     Text contains non-breaking spaces
     C<code>     Render code in a typewriter font, or give some other
                 indication that this represents program text
     L<name>     A link (cross reference) to name
     		    L<name>		manual page
     		    L<name/ident>	item in manual page
     		    L<name/"sec">	section in other manual page
     		    L<"sec">		section in this manual page
     					(the quotes are optional)
     		    L</"sec">		ditto
     		same as above but only 'text' is used for output.
     		(Text can not contain the characters '/' and '|',
     		and should contain matched '<' or '>')
     		    L<text|name>
     		    L<text|name/ident>
     		    L<text|name/"sec">
     		    L<text|"sec">
     		    L<text|/"sec">

     F<file>	Used for filenames
     X<index>	An index entry
     Z<>		A zero-width character
     E<escape>   A named character (very similar to HTML escapes)
     		    Less_Than_Special_Sequence		A literal <
     		    Greater_Than_Special_Sequence		A literal >
     		    E<sol>		A literal /
     		    E<verbar>		A literal |
     		    (these are optional except in other interior
     		     sequences and when preceded by a capital letter)
     		    E<n>		Character number n (probably in ASCII)
     	    	    E<html>		Some non-numeric HTML entity, such
     					as E<Agrave>

   Most of the time, you will only need a single set of angle brackets to
delimit the beginning and end of interior sequences.  However, sometimes
you will want to put a right angle bracket (or greater-than sign '>')
inside of a sequence.  This is particularly common when using a sequence
to provide a different font-type for a snippet of code.  As with all
things in Perl, there is more than one way to do it.  One way is to simply
escape the closing bracket using an E sequence:

     C<$a Less_Than_Special_Sequence=Greater_Than_Special_Sequence $b>

   This will produce: "`$a <=> $b'"

   A more readable, and perhaps more "plain" way is to use an alternate
set of delimiters that doesn't require a ">" to be escaped.  As of
perl5.5.660, doubled angle brackets ("<<" and ">>") may be used *if and
only if there is whitespace immediately following the opening delimiter
and immediately preceding the closing delimiter!* For example, the
following will do the trick:

     C<< $a <=> $b >>

   In fact, you can use as many repeated angle-brackets as you like so
long as you have the same number of them in the opening and closing
delimiters, and make sure that whitespace immediately follows the last '<'
of the opening delimiter, and immediately precedes the first '>' of the
closing delimiter.  So the following will also work:

     C<<< $a <=> $b >>>
     C<<<< $a <=> $b >>>>

   This is currently supported by pod2text (Pod::Text), pod2man (Pod::Man),
and any other pod2xxx and Pod::Xxxx translator that uses Pod::Parser 1.093
or later.

The Intent
----------

   That's it.  The intent is simplicity, not power.  I wanted paragraphs
to look like paragraphs (block format), so that they stand out visually,
and so that I could run them through fmt easily to reformat them (that's
F7 in my version of *vi*).  I wanted the translator (and not me) to worry
about whether " or ' is a left quote or a right quote within filled text,
and I wanted it to leave the quotes alone, dammit, in verbatim mode, so I
could slurp in a working program, shift it over 4 spaces, and have it
print out, er, verbatim.  And presumably in a constant width font.

   In particular, you can leave things like this verbatim in your text:

     Perl
     FILEHANDLE
     $variable
     function()
     manpage(3r)

   Doubtless a few other commands or sequences will need to be added along
the way, but I've gotten along surprisingly well with just these.

   Note that I'm not at all claiming this to be sufficient for producing a
book.  I'm just trying to make an idiot-proof common source for nroff,
TeX, and other markup languages, as used for online documentation.
Translators exist for pod2man  (that's for nroff(1) and troff(1)),
*pod2text*, pod2html, *pod2latex*, and *pod2fm*.

Embedding Pods in Perl Modules
------------------------------

   You can embed pod documentation in your Perl scripts.  Start your
documentation with a "=head1" command at the beginning, and end it with a
"=cut" command.  Perl will ignore the pod text.  See any of the supplied
library modules for examples.  If you're going to put your pods at the end
of the file, and you're using an __END__ or __DATA__ cut mark, make sure
to put an empty line there before the first pod directive.

     __END__

     =head1 NAME

     modern - I am a modern module

   If you had not had that empty line there, then the translators wouldn't
have seen it.

Common Pod Pitfalls
-------------------

   * Pod translators usually will require paragraphs to be separated by
     completely empty lines.  If you have an apparently empty line with
     some spaces on it, this can cause odd formatting.

   * Translators will mostly add wording around a L<> link, so that
     `L<foo(1)>' becomes "the foo(1) manpage", for example (see pod2man
     for details).  Thus, you shouldn't write things like `the L<foo>
     manpage', if you want the translated document to read sensibly.

     If you need total control of the text used for a link in the output
     use the form L<show this text|foo> instead.

   * The *podchecker* command is provided to check pod syntax for errors
     and warnings. For example, it checks for completely blank lines in
     pod segments and for unknown escape sequences.  It is still advised
     to pass it through one or more translators and proofread the result,
     or print out the result and proofread that.  Some of the problems
     found may be bugs in the translators, which you may or may not wish
     to work around.

SEE ALSO
========

   `pod2man' in this node, `"PODs: Embedded Documentation"', *Note
Perlsyn: perlsyn,, `podchecker' in this node

AUTHOR
======

   Larry Wall


File: perl.info,  Node: perlport,  Next: perlstyle,  Prev: perltrap,  Up: Top

Writing portable Perl
*********************

NAME
====

   perlport - Writing portable Perl

DESCRIPTION
===========

   Perl runs on numerous operating systems.  While most of them share much
in common, they also have their own unique features.

   This document is meant to help you to find out what constitutes portable
Perl code.  That way once you make a decision to write portably, you know
where the lines are drawn, and you can stay within them.

   There is a tradeoff between taking full advantage of one particular
type of computer and taking advantage of a full range of them.  Naturally,
as you broaden your range and become more diverse, the common factors
drop, and you are left with an increasingly smaller area of common ground
in which you can operate to accomplish a particular task.  Thus, when you
begin attacking a problem, it is important to consider under which part of
the tradeoff curve you want to operate.  Specifically, you must decide
whether it is important that the task that you are coding have the full
generality of being portable, or whether to just get the job done right
now.  This is the hardest choice to be made.  The rest is easy, because
Perl provides many choices, whichever way you want to approach your
problem.

   Looking at it another way, writing portable code is usually about
willfully limiting your available choices.  Naturally, it takes discipline
and sacrifice to do that.  The product of portability and convenience may
be a constant.  You have been warned.

   Be aware of two important points:

Not all Perl programs have to be portable
     There is no reason you should not use Perl as a language to glue Unix
     tools together, or to prototype a Macintosh application, or to manage
     the Windows registry.  If it makes no sense to aim for portability
     for one reason or another in a given program, then don't bother.

Nearly all of Perl already *is* portable
     Don't be fooled into thinking that it is hard to create portable Perl
     code.  It isn't.  Perl tries its level-best to bridge the gaps between
     what's available on different platforms, and all the means available
     to use those features.  Thus almost all Perl code runs on any machine
     without modification.  But there are some significant issues in
     writing portable code, and this document is entirely about those
     issues.

   Here's the general rule: When you approach a task commonly done using a
whole range of platforms, think about writing portable code.  That way,
you don't sacrifice much by way of the implementation choices you can
avail yourself of, and at the same time you can give your users lots of
platform choices.  On the other hand, when you have to take advantage of
some unique feature of a particular platform, as is often the case with
systems programming (whether for Unix, Windows, Mac OS, VMS, etc.),
consider writing platform-specific code.

   When the code will run on only two or three operating systems, you may
need to consider only the differences of those particular systems.  The
important thing is to decide where the code will run and to be deliberate
in your decision.

   The material below is separated into three main sections: main issues of
portability (`"ISSUES"' in this node, platform-specific issues
(`"PLATFORMS"' in this node, and built-in perl functions that behave
differently on various ports (`"FUNCTION IMPLEMENTATIONS"' in this node.

   This information should not be considered complete; it includes possibly
transient information about idiosyncrasies of some of the ports, almost
all of which are in a state of constant evolution.  Thus, this material
should be considered a perpetual work in progress (<IMG
SRC="yellow_sign.gif" ALT="Under Construction">).

ISSUES
======

Newlines
--------

   In most operating systems, lines in files are terminated by newlines.
Just what is used as a newline may vary from OS to OS.  Unix traditionally
uses `\012', one type of DOSish I/O uses `\015\012', and Mac OS uses
`\015'.

   Perl uses \n to represent the "logical" newline, where what is logical
may depend on the platform in use.  In MacPerl, \n always means `\015'.
In DOSish perls, \n usually means `\012', but when accessing a file in
"text" mode, STDIO translates it to (or from) `\015\012', depending on
whether you're reading or writing.  Unix does the same thing on ttys in
canonical mode.  `\015\012' is commonly referred to as CRLF.

   Because of the "text" mode translation, DOSish perls have limitations
in using seek and tell on a file accessed in "text" mode.  Stick to
seek-ing to locations you got from tell (and no others), and you are
usually free to use seek and tell even in "text" mode.  Using seek or tell
or other file operations may be non-portable.  If you use binmode on a
file, however, you can usually seek and tell with arbitrary values in
safety.

   A common misconception in socket programming is that \n eq `\012'
everywhere.  When using protocols such as common Internet protocols,
`\012' and `\015' are called for specifically, and the values of the
logical \n and `\r' (carriage return) are not reliable.

     print SOCKET "Hi there, client!\r\n";      # WRONG
     print SOCKET "Hi there, client!\015\012";  # RIGHT

   However, using `\015\012' (or `\cM\cJ', or `\x0D\x0A') can be tedious
and unsightly, as well as confusing to those maintaining the code.  As
such, the Socket module supplies the Right Thing for those who want it.

     use Socket qw(:DEFAULT :crlf);
     print SOCKET "Hi there, client!$CRLF"      # RIGHT

   When reading from a socket, remember that the default input record
separator $/ is \n, but robust socket code will recognize as either `\012'
or `\015\012' as end of line:

     while (<SOCKET>) {
         # ...
     }

   Because both CRLF and LF end in LF, the input record separator can be
set to LF and any CR stripped later.  Better to write:

     use Socket qw(:DEFAULT :crlf);
     local($/) = LF;      # not needed if $/ is already \012

     while (<SOCKET>) {
         s/$CR?$LF/\n/;   # not sure if socket uses LF or CRLF, OK
     #   s/\015?\012/\n/; # same thing
     }

   This example is preferred over the previous one-even for Unix
platforms-because now any `\015''s (`\cM''s) are stripped out (and there
was much rejoicing).

   Similarly, functions that return text data-such as a function that
fetches a web page-should sometimes translate newlines before returning
the data, if they've not yet been translated to the local newline
representation.  A single line of code will often suffice:

     $data =~ s/\015?\012/\n/g;
     return $data;

   Some of this may be confusing.  Here's a handy reference to the ASCII CR
and LF characters.  You can print it out and stick it in your wallet.

     LF  ==  \012  ==  \x0A  ==  \cJ  ==  ASCII 10
     CR  ==  \015  ==  \x0D  ==  \cM  ==  ASCII 13

     | Unix | DOS  | Mac  |
             ---------------------------
             \n   |  LF  |  LF  |  CR  |
             \r   |  CR  |  CR  |  LF  |
             \n * |  LF  | CRLF |  CR  |
             \r * |  CR  |  CR  |  LF  |
             ---------------------------
             * text-mode STDIO

   The Unix column assumes that you are not accessing a serial line (like
a tty) in canonical mode.  If you are, then CR on input becomes "\n", and
"\n" on output becomes CRLF.

   These are just the most common definitions of \n and `\r' in Perl.
There may well be others.

Numbers endianness and Width
----------------------------

   Different CPUs store integers and floating point numbers in different
orders (called *endianness*) and widths (32-bit and 64-bit being the most
common today).  This affects your programs when they attempt to transfer
numbers in binary format from one CPU architecture to another, usually
either "live" via network connection, or by storing the numbers to
secondary storage such as a disk file or tape.

   Conflicting storage orders make utter mess out of the numbers.  If a
little-endian host (Intel, VAX) stores 0x12345678 (305419896 in decimal),
a big-endian host (Motorola, MIPS, Sparc, PA) reads it as 0x78563412
(2018915346 in decimal).  To avoid this problem in network (socket)
connections use the pack and unpack formats n and N, the "network" orders.
These are guaranteed to be portable.

   You can explore the endianness of your platform by unpacking a data
structure packed in native format such as:

     print unpack("h*", pack("s2", 1, 2)), "\n";
     # '10002000' on e.g. Intel x86 or Alpha 21064 in little-endian mode
     # '00100020' on e.g. Motorola 68040

   If you need to distinguish between endian architectures you could use
either of the variables set like so:

     $is_big_endian   = unpack("h*", pack("s", 1)) =~ /01/;
     $is_litte_endian = unpack("h*", pack("s", 1)) =~ /^1/;

   Differing widths can cause truncation even between platforms of equal
endianness.  The platform of shorter width loses the upper parts of the
number.  There is no good solution for this problem except to avoid
transferring or storing raw binary numbers.

   One can circumnavigate both these problems in two ways.  Either
transfer and store numbers always in text format, instead of raw binary,
or else consider using modules like Data::Dumper (included in the standard
distribution as of Perl 5.005) and Storable.  Keeping all data as text
significantly simplifies matters.

Files and Filesystems
---------------------

   Most platforms these days structure files in a hierarchical fashion.
So, it is reasonably safe to assume that all platforms support the notion
of a "path" to uniquely identify a file on the system.  How that path is
really written, though, differs considerably.

   Atlhough similar, file path specifications differ between Unix,
Windows, Mac OS, OS/2, VMS, VOS, RISC OS, and probably others.  Unix, for
example, is one of the few OSes that has the elegant idea of a single root
directory.

   DOS, OS/2, VMS, VOS, and Windows can work similarly to Unix with / as
path separator, or in their own idiosyncratic ways (such as having several
root directories and various "unrooted" device files such NIL: and LPT:).

   Mac OS uses : as a path separator instead of /.

   The filesystem may support neither hard links (link) nor symbolic links
(symlink, readlink, lstat).

   The filesystem may support neither access timestamp nor change
timestamp (meaning that about the only portable timestamp is the
modification timestamp), or one second granularity of any timestamps (e.g.
the FAT filesystem limits the time granularity to two seconds).

   VOS perl can emulate Unix filenames with / as path separator.  The
native pathname characters greater-than, less-than, number-sign, and
percent-sign are always accepted.

   RISC OS perl can emulate Unix filenames with / as path separator, or go
native and use . for path separator and : to signal filesystems and disk
names.

   If all this is intimidating, have no (well, maybe only a little) fear.
There are modules that can help.  The File::Spec modules provide methods
to do the Right Thing on whatever platform happens to be running the
program.

     use File::Spec::Functions;
     chdir(updir());        # go up one directory
     $file = catfile(curdir(), 'temp', 'file.txt');
     # on Unix and Win32, './temp/file.txt'
     # on Mac OS, ':temp:file.txt'
     # on VMS, '[.temp]file.txt'

   File::Spec is available in the standard distribution as of version
5.004_05.  File::Spec::Functions is only in File::Spec 0.7 and later, and
some versions of perl come with version 0.6.  If File::Spec is not updated
to 0.7 or later, you must use the object-oriented interface from
File::Spec (or upgrade File::Spec).

   In general, production code should not have file paths hardcoded.
Making them user-supplied or read from a configuration file is better,
keeping in mind that file path syntax varies on different machines.

   This is especially noticeable in scripts like Makefiles and test suites,
which often assume / as a path separator for subdirectories.

   Also of use is File::Basename from the standard distribution, which
splits a pathname into pieces (base filename, full path to directory, and
file suffix).

   Even when on a single platform (if you can call Unix a single platform),
remember not to count on the existence or the contents of particular
system-specific files or directories, like `/etc/passwd',
`/etc/sendmail.conf', `/etc/resolv.conf', or even `/tmp/'.  For example,
`/etc/passwd' may exist but not contain the encrypted passwords, because
the system is using some form of enhanced security.  Or it may not contain
all the accounts, because the system is using NIS.  If code does need to
rely on such a file, include a description of the file and its format in
the code's documentation, then make it easy for the user to override the
default location of the file.

   Don't assume a text file will end with a newline.  They should, but
people forget.

   Do not have two files of the same name with different case, like
test.pl and `Test.pl', as many platforms have case-insensitive filenames.
Also, try not to have non-word characters (except for .)  in the names,
and keep them to the 8.3 convention, for maximum portability, onerous a
burden though this may appear.

   Likewise, when using the AutoSplit module, try to keep your functions to
8.3 naming and case-insensitive conventions; or, at the least, make it so
the resulting files have a unique (case-insensitively) first 8 characters.

   Whitespace in filenames is tolerated on most systems, but not all.
Many systems (DOS, VMS) cannot have more than one . in their filenames.

   Don't assume `< ' >> won't be the first character of a filename.
Always use `< < '> explicitly to open a file for reading, unless you want
the user to be able to specify a pipe open.

     open(FILE, "< $existing_file") or die $!;

   If filenames might use strange characters, it is safest to open it with
sysopen instead of open.  open is magic and can translate characters like
`< ' >>, `< < '>, and |, which may be the wrong thing to do.  (Sometimes,
though, it's the right thing.)

System Interaction
------------------

   Not all platforms provide a command line.  These are usually platforms
that rely primarily on a Graphical User Interface (GUI) for user
interaction.  A program requiring a command line interface might not work
everywhere.  This is probably for the user of the program to deal with, so
don't stay up late worrying about it.

   Some platforms can't delete or rename files held open by the system.
Remember to close files when you are done with them.  Don't unlink or
rename an open file.  Don't tie or open a file already tied or opened;
untie or close it first.

   Don't open the same file more than once at a time for writing, as some
operating systems put mandatory locks on such files.

   Don't count on a specific environment variable existing in %ENV.  Don't
count on %ENV entries being case-sensitive, or even case-preserving.

   Don't count on signals or %SIG for anything.

   Don't count on filename globbing.  Use opendir, readdir, and closedir
instead.

   Don't count on per-program environment variables, or per-program current
directories.

   Don't count on specific values of $!.

Interprocess Communication (IPC)
--------------------------------

   In general, don't directly access the system in code meant to be
portable.  That means, no system, exec, fork, pipe, ```', qx//, open with
a |, nor any of the other things that makes being a perl hacker worth
being.

   Commands that launch external processes are generally supported on most
platforms (though many of them do not support any type of forking).  The
problem with using them arises from what you invoke them on.  External
tools are often named differently on different platforms, may not be
available in the same location, migth accept different arguments, can
behave differently, and often present their results in a
platform-dependent way.  Thus, you should seldom depend on them to produce
consistent results. (Then again, if you're calling *netstat -a*, you
probably don't expect it to run on both Unix and CP/M.)

   One especially common bit of Perl code is opening a pipe to sendmail:

     open(MAIL, '|/usr/lib/sendmail -t')
     	or die "cannot fork sendmail: $!";

   This is fine for systems programming when sendmail is known to be
available.  But it is not fine for many non-Unix systems, and even some
Unix systems that may not have sendmail installed.  If a portable solution
is needed, see the various distributions on CPAN that deal with it.
Mail::Mailer and Mail::Send in the MailTools distribution are commonly
used, and provide several mailing methods, including mail, sendmail, and
direct SMTP (via Net::SMTP) if a mail transfer agent is not available.
Mail::Sendmail is a standalone module that provides simple,
platform-independent mailing.

   The Unix System V IPC (`msg*(), sem*(), shm*()') is not available even
on all Unix platforms.

   The rule of thumb for portable code is: Do it all in portable Perl, or
use a module (that may internally implement it with platform-specific
code, but expose a common interface).

External Subroutines (XS)
-------------------------

   XS code can usually be made to work with any platform, but dependent
libraries, header files, etc., might not be readily available or portable,
or the XS code itself might be platform-specific, just as Perl code might
be.  If the libraries and headers are portable, then it is normally
reasonable to make sure the XS code is portable, too.

   A different type of portability issue arises when writing XS code:
availability of a C compiler on the end-user's system.  C brings with it
its own portability issues, and writing XS code will expose you to some of
those.  Writing purely in Perl is an easier way to achieve portability.

Standard Modules
----------------

   In general, the standard modules work across platforms.  Notable
exceptions are the CPAN module (which currently makes connections to
external programs that may not be available), platform-specific modules
(like ExtUtils::MM_VMS), and DBM modules.

   There is no one DBM module available on all platforms.  SDBM_File and
the others are generally available on all Unix and DOSish ports, but not
in MacPerl, where only NBDM_File and DB_File are available.

   The good news is that at least some DBM module should be available, and
AnyDBM_File will use whichever module it can find.  Of course, then the
code needs to be fairly strict, dropping to the greatest common factor
(e.g., not exceeding 1K for each record), so that it will work with any
DBM module.  See *Note AnyDBM_File: (pm.info)AnyDBM_File, for more details.

Time and Date
-------------

   The system's notion of time of day and calendar date is controlled in
widely different ways.  Don't assume the timezone is stored in `$ENV{TZ}',
and even if it is, don't assume that you can control the timezone through
that variable.

   Don't assume that the epoch starts at 00:00:00, January 1, 1970,
because that is OS- and implementation-specific.  It is better to store a
date in an unambiguous representation.  The ISO-8601 standard defines
"YYYY-MM-DD" as the date format.  A text representation (like "1987-12-18")
can be easily converted into an OS-specific value using a module like
Date::Parse.  An array of values, such as those returned by localtime, can
be converted to an OS-specific representation using Time::Local.

   When calculating specific times, such as for tests in time or date
modules, it may be appropriate to calculate an offset for the epoch.

     require Time::Local;
     $offset = Time::Local::timegm(0, 0, 0, 1, 0, 70);

   The value for $offset in Unix will be 0, but in Mac OS will be some
large number.  $offset can then be added to a Unix time value to get what
should be the proper value on any system.

Character sets and character encoding
-------------------------------------

   Assume little about character sets.  Assume nothing about numerical
values (ord, chr) of characters.  Do not assume that the alphabetic
characters are encoded contiguously (in the numeric sense).  Do not assume
anything about the ordering of the characters.  The lowercase letters may
come before or after the uppercase letters; the lowercase and uppercase
may be interlaced so that both `a' and `A' come before `b'; the accented
and other international characters may be interlaced so that E<auml> comes
before `b'.

Internationalisation
--------------------

   If you may assume POSIX (a rather large assumption), you may read more
about the POSIX locale system from *Note Perllocale: perllocale,.  The
locale system at least attempts to make things a little bit more portable,
or at least more convenient and native-friendly for non-English users.
The system affects character sets and encoding, and date and time
formatting-amongst other things.

System Resources
----------------

   If your code is destined for systems with severely constrained (or
missing!) virtual memory systems then you want to be *especially* mindful
of avoiding wasteful constructs such as:

     # NOTE: this is no longer "bad" in perl5.005
     for (0..10000000) {}                       # bad
     for (my $x = 0; $x <= 10000000; ++$x) {}   # good

     @lines = <VERY_LARGE_FILE>;                # bad

     while (<FILE>) {$file .= $_}               # sometimes bad
     $file = join('', <FILE>);                  # better

   The last two constructs may appear unintuitive to most people.  The
first repeatedly grows a string, whereas the second allocates a large
chunk of memory in one go.  On some systems, the second is more efficient
that the first.

Security
--------

   Most multi-user platforms provide basic levels of security, usually
implemented at the filesystem level.  Some, however, do not-unfortunately.
Thus the notion of user id, or "home" directory, or even the state of
being logged-in, may be unrecognizable on many platforms.  If you write
programs that are security-conscious, it is usually best to know what type
of system you will be running under so that you can write code explicitly
for that platform (or class of platforms).

Style
-----

   For those times when it is necessary to have platform-specific code,
consider keeping the platform-specific code in one place, making porting
to other platforms easier.  Use the Config module and the special variable
$^O to differentiate platforms, as described in `"PLATFORMS"' in this node.

   Be careful in the tests you supply with your module or programs.
Module code may be fully portable, but its tests might not be.  This often
happens when tests spawn off other processes or call external programs to
aid in the testing, or when (as noted above) the tests assume certain
things about the filesystem and paths.  Be careful not to depend on a
specific output style for errors, such as when checking $! after an system
call.  Some platforms expect a certain output format, and perl on those
platforms may have been adjusted accordingly.  Most specifically, don't
anchor a regex when testing an error value.

CPAN Testers
============

   Modules uploaded to CPAN are tested by a variety of volunteers on
different platforms.  These CPAN testers are notified by mail of each new
upload, and reply to the list with PASS, FAIL, NA (not applicable to this
platform), or UNKNOWN (unknown), along with any relevant notations.

   The purpose of the testing is twofold: one, to help developers fix any
problems in their code that crop up because of lack of testing on other
platforms; two, to provide users with information about whether a given
module works on a given platform.

Mailing list: cpan-testers@perl.org
Testing results: http://testers.cpan.org/
PLATFORMS
=========

   As of version 5.002, Perl is built with a $^O variable that indicates
the operating system it was built on.  This was implemented to help speed
up code that would otherwise have to `use Config' and use the value of
`$Config{osname}'.  Of course, to get more detailed information about the
system, looking into `%Config' is certainly recommended.

   `%Config' cannot always be trusted, however, because it was built at
compile time.  If perl was built in one place, then transferred elsewhere,
some values may be wrong.  The values may even have been edited after the
fact.

Unix
----

   Perl works on a bewildering variety of Unix and Unix-like platforms (see
e.g. most of the files in the `hints/' directory in the source code kit).
On most of these systems, the value of $^O (hence `$Config{'osname'}',
too) is determined either by lowercasing and stripping punctuation from the
first field of the string returned by typing `uname -a' (or a similar
command) at the shell prompt or by testing the file system for the
presence of uniquely named files such as a kernel or header file.  Here,
for example, are a few of the more popular Unix flavors:

     uname         $^O        $Config{'archname'}
     --------------------------------------------
     AIX           aix        aix
     BSD/OS        bsdos      i386-bsdos
     dgux          dgux       AViiON-dgux
     DYNIX/ptx     dynixptx   i386-dynixptx
     FreeBSD       freebsd    freebsd-i386
     Linux         linux      arm-linux
     Linux         linux      i386-linux
     Linux         linux      i586-linux
     Linux         linux      ppc-linux
     HP-UX         hpux       PA-RISC1.1
     IRIX          irix       irix
     Mac OS X      rhapsody   rhapsody
     MachTen PPC   machten    powerpc-machten
     NeXT 3        next       next-fat
     NeXT 4        next       OPENSTEP-Mach
     openbsd       openbsd    i386-openbsd
     OSF1          dec_osf    alpha-dec_osf
     reliantunix-n svr4       RM400-svr4
     SCO_SV        sco_sv     i386-sco_sv
     SINIX-N       svr4       RM400-svr4
     sn4609        unicos     CRAY_C90-unicos
     sn6521        unicosmk   t3e-unicosmk
     sn9617        unicos     CRAY_J90-unicos
     SunOS         solaris    sun4-solaris
     SunOS         solaris    i86pc-solaris
     SunOS4        sunos      sun4-sunos

   Because the value of `$Config{archname}' may depend on the hardware
architecture, it can vary more than the value of $^O.

DOS and Derivatives
-------------------

   Perl has long been ported to Intel-style microcomputers running under
systems like PC-DOS, MS-DOS, OS/2, and most Windows platforms you can
bring yourself to mention (except for Windows CE, if you count that).
Users familiar with *COMMAND.COM* or *CMD.EXE* style shells should be
aware that each of these file specifications may have subtle differences:

     $filespec0 = "c:/foo/bar/file.txt";
     $filespec1 = "c:\\foo\\bar\\file.txt";
     $filespec2 = 'c:\foo\bar\file.txt';
     $filespec3 = 'c:\\foo\\bar\\file.txt';

   System calls accept either / or \ as the path separator.  However, many
command-line utilities of DOS vintage treat / as the option prefix, so may
get confused by filenames containing /.  Aside from calling any external
programs, / will work just fine, and probably better, as it is more
consistent with popular usage, and avoids the problem of remembering what
to backwhack and what not to.

   The DOS FAT filesystem can accommodate only "8.3" style filenames.
Under the "case-insensitive, but case-preserving" HPFS (OS/2) and NTFS (NT)
filesystems you may have to be careful about case returned with functions
like readdir or used with functions like open or opendir.

   DOS also treats several filenames as special, such as AUX, PRN, NUL,
CON, COM1, LPT1, LPT2, etc.  Unfortunately, sometimes these filenames
won't even work if you include an explicit directory prefix.  It is best
to avoid such filenames, if you want your code to be portable to DOS and
its derivatives.  It's hard to know what these all are, unfortunately.

   Users of these operating systems may also wish to make use of scripts
such as *pl2bat.bat* or *pl2cmd* to put wrappers around your scripts.

   Newline (\n) is translated as `\015\012' by STDIO when reading from and
writing to files (see `"Newlines"' in this node).  `binmode(FILEHANDLE)'
will keep \n translated as `\012' for that filehandle.  Since it is a
no-op on other systems, binmode should be used for cross-platform code
that deals with binary data.  That's assuming you realize in advance that
your data is in binary.  General-purpose programs should often assume
nothing about their data.

   The $^O variable and the `$Config{archname}' values for various DOSish
perls are as follows:

     OS            $^O        $Config{'archname'}
     --------------------------------------------
     MS-DOS        dos
     PC-DOS        dos
     OS/2          os2
     Windows 95    MSWin32    MSWin32-x86
     Windows 98    MSWin32    MSWin32-x86
     Windows NT    MSWin32    MSWin32-x86
     Windows NT    MSWin32    MSWin32-ALPHA
     Windows NT    MSWin32    MSWin32-ppc
     Cygwin        cygwin

   Also see:

   * The djgpp environment for DOS, http://www.delorie.com/djgpp/ and
     *Note Perldos: perldos,.

   * The EMX environment for DOS, OS/2, etc. emx@iaehv.nl,
     http://www.leo.org/pub/comp/os/os2/leo/gnu/emx+gcc/index.html or
     ftp://hobbes.nmsu.edu/pub/os2/dev/emx.  Also *Note Perlos2: perlos2,.

   * Build instructions for Win32 in *Note Perlwin32: perlwin32,, or under
     the Cygnus environment in *Note Perlcygwin: perlcygwin,.

   * The `Win32::*' modules in *Note Win32: (pm.info)Win32,.

   * The ActiveState Pages, http://www.activestate.com/

   * The Cygwin environment for Win32; `README.cygwin' (installed as *Note
     Perlcygwin: perlcygwin,), http://sourceware.cygnus.com/cygwin/

   * The U/WIN environment for Win32,
     <http://www.research.att.com/sw/tools/uwin/

   * Build instructions for OS/2, *Note Perlos2: perlos2,

Mac OS
------

   Any module requiring XS compilation is right out for most people,
because MacPerl is built using non-free (and non-cheap!) compilers.  Some
XS modules that can work with MacPerl are built and distributed in binary
form on CPAN.

   Directories are specified as:

     volume:folder:file              for absolute pathnames
     volume:folder:                  for absolute pathnames
     :folder:file                    for relative pathnames
     :folder:                        for relative pathnames
     :file                           for relative pathnames
     file                            for relative pathnames

   Files are stored in the directory in alphabetical order.  Filenames are
limited to 31 characters, and may include any character except for null
and :, which is reserved as the path separator.

   Instead of flock, see `FSpSetFLock' and `FSpRstFLock' in the Mac::Files
module, or `chmod(0444, ...)' and `chmod(0666, ...)'.

   In the MacPerl application, you can't run a program from the command
line; programs that expect `@ARGV' to be populated can be edited with
something like the following, which brings up a dialog box asking for the
command line arguments.

     if (!@ARGV) {
         @ARGV = split /\s+/, MacPerl::Ask('Arguments?');
     }

   A MacPerl script saved as a "droplet" will populate `@ARGV' with the
full pathnames of the files dropped onto the script.

   Mac users can run programs under a type of command line interface under
MPW (Macintosh Programmer's Workshop, a free development environment from
Apple).  MacPerl was first introduced as an MPW tool, and MPW can be used
like a shell:

     perl myscript.plx some arguments

   ToolServer is another app from Apple that provides access to MPW tools
from MPW and the MacPerl app, which allows MacPerl programs to use system,
backticks, and piped open.

   "Mac OS" is the proper name for the operating system, but the value in
$^O is "MacOS".  To determine architecture, version, or whether the
application or MPW tool version is running, check:

     $is_app    = $MacPerl::Version =~ /App/;
     $is_tool   = $MacPerl::Version =~ /MPW/;
     ($version) = $MacPerl::Version =~ /^(\S+)/;
     $is_ppc    = $MacPerl::Architecture eq 'MacPPC';
     $is_68k    = $MacPerl::Architecture eq 'Mac68K';

   Mac OS X and Mac OS X Server, based on NeXT's OpenStep OS, will (in
theory) be able to run MacPerl natively, under the "Classic" environment.
The new "Cocoa" environment (formerly called the "Yellow Box") may run a
slightly modified version of MacPerl, using the Carbon interfaces.

   Mac OS X Server and its Open Source version, Darwin, both run Unix perl
natively (with a few patches).  Full support for these is slated for perl
5.6.

   Also see:

   * The MacPerl Pages, http://www.macperl.com/ .

   * The MacPerl mailing lists, http://www.macperl.org/ .

   * MacPerl Module Porters, http://pudge.net/mmp/ .

VMS
---

   Perl on VMS is discussed in *Note Perlvms: perlvms, in the perl
distribution.  Perl on VMS can accept either VMS- or Unix-style file
specifications as in either of the following:

     $ perl -ne "print if /perl_setup/i" SYS$LOGIN:LOGIN.COM
     $ perl -ne "print if /perl_setup/i" /sys$login/login.com

   but not a mixture of both as in:

     $ perl -ne "print if /perl_setup/i" sys$login:/login.com
     Can't open sys$login:/login.com: file specification syntax error

   Interacting with Perl from the Digital Command Language (DCL) shell
often requires a different set of quotation marks than Unix shells do.
For example:

     $ perl -e "print ""Hello, world.\n"""
     Hello, world.

   There are several ways to wrap your perl scripts in DCL `.COM' files, if
you are so inclined.  For example:

     $ write sys$output "Hello from DCL!"
     $ if p1 .eqs. ""
     $ then perl -x 'f$environment("PROCEDURE")
     $ else perl -x - 'p1 'p2 'p3 'p4 'p5 'p6 'p7 'p8
     $ deck/dollars="__END__"
     #!/usr/bin/perl

     print "Hello from Perl!\n";

     __END__
     $ endif

   Do take care with `$ ASSIGN/nolog/user SYS$COMMAND: SYS$INPUT' if your
perl-in-DCL script expects to do things like `< $read = <STDIN'; >>.

   Filenames are in the format "name.extension;version".  The maximum
length for filenames is 39 characters, and the maximum length for
extensions is also 39 characters.  Version is a number from 1 to 32767.
Valid characters are `/[A-Z0-9$_-]/'.

   VMS's RMS filesystem is case-insensitive and does not preserve case.
readdir returns lowercased filenames, but specifying a file for opening
remains case-insensitive.  Files without extensions have a trailing period
on them, so doing a readdir with a file named `A.;5' will return `a.'
(though that file could be opened with `open(FH, 'A')').

   RMS had an eight level limit on directory depths from any rooted logical
(allowing 16 levels overall) prior to VMS 7.2.  Hence
`PERL_ROOT:[LIB.2.3.4.5.6.7.8]' is a valid directory specification but
`PERL_ROOT:[LIB.2.3.4.5.6.7.8.9]' is not.  Makefile.PL authors might have
to take this into account, but at least they can refer to the former as
`/PERL_ROOT/lib/2/3/4/5/6/7/8/'.

   The VMS::Filespec module, which gets installed as part of the build
process on VMS, is a pure Perl module that can easily be installed on
non-VMS platforms and can be helpful for conversions to and from RMS
native formats.

   What \n represents depends on the type of file opened.  It could be
`\015', `\012', `\015\012', or nothing.  The VMS::Stdio module provides
access to the special fopen() requirements of files with unusual
attributes on VMS.

   TCP/IP stacks are optional on VMS, so socket routines might not be
implemented.  UDP sockets may not be supported.

   The value of $^O on OpenVMS is "VMS".  To determine the architecture
that you are running on without resorting to loading all of `%Config' you
can examine the content of the `@INC' array like so:

     if (grep(/VMS_AXP/, @INC)) {
         print "I'm on Alpha!\n";

     } elsif (grep(/VMS_VAX/, @INC)) {
         print "I'm on VAX!\n";

     } else {
         print "I'm not so sure about where $^O is...\n";
     }

   On VMS, perl determines the UTC offset from the
`SYS$TIMEZONE_DIFFERENTIAL' logical name.  Although the VMS epoch began at
17-NOV-1858 00:00:00.00, calls to localtime are adjusted to count offsets
from 01-JAN-1970 00:00:00.00, just like Unix.

   Also see:

   * `README.vms' (installed as `README_vms' in this node), *Note Perlvms:
     perlvms,

   * vmsperl list, majordomo@perl.org

     (Put the words `subscribe vmsperl' in message body.)

   * vmsperl on the web, http://www.sidhe.org/vmsperl/index.html

VOS
---

   Perl on VOS is discussed in `README.vos' in the perl distribution.
Perl on VOS can accept either VOS- or Unix-style file specifications as in
either of the following:

     $ perl -ne "print if /perl_setup/i" >system>notices
     $ perl -ne "print if /perl_setup/i" /system/notices

   or even a mixture of both as in:

     $ perl -ne "print if /perl_setup/i" >system/notices

   Even though VOS allows the slash character to appear in object names,
because the VOS port of Perl interprets it as a pathname delimiting
character, VOS files, directories, or links whose names contain a slash
character cannot be processed.  Such files must be renamed before they can
be processed by Perl.  Note that VOS limits file names to 32 or fewer
characters.

   The following C functions are unimplemented on VOS, and any attempt by
Perl to use them will result in a fatal error message and an immediate
exit from Perl:  dup, do_aspawn, do_spawn, fork, waitpid.  Once these
functions become available in the VOS POSIX.1 implementation, you can
either recompile and rebind Perl, or you can download a newer port from
ftp.stratus.com.

   The value of $^O on VOS is "VOS".  To determine the architecture that
you are running on without resorting to loading all of `%Config' you can
examine the content of the @INC array like so:

     if ($^O =~ /VOS/) {
         print "I'm on a Stratus box!\n";
     } else {
         print "I'm not on a Stratus box!\n";
         die;
     }

     if (grep(/860/, @INC)) {
         print "This box is a Stratus XA/R!\n";

     } elsif (grep(/7100/, @INC)) {
         print "This box is a Stratus HP 7100 or 8xxx!\n";

     } elsif (grep(/8000/, @INC)) {
         print "This box is a Stratus HP 8xxx!\n";

     } else {
         print "This box is a Stratus 68K!\n";
     }

   Also see:

   * `README.vos'

   * The VOS mailing list.

     There is no specific mailing list for Perl on VOS.  You can post
     comments to the comp.sys.stratus newsgroup, or subscribe to the
     general Stratus mailing list.  Send a letter with "Subscribe
     Info-Stratus" in the message body to majordomo@list.stratagy.com.

   * VOS Perl on the web at http://ftp.stratus.com/pub/vos/vos.html

EBCDIC Platforms
----------------

   Recent versions of Perl have been ported to platforms such as OS/400 on
AS/400 minicomputers as well as OS/390, VM/ESA, and BS2000 for S/390
Mainframes.  Such computers use EBCDIC character sets internally (usually
Character Code Set ID 0037 for OS/400 and either 1047 or POSIX-BC for S/390
systems).  On the mainframe perl currently works under the "Unix system
services for OS/390" (formerly known as OpenEdition), VM/ESA OpenEdition,
or the BS200 POSIX-BC system (BS2000 is supported in perl 5.6 and greater).
See *Note Perlos390: perlos390, for details.

   As of R2.5 of USS for OS/390 and Version 2.3 of VM/ESA these Unix
sub-systems do not support the #! shebang trick for script invocation.
Hence, on OS/390 and VM/ESA perl scripts can be executed with a header
similar to the following simple script:

     : # use perl
         eval 'exec /usr/local/bin/perl -S $0 ${1+"$@"}'
             if 0;
     #!/usr/local/bin/perl     # just a comment really

     print "Hello from perl!\n";

   OS/390 will support the #! shebang trick in release 2.8 and beyond.
Calls to system and backticks can use POSIX shell syntax on all S/390
systems.

   On the AS/400, if PERL5 is in your library list, you may need to wrap
your perl scripts in a CL procedure to invoke them like so:

     BEGIN
       CALL PGM(PERL5/PERL) PARM('/QOpenSys/hello.pl')
     ENDPGM

   This will invoke the perl script `hello.pl' in the root of the QOpenSys
file system.  On the AS/400 calls to system or backticks must use CL
syntax.

   On these platforms, bear in mind that the EBCDIC character set may have
an effect on what happens with some perl functions (such as chr, pack,
print, printf, ord, sort, sprintf, unpack), as well as bit-fiddling with
ASCII constants using operators like ^, & and |, not to mention dealing
with socket interfaces to ASCII computers (see `"Newlines"' in this node).

   Fortunately, most web servers for the mainframe will correctly
translate the \n in the following statement to its ASCII equivalent (`\r'
is the same under both Unix and OS/390 & VM/ESA):

     print "Content-type: text/html\r\n\r\n";

   The values of $^O on some of these platforms includes:

     uname         $^O        $Config{'archname'}
     --------------------------------------------
     OS/390        os390      os390
     OS400         os400      os400
     POSIX-BC      posix-bc   BS2000-posix-bc
     VM/ESA        vmesa      vmesa

   Some simple tricks for determining if you are running on an EBCDIC
platform could include any of the following (perhaps all):

     if ("\t" eq "\05")   { print "EBCDIC may be spoken here!\n"; }

     if (ord('A') == 193) { print "EBCDIC may be spoken here!\n"; }

     if (chr(169) eq 'z') { print "EBCDIC may be spoken here!\n"; }

   One thing you may not want to rely on is the EBCDIC encoding of
punctuation characters since these may differ from code page to code page
(and once your module or script is rumoured to work with EBCDIC, folks
will want it to work with all EBCDIC character sets).

   Also see:

   * *

     *Note Perlos390: perlos390,, `README.os390', `README.posix-bc',
     `README.vmesa'

   * The perl-mvs@perl.org list is for discussion of porting issues as
     well as general usage issues for all EBCDIC Perls.  Send a message
     body of "subscribe perl-mvs" to majordomo@perl.org.

   * AS/400 Perl information at ttp://as400.rochester.ibm.com/ as well as
     on CPAN in the `ports/' directory.

Acorn RISC OS
-------------

   Because Acorns use ASCII with newlines (\n) in text files as `\012' like
Unix, and because Unix filename emulation is turned on by default, most
simple scripts will probably work "out of the box".  The native filesystem
is modular, and individual filesystems are free to be case-sensitive or
insensitive, and are usually case-preserving.  Some native filesystems
have name length limits, which file and directory names are silently
truncated to fit.  Scripts should be aware that the standard filesystem
currently has a name length limit of 10 characters, with up to 77 items in
a directory, but other filesystems may not impose such limitations.

   Native filenames are of the form

     Filesystem#Special_Field::DiskName.$.Directory.Directory.File

   where

     Special_Field is not usually present, but may contain . and $ .
     Filesystem =~ m|[A-Za-z0-9_]|
     DsicName   =~ m|[A-Za-z0-9_/]|
     $ represents the root directory
     . is the path separator
     @ is the current directory (per filesystem but machine global)
     ^ is the parent directory
     Directory and File =~ m|[^\0- "\.\$\%\&:\@\\^\|\177]+|

   The default filename translation is roughly `tr|/.|./|;'

   Note that `"ADFS::HardDisk.$.File" ne 'ADFS::HardDisk.$.File'' and that
the second stage of `$' interpolation in regular expressions will fall
foul of the $. if scripts are not careful.

   Logical paths specified by system variables containing comma-separated
search lists are also allowed; hence `System:Modules' is a valid filename,
and the filesystem will prefix Modules with each section of `System$Path'
until a name is made that points to an object on disk.  Writing to a new
file `System:Modules' would be allowed only if `System$Path' contains a
single item list.  The filesystem will also expand system variables in
filenames if enclosed in angle brackets, so `< <System$Dir'.Modules >>
would look for the file `$ENV{'System$Dir'} . 'Modules''.  The obvious
implication of this is that *fully qualified filenames can start with `<
<' *>> and should be protected when open is used for input.

   Because . was in use as a directory separator and filenames could not
be assumed to be unique after 10 characters, Acorn implemented the C
compiler to strip the trailing `.c' `.h' `.s' and `.o' suffix from
filenames specified in source code and store the respective files in
subdirectories named after the suffix.  Hence files are translated:

     foo.h           h.foo
     C:foo.h         C:h.foo        (logical path variable)
     sys/os.h        sys.h.os       (C compiler groks Unix-speak)
     10charname.c    c.10charname
     10charname.o    o.10charname
     11charname_.c   c.11charname   (assuming filesystem truncates at 10)

   The Unix emulation library's translation of filenames to native assumes
that this sort of translation is required, and it allows a user-defined
list of known suffixes that it will transpose in this fashion.  This may
seem transparent, but consider that with these rules `foo/bar/baz.h' and
`foo/bar/h/baz' both map to `foo.bar.h.baz', and that readdir and glob
cannot and do not attempt to emulate the reverse mapping.  Other .'s in
filenames are translated to /.

   As implied above, the environment accessed through %ENV is global, and
the convention is that program specific environment variables are of the
form `Program$Name'.  Each filesystem maintains a current directory, and
the current filesystem's current directory is the global current
directory.  Consequently, sociable programs don't change the current
directory but rely on full pathnames, and programs (and Makefiles) cannot
assume that they can spawn a child process which can change the current
directory without affecting its parent (and everyone else for that matter).

   Because native operating system filehandles are global and are currently
allocated down from 255, with 0 being a reserved value, the Unix emulation
library emulates Unix filehandles.  Consequently, you can't rely on
passing STDIN, STDOUT, or `STDERR' to your children.

   The desire of users to express filenames of the form `< <Foo$Dir'.Bar
>> on the command line unquoted causes problems, too: ```' command output
capture has to perform a guessing game.  It assumes that a string `<
<[^<']+\$[^<>]> >> is a reference to an environment variable, whereas
anything else involving `< < '> or `< ' >> is redirection, and generally
manages to be 99% right.  Of course, the problem remains that scripts
cannot rely on any Unix tools being available, or that any tools found
have Unix-like command line arguments.

   Extensions and XS are, in theory, buildable by anyone using free tools.
In practice, many don't, as users of the Acorn platform are used to
binary distributions.  MakeMaker does run, but no available make currently
copes with MakeMaker's makefiles; even if and when this should be fixed,
the lack of a Unix-like shell will cause problems with makefile rules,
especially lines of the form `cd sdbm && make all', and anything using
quoting.

   "RISC OS" is the proper name for the operating system, but the value in
$^O is "riscos" (because we don't like shouting).

Other perls
-----------

   Perl has been ported to many platforms that do not fit into any of the
categories listed above.  Some, such as AmigaOS, Atari MiNT, BeOS, HP
MPE/iX, QNX, Plan 9, and VOS, have been well-integrated into the standard
Perl source code kit.  You may need to see the `ports/' directory on CPAN
for information, and possibly binaries, for the likes of: aos, Atari ST,
lynxos, riscos, Novell Netware, Tandem Guardian, etc.  (Yes, we know that
some of these OSes may fall under the Unix category, but we are not a
standards body.)

   Some approximate operating system names and their $^O values in the
"OTHER" category include:

     OS            $^O        $Config{'archname'}
     ------------------------------------------
     Amiga DOS     amigaos    m68k-amigos
     MPE/iX        mpeix      PA-RISC1.1

   See also:

   * Amiga, `README.amiga' (installed as *Note Perlamiga: perlamiga,).

   * Atari, `README.mint' and Guido Flohr's web page
     http://stud.uni-sb.de/~gufl0000/

   * Be OS, `README.beos'

   * HP 300 MPE/iX, `README.mpeix' and Mark Bixby's web page
     http://www.cccd.edu/~markb/perlix.html

   * A free perl5-based PERL.NLM for Novell Netware is available in
     precompiled binary and source code form from http://www.novell.com/
     as well as from CPAN.

   * Plan 9, `README.plan9'

FUNCTION IMPLEMENTATIONS
========================

   Listed below are functions that are either completely unimplemented or
else have been implemented differently on various platforms.  Following
each description will be, in parentheses, a list of platforms that the
description applies to.

   The list may well be incomplete, or even wrong in some places.  When in
doubt, consult the platform-specific README files in the Perl source
distribution, and any other documentation resources accompanying a given
port.

   Be aware, moreover, that even among Unix-ish systems there are
variations.

   For many functions, you can also query `%Config', exported by default
from the Config module.  For example, to check whether the platform has
the lstat call, check `$Config{d_lstat}'.  See *Note Config:
(pm.info)Config, for a full description of available variables.

Alphabetical Listing of Perl Functions
--------------------------------------

-X FILEHANDLE
-X EXPR
-X
     -r, -w, and -x have a limited meaning only; directories and
     applications are executable, and there are no uid/gid considerations.
     -o is not supported.  (Mac OS)

     -r, -w, -x, and -o tell whether the file is accessible, which may not
     reflect UIC-based file protections.  (VMS)

     -s returns the size of the data fork, not the total size of data fork
     plus resource fork.  (Mac OS).

     -s by name on an open file will return the space reserved on disk,
     rather than the current extent.  -s on an open filehandle returns the
     current size.  (RISC OS)

     `-R', -W, -X, -O are indistinguishable from -r, -w, -x, -o. (Mac OS,
     Win32, VMS, RISC OS)

     -b, -c, -k, -g, -p, -u, -A are not implemented.  (Mac OS)

     -g, -k, -l, -p, -u, -A are not particularly meaningful.  (Win32, VMS,
     RISC OS)

     -d is true if passed a device spec without an explicit directory.
     (VMS)

     -T and -B are implemented, but might misclassify Mac text files with
     foreign characters; this is the case will all platforms, but may
     affect Mac OS often.  (Mac OS)

     -x (or -X) determine if a file ends in one of the executable
     suffixes.  -S is meaningless.  (Win32)

     -x (or -X) determine if a file has an executable file type.  (RISC OS)

alarm SECONDS
alarm
     Not implemented. (Win32)

binmode FILEHANDLE
     Meaningless.  (Mac OS, RISC OS)

     Reopens file and restores pointer; if function fails, underlying
     filehandle may be closed, or pointer may be in a different position.
     (VMS)

     The value returned by tell may be affected after the call, and the
     filehandle may be flushed. (Win32)

chmod LIST
     Only limited meaning.  Disabling/enabling write permission is mapped
     to locking/unlocking the file. (Mac OS)

     Only good for changing "owner" read-write access, "group", and "other"
     bits are meaningless. (Win32)

     Only good for changing "owner" and "other" read-write access.
     (RISC OS)

     Access permissions are mapped onto VOS access-control list changes.
     (VOS)

chown LIST
     Not implemented. (Mac OS, Win32, Plan9, RISC OS, VOS)

     Does nothing, but won't fail. (Win32)

chroot FILENAME
chroot
     Not implemented. (Mac OS, Win32, VMS, Plan9, RISC OS, VOS, VM/ESA)

crypt PLAINTEXT,SALT
     May not be available if library or source was not provided when
     building perl. (Win32)

     Not implemented. (VOS)

dbmclose HASH
     Not implemented. (VMS, Plan9, VOS)

dbmopen HASH,DBNAME,MODE
     Not implemented. (VMS, Plan9, VOS)

dump LABEL
     Not useful. (Mac OS, RISC OS)

     Not implemented. (Win32)

     Invokes VMS debugger. (VMS)

exec LIST
     Not implemented. (Mac OS)

     Implemented via Spawn. (VM/ESA)

     Does not automatically flush output handles on some platforms.
     (SunOS, Solaris, HP-UX)

fcntl FILEHANDLE,FUNCTION,SCALAR
     Not implemented. (Win32, VMS)

flock FILEHANDLE,OPERATION
     Not implemented (Mac OS, VMS, RISC OS, VOS).

     Available only on Windows NT (not on Windows 95). (Win32)

fork
     Not implemented. (Mac OS, AmigaOS, RISC OS, VOS, VM/ESA)

     Emulated using multiple interpreters.  See *Note Perlfork: perlfork,.
     (Win32)

     Does not automatically flush output handles on some platforms.
     (SunOS, Solaris, HP-UX)

getlogin
     Not implemented. (Mac OS, RISC OS)

getpgrp PID
     Not implemented. (Mac OS, Win32, VMS, RISC OS, VOS)

getppid
     Not implemented. (Mac OS, Win32, VMS, RISC OS)

getpriority WHICH,WHO
     Not implemented. (Mac OS, Win32, VMS, RISC OS, VOS, VM/ESA)

getpwnam NAME
     Not implemented. (Mac OS, Win32)

     Not useful. (RISC OS)

getgrnam NAME
     Not implemented. (Mac OS, Win32, VMS, RISC OS)

getnetbyname NAME
     Not implemented. (Mac OS, Win32, Plan9)

getpwuid UID
     Not implemented. (Mac OS, Win32)

     Not useful. (RISC OS)

getgrgid GID
     Not implemented. (Mac OS, Win32, VMS, RISC OS)

getnetbyaddr ADDR,ADDRTYPE
     Not implemented. (Mac OS, Win32, Plan9)

getprotobynumber NUMBER
     Not implemented. (Mac OS)

getservbyport PORT,PROTO
     Not implemented. (Mac OS)

getpwent
     Not implemented. (Mac OS, Win32, VM/ESA)

getgrent
     Not implemented. (Mac OS, Win32, VMS, VM/ESA)

gethostent
     Not implemented. (Mac OS, Win32)

getnetent
     Not implemented. (Mac OS, Win32, Plan9)

getprotoent
     Not implemented. (Mac OS, Win32, Plan9)

getservent
     Not implemented. (Win32, Plan9)

setpwent
     Not implemented. (Mac OS, Win32, RISC OS)

setgrent
     Not implemented. (Mac OS, Win32, VMS, RISC OS)

sethostent STAYOPEN
     Not implemented. (Mac OS, Win32, Plan9, RISC OS)

setnetent STAYOPEN
     Not implemented. (Mac OS, Win32, Plan9, RISC OS)

setprotoent STAYOPEN
     Not implemented. (Mac OS, Win32, Plan9, RISC OS)

setservent STAYOPEN
     Not implemented. (Plan9, Win32, RISC OS)

endpwent
     Not implemented. (Mac OS, MPE/iX, VM/ESA, Win32)

endgrent
     Not implemented. (Mac OS, MPE/iX, RISC OS, VM/ESA, VMS, Win32)

endhostent
     Not implemented. (Mac OS, Win32)

endnetent
     Not implemented. (Mac OS, Win32, Plan9)

endprotoent
     Not implemented. (Mac OS, Win32, Plan9)

endservent
     Not implemented. (Plan9, Win32)

getsockopt SOCKET,LEVEL,OPTNAME
     Not implemented. (Mac OS, Plan9)

glob EXPR
glob
     Globbing built-in, but only * and ? metacharacters are supported.
     (Mac OS)

     This operator is implemented via the File::Glob extension on most
     platforms.  See *Note File/Glob: (pm.info)File/Glob, for portability
     information.

ioctl FILEHANDLE,FUNCTION,SCALAR
     Not implemented. (VMS)

     Available only for socket handles, and it does what the ioctlsocket()
     call in the Winsock API does. (Win32)

     Available only for socket handles. (RISC OS)

kill SIGNAL, LIST
     Not implemented, hence not useful for taint checking. (Mac OS,
     RISC OS)

     kill() doesn't have the semantics of `raise()', i.e. it doesn't send
     a signal to the identified process like it does on Unix platforms.
     Instead `kill($sig, $pid)' terminates the process identified by $pid,
     and makes it exit immediately with exit status $sig.  As in Unix, if
     $sig is 0 and the specified process exists, it returns true without
     actually terminating it. (Win32)

link OLDFILE,NEWFILE
     Not implemented. (Mac OS, MPE/iX, VMS, RISC OS)

     Link count not updated because hard links are not quite that hard
     (They are sort of half-way between hard and soft links). (AmigaOS)

     Hard links are implemented on Win32 (Windows NT and Windows 2000)
     under NTFS only.

lstat FILEHANDLE
lstat EXPR
lstat
     Not implemented. (VMS, RISC OS)

     Return values (especially for device and inode) may be bogus. (Win32)

msgctl ID,CMD,ARG
msgget KEY,FLAGS
msgsnd ID,MSG,FLAGS
msgrcv ID,VAR,SIZE,TYPE,FLAGS
     Not implemented. (Mac OS, Win32, VMS, Plan9, RISC OS, VOS)

open FILEHANDLE,EXPR
open FILEHANDLE
     The | variants are supported only if ToolServer is installed.  (Mac
     OS)

     open to `|-' and `-|' are unsupported. (Mac OS, Win32, RISC OS)

     Opening a process does not automatically flush output handles on some
     platforms.  (SunOS, Solaris, HP-UX)

pipe READHANDLE,WRITEHANDLE
     Not implemented. (Mac OS)

     Very limited functionality. (MiNT)

readlink EXPR
readlink
     Not implemented. (Win32, VMS, RISC OS)

select RBITS,WBITS,EBITS,TIMEOUT
     Only implemented on sockets. (Win32)

     Only reliable on sockets. (RISC OS)

     Note that the `socket FILEHANDLE' form is generally portable.

semctl ID,SEMNUM,CMD,ARG
semget KEY,NSEMS,FLAGS
semop KEY,OPSTRING
     Not implemented. (Mac OS, Win32, VMS, RISC OS, VOS)

setgrent
     Not implemented. (MPE/iX, Win32)

setpgrp PID,PGRP
     Not implemented. (Mac OS, Win32, VMS, RISC OS, VOS)

setpriority WHICH,WHO,PRIORITY
     Not implemented. (Mac OS, Win32, VMS, RISC OS, VOS)

setpwent
     Not implemented. (MPE/iX, Win32)

setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL
     Not implemented. (Mac OS, Plan9)

shmctl ID,CMD,ARG
shmget KEY,SIZE,FLAGS
shmread ID,VAR,POS,SIZE
shmwrite ID,STRING,POS,SIZE
     Not implemented. (Mac OS, Win32, VMS, RISC OS, VOS)

socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL
     Not implemented. (Mac OS, Win32, VMS, RISC OS, VOS, VM/ESA)

stat FILEHANDLE
stat EXPR
stat
     mtime and atime are the same thing, and ctime is creation time
     instead of inode change time. (Mac OS)

     device and inode are not meaningful.  (Win32)

     device and inode are not necessarily reliable.  (VMS)

     mtime, atime and ctime all return the last modification time.  Device
     and inode are not necessarily reliable.  (RISC OS)

symlink OLDFILE,NEWFILE
     Not implemented. (Win32, VMS, RISC OS)

syscall LIST
     Not implemented. (Mac OS, Win32, VMS, RISC OS, VOS, VM/ESA)

sysopen FILEHANDLE,FILENAME,MODE,PERMS
     The traditional "0", "1", and "2" MODEs are implemented with different
     numeric values on some systems.  The flags exported by Fcntl
     (O_RDONLY, O_WRONLY, O_RDWR) should work everywhere though.  (Mac OS,
     OS/390, VM/ESA)

system LIST
     Only implemented if ToolServer is installed. (Mac OS)

     As an optimization, may not call the command shell specified in
     `$ENV{PERL5SHELL}'.  `system(1, @args)' spawns an external process
     and immediately returns its process designator, without waiting for
     it to terminate.  Return value may be used subsequently in wait or
     waitpid.  Failure to spawn() a subprocess is indicated by setting $?
     to "255 << 8".  $? is set in a way compatible with Unix (i.e. the
     exitstatus of the subprocess is obtained by "$? >> 8", as described
     in the documentation).  (Win32)

     There is no shell to process metacharacters, and the native standard
     is to pass a command line terminated by "\n" "\r" or "\0" to the
     spawned program.  Redirection such as `< ' foo >> is performed (if at
     all) by the run time library of the spawned program.  system list
     will call the Unix emulation library's exec emulation, which attempts
     to provide emulation of the stdin, stdout, stderr in force in the
     parent, providing the child program uses a compatible version of the
     emulation library.  scalar will call the native command line direct
     and no such emulation of a child Unix program will exists.  Mileage
     *will* vary.  (RISC OS)

     Far from being POSIX compliant.  Because there may be no underlying
     /bin/sh tries to work around the problem by forking and execing the
     first token in its argument string.  Handles basic redirection ("<"
     or ">") on its own behalf. (MiNT)

     Does not automatically flush output handles on some platforms.
     (SunOS, Solaris, HP-UX)

times
     Only the first entry returned is nonzero. (Mac OS)

     "cumulative" times will be bogus.  On anything other than Windows NT
     or Windows 2000, "system" time will be bogus, and "user" time is
     actually the time returned by the clock() function in the C runtime
     library. (Win32)

     Not useful. (RISC OS)

truncate FILEHANDLE,LENGTH
truncate EXPR,LENGTH
     Not implemented. (VMS)

     Truncation to zero-length only. (VOS)

     If a FILEHANDLE is supplied, it must be writable and opened in append
     mode (i.e., use `open(FH, ''>filename')> or
     `sysopen(FH,...,O_APPEND|O_RDWR)'.  If a filename is supplied, it
     should not be held open elsewhere. (Win32)

umask EXPR
umask
     Returns undef where unavailable, as of version 5.005.

     umask works but the correct permissions are set only when the file is
     finally closed. (AmigaOS)

utime LIST
     Only the modification time is updated. (Mac OS, VMS, RISC OS)

     May not behave as expected.  Behavior depends on the C runtime
     library's implementation of utime(), and the filesystem being used.
     The FAT filesystem typically does not support an "access time" field,
     and it may limit timestamps to a granularity of two seconds. (Win32)

wait
waitpid PID,FLAGS
     Not implemented. (Mac OS, VOS)

     Can only be applied to process handles returned for processes spawned
     using `system(1, ...)'. (Win32)

     Not useful. (RISC OS)

CHANGES
=======

v1.47, 22 March 2000
     Various cleanups from Tom Christiansen, including migration of long
     platform listings from *Note Perl: perl,.

v1.46, 12 February 2000
     Updates for VOS and MPE/iX. (Peter Prymmer)  Other small changes.

v1.45, 20 December 1999
     Small changes from 5.005_63 distribution, more changes to EBCDIC info.

v1.44, 19 July 1999
     A bunch of updates from Peter Prymmer for $^O values, endianness,
     File::Spec, VMS, BS2000, OS/400.

v1.43, 24 May 1999
     Added a lot of cleaning up from Tom Christiansen.

v1.42, 22 May 1999
     Added notes about tests, sprintf/printf, and epoch offsets.

v1.41, 19 May 1999
     Lots more little changes to formatting and content.

     Added a bunch of $^O and related values for various platforms; fixed
     mail and web addresses, and added and changed miscellaneous notes.
     (Peter Prymmer)

v1.40, 11 April 1999
     Miscellaneous changes.

v1.39, 11 February 1999
     Changes from Jarkko and EMX URL fixes Michael Schwern.  Additional
     note about newlines added.

v1.38, 31 December 1998
     More changes from Jarkko.

v1.37, 19 December 1998
     More minor changes.  Merge two separate version 1.35 documents.

v1.36, 9 September 1998
     Updated for Stratus VOS.  Also known as version 1.35.

v1.35, 13 August 1998
     Integrate more minor changes, plus addition of new sections under
     `"ISSUES"' in this node: `"Numbers endianness and Width"' in this
     node, `"Character sets and character encoding"' in this node,
     `"Internationalisation"' in this node.

v1.33, 06 August 1998
     Integrate more minor changes.

v1.32, 05 August 1998
     Integrate more minor changes.

v1.30, 03 August 1998
     Major update for RISC OS, other minor changes.

v1.23, 10 July 1998
     First public release with perl5.005.

Supported Platforms
===================

   As of early March 2000 (the Perl release 5.6.0), the following
platforms are able to build Perl from the standard source code
distribution available at http://www.perl.com/CPAN/src/index.html

     AIX
     DOS DJGPP 	1)
     FreeBSD
     HP-UX
     IRIX
     Linux
     LynxOS
     MachTen
     MPE/iX
     NetBSD
     OpenBSD
     OS/2
     QNX
     Rhapsody/Darwin 2)
     SCO SV
     SINIX
     Solaris
     SVR4
     Tru64 UNIX      3)
     UNICOS
     UNICOS/mk
     Unixware
     VMS
     VOS
     Windows 3.1     1)
     Windows 95      1) 4)
     Windows 98      1) 4)
     Windows NT      1) 4)

     1) in DOS mode either the DOS or OS/2 ports can be used
     2) new in 5.6.0: the BSD/NeXT-based UNIX of Mac OS X
     3) formerly known as Digital UNIX and before that DEC OSF/1
     4) compilers: Borland, Cygwin, Mingw32 EGCS/GCC, VC++

   The following platforms worked for the previous major release (5.005_03
being the latest maintenance release of that, as of early March 2000), but
be did not manage to test these in time for the 5.6.0 release of Perl.
There is a very good chance that these will work just fine with 5.6.0.

     A/UX
     BeOS
     BSD/OS
     DG/UX
     DYNIX/ptx
     DomainOS
     Hurd
     NextSTEP
     OpenSTEP
     PowerMAX
     SCO ODT/OSR
     SunOS
     Ultrix

   The following platform worked for the previous major release (5.005_03
being the latest maintenance release of that, as of early March 2000).
However, standardization on UTF-8 as the internal string representation in
5.6.0 has introduced incompatibilities in this EBCDIC platform.  Support
for this platform may be enabled in a future release:

     OS390	1)

     1) Previously known as MVS, or OpenEdition MVS.

   Strongly related to the OS390 platform by also being EBCDIC-based
mainframe platforms are the following platforms:

     BS2000
     VM/ESA

   These are also not expected to work under 5.6.0 for the same reasons as
OS390.  Contact the mailing list perl-mvs@perl.org for more details.

   MacOS (Classic, pre-X) is almost 5.6.0-ready; building from the source
does work with 5.6.0, but additional MacOS specific source code is needed
for a complete port.  Contact the mailing list macperl-porters@macperl.org
for more information.

   The following platforms have been known to build Perl from source in
the past, but we haven't been able to verify their status for the current
release, either because the hardware/software platforms are rare or
because we don't have an active champion on these platforms-or both:

     3b1
     AmigaOS
     ConvexOS
     CX/UX
     DC/OSx
     DDE SMES
     DOS EMX
     Dynix
     EP/IX
     ESIX
     FPS
     GENIX
     Greenhills
     ISC
     MachTen 68k
     MiNT
     MPC
     NEWS-OS
     Opus
     Plan 9
     PowerUX
     RISC/os
     Stellar
     SVR2
     TI1500
     TitanOS
     Unisys Dynix
     Unixware

   Support for the following platform is planned for a future Perl release:

     Netware

   The following platforms have their own source code distributions and
binaries available via http://www.perl.com/CPAN/ports/index.html:

     Perl release

     AS/400			5.003
     Netware			5.003_07
     Tandem Guardian		5.004

   The following platforms have only binaries available via
http://www.perl.com/CPAN/ports/index.html :

     Perl release

     Acorn RISCOS		5.005_02
     AOS			5.002
     LynxOS			5.004_02

   Although we do suggest that you always build your own Perl from the
source code, both for maximal configurability and for security, in case
you are in a hurry you can check http://www.perl.com/CPAN/ports/index.html
for binary distributions.

SEE ALSO
========

   *Note Perlamiga: perlamiga,, *Note Perlcygwin: perlcygwin,, *Note
Perldos: perldos,, *Note Perlhpux: perlhpux,, *Note Perlos2: perlos2,,
*Note Perlos390: perlos390,, *Note Perlwin32: perlwin32,, *Note Perlvms:
perlvms,, and *Note Win32: (pm.info)Win32,.

AUTHORS / CONTRIBUTORS
======================

   Abigail <abigail@fnx.com>, Charles Bailey <bailey@newman.upenn.edu>,
Graham Barr <gbarr@pobox.com>, Tom Christiansen <tchrist@perl.com>,
Nicholas Clark <Nicholas.Clark@liverpool.ac.uk>, Thomas Dorner
<Thomas.Dorner@start.de>, Andy Dougherty <doughera@lafcol.lafayette.edu>,
Dominic Dunlop <domo@vo.lu>, Neale Ferguson <neale@mailbox.tabnsw.com.au>,
David J. Fiander <davidf@mks.com>, Paul Green <Paul_Green@stratus.com>,
M.J.T. Guy <mjtg@cus.cam.ac.uk>, Jarkko Hietaniemi <jhi@iki.fi<gt>, Luther
Huffman <lutherh@stratcom.com>, Nick Ing-Simmons <nick@ni-s.u-net.com>,
Andreas J. KE<ouml>nig <koenig@kulturbox.de>, Markus Laker
<mlaker@contax.co.uk>, Andrew M. Langmead <aml@world.std.com>, Larry Moore
<ljmoore@freespace.net>, Paul Moore <Paul.Moore@uk.origin-it.com>, Chris
Nandor <pudge@pobox.com>, Matthias Neeracher <neeri@iis.ee.ethz.ch>, Gary
Ng <71564.1743@CompuServe.COM>, Tom Phoenix <rootbeer@teleport.com>,
AndrE<eacute> Pirard <A.Pirard@ulg.ac.be>, Peter Prymmer <pvhp@forte.com>,
Hugo van der Sanden <hv@crypt0.demon.co.uk>, Gurusamy Sarathy
<gsar@activestate.com>, Paul J. Schinder <schinder@pobox.com>, Michael G
Schwern <schwern@pobox.com>, Dan Sugalski <sugalskd@ous.edu>, Nathan
Torkington <gnat@frii.com>.

   This document is maintained by Chris Nandor <pudge@pobox.com>.

VERSION
=======

   Version 1.47, last modified 22 March 2000


