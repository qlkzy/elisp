This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Apache/PassExec,  Next: Apache/PassFile,  Prev: Apache/ParseLog,  Up: Module List

run CGI and catch its output
****************************

NAME
====

   Apache::PassExec - run CGI and catch its output

SYNOPSIS
========

   In the conf/access.conf file of your Apache installation add lines

     <Files *.html>
     SetHandler perl-script
     PerlHandler Apache::OutputChain Apache::GzipChain Apache::PassExec
     </Files>

DESCRIPTION
===========

   Runs a script (process) and fetches its output, passes it to next
chained handlers.

AUTHOR
======

   (c) 1997-1998 Andreas Koenig, Jan Pazdziora


File: pm.info,  Node: Apache/PassFile,  Next: Apache/PassHtml,  Prev: Apache/PassExec,  Up: Module List

print a file to STDOUT
**********************

NAME
====

   Apache::PassFile - print a file to STDOUT

SYNOPSIS
========

   In the conf/access.conf file of your Apache installation add lines

     <Files *.html>
     SetHandler perl-script
     PerlHandler Apache::OutputChain Apache::GzipChain Apache::PassFile
     </Files>

DESCRIPTION
===========

   This handler implements nothing but a quite efficient cat(1) in perl.
While it innocently prints to STDOUT it may well be the case that STDOUT
has been tied, and that's the only reason why this module is needed. Once
we can stack any apache modules on top of each other, this module becomes
obsolete.

   PassFile reads files from disk in chunks of size BUFFERSIZE.
BUFFERSIZE is a global variable that can be set via the BUFFERSIZE method.
The default value is 16384.

CONFIGURATION
=============

   Per default the module sets the `Last Modified' header. It requires
HTTP::Date in order to do so. You can suppress that by setting

     PerlSetVar no_mtime true

AUTHOR
======

   (c) 1997 Jan Pazdziora, adelton@fi.muni.cz, at Faculty of Informatics,
Masaryk University, Brno (small performance changes by Andreas Koenig)


File: pm.info,  Node: Apache/PassHtml,  Next: Apache/Peek,  Prev: Apache/PassFile,  Up: Module List

print out the html file
***********************

NAME
====

   Apache::PassHtml - print out the html file

SYNOPSIS
========

   In the conf/access.conf file of your Apache installation add lines

     <Files *.html>
     SetHandler perl-script
     PerlHandler Apache::OutputChain Apache::MakeCapital Apache::PassHtml
     </Files>

DESCRIPTION
===========

   This is simple script to show the use of module *Apache::OutputChain*.
It will pick up a html file and send it to the output, STDOUT. We assume
that the output is tied either to Apache (by default), or some
user-defined perl handler. We need to read and write to STDOUT in perl
since Apache will not pass its output into perl handlers.

AUTHOR
======

   (c) 1997-1998 Jan Pazdziora


File: pm.info,  Node: Apache/Peek,  Next: Apache/PerlRun,  Prev: Apache/PassHtml,  Up: Module List

A data debugging tool for the XS programmer
*******************************************

NAME
====

   Apache::Peek - A data debugging tool for the XS programmer

SYNOPSIS
========

     use Apache::Peek;
     Dump( $a );
     Dump( $a, 5 );
     DumpArray( 5, $a, $b, ... );
     	mstat "Point 5";

DESCRIPTION
===========

   Apache::Peek contains functions which allows raw Perl datatypes to be
manipulated from a Perl script.  This is used by those who do XS
programming to check that the data they are sending from C to Perl looks
as they think it should look.  The trick, then, is to know what the raw
datatype is supposed to look like when it gets to Perl.  This document
offers some tips and hints to describe good and bad raw data.

   It is very possible that this document will fall far short of being
useful to the casual reader.  The reader is expected to understand the
material in the first few sections of *Note Perlguts: (perl.info)perlguts,.

   Apache::Peek supplies a `Dump()' function which can dump a raw Perl
datatype, and `mstat("marker")' function to report on memory usage (if
perl is compiled with corresponding option).  The function DeadCode()
provides statistics on the data "frozen" into inactive CV.  Apache::Peek
also supplies `SvREFCNT()', `SvREFCNT_inc()', and `SvREFCNT_dec()' which
can query, increment, and decrement reference counts on SVs.  This
document will take a passive, and safe, approach to data debugging and for
that it will describe only the `Dump()' function.

   Function `DumpArray()' allows dumping of multiple values (useful when
you need to analize returns of functions).

   The global variable $Devel::Peek::pv_limit can be set to limit the
number of character printed in various string values.  Setting it to 0
means no limit.

EXAMPLES
========

   The following examples don't attempt to show everything as that would
be a monumental task, and, frankly, we don't want this manpage to be an
internals document for Perl.  The examples do demonstrate some basics of
the raw Perl datatypes, and should suffice to get most determined people
on their way.  There are no guidewires or safety nets, nor blazed trails,
so be prepared to travel alone from this point and on and, if at all
possible, don't fall into the quicksand (it's bad for business).

   Oh, one final bit of advice: take *Note Perlguts: (perl.info)perlguts,
with you.  When you return we expect to see it well-thumbed.

A simple scalar string
----------------------

   Let's begin by looking a simple scalar which is holding a string.

     use Apache::Peek 'Dump';
     $a = "hello";
     Dump $a;

   The output:

     SV = PVIV(0xbc288)
       REFCNT = 1
       FLAGS = (POK,pPOK)
       IV = 0
       PV = 0xb2048 "hello"\0
       CUR = 5
       LEN = 6

   This says `$a' is an SV, a scalar.  The scalar is a PVIV, a string.
Its reference count is 1.  It has the `POK' flag set, meaning its current
PV field is valid.  Because POK is set we look at the PV item to see what
is in the scalar.  The \0 at the end indicate that this PV is properly
NUL-terminated.  If the FLAGS had been IOK we would look at the IV item.
CUR indicates the number of characters in the PV.  LEN indicates the
number of bytes requested for the PV (one more than CUR, in this case,
because LEN includes an extra byte for the end-of-string marker).

A simple scalar number
----------------------

   If the scalar contains a number the raw SV will be leaner.

     use Apache::Peek 'Dump';
     $a = 42;
     Dump $a;

   The output:

     SV = IV(0xbc818)
       REFCNT = 1
       FLAGS = (IOK,pIOK)
       IV = 42

   This says `$a' is an SV, a scalar.  The scalar is an IV, a number.  Its
reference count is 1.  It has the `IOK' flag set, meaning it is currently
being evaluated as a number.  Because IOK is set we look at the IV item to
see what is in the scalar.

A simple scalar with an extra reference
---------------------------------------

   If the scalar from the previous example had an extra reference:

     use Apache::Peek 'Dump';
     $a = 42;
     $b = \$a;
     Dump $a;

   The output:

     SV = IV(0xbe860)
       REFCNT = 2
       FLAGS = (IOK,pIOK)
       IV = 42

   Notice that this example differs from the previous example only in its
reference count.  Compare this to the next example, where we dump $b
instead of `$a'.

A reference to a simple scalar
------------------------------

   This shows what a reference looks like when it references a simple
scalar.

     use Apache::Peek 'Dump';
     $a = 42;
     $b = \$a;
     Dump $b;

   The output:

     SV = RV(0xf041c)
       REFCNT = 1
       FLAGS = (ROK)
       RV = 0xbab08
     SV = IV(0xbe860)
       REFCNT = 2
       FLAGS = (IOK,pIOK)
       IV = 42

   Starting from the top, this says $b is an SV.  The scalar is an RV, a
reference.  It has the `ROK' flag set, meaning it is a reference.  Because
ROK is set we have an RV item rather than an IV or PV.  Notice that Dump
follows the reference and shows us what $b was referencing.  We see the
same `$a' that we found in the previous example.

   Note that the value of RV coincides with the numbers we see when we
stringify $b. The addresses inside RV() and IV() are addresses of `X***'
structure which holds the current state of an SV. This address may change
during lifetime of an SV.

A reference to an array
-----------------------

   This shows what a reference to an array looks like.

     use Apache::Peek 'Dump';
     $a = [42];
     Dump $a;

   The output:

     SV = RV(0xf041c)
       REFCNT = 1
       FLAGS = (ROK)
       RV = 0xb2850
     SV = PVAV(0xbd448)
       REFCNT = 1
       FLAGS = ()
       IV = 0
       NV = 0
       ARRAY = 0xb2048
       ALLOC = 0xb2048
       FILL = 0
       MAX = 0
       ARYLEN = 0x0
       FLAGS = (REAL)
     Elt No. 0 0xb5658
     SV = IV(0xbe860)
       REFCNT = 1
       FLAGS = (IOK,pIOK)
       IV = 42

   This says `$a' is an SV and that it is an RV.  That RV points to
another SV which is a PVAV, an array.  The array has one element, element
zero, which is another SV. The field FILL above indicates the last element
in the array, similar to `$#$a'.

   If `$a' pointed to an array of two elements then we would see the
following.

     use Apache::Peek 'Dump';
     $a = [42,24];
     Dump $a;

   The output:

     SV = RV(0xf041c)
       REFCNT = 1
       FLAGS = (ROK)
       RV = 0xb2850
     SV = PVAV(0xbd448)
       REFCNT = 1
       FLAGS = ()
       IV = 0
       NV = 0
       ARRAY = 0xb2048
       ALLOC = 0xb2048
       FILL = 0
       MAX = 0
       ARYLEN = 0x0
       FLAGS = (REAL)
     Elt No. 0  0xb5658
     SV = IV(0xbe860)
       REFCNT = 1
       FLAGS = (IOK,pIOK)
       IV = 42
     Elt No. 1  0xb5680
     SV = IV(0xbe818)
       REFCNT = 1
       FLAGS = (IOK,pIOK)
       IV = 24

   Note that `Dump' will not report all the elements in the array, only
several first (depending on how deep it already went into the report tree).

A reference to a hash
---------------------

   The following shows the raw form of a reference to a hash.

     use Apache::Peek 'Dump';
     $a = {hello=>42};
     Dump $a;

   The output:

     SV = RV(0xf041c)
       REFCNT = 1
       FLAGS = (ROK)
       RV = 0xb2850
     SV = PVHV(0xbd448)
       REFCNT = 1
       FLAGS = ()
       NV = 0
       ARRAY = 0xbd748
       KEYS = 1
       FILL = 1
       MAX = 7
       RITER = -1
       EITER = 0x0
     Elt "hello" => 0xbaaf0
     SV = IV(0xbe860)
       REFCNT = 1
       FLAGS = (IOK,pIOK)
       IV = 42

   This shows `$a' is a reference pointing to an SV.  That SV is a PVHV, a
hash. Fields RITER and EITER are used by ``each' in this node'.

Dumping a large array or hash
-----------------------------

   The `Dump()' function, by default, dumps up to 4 elements from a
toplevel array or hash.  This number can be increased by supplying a
second argument to the function.

     use Apache::Peek 'Dump';
     $a = [10,11,12,13,14];
     Dump $a;

   Notice that `Dump()' prints only elements 10 through 13 in the above
code.  The following code will print all of the elements.

     use Apache::Peek 'Dump';
     $a = [10,11,12,13,14];
     Dump $a, 5;

A reference to an SV which holds a C pointer
--------------------------------------------

   This is what you really need to know as an XS programmer, of course.
When an XSUB returns a pointer to a C structure that pointer is stored in
an SV and a reference to that SV is placed on the XSUB stack.  So the
output from an XSUB which uses something like the T_PTROBJ map might look
something like this:

     SV = RV(0xf381c)
       REFCNT = 1
       FLAGS = (ROK)
       RV = 0xb8ad8
     SV = PVMG(0xbb3c8)
       REFCNT = 1
       FLAGS = (OBJECT,IOK,pIOK)
       IV = 729160
       NV = 0
       PV = 0
       STASH = 0xc1d10       "CookBookB::Opaque"

   This shows that we have an SV which is an RV.  That RV points at another
SV.  In this case that second SV is a PVMG, a blessed scalar.  Because it
is blessed it has the OBJECT flag set.  Note that an SV which holds a C
pointer also has the `IOK' flag set.  The STASH is set to the package name
which this SV was blessed into.

   The output from an XSUB which uses something like the T_PTRREF map,
which doesn't bless the object, might look something like this:

     SV = RV(0xf381c)
       REFCNT = 1
       FLAGS = (ROK)
       RV = 0xb8ad8
     SV = PVMG(0xbb3c8)
       REFCNT = 1
       FLAGS = (IOK,pIOK)
       IV = 729160
       NV = 0
       PV = 0

A reference to a subroutine
---------------------------

   Looks like this:

     SV = RV(0x798ec)
       REFCNT = 1
       FLAGS = (TEMP,ROK)
       RV = 0x1d453c
     SV = PVCV(0x1c768c)
       REFCNT = 2
       FLAGS = ()
       IV = 0
       NV = 0
       COMP_STASH = 0x31068  "main"
       START = 0xb20e0
       ROOT = 0xbece0
       XSUB = 0x0
       XSUBANY = 0
       GVGV::GV = 0x1d44e8   "MY" :: "top_targets"
       FILEGV = 0x1fab74     "_<(eval 5)"
       DEPTH = 0
       PADLIST = 0x1c9338

   This shows that


     the subroutine is not an XSUB (since START and ROOT are non-zero, and
     XSUB is zero);


     that it was compiled in the package main;


     under the name `MY::top_targets';


     inside a 5th eval in the program;


     it is not currently executed (see DEPTH);


     it has no prototype (`PROTOTYPE' field is missing).

EXPORTS
=======

   `Peek', `mstats', `DeadCode' by default. Additionally available
SvREFCNT, SvREFCNT_inc, SvREFCNT_dec.

BUGS
====

   Readers have been known to skip important parts of *Note Perlguts:
(perl.info)perlguts,, causing much frustration for all.

SEE ALSO
========

   *Note Perlguts: (perl.info)perlguts,, and *Note Perlguts:
(perl.info)perlguts,, again.


File: pm.info,  Node: Apache/PerlRun,  Next: Apache/PerlRunFilter,  Prev: Apache/Peek,  Up: Module List

Run unaltered CGI scripts under mod_perl
****************************************

NAME
====

   Apache::PerlRun - Run unaltered CGI scripts under mod_perl

SYNOPSIS
========

     #in httpd.conf

     Alias /cgi-perl/ /perl/apache/scripts/
     PerlModule Apache::PerlRun

     <Location /cgi-perl>
     SetHandler perl-script
     PerlHandler Apache::PerlRun
     Options +ExecCGI
     #optional
     PerlSendHeader On
     ...
     </Location>

DESCRIPTION
===========

   This module's handler emulates the CGI environment, allowing
programmers to write scripts that run under CGI or mod_perl without
change.  Unlike Apache::Registry, the *Apache::PerlRun* handler does not
cache the script inside of a subroutine.  Scripts will be "compiled" every
request.  After the script has run, it's namespace is flushed of all
variables and subroutines.

   The Apache::Registry handler is much faster than *Apache::PerlRun*.
However, *Apache::PerlRun* is much faster than CGI as the fork is still
avoided and scripts can use modules which have been pre-loaded at server
startup time.  This module is meant for "Dirty" CGI Perl scripts which
relied on the single request lifetime of CGI and cannot run under
Apache::Registry without cleanup.

CAVEATS
=======

   If your scripts still have problems running under the *Apache::PerlRun*
handler, the *PerlRunOnce* option can be used so that the process running
the script will be shutdown.  Add this to your httpd.conf:

     <Location ...>
     PerlSetVar PerlRunOnce On
     ...
     </Location>

SEE ALSO
========

   perl(1), mod_perl(3), Apache::Registry(3)

AUTHOR
======

   Doug MacEachern


File: pm.info,  Node: Apache/PerlRunFilter,  Next: Apache/PerlRunXS,  Prev: Apache/PerlRun,  Up: Module List

run Perl scripts in an Apache::Filter chain
*******************************************

NAME
====

   Apache::PerlRunFilter - run Perl scripts in an Apache::Filter chain

SYNOPSIS
========

     #in httpd.conf

     PerlModule Apache::PerlRunFilter

     # Run the output of scripts through Apache::SSI
     <Files ~ "\.pl$">
      SetHandler perl-script
      PerlHandler Apache::PerlRunFilter Apache::SSI
      PerlSetVar Filter on
     </Files>

     # Generate some Perl code using templates, then execute it
     <Files ~ "\.tmpl$">
      SetHandler perl-script
      PerlHandler YourModule::GenCode Apache::PerlRunFilter
      PerlSetVar Filter on
     </Files>

DESCRIPTION
===========

   This module is a subclass of Apache::PerlRun, and contains all of its
functionality.  The only difference between the two is that this module
can be used in conjunction with the Apache::Filter module, whereas
Apache::PerlRun cannot.

   It only takes a tiny little bit of code to make the filtering stuff
work, so perhaps it would be more appropriate for the code to be
integrated right into Apache::PerlRun.  As it stands, I've had to
duplicate a bunch of PerlRun's code here (in the handler routine), so bug
fixes & feature changes must be made both places.

CAVEATS
=======

   Note that this is not an exact replacement for Apache::Registry - it
doesn't do any of the code-caching stuff that Registry does.  It shouldn't
be too hard a task, but for now Registry is still based on old code, and
Doug's plan is to make future versions of Registry by subclassing PerlRun
(see Apache::RegistryNG).  Since this is the case, I figured I'd hold off
on doing any Registry work until things have moved forward a bit.

SEE ALSO
========

   perl(1), mod_perl(3), Apache::PerlRun(3)

AUTHOR
======

   Ken Williams <ken@forum.swarthmore.edu>


File: pm.info,  Node: Apache/PerlRunXS,  Next: Apache/PerlSections,  Prev: Apache/PerlRunFilter,  Up: Module List

XS implementation of Apache::PerlRun/Apache::Registry
*****************************************************

NAME
====

   Apache::PerlRunXS - XS implementation of
Apache::PerlRun/Apache::Registry

SYNOPSIS
========

     #in httpd.conf

     Alias /perl/ /perl/apache/scripts/
     PerlModule Apache::PerlRunXS

     <Location /perl>
     SetHandler perl-script
     PerlHandler Apache::RegistryXS
     Options +ExecCGI
     #optional
     PerlSendHeader On
     ...
     </Location>

DESCRIPTION
===========

   This XS implementation of Apache::PerlRun and Apache::Registry will
some day replace the Perl versions.

SEE ALSO
========

   perl(1), mod_perl(3), Apache::Registry(3)

AUTHOR
======

   Doug MacEachern


File: pm.info,  Node: Apache/PerlSections,  Next: Apache/PerlVINC,  Prev: Apache/PerlRunXS,  Up: Module List

Utilities for work with <Perl> sections
***************************************

NAME
====

   Apache::PerlSections - Utilities for work with <Perl> sections

SYNOPSIS
========

     use Apache::PerlSections ();

DESCRIPTION
===========

   It is possible to configure you server entirely in Perl using <Perl>
sections in httpd.conf.  This module is here to help you with such a task.

METHODS
=======

dump
     This method will dump out all the configuration variables mod_perl
     will be feeding the the apache config gears.  The output is suitable
     to read back in via eval.

     Example:

          <Perl>

          use Apache::PerlSections ();

          $Port = 8529;

          $Location{"/perl"} = {
              SetHandler => "perl-script",
              PerlHandler => "Apache::Registry",
              Options => "ExecCGI",
          };

          @DocumentIndex = qw(index.htm index.html);

          $VirtualHost{"www.foo.com"} = {
              DocumentRoot => "/tmp/docs",
              ErrorLog => "/dev/null",
              Location => {
          	 "/" => {
          	     Allowoverride => 'All',
          	     Order => 'deny,allow',
          	     Deny  => 'from all',
          	     Allow => 'from foo.com',
          	 },
              },
          };

          print Apache::PerlSections->dump;

          </Perl>

     This will print something like so:

          package Apache::ReadConfig;
          #scalars:

          $Port = 8529;

          #arrays:

          @DocumentIndex = (
            'index.htm',
            'index.html'
          );

          #hashes:

          %Location = (
            '/perl' => {
              PerlHandler => 'Apache::Registry',
              SetHandler => 'perl-script',
              Options => 'ExecCGI'
            }
          );

          %VirtualHost = (
            'www.foo.com' => {
              Location => {
                '/' => {
                  Deny => 'from all',
                  Order => 'deny,allow',
                  Allow => 'from foo.com',
                  Allowoverride => 'All'
                }
              },
              DocumentRoot => '/tmp/docs',
              ErrorLog => '/dev/null'
            }
          );

          1;
          __END__

store
     This method will call the dump method, writing the output to a file,
     suitable to be pulled in via require.

     Example:

          Apache::PerlSections->store("httpd_config.pl");

          require 'httpd_config.pl';

SEE ALSO
========

   mod_perl(1), Data::Dumper(3), Devel::Symdump(3)

AUTHOR
======

   Doug MacEachern


File: pm.info,  Node: Apache/PerlVINC,  Next: Apache/PrettyPerl,  Prev: Apache/PerlSections,  Up: Module List

Allows versioning of modules among directories or v-hosts.
**********************************************************

NAME
====

     Apache::PerlVINC - Allows versioning of modules among directories or v-hosts.

SYNOPSIS
========

   #example httpd.conf:

   <VirtualHost dave.domain.com>

     # include the module. this line must be here.
     PerlModule Apache::PerlVINC

     # set the include path
     PerlINC /home/dave/site/files/modules
     # make sure VINC reloads the modules
     PerlFixupHandler Apache::PerlVINC
     # aptionally have VINC unload versioned modules
     PerlCleanupHandler Apache::PerlVINC

     # reloads Stuff::Things for all requests
     PerlVersion Stuff/Things.pm

     <Location /Spellcheck>
       SetHandler perl-script
       PerlHandler Spellcheck

     # reload version of this module found in PerlINC line
     PerlVersion Spellcheck.pm
       </Location>

   </VirtualHost>

   <VirtualHost steve.domain.com>

     PerlModule Apache::PerlVINC
     
     <Location /Spellcheck>
       SetHandler perl-script
       PerlHandler Spellcheck
       PerlFixupHandler Apache::PerlVINC
       # only reload for requests in /Spellcheck

     PerlINC /home/steve/site/files/modules
     PerlVersion Spellcheck.pm  # makes PerlVINC load this version
       </Location>

   </VirtualHost>

DESCRIPTION
===========

   With this module you can run two copies of a module without having to
worry about which version is being used. Suppose you have two `VirtualHost'
or Location that want to each use their own version of `Spellcheck.pm'.
Durning the FixUp phase, `Apache::PerlVINC' will tweak `@INC' and reload
`Spellcheck'. Optionally, it will unload that version if you specify
`Apache::PerlVINC' as a PerlCleanUpHandler.

   As you can guess, this module slows things down a little because it
unloads and reloads on a per-request basis. Hence, this module should only
be used in a development environment, not a mission critical one.

DIRECTIVES
==========

PerlINC
     Takes only one argument: the path to be prepended to `@INC'. In v0.1,
     this was stored internally as an array. This is no longer the case.
     However, it still works somewhat as expected in that subsequent calls
     to PerlINC will not overwrite the previous ones, provided they are
     not in the same config section (see BUGS). They will both be
     prepended to `@INC'. Note that `@INC' is not changed for the entire
     request, so dont count on that path being in `@INC' for your scripts.

PerlVersion
     This directives specifies the files you want reloaded. Depending on
     where this directive sits, files will be loaded (and perhaps
     unloaded). Ie. if this sits in a Location section, the files will
     only be reloaded on requests to that location.  If this lies in a
     server section, all requests to the server or v-host will have these
     files reloaded.

BUGS AND LIMITATIONS
====================

   Under some setups, `PerlModule''ing PerlVINC will cause the server to
silently crash on startup. Upgrading `Apache::ExtUtils' to v/1.04 might
fix the problem. As of this writing, the current version of mod_perl
(1.24) does not contain this version of `Apache::ExtUtils'. Until the next
version is released, you will have to obtain it from the latest cvs
snapshot.

   If the PerlINC directive is used twice in the same config section, the
first call will be overwritten. Ie.

     PerlINC /qwe
     PerlINC /poi
     
     <Location /asdf/>
       PerlINC /zxc
     </Location>

   For requests outside of /asdf/, @INC will contain /poi. Inside /asdf/
@INC will contain /zxc and /poi. This is kinda sucky, I know, and I hope
to fix for the next release.

AUTHORS
=======

     Doug MacEachern <dougm@pobox.com>
     Dave Moore <dave@epals.com>

COPYRIGHT
=========

   This library is free software. You can redistribute it and/or modify it
under the same terms as Perl itself.


File: pm.info,  Node: Apache/PrettyPerl,  Next: Apache/PrettyText,  Prev: Apache/PerlVINC,  Up: Module List

Apache mod_perl PerlHandler for nicer output perl files in the client's browser.
********************************************************************************

NAME
====

   *Apache::PrettyPerl* - Apache mod_perl PerlHandler for nicer output
perl files in the client's browser.

SYNOPSIS
========

   You must be using mod_perl. See http://perl.apache.org for details.
For the correct work your apache configuration would contain apache
directives look like these:

     # in httpd.conf (or any other apache configuration file)
     
     AddType	text/html	.pl	.pm
     
     <Files ~ "\.p[lm]$">
       SetHandler		perl-script
       PerlHandler		Apache::PerttyPerl
       PerlSetVar		TabSize 	8	# optional
       PerlSetVar		AllowDownload	On	# optional
     </Files>

   There is only example of apache configuration. Most probably you should
like place <Files> directive inside <Directory> directive.  Otherwise will
be handled all perl files, including CGI and mod_perl scripts.

DESCRIPTION
===========

   This is apache handler that converts perl files on the fly into syntax
highlighted HTML. So your perl scripts/modules will be look nicer. Also
possibly download original perl file (without syntax highlight).

CONFIGURATION DIRECTIVES
========================

   All features of the this PerlHandler, will be setting in the apache
confihuration files. For this you can use PerlSetVar apache directive. For
example:

     PerlSetVar	TabSize	8   # inside <Files>, <Location>, ...
     			    # apache directives

TabSize
     Setting size of the tab (\t) symbol. Default is 8.

AllowDownload
     If it setting to On at the end of the page will be displayed Download
     link, which allow download original file. Default is Off.

SEE ALSO
========

   perl(1), mod_perl(3), Apache(3)

AUTHOR
======

   Roman Kosenko

Contact info
------------

   E-mail:	ra@amk.lg.ua

   Home page: http://amk.lg.ua/~ra/PrettyPerl

Copyright
---------

   Copyright (c) 2000 Roman Kosenko.  All rights reserved.  This package
is free software; you can redistribute it and/or modify it under the same
terms as Perl itself.


File: pm.info,  Node: Apache/PrettyText,  Next: Apache/Proxy,  Prev: Apache/PrettyPerl,  Up: Module List

A very simple apache mod_perl PerlHandler for text files
********************************************************

NAME
====

   Apache::PrettyText - A very simple apache mod_perl PerlHandler for text
files

SYNOPSIS
========

   To modify your Apache server to dynamically format .txt files so they
look nicer in the client's browser, put the following directives into
httpd.conf, or in any VirtualHost section and restart the server.

   Optional: Insert a <Perl> section that changes
$Apache::PrettyText::TabWidth to your site's standard or set to 0 to
disable detabbing.  If you don't set it, the default is 4.

     <Perl>
     $Apache::PrettyText::TabWidth = 4;
     </ Perl> ## <-- Omit the space if you copy this example.

     <Files ~ "\.txt$">
     SetHandler perl-script
     PerlHandler Apache::PrettyText
     </Files>

   You must be using mod_perl. See http://perl.apache.org for details.

DESCRIPTION
===========

   This is a simple Apache handler written in Perl that converts text
files on the fly into a basic HTML format:

   * surrounded by <PRE> tags

   * tabs converted to spaces (optional)

   * white background

   * hilited URLs

   * first line of text file = <TITLE>

   Also serves as a good template to help you write your own simple

   handler.  I wrote this as an exercise because I found no good examples.

INSTALLATION
============

   If you're reading this in pod or man, it's already installed.  If
you're reading the source code in PrettyText.pm, you can copy this file
under the name "PrettyText.pm" into this location:


     /usr/lib/perl5/site_perl/Apache/

   ... or its equivalent on your computer.

   A helpful tip: you can include the entire contents of the PrettyText.pm
file or of your own version of it into a <Perl> section within httpd.conf.
This can be very helpful if you'd like to use this module as a template
for your own.

   To syntax-check your code under those circumstances, use:

     perl -cx httpd.conf

   ... which will read just the perl code between #!...perl and __END__ in
the httpd.conf file.

AUTHOR
======

     Chris Thorman <chris@thorman.com>
     Ignition, Inc.
     http://ignitiondesign.com

   Thanks to Vivek Khera, Doug MacEachern, Jeffrey William Baker for
suggestions and corrections.

COPYRIGHT
=========

   Available for use by anyone under the GNU General Public License.  Not
really supported, but further comments, suggestions, and corrections are
heartily solicited.

SEE ALSO
========

   Apache(3), mod_perl, http://perl.apache.org/src/contrib


File: pm.info,  Node: Apache/Proxy,  Next: Apache/Proxy/Info,  Prev: Apache/PrettyText,  Up: Module List

Perl interface to mod_proxy
***************************

NAME
====

   Apache::Proxy - Perl interface to mod_proxy

SYNOPSIS
========

     use Apache::Proxy ();

DESCRIPTION
===========

     my $status = Apache::Proxy->pass($r, "http://perl.apache.org/");
     my $hashfile = Apache::Proxy->proxy_hash($r, $url);

AUTHOR
======

   Doug MacEachern, Ilya Obshadko

SEE ALSO
========

   perl(1).


File: pm.info,  Node: Apache/Proxy/Info,  Next: Apache/ProxyPass,  Prev: Apache/Proxy,  Up: Module List

Small backend to get information from doc server to mod_perl server
*******************************************************************

NAME
====

   Apache::Proxy::Info - Small backend to get information from doc server
to mod_perl server

SYNOPSIS
========

     PerlModule Apache::Proxy::Info
     PerlTransHandler Aache::Proxy::Info

DESCRIPTION
===========

   This is a simple combination of a small C module for apache and another
one in Perl for mod_perl

   In lots of cases , you end up with a lightweight docserver in front of
a heavyweight mod_perl enabled server.  This is a good thing for speed and
performance (see http://perl.apache.org/guide).

   The problem this combination tries to solve is that the mod_perl server
doesn't know anything about the client connection, since it's only talking
to a doc server.

   Install the C module in the doc server like so

   cd apache-src ./configure -with-plenty-of-options
-add-module=/path/to/mod_proxy_add_info.c

   And you just need to put the Perl module in the mod_perl server perl
Makefile.PL make && make test && make install

   And in httpd.conf PerlModule Apache::Proxy::Info PerlTransHandler
Apache::Proxy::Info;

   Currently 3 pieces of information are passed thru

   $r->connection->remote_ip() $ENV{'HTTPS'} $r->header_in('Host');

   Enjoy!

AUTHOR
======

   Philippe M. Chiasson <gozer@hbesoftware.com>

SEE ALSO
========

   perl(1).


File: pm.info,  Node: Apache/ProxyPass,  Next: Apache/ProxyPassThru,  Prev: Apache/Proxy/Info,  Up: Module List

implement ProxyPass in perl
***************************

NAME
====

   Apache::ProxyPass - implement ProxyPass in perl

SYNOPSIS
========

     #httpd.conf or some such
      PerlSetVar ProxyPass_filename /xxx/proxy.conf

   <Location /foo>   SetHandler perl-script   PerlHandler Apache::ProxyPass
</Location>

   #proxy.conf looks like

     /foo/apache http://www.apache.org
     /foo/perl http://www.perl.com

DESCRIPTION
===========

   Implement the apache mod_proxy module in perl.  Based on
Apache::ProxyPassThru

AUTHOR
======

   Michael Smith <mjs@iii.co.uk>


File: pm.info,  Node: Apache/ProxyPassThru,  Next: Apache/ProxyRewrite,  Prev: Apache/ProxyPass,  Up: Module List

Skeleton for vanilla proxy
**************************

NAME
====

   Apache::ProxyPassThru - Skeleton for vanilla proxy

SYNOPSIS
========

     #httpd.conf or some such
     PerlTransHandler  Apache::ProxyPassThru
     PerlSetVar        ProxyPassThru_DumpHeaders 1

DESCRIPTION
===========

   This module uses libwww-perl as it's web client, feeding the response
back into the Apache API request_rec structure.  `PerlHandler' will only
be invoked if the request is a proxy request, otherwise, your normal
server configuration will handle the request.

   If used with the Apache::DumpHeaders module it lets you view the
headers from another site you are accessing.

PARAMETERS
==========

   This module is configured with PerlSetVar's.

ProxyPassThru_DumpHeaders
-------------------------

   If this is set to a true value we'll set r->notes("DumpHeaders") to
"proxypassthru" to get the request logged in the log. This is usually what
you want.

   Makes it easy to have Apache::DumpHeaders only dump headers from your
proxied requests.

SUPPORT
=======

   The latest version of this module can be found at CPAN and at `http:'
in this node. Send questions and suggestions to the modperl mailinglist
(see `http:' in this node for information) or directly to the author (see
below).

SEE ALSO
========

   mod_perl(3), Apache(3), LWP::UserAgent(3)

AUTHOR
======

   Ask Bjoern Hansen <ask@develooper.com>.

   Originally by Doug MacEachern.


File: pm.info,  Node: Apache/ProxyRewrite,  Next: Apache/ProxyStuff,  Prev: Apache/ProxyPassThru,  Up: Module List

mod_perl URL-rewriting proxy
****************************

NAME
====

   Apache::ProxyRewrite - mod_perl URL-rewriting proxy

SYNOPSIS
========

     <Location    />
     SetHandler   perl-script
     PerlHandler  Apache::ProxyRewrite

     PerlSetVar   ProxyTo           http://www.tivoli.com
     PerlSetVar   ProxyAuthInfo     "BASIC aGb2c3ewenQ6amF4szzmY3b="
     PerlSetVar   ProxyAuthRedirect On
     PerlSetVar   ProxyRewrite      "https://www.tivoli.com/secure => /secure"
     </Location>

     <Location    /secure>
     SetHandler   perl-script
     PerlHandler  Apache::ProxyRewrite

     PerlSetVar   ProxyTo           https://www.tivoli.com/secure
     PerlSetVar   ProxyAuthInfo     "BASIC aGb2c3ewenQ6amF4szzmY3b="
     PerlSetVar   ProxyAuthRedirect Off
     PerlSetVar   ProxyRewrite      "http://www.tivoli.com/ => /"
     </Location>

DESCRIPTION
===========

   *Apache::ProxyRewrite* acts as a reverse-proxy that will rewrite URLs
embedded in HTML documents per apache configuration directives.

   This module was written to allow multiple backend services with
discrete URLs to be presented as one service and to allow the proxy to do
authentication on the client's behalf.

CONFIGURATION OPTIONS
=====================

   The following variables can be defined within the configration of
Directory, Location, or Files blocks.

ProxyTo
     The URL for which ProxyRewrite will proxy its requests.

ProxyAuthInfo
     Authorization information for proxied requests. This string must
     conform to the credentials string defined in section 11 of RFC 2068.

ProxyAuthRedirect
     If the credentials supplied in the ProxyAuthInfo directive are
     insufficient and if ProxyAuthRedirect is set to On, the proxy server
     will redirect the client directly to the backend host. If
     ProxyAuthRedirect is set to Off (the default), the proxy server will
     challenge the client on the remote server's behalf.

ProxyRewrite
     A hash of URLs to rewrite. A note on hashes in configuration
     directives from the "Writing Apache Modules with Perl and C" book
     page 287:

          The only trick is to remember to put double quotes around the
          configuration value if it contains whitespace and not to allow
          your text editor to wrap it to another line. You can use
          backslash as a continuation character if you find long lines a
          pain to read.

NOTES
=====

*Automatic mappings*
     ProxyRewrite automatically adds a mapping for the remote relative URI
     and the current location. An example:

          ServerName   proxyhost

          <Location    /foo>
          PerlSetVar   ProxyTo   http://server1/A
          </Location>

     The request for http://proxyhost/foo/B is proxied to
     http://server1/A/B. Within the response from server1 is an embedded
     URI /A/C. This URI is rewritten to /foo/C before being returned to
     the client.

*Embedded Languages*
     Embedded languages such as Javascript are not parsed for embedded
     URLs. The problem is NP-Complete. The best choice is to surround all
     embedded languages in HTML comments to avoid possible parsing
     problems.

*Parser Notes*
     The parser takes a single pass through each HTML document. This
     method is extremely efficient, but it has possible drawbacks with
     poorly constructed HTML. All known drawbacks have been eliminated,
     but more may exist. Please contact the author if you have any trouble
     with parsed output.

*Special Thanks*
     A special thanks goes to my co-authors of absent, from which much of
     the rewriting code comes, Dave Korman and Avi Rubin. Absent is a
     system for secure remote access to an organization's internal web
     from outside its firewall. To learn more about absent, go to
     http://www.research.att.com/projects/absent/.

AUTHOR
======

   Christian Gilmore <cgilmore@tivoli.com>

SEE ALSO
========

   httpd(8), mod_perl(1)

COPYRIGHT
=========

   Copyright (C) 2001, International Business Machines Corporation and
others. All Rights Reserved.

   This module is free software; you can redistribute it and/or modify it
under the terms of the IBM Public License.


File: pm.info,  Node: Apache/ProxyStuff,  Next: Apache/RandomLocation,  Prev: Apache/ProxyRewrite,  Up: Module List

mod_perl header/footer/proxy module
***********************************

NAME
====

   Apache::ProxyStuff - mod_perl header/footer/proxy module

SYNOPSIS
========

     <Location /foo>
      SetHandler      perl-script
      PerlHandler     Apache::ProxyStuff
      PerlSetVar      HeaderFile      http://www.bar.com:81/includes/header.html
      PerlSetVar      FooterFile      http://www.bar.com:81/includes/footer.html
      PerlSetVar      MetaDescription "some description"
      PetlSetVar      MetaContent     "some content""
      PerlSetVar      BodyAttributes  "TOPMARGIN=0 LEFTMARGIN=0 MARGINHEIGHT=0 MARGINWIDTH=0"
      PerlSetVar      ProxyPrefix     http://www.foo.com
     </Location>

DESCRIPTION
===========

   Apache::ProxyStuff is module for adding headers and footers to content
proxied from other web servers. Rather than sandwiching the content
between the header and footer it "stuffs" the header and footer into their
correct places in the content - header after the <BODY> tag and footer
before the </BODY> tag. This allows you to give content living on
established servers a common look and feel without making changes to the
pages. (ProxyStuff will add <BODY> and </BODY> tags appropriately when the
document does not contain them. This allows even syntacticly incorrect
pages to have a common header and footer.)

   ProxyStuff also allows you to add meta tags to the <HEAD> section,
attributes to the <BODY> tag and manipulate links, image refs and form
actions as needed.

PARAMETERS
==========

   * HeaderFile

     HeaderFile specifies the URL of an HTML page that will be used as the
     header for proxied content. It will be added after the first <BODY>
     tag.

     Example: PerlSetVar HeaderFile http://www.bar.com/includes/header.html

   * FooterFile

     FooterFile specifies the URL of an HTML page that will be used as the
     footer for proxied content. It will be added before the </BODY> tag.

     Example: PerlSetVar FooterFile http://www.bar.com/includes/footer.html

   * ProxyPrefix

     ProxyPrefix specifies a URL which will be prepended to the URI of the
     request. The new URL is the location of the content to be proxied. If
     /proxy/content.html is requested and ProxyPrefix is set to
     http://www.foo.com, the content will be proxied from
     http://www.foo.com/proxy/content.html.

     Example: PerlSetVar ProxyPrefix http://www.foo.com

   * MetaDescription

     MetaDescription allows you to add a description meta tag to the
     <HEAD> section of the requested document.

     Example: PerlSetVar MetaDescription "ProxyStuff Home Page"

   * MetaContent

     MetaContent allows you to add a content meta tag to the <HEAD>
     section of the requested document.

     Example: PerlSetVar MetaContent "Apache, mod_perl, proxying"

   * BodyAttributes

     BodyAttributes allows you to add or modify attributes in the <BODY>
     tag in the proxied content. If you specify an attribute that exists
     in the <BODY> tag of the proxied page, the attribute that was in the
     page will be overwritten with the one you specified. If your
     attribute does not exist in the original <BODY> tag it will simply be
     added to the tag.

     Example: PerlSetVar BodyAttributes 'BGCOLOR="#FFFFFF" VLINK="BLUE"'

   * StripHost

     If StripHost is turned on, ProxyStuff will assume that the hostname
     of the server providing the content is the first part of the URI. For
     example, if the URI of the request is /foo/some/content.html and
     ProxyPrefix is set to http://www.foo.com then /foo will be stripped
     from the URI and a proxy request will be made to
     http://www.foo.com/some/content.html.

     (This is useful if your site is divided up into unique sections with
     their own headers/footers and each section has content proxied from
     multiple servers - /foo/hr, /bar/hr and /baz/hr.)

     Example: PerlSetVar StripHost Yes

   * AddHost2AHref

   * AddHost2ImgSrc

   * AddHost2FormAction

     AddHost2AHref, AddHost2ImgSrc and AddHost2FormAction are often used
     in conjunction with StripHost when your proxied content contains
     absolute links. ProxyStuff will add the provided text to the
     beginning of HREFs, SRCs and ACTIONs so these URLs are correctly
     mapped to ProxyStuff directories.

     For example, you set up <Location /foo> to use ProxyStuff.
     ProxyPrefix is set to http://www.foo.com, StripHost is turned on and
     AddHost2AHref, AddHost2ImgSrc and AddHost2FormAction are all set to
     foo. A user requests /foo/some/content.html. ProxyStuff removes /foo
     and requests http://www.foo.com/some/content.html. The page returned
     contains links such as <A HREF="/some/content.html">Link</A>.
     ProxyStuff will turn the link into <A
     HREF="/foo/some/content.html">Link</A> so when a user clicks on the
     link, the request will be handled by Apache::ProxyStuff.

     Example: PerlSetVar AddHost2Href foo

PREREQUISITES
=============

   Apache::ProxyStuff requires mod_perl, LWP and HTML::TokeParser.

AUTHOR
======

   Jason Bodnar <jason@shakabuku.org>

COPYRIGHT
=========

   Copyright (C) 2000, Jason Bodnar, Tivoli Systems

   This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


File: pm.info,  Node: Apache/RandomLocation,  Next: Apache/RedirectDBI,  Prev: Apache/ProxyStuff,  Up: Module List

Perl extension for mod_perl to handle random locations.
*******************************************************

NAME
====

   Apache::RandomLocation - Perl extension for mod_perl to handle random
locations.

SYNOPSIS
========

     You can use this in your Apache *.conf files to activate this module.

     <Location /scripts/random-image>
     SetHandler perl-script
     PerlSetVar BaseURL /images/
     PerlSetVar ConfigFile /usr/local/apache/etc/sponsors.txt
     PerlHandler Apache::RandomLocation
     </Location>

     <Location /scripts/CPAN>
     SetHandler perl-script
     PerlSetVar Type mirror
     PerlSetVar ConfigFile /usr/local/apache/etc/cpan_mirrors.txt
     PerlHandler Apache::RandomLocation
     </Location>

DESCRIPTION
===========

   Given a list of locations in ConfigFile, this module will instruct the
browser to redirect to one of them. The locations in ConfigFile are listed
one per line, with lines beginning with # being ignored.  How the
redirection is handled depends on the variable Type.

   If Type is undefined or set to file, the locations are assumed to be
files. *BaseUrl*, which can be a full or partial URL, gives the location
of these files. This can be used to implement, for example, a banner in an
HTML page: <IMG SRC="/scripts/random-image">. The file chosen is random.
Since after one call this image gets cached by the client, to generate
multiple random images on the same page, you could append different bogus
paths after the calling URL, as in <IMG SRC="/scripts/random-image/1"> and
<IMG SRC="/scripts/random-image/2">.

   In this case, if *BaseURL* indicates the local server is being used,
ConfigFile can contain a perl regular expression (enclosed by /, as in
*/\.gif$/*) which will be used to match files in  *BaseURL*.  If
ConfigFile is not defined, all files in *BaseUrl* will be read. If
*BaseUrl* is undefined, the top level directory of the local server is
assumed.

   If type is set to *mirror*, the locations in ConfigFile are assumed to
be mirror sites of some set of files, giving both the host name and the
directory path (eg, ftp.mirror.edu/path/to/dir).  In this mode the module
acts like the CPAN muliplexer code of http://www.perl.com/CPAN; for
example, http://my.host.edu/scripts/CPAN/src/latest.tar.gz will redirect
to a nearby CPAN mirror to retrieve the file `src/latest.tar.gz'.  Also
like the CPAN multiplexer, a call to the URL
http://my.host.edu/scripts/CPAN (without any trailing slash) will bring up
a form from which one can manually choose a site to go to.

   In this case, redirection is made to a random mirror site whose country
code in the domain name matches that of the client. If no such mirror
exists, a random mirror with country code matching *(com|edu|net|org|us)*
is selected. For these purposes, clients with country codes *com*, *edu*,
*org*, *net*, and *us* are considered equivalent. If a particular mirror
site should be considered as having a different country code in this
regard, add the desired code (separated by a space) to the end of the line
containing the address of the mirror in ConfigFile. If the address of a
mirror does not begin with *http://*, the *ftp://* protocol is assumed.

   Information on the locations is stored in a hash, which survives in
each child's memory for the life of the child. This hash is uniquely
associated with the given Location directive in *.conf, so that multiple
uses of Apache::RandomLocation modules on one server with different
Location directives is possible.

   Like Apache's configuration files, if any changes are made in
ConfigFile, the server must be restarted in order that the changes take
immediate effect; otherwise, one must wait for the child processes to die
in order that the new configuration file be read in.

Examples
========

   These directives in access.conf:

     <Location /scripts/random-image>
     SetHandler perl-script
     PerlSetVar BaseURL /images/
     PerlSetVar ConfigFile /usr/local/apache/etc/sponsors.txt
     PerlHandler Apache::RandomLocation
     </Location>

   with the following file /usr/local/apache/etc/sponsors.txt:

     apache.jpeg
     mod_perl.jpeg
     /\.gif$/

   will use the image files apache.jpeg, mod_perl.jpeg, and any gif image
in the server location /images. A random image will then be selected with
a call to http://your.server.name/scripts/random-image.

   These directives in access.conf:

     <Location /scripts/CPAN>
     SetHandler perl-script
     PerlSetVar Type mirror
     PerlSetVar ConfigFile /usr/local/apache/etc/cpan_mirrors.txt
     PerlHandler Apache::RandomLocation
     </Location>

   with the following file /usr/local/apache/etc/cpan_mirrors.txt:

     ftp.funet.fi/pub/languages/perl/CPAN
     ftp.metronet.com/pub/perl
     http://www.perl.com/CPAN
     ftp.utilis.com/pub/perl/CPAN ca

   can be used to redirect clients to a (hopefully) nearby random CPAN
mirror: a call to http://your.server.name/scripts/CPAN/src/latest.tar.gz
will grab the file latest.tar.gz under the $CPAN src/ directory of the
mirror. The ftp:// protocol is assumed for all sites except www.perl.com,
where http:// is used. For the purpose of matching the country code of the
client with that of the mirrors, ftp.utilis.com is to be considered as
having the country code of "ca".

   If a LocationMatch directive is given as, for example,

     <LocationMatch "/(physics|chemistry|biology)/random-image">
       SetHandler perl-script
       PerlSetVar BaseURL ~/images/
       PerlSetVar ConfigFile ~/images/config.txt
       PerlHandler Apache::RandomLocation
     </LocationMatch>

   then the tilde character will be interpreted as the corresponding home
directory (relative to *DocumentRoot*). For example, with *DocumentRoot*
equal to */usr/local/apache/htdocs*, a request to */biology/random-image*
will use a *BaseURL* of */usr/local/apache/htdocs/biology/images/* and a
ConfigFile of </usr/local/apache/htdocs/biology/images/config.txt>.

AUTHORS
=======

   Matthew Darwin, matthew@davin.ottawa.on.ca

   Randy Kobes, randy@theory.uwinnipeg.ca

   The mirror redirection code is based on the CPAN multiplexer code of
Tom Christiansen and a similar script by Ulrich Pfeifer.

SEE ALSO
========

   perl(1), Apache(3), mod_perl(3)

COPYRIGHT
=========

   Copyright 1998, Matthew Darwin, Randy Kobes

   This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


