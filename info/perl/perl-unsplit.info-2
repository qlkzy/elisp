This is Info file perl.info, produced by Makeinfo version 1.68 from the
input file bigperl.texi.

   settitle perl


File: perl.info,  Node: perlcompile,  Next: perldebug,  Prev: perldbmfilter,  Up: Top

Introduction to the Perl Compiler-Translator
********************************************

NAME
====

   perlcompile - Introduction to the Perl Compiler-Translator

DESCRIPTION
===========

   Perl has always had a compiler: your source is compiled into an
internal form (a parse tree) which is then optimized before being run.
Since version 5.005, Perl has shipped with a module capable of inspecting
the optimized parse tree (B), and this has been used to write many useful
utilities, including a module that lets you turn your Perl into C source
code that can be compiled into an native executable.

   The B module provides access to the parse tree, and other modules
("back ends") do things with the tree.  Some write it out as bytecode, C
source code, or a semi-human-readable text.  Another traverses the parse
tree to build a cross-reference of which subroutines, formats, and
variables are used where.  Another checks your code for dubious
constructs.  Yet another back end dumps the parse tree back out as Perl
source, acting as a source code beautifier or deobfuscator.

   Because its original purpose was to be a way to produce C code
corresponding to a Perl program, and in turn a native executable, the B
module and its associated back ends are known as "the compiler", even
though they don't really compile anything.  Different parts of the
compiler are more accurately a "translator", or an "inspector", but people
want Perl to have a "compiler option" not an "inspector gadget".  What can
you do?

   This document covers the use of the Perl compiler: which modules it
comprises, how to use the most important of the back end modules, what
problems there are, and how to work around them.

Layout
------

   The compiler back ends are in the `B::' hierarchy, and the front-end
(the module that you, the user of the compiler, will sometimes interact
with) is the O module.  Some back ends (e.g., B::C) have programs (e.g.,
perlcc) to hide the modules' complexity.

   Here are the important back ends to know about, with their status
expressed as a number from 0 (outline for later implementation) to 10 (if
there's a bug in it, we're very surprised):

B::Bytecode
     Stores the parse tree in a machine-independent format, suitable for
     later reloading through the ByteLoader module.  Status: 5 (some
     things work, some things don't, some things are untested).

B::C
     Creates a C source file containing code to rebuild the parse tree and
     resume the interpreter.  Status: 6 (many things work adequately,
     including programs using Tk).

B::CC
     Creates a C source file corresponding to the run time code path in
     the parse tree.  This is the closest to a Perl-to-C translator there
     is, but the code it generates is almost incomprehensible because it
     translates the parse tree into a giant switch structure that
     manipulates Perl structures.  Eventual goal is to reduce (given
     sufficient type information in the Perl program) some of the Perl
     data structure manipulations into manipulations of C-level ints,
     floats, etc.  Status: 5 (some things work, including uncomplicated Tk
     examples).

B::Lint
     Complains if it finds dubious constructs in your source code.  Status:
     6 (it works adequately, but only has a very limited number of areas
     that it checks).

B::Deparse
     Recreates the Perl source, making an attempt to format it coherently.
     Status: 8 (it works nicely, but a few obscure things are missing).

B::Xref
     Reports on the declaration and use of subroutines and variables.
     Status: 8 (it works nicely, but still has a few lingering bugs).

Using The Back Ends
===================

   The following sections describe how to use the various compiler back
ends.  They're presented roughly in order of maturity, so that the most
stable and proven back ends are described first, and the most experimental
and incomplete back ends are described last.

   The O module automatically enabled the -c flag to Perl, which prevents
Perl from executing your code once it has been compiled.  This is why all
the back ends print:

     myperlprogram syntax OK

   before producing any other output.

The Cross Referencing Back End
------------------------------

   The cross referencing back end (B::Xref) produces a report on your
program, breaking down declarations and uses of subroutines and variables
(and formats) by file and subroutine.  For instance, here's part of the
report from the pod2man program that comes with Perl:

     Subroutine clear_noremap
       Package (lexical)
         $ready_to_print   i1069, 1079
       Package main
         $&                1086
         $.                1086
         $0                1086
         $1                1087
         $2                1085, 1085
         $3                1085, 1085
         $ARGV             1086
         %HTML_Escapes     1085, 1085

   This shows the variables used in the subroutine `clear_noremap'.  The
variable `$ready_to_print' is a my() (lexical) variable, introduced (first
declared with my()) on line 1069, and used on line 1079.  The variable $&
from the main package is used on 1086, and so on.

   A line number may be prefixed by a single letter:

i
     Lexical variable introduced (declared with my()) for the first time.

&
     Subroutine or method call.

s
     Subroutine defined.

r
     Format defined.

   The most useful option the cross referencer has is to save the report
to a separate file.  For instance, to save the report on *myperlprogram*
to the file report:

     $ perl -MO=Xref,-oreport myperlprogram

The Decompiling Back End
------------------------

   The Deparse back end turns your Perl source back into Perl source.  It
can reformat along the way, making it useful as a de-obfuscator.  The most
basic way to use it is:

     $ perl -MO=Deparse myperlprogram

   You'll notice immediately that Perl has no idea of how to paragraph
your code.  You'll have to separate chunks of code from each other with
newlines by hand.  However, watch what it will do with one-liners:

     $ perl -MO=Deparse -e '$op=shift||die "usage: $0
     code [...]";chomp(@ARGV=<>)unless@ARGV; for(@ARGV){$was=$_;eval$op;
     die$@ if$@; rename$was,$_ unless$was eq $_}'
     -e syntax OK
     $op = shift @ARGV || die("usage: $0 code [...]");
     chomp(@ARGV = <ARGV>) unless @ARGV;
     foreach $_ (@ARGV) {
         $was = $_;
         eval $op;
         die $@ if $@;
         rename $was, $_ unless $was eq $_;
     }

   (this is the rename program that comes in the *eg/* directory of the
Perl source distribution).

   The decompiler has several options for the code it generates.  For
instance, you can set the size of each indent from 4 (as above) to 2 with:

     $ perl -MO=Deparse,-si2 myperlprogram

   The -p option adds parentheses where normally they are omitted:

     $ perl -MO=Deparse -e 'print "Hello, world\n"'
     -e syntax OK
     print "Hello, world\n";
     $ perl -MO=Deparse,-p -e 'print "Hello, world\n"'
     -e syntax OK
     print("Hello, world\n");

   See *Note B/Deparse: (pm.info)B/Deparse, for more information on the
formatting options.

The Lint Back End
-----------------

   The lint back end (B::Lint) inspects programs for poor style.  One
programmer's bad style is another programmer's useful tool, so options let
you select what is complained about.

   To run the style checker across your source code:

     $ perl -MO=Lint myperlprogram

   To disable context checks and undefined subroutines:

     $ perl -MO=Lint,-context,-undefined-subs myperlprogram

   See *Note B/Lint: (pm.info)B/Lint, for information on the options.

The Simple C Back End
---------------------

   This module saves the internal compiled state of your Perl program to a
C source file, which can be turned into a native executable for that
particular platform using a C compiler.  The resulting program links
against the Perl interpreter library, so it will not save you disk space
(unless you build Perl with a shared library) or program size.  It may,
however, save you startup time.

   The perlcc tool generates such executables by default.

     perlcc myperlprogram.pl

The Bytecode Back End
---------------------

   This back end is only useful if you also have a way to load and execute
the bytecode that it produces.  The ByteLoader module provides this
functionality.

   To turn a Perl program into executable byte code, you can use perlcc
with the -b switch:

     perlcc -b myperlprogram.pl

   The byte code is machine independent, so once you have a compiled
module or program, it is as portable as Perl source (assuming that the
user of the module or program has a modern-enough Perl interpreter to
decode the byte code).

   See B::Bytecode for information on options to control the optimization
and nature of the code generated by the Bytecode module.

The Optimized C Back End
------------------------

   The optimized C back end will turn your Perl program's run time
code-path into an equivalent (but optimized) C program that manipulates
the Perl data structures directly.  The program will still link against
the Perl interpreter library, to allow for eval(), `s///e', require, etc.

   The perlcc tool generates such executables when using the -opt switch.
To compile a Perl program (ending in `.pl' or `.p'):

     perlcc -opt myperlprogram.pl

   To produce a shared library from a Perl module (ending in `.pm'):

     perlcc -opt Myperlmodule.pm

   For more information, see `perlcc' in this node and *Note B/CC:
(pm.info)B/CC,.

B
     This module is the introspective ("reflective" in Java terms) module,
     which allows a Perl program to inspect its innards.  The back end
     modules all use this module to gain access to the compiled parse
     tree.  You, the user of a back end module, will not need to interact
     with B.

O
     This module is the front-end to the compiler's back ends.  Normally
     called something like this:

          $ perl -MO=Deparse myperlprogram

     This is like saying `use O 'Deparse'' in your Perl program.

B::Asmdata
     This module is used by the B::Assembler module, which is in turn used
     by the B::Bytecode module, which stores a parse-tree as bytecode for
     later loading.  It's not a back end itself, but rather a component of
     a back end.

B::Assembler
     This module turns a parse-tree into data suitable for storing and
     later decoding back into a parse-tree.  It's not a back end itself,
     but rather a component of a back end.  It's used by the *assemble*
     program that produces bytecode.

B::Bblock
     This module is used by the B::CC back end.  It walks "basic blocks".
     A basic block is a series of operations which is known to execute from
     start to finish, with no possiblity of branching or halting.

B::Bytecode
     This module is a back end that generates bytecode from a program's
     parse tree.  This bytecode is written to a file, from where it can
     later be reconstructed back into a parse tree.  The goal is to do the
     expensive program compilation once, save the interpreter's state into
     a file, and then restore the state from the file when the program is
     to be executed.  See `' in this node for details about usage.

B::C
     This module writes out C code corresponding to the parse tree and
     other interpreter internal structures.  You compile the corresponding
     C file, and get an executable file that will restore the internal
     structures and the Perl interpreter will begin running the program.
     See `' in this node for details about usage.

B::CC
     This module writes out C code corresponding to your program's
     operations.  Unlike the B::C module, which merely stores the
     interpreter and its state in a C program, the B::CC module makes a C
     program that does not involve the interpreter.  As a consequence,
     programs translated into C by B::CC can execute faster than normal
     interpreted programs.  See `' in this node for details about usage.

B::Debug
     This module dumps the Perl parse tree in verbose detail to STDOUT.
     It's useful for people who are writing their own back end, or who are
     learning about the Perl internals.  It's not useful to the average
     programmer.

B::Deparse
     This module produces Perl source code from the compiled parse tree.
     It is useful in debugging and deconstructing other people's code,
     also as a pretty-printer for your own source.  See `' in this node
     for details about usage.

B::Disassembler
     This module turns bytecode back into a parse tree.  It's not a back
     end itself, but rather a component of a back end.  It's used by the
     *disassemble* program that comes with the bytecode.

B::Lint
     This module inspects the compiled form of your source code for things
     which, while some people frown on them, aren't necessarily bad enough
     to justify a warning.  For instance, use of an array in scalar context
     without explicitly saying `scalar(@array)' is something that Lint can
     identify.  See `' in this node for details about usage.

B::Showlex
     This module prints out the my() variables used in a function or a
     file.  To gt a list of the my() variables used in the subroutine
     mysub() defined in the file myperlprogram:

          $ perl -MO=Showlex,mysub myperlprogram

     To gt a list of the my() variables used in the file myperlprogram:

          $ perl -MO=Showlex myperlprogram

     [BROKEN]

B::Stackobj
     This module is used by the B::CC module.  It's not a back end itself,
     but rather a component of a back end.

B::Stash
     This module is used by the `perlcc' in this node program, which
     compiles a module into an executable.  B::Stash prints the symbol
     tables in use by a program, and is used to prevent B::CC from
     producing C code for the B::* and O modules.  It's not a back end
     itself, but rather a component of a back end.

B::Terse
     This module prints the contents of the parse tree, but without as much
     information as B::Debug.  For comparison, `print "Hello, world."'
     produced 96 lines of output from B::Debug, but only 6 from B::Terse.

     This module is useful for people who are writing their own back end,
     or who are learning about the Perl internals.  It's not useful to the
     average programmer.

B::Xref
     This module prints a report on where the variables, subroutines, and
     formats are defined and used within a program and the modules it
     loads.  See `' in this node for details about usage.

KNOWN PROBLEMS
==============

   The simple C backend currently only saves typeglobs with alphanumeric
names.

   The optimized C backend outputs code for more modules than it should
(e.g., DirHandle).  It also has little hope of properly handling `goto
LABEL' outside the running subroutine (`goto &sub' is ok).  `goto LABEL'
currently does not work at all in this backend.  It also creates a huge
initialization function that gives C compilers headaches.  Splitting the
initialization function gives better results.  Other problems include:
unsigned math does not work correctly; some opcodes are handled
incorrectly by default opcode handling mechanism.

   BEGIN{} blocks are executed while compiling your code.  Any external
state that is initialized in BEGIN{}, such as opening files, initiating
database connections etc., do not behave properly.  To work around this,
Perl has an INIT{} block that corresponds to code being executed before
your program begins running but after your program has finished being
compiled.  Execution order: BEGIN{}, (possible save of state through
compiler back-end), INIT{}, program runs, END{}.

AUTHOR
======

   This document was originally written by Nathan Torkington, and is now
maintained by the perl5-porters mailing list *perl5-porters@perl.org*.


File: perl.info,  Node: perlcygwin,  Next: perldos,  Prev: perlamiga,  Up: Top

Perl for Cygwin
***************

NAME
====

   README.cygwin - Perl for Cygwin

SYNOPSIS
========

   This document will help you configure, make, test and install Perl on
Cygwin.  This document also describes features of Cygwin that will affect
how Perl behaves at runtime.

   NOTE: There are pre-built Perl packages available for Cygwin and a
version of Perl is provided on the Cygwin CD.  If you have no need to
customize the configuration, consider using one of these packages:

     http://cygutils.netpedia.net/

PREREQUISITES
=============

Cygwin = GNU+Cygnus+Windows (Don't leave UNIX without it)
---------------------------------------------------------

   The Cygwin tools are ports of the popular GNU development tools for
Win32 platforms.  They run thanks to the Cygwin library which provides the
UNIX system calls and environment these programs expect.  More information
about this project can be found at:

     http://sourceware.cygnus.com/cygwin/

   A recent net or commercial release of Cygwin is required.

   At the time this document was written, the port required recent
development snapshots that were expected to stabilize early in 2000 and be
released to the net as B21 and commercially as v1.1.

   NOTE: At this point, minimal effort has been made to provide
compatibility with old (beta) Cygwin releases.  The focus has been to
provide a high quality release and not worry about working around old
Cygwin bugs.  If you wish to use Perl with Cygwin B20.1 or earlier,
consider using either perl5.005_03 or perl5.005_62, which are available in
source and binary form at `http://cygutils.netpedia.net/' or on the Cygwin
CD.  If there is significant demand, a patch kit can be developed to port
back to earlier Cygwin versions.

Compiler
--------

   A recent net or commercial release of *gcc* is required.

   At the time this document was written, *gcc-2.95.2* was current and
could be downloaded from:

     ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/cygwin/gcc-2.95.2/

Cygwin Configuration
--------------------

   While building Perl some changes may be necessary to your Cygwin setup
so that Perl builds cleanly.  These changes are not required for normal
Perl usage.

   NOTE: The binaries that are built will run on all Win32 versions.  They
do not depend on your host system (Win9x, WinNT) or your Cygwin
configuration (*ntea*, *ntsec*, binary/text mounts).  The only
dependencies come from hardcoded pathnames like `/usr/local'.  However,
your host system and Cygwin configuration will affect Perl's runtime
behavior (see `' in this node).  Some regression tests may fail in
different ways depending on your setup.  For now, the test suite does not
skip tests that do not make sense given a particular setup.  If a test can
pass in some Cygwin setup, it is left in and explainable test failures are
documented.

   * PATH

     Set the PATH environment variable so that Configure finds the Cygwin
     versions of programs.  Any Windows directories should be removed or
     moved to the end of your PATH.

   * `/bin/cat.exe'

     There should be an instance of cat in `/bin' (or `/usr/bin').
     Configure tests `#!/bin/cat' and if it is not found, you will see the
     error:

          Configure: ./try: No such file or directory

   * `/usr/bin'

     If you do not have a `/usr/bin' directory, Configure will not prompt
     you to install *perl* into `/usr/bin'.

   * *nroff*

     If you do not have *nroff* (which is part of the *groff* package),
     Configure will not prompt you to install man pages.

   * Permissions

     On WinNT with either the *ntea* or *ntsec* `CYGWIN' settings,
     directory and file permissions may not be set correctly.  Since the
     build process creates files and directories, to be safe you may want
     to run a ``chmod -R +w *'' on the entire Perl source tree.

     Also, it is a well known WinNT "feature" that files created by a login
     that is a member of the *Administrators* group will be owned by the
     *Administrators* group.  Depending on your umask, you may find that
     you can not write to files that you just created (because you are no
     longer the owner).  When using the *ntsec* `CYGWIN' setting, this is
     not an issue because it "corrects" the ownership to what you would
     expect on a UNIX system.

CONFIGURE
=========

   The default options gathered by Configure with the assistance of
`hints/cygwin.sh' will build a Perl that supports dynamic loading (which
requires a shared `libperl.dll').

   This will run Configure and keep a record:

     ./Configure 2>&1 | tee log.configure

   If you are willing to accept all the defaults add a -d option.
However, several useful customizations are available.

Strip Binaries
--------------

   It is possible to strip the EXEs and DLLs created by the build process.
The resulting binaries will be significantly smaller.  If you want the
binaries to be stripped, you can either add a -s option when Configure
prompts you,

     Any additional ld flags (NOT including libraries)? [none] -s
     Any special flags to pass to gcc to use dynamic linking? [none] -s
     Any special flags to pass to ld2 to create a dynamically loaded library?
     [none] -s

   or you can edit `hints/cygwin.sh' and uncomment the relevant variables
near the end of the file.

Optional Libraries
------------------

   Several Perl functions and modules depend on the existence of some
optional libraries.  Configure will find them if they are installed in one
of the directories listed as being used for library searches.  Pre-built
packages for most of these are available at
`http://cygutils.netpedia.net/'.

   * `-lcrypt'

     The crypt libraries in GNU libc have been ported to Cygwin.

     The DES based Ultra Fast Crypt port was done by Alexey Truhan:

          http://dome.weeg.uiowa.edu/pub/domestic/sos/cw32crypt-dist-0.tgz

     NOTE: There are various export restrictions on DES implementations,
     see the glibc README for more details.

     The MD5 port was done by Andy Piper:

          http://dome.weeg.uiowa.edu/pub/domestic/sos/libcrypt.tgz

     More information can also be found at:

          http://miracle.geol.msu.ru/sos/

   * `-lgdbm' (`use GDBM_File')

     GDBM is available for Cygwin.  GDBM's ndbm/dbm compatibility feature
     also makes `NDBM_File' and `ODBM_File' possible (although they add
     little extra value).

   * `-ldb' (`use DB_File')

     BerkeleyDB is available for Cygwin.  Some details can be found in
     `ext/DB_File/DB_File.pm'.

   * `-lcygipc' (`use IPC::SysV')

     A port of SysV IPC is available for Cygwin.

     NOTE: This has not been extensively tested.  In particular,
     `d_semctl_semun' is undefined because it fails a configure test and on
     Win9x the shm*() functions seem to hang.

Configure-time Options
----------------------

   The INSTALL document describes several Configure-time options.  Some of
these will work with Cygwin, others are not yet possible.  Also, some of
these are experimental.  You can either select an option when Configure
prompts you or you can define (undefine) symbols on the command line.

   * `-Uusedl'

     Undefining this symbol forces Perl to be compiled statically.

   * `-Uusemymalloc'

     By default Perl uses the malloc() included with the Perl source.  If
     you want to force Perl to build with the system malloc() undefine
     this symbol.

   * `-Dusemultiplicity'

     Multiplicity is required when embedding Perl in a C program and using
     more than one interpreter instance.  This works with the Cygwin port.

   * `-Duseperlio'

     The PerlIO abstraction works with the Cygwin port.

   * `-Duse64bitint'

     *gcc* supports 64-bit integers.  However, several additional long long
     functions are necessary to use them within Perl (*{strtol,strtoul}l*).
     These are not yet available with Cygwin.

   * `-Duselongdouble'

     *gcc* supports long doubles (12 bytes).  However, several additional
     long double math functions are necessary to use them within Perl
     (*{atan2,cos,exp,floor,fmod,frexp,log,modf,pow,sin,sqrt}l,strtold*).
     These are not yet available with Cygwin.

   * `-Dusethreads'

     POSIX threads are not yet implemented in Cygwin.

   * -Duselargefiles

     Although Win32 supports large files, Cygwin currently uses 32-bit
     integers for internal size and position calculations.

Suspicious Warnings
-------------------

   You may see some messages during Configure that seem suspicious.

   * Whoa There

     Cygwin does not yet implement chroot(), setegid() or seteuid()
     functionality, but has stub functions that return `ENOSYS'.  You will
     see a message when Configure detects that its guess conflicts with the
     hint file.

          *** WHOA THERE!!! ***
              The recommended value for $d_chroot on this machine was "undef"!
              Keep the recommended value? [y]

     You should keep the recommended value.

   * dlsym

     ld2 is needed to build dynamic libraries, but it does not exist when
     dlsym() checking occurs (it is not created until `make' runs).  You
     will see the following message:

          Checking whether your dlsym() needs a leading underscore ...
          I can't compile and run the test program.
          I'm guessing that dlsym doesn't need a leading underscore.

     Since the guess is correct, this is not a problem.

   * Win9x and d_eofnblk

     Win9x does not correctly report EOF with a non-blocking read on a
     closed pipe.  You will see the following messages:

          But it also returns -1 to signal EOF, so be careful!
          WARNING: you can't distinguish between EOF and no data!

          *** WHOA THERE!!! ***
              The recommended value for $d_eofnblk on this machine was "define"!
              Keep the recommended value? [y]

     At least for consistency with WinNT, you should keep the recommended
     value.

   * Checking how std your stdio is...

     Configure reports:

          Your stdio doesn't appear very std.

     This is correct.

   * Compiler/Preprocessor defines

     The following error occurs because of the Cygwin `#define' of
     `_LONG_DOUBLE':

          Guessing which symbols your C compiler and preprocessor define...
          try.c:3847: parse error

     This failure does not seem to cause any problems.

MAKE
====

   Simply run make and wait:

     make 2>&1 | tee log.make

Warnings
--------

   Warnings like these are normal:

     warning: overriding commands for target <file>
     warning: ignoring old commands for target <file>

     Warning: no export definition file provided
     dllwrap will create one, but may not be what you want

ld2
---

   During `make', ld2 will be created and installed in your $installbin
directory (where you said to put public executables).  It does not wait
until the `make install' process to install the ld2 script, this is
because the remainder of the `make' refers to ld2 without fully specifying
its path and does this from multiple subdirectories.  The assumption is
that $installbin is in your current PATH.  If this is not the case or if
you do not have an install program, `make' will fail at some point.  If
this happens, just manually copy ld2 from the source directory to
someplace in your PATH.

TEST
====

   There are two steps to running the test suite:

     make test 2>&1 | tee log.make-test

     cd t;./perl harness 2>&1 | tee ../log.harness

   The same tests are run both times, but more information is provided when
running as ``./perl harness''.

   Test results vary depending on your host system and your Cygwin
configuration.  It is possible that Cygwin will pass all the tests, but it
is more likely that some tests will fail for one of these reasons.

File Permissions
----------------

   UNIX file permissions are based on sets of mode bits for
{read,write,execute} for each {user,group,other}.  By default Cygwin only
tracks the Win32 readonly attribute represented as the UNIX file user
write bit (files are always readable, files are executable if they have a
`.{com,bat,exe}' extension or begin with #!, directories are always
readable and executable).  On WinNT with the *ntea* `CYGWIN' setting, the
remaining mode bits are stored as extended attributes.  On WinNT with the
*ntsec* `CYGWIN' setting, permissions use the standard WinNT security
descriptors and access control lists.  Without one of these options, these
tests will fail:

     Failed Test           List of failed
     ------------------------------------
     io/fs.t               5, 7, 9-10
     lib/anydbm.t          2
     lib/db-btree.t        20
     lib/db-hash.t         16
     lib/db-recno.t        18
     lib/gdbm.t            2
     lib/ndbm.t            2
     lib/odbm.t            2
     lib/sdbm.t            2
     op/stat.t             9, 20 (.tmp not an executable extension)

Hard Links
----------

   FAT partitions do not support hard links (whereas NTFS does), in which
case Cygwin implements link() by copying the file.  These tests will fail:

     Failed Test           List of failed
     ------------------------------------
     io/fs.t               4
     op/stat.t             3

Filetime Granularity
--------------------

   On FAT partitions the filetime granularity is 2 seconds.  The following
test will fail:

     Failed Test           List of failed
     ------------------------------------
     io/fs.t               18

Tainting Checks
---------------

   When Perl is running in taint mode, `$ENV{PATH}' is considered tainted
and not used, so DLLs not in the default system directories will not be
found.  While the tests are running you will see warnings popup from the
system with messages like:

     Win9x
       Error Starting Program
       A required .DLL file, CYGWIN1.DLL, was not found

     WinNT
       perl.exe or sh.exe - Unable to Locate DLL
       The dynamic link library cygwin1.dll could not be found in the
         specified path ...

   Just click OK and ignore them.  When running `make test', 2 popups
occur.  During ``./perl harness'', 4 popups occur.  Also, these tests will
fail:

     Failed Test           List of failed
     ------------------------------------
     op/taint.t            1, 3, 31, 37

   Alternatively, you can copy `cygwin1.dll' into one of the Windows system
directories (although, this is not recommended).

/etc/group
----------

   Cygwin does not require /etc/group, in which case the `op/grent.t' test
will be skipped.  The check performed by `op/grent.t' expects to see
entries that use the members field, otherwise this test will fail:

     Failed Test           List of failed
     ------------------------------------
     op/grent.t            1

Unexplained Failures
--------------------

   Any additional tests that fail are likely due to bugs in Cygwin or the
optional libraries.  It is expected that by the time of the next net
release most of these will be solved so they are not described here.

Script Portability
------------------

   Cygwin does an outstanding job of providing UNIX-like semantics on top
of Win32 systems.  However, in addition to the items noted above, there
are some differences that you should know about.  This is only a very
brief guide to portability, more information can be found in the Cygwin
documentation.

   * Pathnames

     Cygwin pathnames can be separated by forward (/) or backward (\)
     slashes.  They may also begin with drive letters (`C:') or Universal
     Naming Codes (`//UNC').  DOS device names (`aux', `con', `prn',
     `com*', `lpt?') are invalid as base filenames.  However, they can be
     used in extensions (e.g., `hello.aux').  Names may not contain these
     characters:

          : * ? " < > |

     File names are case insensitive, but case preserving.  With the
     *mixed* `CYGWIN' setting, file names are mixed-case (although,
     directory names remain case insensitive).

     The *mixed* setting is only available with the "coolview" version of
     `cygwin1.dll' provided by Sergey Okhapkin at:

          ftp://ftp.franken.de/pub/win32/develop/gnuwin32/cygwin/porters/Okhapkin_Sergey/

   * Text/Binary

     When a file is opened it is in either text or binary mode.  In text
     mode a file is subject to CR/LF/Ctrl-Z translations.  With Cygwin,
     the default mode for an open() is determined by the mode of the mount
     that underlies the file.  Perl provides a binmode() function to set
     binary mode on files that otherwise would be treated as text.
     sysopen() with the `O_TEXT' flag sets text mode on files that
     otherwise would be treated as binary:

          sysopen(FOO, "bar", O_WRONLY|O_CREAT|O_TEXT)

     lseek(), tell() and sysseek() only work with files opened in binary
     mode.

     The text/binary issue is covered at length in the Cygwin
     documentation.

   * `.exe'

     The Cygwin stat() makes the `.exe' extension transparent by looking
     for a `foo.exe' when you ask for foo (unless a foo also exists).
     Cygwin does not require a `.exe' extension, but *gcc* adds it
     automatically when building a program.  However, when accessing an
     executable as a normal file (e.g., install or cp in a makefile) the
     `.exe' is not transparent.

     NOTE: There is a version of install that understands the `.exe'
     semantics, it can be found at:

          ftp://ftp.franken.de/pub/win32/develop/gnuwin32/cygwin/porters/Humblet_Pierre_A/

   * chown()

     On WinNT with the *ntsec* `CYGWIN' setting, chown() can change a
     file's user and group IDs.  In all other configurations chown() is a
     no-op, although this is appropriate on Win9x since there is no
     security model.

   * Miscellaneous

     File locking using the `F_GETLK' command to fcntl() is a stub that
     returns `ENOSYS'.

     Win9x can not rename() an open file (although WinNT can).

INSTALL
=======

   This will install Perl, including man pages.

     make install | tee log.make-install

   NOTE: If `STDERR' is redirected `make install' will not prompt you to
install *perl* into `/usr/bin'.

   You may need to be *Administrator* to run `make install'.  If you are
not, you must have write access to the directories in question.

   Information on installing the Perl documentation in HTML format can be
found in the INSTALL document.

MANIFEST
========

   These are the files in the Perl release that contain references to
Cygwin.  These very brief notes attempt to explain the reason for all
conditional code.  Hopefully, keeping this up to date will allow the
Cygwin port to be kept as clean as possible.

Documentation
          INSTALL README.cygwin
          Changes Changes5.005 Changes5.004
          AUTHORS MAINTAIN MANIFEST README.win32
          pod/perl.pod pod/perlfaq3.pod pod/perlhist.pod pod/perlmodlib.pod
          pod/perlport.pod pod/perltoc.pod pod/perl5004delta.pod

Build, Configure, Make, Install
          cygwin/Makefile.SHs
          cygwin/ld2.in
          cygwin/perlld.in
          ext/IPC/SysV/hints/cygwin.pl
          ext/NDBM_File/hints/cygwin.pl
          ext/ODBM_File/hints/cygwin.pl
          hints/cygwin.sh
          Configure             - help finding hints from uname,
                                  shared libperl required for dynamic loading
          Makefile.SH           - linklibperl
          Porting/patchls       - cygwin in port list
          installman            - man pages with :: translated to .
          installperl           - install dll/ld2/perlld, install to pods
          makedepend.SH         - uwinfix

Tests
          t/io/tell.t           - binmode
          t/lib/glob-basic.t    - Win32 directory list access differs from read mode
          t/op/magic.t          - $^X/symlink WORKAROUND, s/.exe//
          t/op/stat.t           - no /dev, skip Win32 ftCreationTime quirk
                                  (cache manager sometimes preserves ctime of file
                                  previously created and deleted), no -u (setuid)

Compiled Perl Source
          EXTERN.h              - __declspec(dllimport)
          XSUB.h                - __declspec(dllexport)
          cygwin/cygwin.c       - os_extras (getcwd)
          perl.c                - os_extras
          perl.h                - binmode
          doio.c                - win9x can not rename a file when it is open
          pp_sys.c              - do not define h_errno
          mg.c                  - environ WORKAROUND
          unixish.h             - environ WORKAROUND
          util.c                - environ WORKAROUND

Compiled Module Source
          ext/POSIX/POSIX.xs    - tzname defined externally
          ext/SDBM_File/sdbm/pair.c
                                - EXTCONST needs to be redefined from EXTERN.h
          ext/SDBM_File/sdbm/sdbm.c
                                - binary open

Perl Modules/Scripts
          lib/Cwd.pm            - hook to internal Cwd::cwd
          lib/ExtUtils/MakeMaker.pm
                                - require MM_Cygwin.pm
          lib/ExtUtils/MM_Cygwin.pm
                                - canonpath, cflags, manifypods, perl_archive
          lib/File/Spec/Unix.pm - preserve //unc
          lib/perl5db.pl        - use stdin not /dev/tty
          utils/perlcc.PL       - DynaLoader.a in compile, -DUSEIMPORTLIB
          utils/perldoc.PL      - version comment

BUGS
====

   Upon each start, make warns that a rule for `perlmain.o' is overridden
(but there seems to be no better solution than adding an explicit define).

   ``make clean'' does not remove library `.def' and `.exe.stackdump'
files.

   The ld2 script contains references to the source directory.  You should
change these to `/usr/local/bin' (or whatever) after install.

AUTHORS
=======

   Charles Wilson <cwilson@ece.gatech.edu>, Eric Fifer
<efifer@sanwaint.com>, alexander smishlajev <als@turnhere.com>, Steven
Morlock <newspost@morlock.net>, Sebastien Barre <Sebastien.Barre@utc.fr>,
Teun Burgers <burgers@ecn.nl>.

HISTORY
=======

   Last updated: 1 March 2000


File: perl.info,  Node: perldata,  Next: perlsyn,  Prev: perltoc,  Up: Top

Perl data types
***************

NAME
====

   perldata - Perl data types

DESCRIPTION
===========

Variable names
--------------

   Perl has three built-in data types: scalars, arrays of scalars, and
associative arrays of scalars, known as "hashes".  Normal arrays are
ordered lists of scalars indexed by number, starting with 0 and with
negative subscripts counting from the end.  Hashes are unordered
collections of scalar values indexed by their associated string key.

   Values are usually referred to by name, or through a named reference.
The first character of the name tells you to what sort of data structure
it refers.  The rest of the name tells you the particular value to which
it refers.  Usually this name is a single identifier, that is, a string
beginning with a letter or underscore, and containing letters,
underscores, and digits.  In some cases, it may be a chain of identifiers,
separated by `::' (or by the slightly archaic `''); all but the last are
interpreted as names of packages, to locate the namespace in which to look
up the final identifier (see `Packages', *Note Perlmod: perlmod, for
details).  It's possible to substitute for a simple identifier, an
expression that produces a reference to the value at runtime.   This is
described in more detail below and in `Packages', *Note Perlref: perlref,.

   Perl also has its own built-in variables whose names don't follow these
rules.  They have strange names so they don't accidentally collide with
one of your normal variables.  Strings that match parenthesized parts of a
regular expression are saved under names containing only digits after the
`$' (see *Note Perlop: perlop, and *Note Perlre: perlre,).  In addition,
several special variables that provide windows into the inner working of
Perl have names containing punctuation characters and control characters.
These are documented in *Note Perlvar: perlvar,.

   Scalar values are always named with '$', even when referring to a
scalar that is part of an array or a hash.  The '$' symbol works
semantically like the English word "the" in that it indicates a single
value is expected.

     $days		# the simple scalar value "days"
     $days[28]		# the 29th element of array @days
     $days{'Feb'}	# the 'Feb' value from hash %days
     $#days		# the last index of array @days

   Entire arrays (and slices of arrays and hashes) are denoted by '@',
which works much like the word "these" or "those" does in English, in that
it indicates multiple values are expected.

     @days		# ($days[0], $days[1],... $days[n])
     @days[3,4,5]	# same as ($days[3],$days[4],$days[5])
     @days{'a','c'}	# same as ($days{'a'},$days{'c'})

   Entire hashes are denoted by '%':

     %days		# (key1, val1, key2, val2 ...)

   In addition, subroutines are named with an initial '&', though this is
optional when unambiguous, just as the word "do" is often redundant in
English.  Symbol table entries can be named with an initial '*', but you
don't really care about that yet (if ever :-).

   Every variable type has its own namespace, as do several non-variable
identifiers.  This means that you can, without fear of conflict, use the
same name for a scalar variable, an array, or a hash-or, for that matter,
for a filehandle, a directory handle, a subroutine name, a format name, or
a label.  This means that $foo and @foo are two different variables.  It
also means that `$foo[1]' is a part of @foo, not a part of $foo.  This may
seem a bit weird, but that's okay, because it is weird.

   Because variable references always start with '$', '@', or '%', the
"reserved" words aren't in fact reserved with respect to variable names.
They *are* reserved with respect to labels and filehandles, however, which
don't have an initial special character.  You can't have a filehandle
named "log", for instance.  Hint: you could say `open(LOG,'logfile')'
rather than `open(log,'logfile')'.  Using uppercase filehandles also
improves readability and protects you from conflict with future reserved
words.  Case *is* significant-"FOO", "Foo", and "foo" are all different
names.  Names that start with a letter or underscore may also contain
digits and underscores.

   It is possible to replace such an alphanumeric name with an expression
that returns a reference to the appropriate type.  For a description of
this, see *Note Perlref: perlref,.

   Names that start with a digit may contain only more digits.  Names that
do not start with a letter, underscore, or digit are limited to one
character, e.g.,  $% or $$.  (Most of these one character names have a
predefined significance to Perl.  For instance, $$ is the current process
id.)

Context
-------

   The interpretation of operations and values in Perl sometimes depends
on the requirements of the context around the operation or value.  There
are two major contexts: list and scalar.  Certain operations return list
values in contexts wanting a list, and scalar values otherwise.  If this
is true of an operation it will be mentioned in the documentation for that
operation.  In other words, Perl overloads certain operations based on
whether the expected return value is singular or plural.  Some words in
English work this way, like "fish" and "sheep".

   In a reciprocal fashion, an operation provides either a scalar or a
list context to each of its arguments.  For example, if you say

     int( <STDIN> )

   the integer operation provides scalar context for the <> operator,
which responds by reading one line from STDIN and passing it back to the
integer operation, which will then find the integer value of that line and
return that.  If, on the other hand, you say

     sort( <STDIN> )

   then the sort operation provides list context for <>, which will
proceed to read every line available up to the end of file, and pass that
list of lines back to the sort routine, which will then sort those lines
and return them as a list to whatever the context of the sort was.

   Assignment is a little bit special in that it uses its left argument to
determine the context for the right argument.  Assignment to a scalar
evaluates the right-hand side in scalar context, while assignment to an
array or hash evaluates the righthand side in list context.  Assignment to
a list (or slice, which is just a list anyway) also evaluates the
righthand side in list context.

   When you use the `use warnings' pragma or Perl's -w command-line
option, you may see warnings about useless uses of constants or functions
in "void context".  Void context just means the value has been discarded,
such as a statement containing only `"fred";' or `getpwuid(0);'.  It still
counts as scalar context for functions that care whether or not they're
being called in list context.

   User-defined subroutines may choose to care whether they are being
called in a void, scalar, or list context.  Most subroutines do not need
to bother, though.  That's because both scalars and lists are
automatically interpolated into lists.  See `wantarray', *Note Perlfunc:
perlfunc, for how you would dynamically discern your function's calling
context.

Scalar values
-------------

   All data in Perl is a scalar, an array of scalars, or a hash of
scalars.  A scalar may contain one single value in any of three different
flavors: a number, a string, or a reference.  In general, conversion from
one form to another is transparent.  Although a scalar may not directly
hold multiple values, it may contain a reference to an array or hash which
in turn contains multiple values.

   Scalars aren't necessarily one thing or another.  There's no place to
declare a scalar variable to be of type "string", type "number", type
"reference", or anything else.  Because of the automatic conversion of
scalars, operations that return scalars don't need to care (and in fact,
cannot care) whether their caller is looking for a string, a number, or a
reference.  Perl is a contextually polymorphic language whose scalars can
be strings, numbers, or references (which includes objects).  Although
strings and numbers are considered pretty much the same thing for nearly
all purposes, references are strongly-typed, uncastable pointers with
builtin reference-counting and destructor invocation.

   A scalar value is interpreted as TRUE in the Boolean sense if it is not
the null string or the number 0 (or its string equivalent, "0").  The
Boolean context is just a special kind of scalar context where no
conversion to a string or a number is ever performed.

   There are actually two varieties of null strings (sometimes referred to
as "empty" strings), a defined one and an undefined one.  The defined
version is just a string of length zero, such as "".  The undefined
version is the value that indicates that there is no real value for
something, such as when there was an error, or at end of file, or when you
refer to an uninitialized variable or element of an array or hash.
Although in early versions of Perl, an undefined scalar could become
defined when first used in a place expecting a defined value, this no
longer happens except for rare cases of autovivification as explained in
*Note Perlref: perlref,.  You can use the defined() operator to determine
whether a scalar value is defined (this has no meaning on arrays or
hashes), and the undef() operator to produce an undefined value.

   To find out whether a given string is a valid non-zero number, it's
sometimes enough to test it against both numeric 0 and also lexical "0"
(although this will cause -w noises).  That's because strings that aren't
numbers count as 0, just as they do in *awk*:

     if ($str == 0 && $str ne "0")  {
     	warn "That doesn't look like a number";
     }

   That method may be best because otherwise you won't treat IEEE
notations like NaN or `Infinity' properly.  At other times, you might
prefer to determine whether string data can be used numerically by calling
the POSIX::strtod() function or by inspecting your string with a regular
expression (as documented in *Note Perlre: perlre,).

     warn "has nondigits"	if     /\D/;
     warn "not a natural number" unless /^\d+$/;             # rejects -3
     warn "not an integer"       unless /^-?\d+$/;           # rejects +3
     warn "not an integer"       unless /^[+-]?\d+$/;
     warn "not a decimal number" unless /^-?\d+\.?\d*$/;     # rejects .2
     warn "not a decimal number" unless /^-?(?:\d+(?:\.\d*)?|\.\d+)$/;
     warn "not a C float"
     	unless /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/;

   The length of an array is a scalar value.  You may find the length of
array @days by evaluating `$#days', as in *csh*.  Technically speaking,
this isn't the length of the array; it's the subscript of the last
element, since there is ordinarily a 0th element.  Assigning to `$#days'
actually changes the length of the array.  Shortening an array this way
destroys intervening values.  Lengthening an array that was previously
shortened does not recover values that were in those elements.  (It used
to do so in Perl 4, but we had to break this to make sure destructors were
called when expected.)

   You can also gain some miniscule measure of efficiency by pre-extending
an array that is going to get big.  You can also extend an array by
assigning to an element that is off the end of the array.  You can
truncate an array down to nothing by assigning the null list () to it.
The following are equivalent:

     @whatever = ();
     $#whatever = -1;

   If you evaluate an array in scalar context, it returns the length of
the array.  (Note that this is not true of lists, which return the last
value, like the C comma operator, nor of built-in functions, which return
whatever they feel like returning.)  The following is always true:

     scalar(@whatever) == $#whatever - $[ + 1;

   Version 5 of Perl changed the semantics of $[: files that don't set the
value of $[ no longer need to worry about whether another file changed its
value.  (In other words, use of $[ is deprecated.)  So in general you can
assume that

     scalar(@whatever) == $#whatever + 1;

   Some programmers choose to use an explicit conversion so as to leave
nothing to doubt:

     $element_count = scalar(@whatever);

   If you evaluate a hash in scalar context, it returns false if the hash
is empty.  If there are any key/value pairs, it returns true; more
precisely, the value returned is a string consisting of the number of used
buckets and the number of allocated buckets, separated by a slash.  This
is pretty much useful only to find out whether Perl's internal hashing
algorithm is performing poorly on your data set.  For example, you stick
10,000 things in a hash, but evaluating %HASH in scalar context reveals
`"1/16"', which means only one out of sixteen buckets has been touched,
and presumably contains all 10,000 of your items.  This isn't supposed to
happen.

   You can preallocate space for a hash by assigning to the keys()
function.  This rounds up the allocated bucked to the next power of two:

     keys(%users) = 1000;		# allocate 1024 buckets

Scalar value constructors
-------------------------

   Numeric literals are specified in any of the following floating point or
integer formats:

     12345
     12345.67
     .23E-10             # a very small number
     4_294_967_296       # underline for legibility
     0xff                # hex
     0377                # octal
     0b011011            # binary

   String literals are usually delimited by either single or double
quotes.  They work much like quotes in the standard Unix shells:
double-quoted string literals are subject to backslash and variable
substitution; single-quoted strings are not (except for `\'' and \\).  The
usual C-style backslash rules apply for making characters such as newline,
tab, etc., as well as some more exotic forms.  See `"Quote and Quote-like
Operators"', *Note Perlop: perlop, for a list.

   Hexadecimal, octal, or binary, representations in string literals (e.g.
'0xff') are not automatically converted to their integer representation.
The hex() and oct() functions make these conversions for you.  See `hex',
*Note Perlfunc: perlfunc, and `oct', *Note Perlfunc: perlfunc, for more
details.

   You can also embed newlines directly in your strings, i.e., they can end
on a different line than they begin.  This is nice, but if you forget your
trailing quote, the error will not be reported until Perl finds another
line containing the quote character, which may be much further on in the
script.  Variable substitution inside strings is limited to scalar
variables, arrays, and array or hash slices.  (In other words, names
beginning with $ or @, followed by an optional bracketed expression as a
subscript.)  The following code segment prints out "The price is $100."

     $Price = '$100';	# not interpreted
     print "The price is $Price.\n";	# interpreted

   As in some shells, you can enclose the variable name in braces to
disambiguate it from following alphanumerics.  You must also do this when
interpolating a variable into a string to separate the variable name from
a following double-colon or an apostrophe, since these would be otherwise
treated as a package separator:

     $who = "Larry";
     print PASSWD "${who}::0:0:Superuser:/:/bin/perl\n";
     print "We use ${who}speak when ${who}'s here.\n";

   Without the braces, Perl would have looked for a $whospeak, a
`$who::0', and a `$who's' variable.  The last two would be the $0 and the
$s variables in the (presumably) non-existent package who.

   In fact, an identifier within such curlies is forced to be a string, as
is any simple identifier within a hash subscript.  Neither need quoting.
Our earlier example, `$days{'Feb'}' can be written as `$days{Feb}' and the
quotes will be assumed automatically.  But anything more complicated in
the subscript will be interpreted as an expression.

   A literal of the form `v1.20.300.4000' is parsed as a string composed
of characters with the specified ordinals.  This provides an alternative,
more readable way to construct strings, rather than use the somewhat less
readable interpolation form `"\x{1}\x{14}\x{12c}\x{fa0}"'.  This is useful
for representing Unicode strings, and for comparing version "numbers"
using the string comparison operators, cmp, gt, lt etc.  If there are two
or more dots in the literal, the leading v may be omitted.

     print v9786;              # prints UTF-8 encoded SMILEY, "\x{263a}"
     print v102.111.111;       # prints "foo"
     print 102.111.111;        # same

   Such literals are accepted by both require and use for doing a version
check.  The $^V special variable also contains the running Perl
interpreter's version in this form.  See `$^V', *Note Perlvar: perlvar,.

   The special literals __FILE__, __LINE__, and __PACKAGE__ represent the
current filename, line number, and package name at that point in your
program.  They may be used only as separate tokens; they will not be
interpolated into strings.  If there is no current package (due to an
empty `package;' directive), __PACKAGE__ is the undefined value.

   The two control characters ^D and ^Z, and the tokens __END__ and
__DATA__ may be used to indicate the logical end of the script before the
actual end of file.  Any following text is ignored.

   Text after __DATA__ but may be read via the filehandle `PACKNAME::DATA',
where `PACKNAME' is the package that was current when the __DATA__ token
was encountered.  The filehandle is left open pointing to the contents
after __DATA__.  It is the program's responsibility to `close DATA' when
it is done reading from it.  For compatibility with older scripts written
before __DATA__ was introduced, __END__ behaves like __DATA__ in the
toplevel script (but not in files loaded with require or do) and leaves
the remaining contents of the file accessible via `main::DATA'.

   See *Note SelfLoader: (pm.info)SelfLoader, for more description of
__DATA__, and an example of its use.  Note that you cannot read from the
DATA filehandle in a BEGIN block: the BEGIN block is executed as soon as
it is seen (during compilation), at which point the corresponding __DATA__
(or __END__) token has not yet been seen.

   A word that has no other interpretation in the grammar will be treated
as if it were a quoted string.  These are known as "barewords".  As with
filehandles and labels, a bareword that consists entirely of lowercase
letters risks conflict with future reserved words, and if you use the `use
warnings' pragma or the -w switch, Perl will warn you about any such
words.  Some people may wish to outlaw barewords entirely.  If you say

     use strict 'subs';

   then any bareword that would NOT be interpreted as a subroutine call
produces a compile-time error instead.  The restriction lasts to the end
of the enclosing block.  An inner block may countermand this by saying `no
strict 'subs''.

   Arrays and slices are interpolated into double-quoted strings by
joining the elements with the delimiter specified in the $" variable
($LIST_SEPARATOR in English), space by default.  The following are
equivalent:

     $temp = join($", @ARGV);
     system "echo $temp";

     system "echo @ARGV";

   Within search patterns (which also undergo double-quotish substitution)
there is an unfortunate ambiguity:  Is `/$foo[bar]/' to be interpreted as
`/${foo}[bar]/' (where `[bar]' is a character class for the regular
expression) or as `/${foo[bar]}/' (where `[bar]' is the subscript to array
@foo)?  If @foo doesn't otherwise exist, then it's obviously a character
class.  If @foo exists, Perl takes a good guess about `[bar]', and is
almost always right.  If it does guess wrong, or if you're just plain
paranoid, you can force the correct interpretation with curly braces as
above.

   A line-oriented form of quoting is based on the shell "here-document"
syntax.  Following a `< << '> you specify a string to terminate the quoted
material, and all lines following the current line down to the terminating
string are the value of the item.  The terminating string may be either an
identifier (a word), or some quoted text.  If quoted, the type of quotes
you use determines the treatment of the text, just as in regular quoting.
An unquoted identifier works like double quotes.  There must be no space
between the `< << '> and the identifier.  (If you put a space it will be
treated as a null identifier, which is valid, and matches the first empty
line.)  The terminating string must appear by itself (unquoted and with no
surrounding whitespace) on the terminating line.

     print <<EOF;
         The price is $Price.
         EOF

     print <<"EOF";	# same as above
         The price is $Price.
         EOF

     print <<`EOC`;	# execute commands
         echo hi there
         echo lo there
         EOC

     print <<"foo", <<"bar";	# you can stack them
         I said foo.
         foo
         I said bar.
         bar

     myfunc(<<"THIS", 23, <<'THAT');
         Here's a line
         or two.
         THIS
         and here's another.
         THAT

   Just don't forget that you have to put a semicolon on the end to finish
the statement, as Perl doesn't know you're not going to try to do this:

     print <<ABC
         179231
         ABC
     + 20;

   If you want your here-docs to be indented with the rest of the code,
you'll need to remove leading whitespace from each line manually:

     ($quote = <<'FINIS') =~ s/^\s+//gm;
     	The Road goes ever on and on,
     	down from the door where it began.
     FINIS

List value constructors
-----------------------

   List values are denoted by separating individual values by commas (and
enclosing the list in parentheses where precedence requires it):

     (LIST)

   In a context not requiring a list value, the value of what appears to
be a list literal is simply the value of the final element, as with the C
comma operator.  For example,

     @foo = ('cc', '-E', $bar);

   assigns the entire list value to array @foo, but

     $foo = ('cc', '-E', $bar);

   assigns the value of variable $bar to the scalar variable $foo.  Note
that the value of an actual array in scalar context is the length of the
array; the following assigns the value 3 to $foo:

     @foo = ('cc', '-E', $bar);
     $foo = @foo;		# $foo gets 3

   You may have an optional comma before the closing parenthesis of a list
literal, so that you can say:

     @foo = (
     	1,
     	2,
     	3,
     );

   To use a here-document to assign an array, one line per element, you
might use an approach like this:

     @sauces = <<End_Lines =~ m/(\S.*\S)/g;
     	normal tomato
     	spicy tomato
     	green chile
     	pesto
     	white wine
     End_Lines

   LISTs do automatic interpolation of sublists.  That is, when a LIST is
evaluated, each element of the list is evaluated in list context, and the
resulting list value is interpolated into LIST just as if each individual
element were a member of LIST.  Thus arrays and hashes lose their identity
in a LIST-the list

     (@foo,@bar,&SomeSub,%glarch)

   contains all the elements of @foo followed by all the elements of @bar,
followed by all the elements returned by the subroutine named SomeSub
called in list context, followed by the key/value pairs of %glarch.  To
make a list reference that does *NOT* interpolate, see *Note Perlref:
perlref,.

   The null list is represented by ().  Interpolating it in a list has no
effect.  Thus ((),(),()) is equivalent to ().  Similarly, interpolating an
array with no elements is the same as if no array had been interpolated at
that point.

   A list value may also be subscripted like a normal array.  You must put
the list in parentheses to avoid ambiguity.  For example:

     # Stat returns list value.
     $time = (stat($file))[8];

     # SYNTAX ERROR HERE.
     $time = stat($file)[8];  # OOPS, FORGOT PARENTHESES

     # Find a hex digit.
     $hexdigit = ('a','b','c','d','e','f')[$digit-10];

     # A "reverse comma operator".
     return (pop(@foo),pop(@foo))[0];

   Lists may be assigned to only when each element of the list is itself
legal to assign to:

     ($a, $b, $c) = (1, 2, 3);

     ($map{'red'}, $map{'blue'}, $map{'green'}) = (0x00f, 0x0f0, 0xf00);

   An exception to this is that you may assign to undef in a list.  This
is useful for throwing away some of the return values of a function:

     ($dev, $ino, undef, undef, $uid, $gid) = stat($file);

   List assignment in scalar context returns the number of elements
produced by the expression on the right side of the assignment:

     $x = (($foo,$bar) = (3,2,1));	# set $x to 3, not 2
     $x = (($foo,$bar) = f());	        # set $x to f()'s return count

   This is handy when you want to do a list assignment in a Boolean
context, because most list functions return a null list when finished,
which when assigned produces a 0, which is interpreted as FALSE.

   The final element may be an array or a hash:

     ($a, $b, @rest) = split;
     my($a, $b, %rest) = @_;

   You can actually put an array or hash anywhere in the list, but the
first one in the list will soak up all the values, and anything after it
will become undefined.  This may be useful in a my() or local().

   A hash can be initialized using a literal list holding pairs of items
to be interpreted as a key and a value:

     # same as map assignment above
     %map = ('red',0x00f,'blue',0x0f0,'green',0xf00);

   While literal lists and named arrays are often interchangeable, that's
not the case for hashes.  Just because you can subscript a list value like
a normal array does not mean that you can subscript a list value as a
hash.  Likewise, hashes included as parts of other lists (including
parameters lists and return lists from functions) always flatten out into
key/value pairs.  That's why it's good to use references sometimes.

   It is often more readable to use the `< =' >> operator between key/value
pairs.  The `< =' >> operator is mostly just a more visually distinctive
synonym for a comma, but it also arranges for its left-hand operand to be
interpreted as a string-if it's a bareword that would be a legal
identifier.  This makes it nice for initializing hashes:

     %map = (
     		 red   => 0x00f,
     		 blue  => 0x0f0,
     		 green => 0xf00,
        );

   or for initializing hash references to be used as records:

     $rec = {
     		witch => 'Mable the Merciless',
     		cat   => 'Fluffy the Ferocious',
     		date  => '10/31/1776',
     };

   or for using call-by-named-parameter to complicated functions:

     $field = $query->radio_group(
     	       name      => 'group_name',
                 values    => ['eenie','meenie','minie'],
                 default   => 'meenie',
                 linebreak => 'true',
                 labels    => \%labels
     );

   Note that just because a hash is initialized in that order doesn't mean
that it comes out in that order.  See `sort', *Note Perlfunc: perlfunc,
for examples of how to arrange for an output ordering.

Slices
------

   A common way to access an array or a hash is one scalar element at a
time.  You can also subscript a list to get a single element from it.

     $whoami = $ENV{"USER"};		# one element from the hash
     $parent = $ISA[0];		        # one element from the array
     $dir    = (getpwnam("daemon"))[7];	# likewise, but with list

   A slice accesses several elements of a list, an array, or a hash
simultaneously using a list of subscripts.  It's more convenient than
writing out the individual elements as a list of separate scalar values.

     ($him, $her)   = @folks[0,-1];		# array slice
     @them          = @folks[0 .. 3];		# array slice
     ($who, $home)  = @ENV{"USER", "HOME"};	# hash slice
     ($uid, $dir)   = (getpwnam("daemon"))[2,7];	# list slice

   Since you can assign to a list of variables, you can also assign to an
array or hash slice.

     @days[3..5]    = qw/Wed Thu Fri/;
     @colors{'red','blue','green'}
     		   = (0xff0000, 0x0000ff, 0x00ff00);
     @folks[0, -1]  = @folks[-1, 0];

   The previous assignments are exactly equivalent to

     ($days[3], $days[4], $days[5]) = qw/Wed Thu Fri/;
     ($colors{'red'}, $colors{'blue'}, $colors{'green'})
     		   = (0xff0000, 0x0000ff, 0x00ff00);
     ($folks[0], $folks[-1]) = ($folks[0], $folks[-1]);

   Since changing a slice changes the original array or hash that it's
slicing, a foreach construct will alter some-or even all-of the values of
the array or hash.

     foreach (@array[ 4 .. 10 ]) { s/peter/paul/ }

     foreach (@hash{keys %hash}) {
     	s/^\s+//;	    # trim leading whitespace
     	s/\s+$//;	    # trim trailing whitespace
     	s/(\w+)/\u\L$1/g;   # "titlecase" words
     }

   A slice of an empty list is still an empty list.  Thus:

     @a = ()[1,0];           # @a has no elements
     @b = (@a)[0,1];         # @b has no elements
     @c = (0,1)[2,3];        # @c has no elements

   But:

     @a = (1)[1,0];          # @a has two elements
     @b = (1,undef)[1,0,2];  # @b has three elements

   This makes it easy to write loops that terminate when a null list is
returned:

     while ( ($home, $user) = (getpwent)[7,0]) {
     	printf "%-8s %s\n", $user, $home;
     }

   As noted earlier in this document, the scalar sense of list assignment
is the number of elements on the right-hand side of the assignment.  The
null list contains no elements, so when the password file is exhausted,
the result is 0, not 2.

   If you're confused about why you use an '@' there on a hash slice
instead of a '%', think of it like this.  The type of bracket (square or
curly) governs whether it's an array or a hash being looked at.  On the
other hand, the leading symbol ('$' or '@') on the array or hash indicates
whether you are getting back a singular value (a scalar) or a plural one
(a list).

Typeglobs and Filehandles
-------------------------

   Perl uses an internal type called a *typeglob* to hold an entire symbol
table entry.  The type prefix of a typeglob is a *, because it represents
all types.  This used to be the preferred way to pass arrays and hashes by
reference into a function, but now that we have real references, this is
seldom needed.

   The main use of typeglobs in modern Perl is create symbol table aliases.
This assignment:

     *this = *that;

   makes $this an alias for $that, @this an alias for @that, %this an alias
for %that, &this an alias for &that, etc.  Much safer is to use a
reference.  This:

     local *Here::blue = \$There::green;

   temporarily makes $Here::blue an alias for $There::green, but doesn't
make @Here::blue an alias for @There::green, or %Here::blue an alias for
%There::green, etc.  See `"Symbol Tables"', *Note Perlmod: perlmod, for
more examples of this.  Strange though this may seem, this is the basis
for the whole module import/export system.

   Another use for typeglobs is to pass filehandles into a function or to
create new filehandles.  If you need to use a typeglob to save away a
filehandle, do it this way:

     $fh = *STDOUT;

   or perhaps as a real reference, like this:

     $fh = \*STDOUT;

   See *Note Perlsub: perlsub, for examples of using these as indirect
filehandles in functions.

   Typeglobs are also a way to create a local filehandle using the local()
operator.  These last until their block is exited, but may be passed back.
For example:

     sub newopen {
     	my $path = shift;
     	local  *FH;  # not my!
     	open   (FH, $path) 	    or  return undef;
     	return *FH;
     }
     $fh = newopen('/etc/passwd');

   Now that we have the `*foo{THING}' notation, typeglobs aren't used as
much for filehandle manipulations, although they're still needed to pass
brand new file and directory handles into or out of functions. That's
because `*HANDLE{IO}' only works if HANDLE has already been used as a
handle.  In other words, `*FH' must be used to create new symbol table
entries; `*foo{THING}' cannot.  When in doubt, use `*FH'.

   All functions that are capable of creating filehandles (open(),
opendir(), pipe(), socketpair(), sysopen(), socket(), and accept())
automatically create an anonymous filehandle if the handle passed to them
is an uninitialized scalar variable. This allows the constructs such as
`open(my $fh, ...)' and `open(local $fh,...)' to be used to create
filehandles that will conveniently be closed automatically when the scope
ends, provided there are no other references to them. This largely
eliminates the need for typeglobs when opening filehandles that must be
passed around, as in the following example:

     sub myopen {
         open my $fh, "@_"
     	     or die "Can't open '@_': $!";
     	return $fh;
     }

     {
         my $f = myopen("</etc/motd");
     	print <$f>;
     	# $f implicitly closed here
     }

   Another way to create anonymous filehandles is with the Symbol module
or with the IO::Handle module and its ilk.  These modules have the
advantage of not hiding different types of the same name during the
local().  See the bottom of `open()', *Note Perlfunc: perlfunc, for an
example.

SEE ALSO
========

   See *Note Perlvar: perlvar, for a description of Perl's built-in
variables and a discussion of legal variable names.  See *Note Perlref:
perlref,, *Note Perlsub: perlsub,, and `"Symbol Tables"', *Note Perlmod:
perlmod, for more discussion on typeglobs and the `*foo{THING}' syntax.


File: perl.info,  Node: perldbmfilter,  Next: perlcompile,  Prev: perlfilter,  Up: Top

Perl DBM Filters
****************

NAME
====

   perldbmfilter - Perl DBM Filters

SYNOPSIS
========

     $db = tie %hash, 'DBM', ...

     $old_filter = $db->filter_store_key  ( sub { ... } ) ;
     $old_filter = $db->filter_store_value( sub { ... } ) ;
     $old_filter = $db->filter_fetch_key  ( sub { ... } ) ;
     $old_filter = $db->filter_fetch_value( sub { ... } ) ;

DESCRIPTION
===========

   The four `filter_*' methods shown above are available in all the DBM
modules that ship with Perl, namely DB_File, GDBM_File, NDBM_File,
ODBM_File and SDBM_File.

   Each of the methods work identically, and are used to install (or
uninstall) a single DBM Filter. The only difference between them is the
place that the filter is installed.

   To summarise:

filter_store_key
     If a filter has been installed with this method, it will be invoked
     every time you write a key to a DBM database.

filter_store_value
     If a filter has been installed with this method, it will be invoked
     every time you write a value to a DBM database.

filter_fetch_key
     If a filter has been installed with this method, it will be invoked
     every time you read a key from a DBM database.

filter_fetch_value
     If a filter has been installed with this method, it will be invoked
     every time you read a value from a DBM database.

   You can use any combination of the methods from none to all four.

   All filter methods return the existing filter, if present, or undef in
not.

   To delete a filter pass undef to it.

The Filter
----------

   When each filter is called by Perl, a local copy of $_ will contain the
key or value to be filtered. Filtering is achieved by modifying the
contents of $_. The return code from the filter is ignored.

An Example - the NULL termination problem.
------------------------------------------

   DBM Filters are useful for a class of problems where you always want to
make the same transformation to all keys, all values or both.

   For example, consider the following scenario. You have a DBM database
that you need to share with a third-party C application. The C application
assumes that all keys and values are NULL terminated. Unfortunately when
Perl writes to DBM databases it doesn't use NULL termination, so your Perl
application will have to manage NULL termination itself. When you write to
the database you will have to use something like this:

     $hash{"$key\0"} = "$value\0" ;

   Similarly the NULL needs to be taken into account when you are
considering the length of existing keys/values.

   It would be much better if you could ignore the NULL terminations issue
in the main application code and have a mechanism that automatically added
the terminating NULL to all keys and values whenever you write to the
database and have them removed when you read from the database. As I'm
sure you have already guessed, this is a problem that DBM Filters can fix
very easily.

     use strict ;
     use warnings ;
     use SDBM_File ;
     use Fcntl ;

     my %hash ;
     my $filename = "/tmp/filt" ;
     unlink $filename ;

     my $db = tie(%hash, 'SDBM_File', $filename, O_RDWR|O_CREAT, 0640)
       or die "Cannot open $filename: $!\n" ;

     # Install DBM Filters
     $db->filter_fetch_key  ( sub { s/\0$//    } ) ;
     $db->filter_store_key  ( sub { $_ .= "\0" } ) ;
     $db->filter_fetch_value(
         sub { no warnings 'uninitialized' ;s/\0$// } ) ;
     $db->filter_store_value( sub { $_ .= "\0" } ) ;

     $hash{"abc"} = "def" ;
     my $a = $hash{"ABC"} ;
     # ...
     undef $db ;
     untie %hash ;

   The code above uses SDBM_File, but it will work with any of the DBM
modules.

   Hopefully the contents of each of the filters should be
self-explanatory. Both "fetch" filters remove the terminating NULL, and
both "store" filters add a terminating NULL.

Another Example - Key is a C int.
---------------------------------

   Here is another real-life example. By default, whenever Perl writes to
a DBM database it always writes the key and value as strings. So when you
use this:

     $hash{12345} = "soemthing" ;

   the key 12345 will get stored in the DBM database as the 5 byte string
"12345". If you actually want the key to be stored in the DBM database as
a C int, you will have to use pack when writing, and unpack when reading.

   Here is a DBM Filter that does it:

     use strict ;
     use warnings ;
     use DB_File ;
     my %hash ;
     my $filename = "/tmp/filt" ;
     unlink $filename ;

     my $db = tie %hash, 'DB_File', $filename, O_CREAT|O_RDWR, 0666, $DB_HASH
       or die "Cannot open $filename: $!\n" ;

     $db->filter_fetch_key  ( sub { $_ = unpack("i", $_) } ) ;
     $db->filter_store_key  ( sub { $_ = pack ("i", $_) } ) ;
     $hash{123} = "def" ;
     # ...
     undef $db ;
     untie %hash ;

   The code above uses DB_File, but again it will work with any of the DBM
modules.

   This time only two filters have been used - we only need to manipulate
the contents of the key, so it wasn't necessary to install any value
filters.

SEE ALSO
========

   *Note DB_File: (pm.info)DB_File,, `GDBM_File' in this node, *Note
NDBM_File: (pm.info)NDBM_File,, *Note ODBM_File: (pm.info)ODBM_File, and
*Note SDBM_File: (pm.info)SDBM_File,.

AUTHOR
======

   Paul Marquess


File: perl.info,  Node: perldebguts,  Next: perlxs,  Prev: perlapio,  Up: Top

Guts of Perl debugging
**********************

NAME
====

   perldebguts - Guts of Perl debugging

DESCRIPTION
===========

   This is not the perldebug(1) manpage, which tells you how to use the
debugger.  This manpage describes low-level details ranging between
difficult and impossible for anyone who isn't incredibly intimate with
Perl's guts to understand.  Caveat lector.

Debugger Internals
==================

   Perl has special debugging hooks at compile-time and run-time used to
create debugging environments.  These hooks are not to be confused with
the *perl -Dxxx* command described in *Note Perlrun: perlrun,, which are
usable only if a special Perl built per the instructions the INSTALL
podpage in the Perl source tree.

   For example, whenever you call Perl's built-in caller function from the
package DB, the arguments that the corresponding stack frame was called
with are copied to the the @DB::args array.  The general mechanisms is
enabled by calling Perl with the -d switch, the following additional
features are enabled (cf. `$^P', *Note Perlvar: perlvar,):

   * Perl inserts the contents of `$ENV{PERL5DB}' (or `BEGIN {require
     'perl5db.pl'}' if not present) before the first line of your program.

   * The array `@{"_<$filename"}' holds the lines of $filename for all
     files compiled by Perl.  The same for evaled strings that contain
     subroutines, or which are currently being executed.  The $filename
     for evaled strings looks like `(eval 34)'.   Code assertions in
     regexes look like `(re_eval 19)'.

   * The hash `%{"_<$filename"}' contains breakpoints and actions keyed by
     line number.  Individual entries (as opposed to the whole hash) are
     settable.  Perl only cares about Boolean true here, although the
     values used by `perl5db.pl' have the form
     `"$break_condition\0$action"'.  Values in this hash are magical in
     numeric context: they are zeros if the line is not breakable.

     The same holds for evaluated strings that contain subroutines, or
     which are currently being executed.  The $filename for evaled strings
     looks like `(eval 34)' or  `(re_eval 19)'.

   * The scalar `${"_<$filename"}' contains `"_<$filename"'.  This is also
     the case for evaluated strings that contain subroutines, or which are
     currently being executed.  The $filename for evaled strings looks
     like `(eval 34)' or `(re_eval 19)'.

   * After each required file is compiled, but before it is executed,
     `DB::postponed(*{"_<$filename"})' is called if the subroutine
     `DB::postponed' exists.  Here, the $filename is the expanded name of
     the required file, as found in the values of %INC.

   * After each subroutine `subname' is compiled, the existence of
     `$DB::postponed{subname}' is checked.  If this key exists,
     `DB::postponed(subname)' is called if the `DB::postponed' subroutine
     also exists.

   * A hash %DB::sub is maintained, whose keys are subroutine names and
     whose values have the form `filename:startline-endline'.  filename
     has the form `(eval 34)' for subroutines defined inside evals, or
     `(re_eval 19)' for those within regex code assertions.

   * When the execution of your program reaches a point that can hold a
     breakpoint, the `DB::DB()' subroutine is called any of the variables
     $DB::trace, $DB::single, or $DB::signal is true.  These variables are
     not localizable.  This feature is disabled when executing inside
     `DB::DB()', including functions called from it unless `< $^D &
     (1<<30) '> is true.

   * When execution of the program reaches a subroutine call, a call to
     `&DB::sub'(args) is made instead, with $DB::sub holding the name of
     the called subroutine.  This doesn't happen if the subroutine was
     compiled in the DB package.)

   Note that if `&DB::sub' needs external data for it to work, no
subroutine call is possible until this is done.  For the standard
debugger, the  `$DB::deep' variable (how many levels of recursion deep
into the debugger you can go before a mandatory break) gives an example of
such a dependency.

Writing Your Own Debugger
-------------------------

   The minimal working debugger consists of one line

     sub DB::DB {}

   which is quite handy as contents of PERL5DB environment variable:

     $ PERL5DB="sub DB::DB {}" perl -d your-script

   Another brief debugger, slightly more useful, could be created with
only the line:

     sub DB::DB {print ++$i; scalar <STDIN>}

   This debugger would print the sequential number of encountered
statement, and would wait for you to hit a newline before continuing.

   The following debugger is quite functional:

     {
       package DB;
       sub DB  {}
       sub sub {print ++$i, " $sub\n"; &$sub}
     }

   It prints the sequential number of subroutine call and the name of the
called subroutine.  Note that `&DB::sub' should be compiled into the
package DB.

   At the start, the debugger reads your rc file (`./.perldb' or
`~/.perldb' under Unix), which can set important options.  This file may
define a subroutine `&afterinit' to be executed after the debugger is
initialized.

   After the rc file is read, the debugger reads the PERLDB_OPTS
environment variable and parses this as the remainder of a `O ...'  line
as one might enter at the debugger prompt.

   The debugger also maintains magical internal variables, such as
`@DB::dbline', %DB::dbline, which are aliases for `@{"::_<current_file"}'
`%{"::_<current_file"}'.  Here `current_file' is the currently selected
file, either explicitly chosen with the debugger's f command, or
implicitly by flow of execution.

   Some functions are provided to simplify customization.  See
`"Options"', *Note Perldebug: perldebug, for description of options parsed
by `DB::parse_options(string)'.  The function `DB::dump_trace(skip[,
count])' skips the specified number of frames and returns a list
containing information about the calling frames (all of them, if count is
missing).  Each entry is reference to a a hash with keys context (either
., `$', or `@'), sub (subroutine name, or info about eval), args (undef or
a reference to an array), file, and line.

   The function `DB::print_trace(FH, skip[, count[, short]])' prints
formatted info about caller frames.  The last two functions may be
convenient as arguments to `< < '>, `< << '> commands.

   Note that any variables and functions that are not documented in this
manpages (or in *Note Perldebug: perldebug,) are considered for internal
use only, and as such are subject to change without notice.

Frame Listing Output Examples
=============================

   The frame option can be used to control the output of frame
information.  For example, contrast this expression trace:

     $ perl -de 42
     Stack dump during die enabled outside of evals.

     Loading DB routines from perl5db.pl patch level 0.94
     Emacs support available.

     Enter h or `h h' for help.

     main::(-e:1):   0
       DB<1> sub foo { 14 }

     DB<2> sub bar { 3 }

     DB<3> t print foo() * bar()
      main::((eval 172):3):   print foo() + bar();
      main::foo((eval 168):2):
      main::bar((eval 170):2):
      42

   with this one, once the Option `frame=2' has been set:

     DB<4> O f=2
                  frame = '2'
     DB<5> t print foo() * bar()
      3:      foo() * bar()
      entering main::foo
       2:     sub foo { 14 };
      exited main::foo
      entering main::bar
       2:     sub bar { 3 };
      exited main::bar
      42

   By way of demonstration, we present below a laborious listing resulting
from setting your `PERLDB_OPTS' environment variable to the value `f=n N',
and running *perl -d -V* from the command line.  Examples use various
values of n are shown to give you a feel for the difference between
settings.  Long those it may be, this is not a complete listing, but only
excerpts.

  1.      entering main::BEGIN
           entering Config::BEGIN
            Package lib/Exporter.pm.
            Package lib/Carp.pm.
           Package lib/Config.pm.
           entering Config::TIEHASH
           entering Exporter::import
            entering Exporter::export
          entering Config::myconfig
           entering Config::FETCH
           entering Config::FETCH
           entering Config::FETCH
           entering Config::FETCH

  2.      entering main::BEGIN
           entering Config::BEGIN
            Package lib/Exporter.pm.
            Package lib/Carp.pm.
           exited Config::BEGIN
           Package lib/Config.pm.
           entering Config::TIEHASH
           exited Config::TIEHASH
           entering Exporter::import
            entering Exporter::export
            exited Exporter::export
           exited Exporter::import
          exited main::BEGIN
          entering Config::myconfig
           entering Config::FETCH
           exited Config::FETCH
           entering Config::FETCH
           exited Config::FETCH
           entering Config::FETCH

  3.      in  $=main::BEGIN() from /dev/null:0
           in  $=Config::BEGIN() from lib/Config.pm:2
            Package lib/Exporter.pm.
            Package lib/Carp.pm.
           Package lib/Config.pm.
           in  $=Config::TIEHASH('Config') from lib/Config.pm:644
           in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
            in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from li
          in  @=Config::myconfig() from /dev/null:0
           in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
           in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
           in  $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
           in  $=Config::FETCH(ref(Config), 'PERL_SUBVERSION') from lib/Config.pm:574
           in  $=Config::FETCH(ref(Config), 'osname') from lib/Config.pm:574
           in  $=Config::FETCH(ref(Config), 'osvers') from lib/Config.pm:574

  4.      in  $=main::BEGIN() from /dev/null:0
           in  $=Config::BEGIN() from lib/Config.pm:2
            Package lib/Exporter.pm.
            Package lib/Carp.pm.
           out $=Config::BEGIN() from lib/Config.pm:0
           Package lib/Config.pm.
           in  $=Config::TIEHASH('Config') from lib/Config.pm:644
           out $=Config::TIEHASH('Config') from lib/Config.pm:644
           in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
            in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
            out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
           out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
          out $=main::BEGIN() from /dev/null:0
          in  @=Config::myconfig() from /dev/null:0
           in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
           out $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
           in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
           out $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
           in  $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
           out $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
           in  $=Config::FETCH(ref(Config), 'PERL_SUBVERSION') from lib/Config.pm:574

  5.      in  $=main::BEGIN() from /dev/null:0
           in  $=Config::BEGIN() from lib/Config.pm:2
            Package lib/Exporter.pm.
            Package lib/Carp.pm.
           out $=Config::BEGIN() from lib/Config.pm:0
           Package lib/Config.pm.
           in  $=Config::TIEHASH('Config') from lib/Config.pm:644
           out $=Config::TIEHASH('Config') from lib/Config.pm:644
           in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
            in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
            out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
           out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
          out $=main::BEGIN() from /dev/null:0
          in  @=Config::myconfig() from /dev/null:0
           in  $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
           out $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
           in  $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574
           out $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574

  6.      in  $=CODE(0x15eca4)() from /dev/null:0
           in  $=CODE(0x182528)() from lib/Config.pm:2
            Package lib/Exporter.pm.
           out $=CODE(0x182528)() from lib/Config.pm:0
           scalar context return from CODE(0x182528): undef
           Package lib/Config.pm.
           in  $=Config::TIEHASH('Config') from lib/Config.pm:628
           out $=Config::TIEHASH('Config') from lib/Config.pm:628
           scalar context return from Config::TIEHASH:   empty hash
           in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
            in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
            out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
            scalar context return from Exporter::export: ''
           out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
           scalar context return from Exporter::import: ''

        In all cases shown above, the line indentation shows the call tree.
If bit 2 of frame is set, a line is printed on exit from a subroutine as
well.  If bit 4 is set, the arguments are printed along with the caller
info.  If bit 8 is set, the arguments are printed even if they are tied or
references.  If bit 16 is set, the return value is printed, too.

   When a package is compiled, a line like this

     Package lib/Carp.pm.

   is printed with proper indentation.

Debugging regular expressions
=============================

   There are two ways to enable debugging output for regular expressions.

   If your perl is compiled with `-DDEBUGGING', you may use the *-Dr* flag
on the command line.

   Otherwise, one can `use re 'debug'', which has effects at compile time
and run time.  It is not lexically scoped.

Compile-time output
-------------------

   The debugging output at compile time looks like this:

     compiling RE `[bc]d(ef*g)+h[ij]k$'
     size 43 first at 1
        1: ANYOF(11)
       11: EXACT <d>(13)
       13: CURLYX {1,32767}(27)
       15:   OPEN1(17)
       17:     EXACT <e>(19)
       19:     STAR(22)
       20:       EXACT <f>(0)
       22:     EXACT <g>(24)
       24:   CLOSE1(26)
       26:   WHILEM(0)
       27: NOTHING(28)
       28: EXACT <h>(30)
       30: ANYOF(40)
       40: EXACT <k>(42)
       42: EOL(43)
       43: END(0)
     anchored `de' at 1 floating `gh' at 3..2147483647 (checking floating)
     				    stclass `ANYOF' minlen 7

   The first line shows the pre-compiled form of the regex.  The second
shows the size of the compiled form (in arbitrary units, usually 4-byte
words) and the label id of the first node that does a match.

   The last line (split into two lines above) contains optimizer
information.  In the example shown, the optimizer found that the match
should contain a substring `de' at offset 1, plus substring `gh' at some
offset between 3 and infinity.  Moreover, when checking for these
substrings (to abandon impossible matches quickly), Perl will check for
the substring `gh' before checking for the substring `de'.  The optimizer
may also use the knowledge that the match starts (at the first id) with a
character class, and the match cannot be shorter than 7 chars.

   The fields of interest which may appear in the last line are

`anchored' STRING at *POS*
`floating' STRING at *POS1..POS2*
     See above.

`matching floating/anchored'
     Which substring to check first.

minlen
     The minimal length of the match.

`stclass' TYPE
     Type of first matching node.

`noscan'
     Don't scan for the found substrings.

`isall'
     Means that the optimizer info is all that the regular expression
     contains, and thus one does not need to enter the regex engine at all.

`GPOS'
     Set if the pattern contains `\G'.

plus
     Set if the pattern starts with a repeated char (as in `x+y').

`implicit'
     Set if the pattern starts with `.*'.

`with eval'
     Set if the pattern contain eval-groups, such as `(?{ code })' and
     `(??{ code })'.

`anchored(TYPE)'
     If the pattern may match only at a handful of places, (with TYPE
     being BOL, `MBOL', or `GPOS'.  See the table below.

   If a substring is known to match at end-of-line only, it may be
followed by `$', as in `floating `k'$'.

   The optimizer-specific info is used to avoid entering (a slow) regex
engine on strings that will not definitely match.  If `isall' flag is set,
a call to the regex engine may be avoided even when the optimizer found an
appropriate place for the match.

   The rest of the output contains the list of *nodes* of the compiled
form of the regex.  Each line has format

   `   'id: TYPE *OPTIONAL-INFO* (*next-id*)

Types of nodes
--------------

   Here are the possible types, with short descriptions:

     # TYPE arg-description [num-args] [longjump-len] DESCRIPTION

     # Exit points
     END		no	End of program.
     SUCCEED	no	Return from a subroutine, basically.

     # Anchors:
     BOL		no	Match "" at beginning of line.
     MBOL	no	Same, assuming multiline.
     SBOL	no	Same, assuming singleline.
     EOS		no	Match "" at end of string.
     EOL		no	Match "" at end of line.
     MEOL	no	Same, assuming multiline.
     SEOL	no	Same, assuming singleline.
     BOUND	no	Match "" at any word boundary
     BOUNDL	no	Match "" at any word boundary
     NBOUND	no	Match "" at any word non-boundary
     NBOUNDL	no	Match "" at any word non-boundary
     GPOS	no	Matches where last m//g left off.

     # [Special] alternatives
     ANY		no	Match any one character (except newline).
     SANY	no	Match any one character.
     ANYOF	sv	Match character in (or not in) this class.
     ALNUM	no	Match any alphanumeric character
     ALNUML	no	Match any alphanumeric char in locale
     NALNUM	no	Match any non-alphanumeric character
     NALNUML	no	Match any non-alphanumeric char in locale
     SPACE	no	Match any whitespace character
     SPACEL	no	Match any whitespace char in locale
     NSPACE	no	Match any non-whitespace character
     NSPACEL	no	Match any non-whitespace char in locale
     DIGIT	no	Match any numeric character
     NDIGIT	no	Match any non-numeric character

     # BRANCH	The set of branches constituting a single choice are hooked
     #		together with their "next" pointers, since precedence prevents
     #		anything being concatenated to any individual branch.  The
     #		"next" pointer of the last BRANCH in a choice points to the
     #		thing following the whole choice.  This is also where the
     #		final "next" pointer of each individual branch points; each
     #		branch starts with the operand node of a BRANCH node.
     #
     BRANCH	node	Match this alternative, or the next...

     # BACK	Normal "next" pointers all implicitly point forward; BACK
     #		exists to make loop structures possible.
     # not used
     BACK	no	Match "", "next" ptr points backward.

     # Literals
     EXACT	sv	Match this string (preceded by length).
     EXACTF	sv	Match this string, folded (prec. by length).
     EXACTFL	sv	Match this string, folded in locale (w/len).

     # Do nothing
     NOTHING	no	Match empty string.
     # A variant of above which delimits a group, thus stops optimizations
     TAIL	no	Match empty string. Can jump here from outside.

     # STAR,PLUS	'?', and complex '*' and '+', are implemented as circular
     #		BRANCH structures using BACK.  Simple cases (one character
     #		per match) are implemented with STAR and PLUS for speed
     #		and to minimize recursive plunges.
     #
     STAR	node	Match this (simple) thing 0 or more times.
     PLUS	node	Match this (simple) thing 1 or more times.

     CURLY	sv 2	Match this simple thing {n,m} times.
     CURLYN	no 2	Match next-after-this simple thing
     #			{n,m} times, set parens.
     CURLYM	no 2	Match this medium-complex thing {n,m} times.
     CURLYX	sv 2	Match this complex thing {n,m} times.

     # This terminator creates a loop structure for CURLYX
     WHILEM	no	Do curly processing and see if rest matches.

     # OPEN,CLOSE,GROUPP	...are numbered at compile time.
     OPEN	num 1	Mark this point in input as start of #n.
     CLOSE	num 1	Analogous to OPEN.

     REF		num 1	Match some already matched string
     REFF	num 1	Match already matched string, folded
     REFFL	num 1	Match already matched string, folded in loc.

     # grouping assertions
     IFMATCH	off 1 2	Succeeds if the following matches.
     UNLESSM	off 1 2	Fails if the following matches.
     SUSPEND	off 1 1	"Independent" sub-regex.
     IFTHEN	off 1 1	Switch, should be preceded by switcher .
     GROUPP	num 1	Whether the group matched.

     # Support for long regex
     LONGJMP	off 1 1	Jump far away.
     BRANCHJ	off 1 1	BRANCH with long offset.

     # The heavy worker
     EVAL	evl 1	Execute some Perl code.

     # Modifiers
     MINMOD	no	Next operator is not greedy.
     LOGICAL	no	Next opcode should set the flag only.

     # This is not used yet
     RENUM	off 1 1	Group with independently numbered parens.

     # This is not really a node, but an optimized away piece of a "long" node.
     # To simplify debugging output, we mark it as if it were a node
     OPTIMIZED	off	Placeholder for dump.

Run-time output
---------------

   First of all, when doing a match, one may get no run-time output even
if debugging is enabled.  This means that the regex engine was never
entered and that all of the job was therefore done by the optimizer.

   If the regex engine was entered, the output may look like this:

     Matching `[bc]d(ef*g)+h[ij]k$' against `abcdefg__gh__'
       Setting an EVAL scope, savestack=3
        2 <ab> <cdefg__gh_>    |  1: ANYOF
        3 <abc> <defg__gh_>    | 11: EXACT <d>
        4 <abcd> <efg__gh_>    | 13: CURLYX {1,32767}
        4 <abcd> <efg__gh_>    | 26:   WHILEM
     				0 out of 1..32767  cc=effff31c
        4 <abcd> <efg__gh_>    | 15:     OPEN1
        4 <abcd> <efg__gh_>    | 17:     EXACT <e>
        5 <abcde> <fg__gh_>    | 19:     STAR
     			     EXACT <f> can match 1 times out of 32767...
       Setting an EVAL scope, savestack=3
        6 <bcdef> <g__gh__>    | 22:       EXACT <g>
        7 <bcdefg> <__gh__>    | 24:       CLOSE1
        7 <bcdefg> <__gh__>    | 26:       WHILEM
     				    1 out of 1..32767  cc=effff31c
       Setting an EVAL scope, savestack=12
        7 <bcdefg> <__gh__>    | 15:         OPEN1
        7 <bcdefg> <__gh__>    | 17:         EXACT <e>
          restoring \1 to 4(4)..7
     				    failed, try continuation...
        7 <bcdefg> <__gh__>    | 27:         NOTHING
        7 <bcdefg> <__gh__>    | 28:         EXACT <h>
     				    failed...
     				failed...

   The most significant information in the output is about the particular
node of the compiled regex that is currently being tested against the
target string.  The format of these lines is

   `    '*STRING-OFFSET* <*PRE-STRING*> <*POST-STRING*>   |ID:  TYPE

   The TYPE info is indented with respect to the backtracking level.
Other incidental information appears interspersed within.

Debugging Perl memory usage
===========================

   Perl is a profligate wastrel when it comes to memory use.  There is a
saying that to estimate memory usage of Perl, assume a reasonable
algorithm for memory allocation, multiply that estimate by 10, and while
you still may miss the mark, at least you won't be quite so astonished.
This is not absolutely true, but may prvide a good grasp of what happens.

   Assume that an integer cannot take less than 20 bytes of memory, a
float cannot take less than 24 bytes, a string cannot take less than 32
bytes (all these examples assume 32-bit architectures, the result are
quite a bit worse on 64-bit architectures).  If a variable is accessed in
two of three different ways (which require an integer, a float, or a
string), the memory footprint may increase yet another 20 bytes.  A sloppy
malloc(3) implementation can make inflate these numbers dramatically.

   On the opposite end of the scale, a declaration like

     sub foo;

   may take up to 500 bytes of memory, depending on which release of Perl
you're running.

   Anecdotal estimates of source-to-compiled code bloat suggest an
eightfold increase.  This means that the compiled form of reasonable
(normally commented, properly indented etc.) code will take about eight
times more space in memory than the code took on disk.

   There are two Perl-specific ways to analyze memory usage:
$ENV{PERL_DEBUG_MSTATS} and *-DL* command-line switch.  The first is
available only if Perl is compiled with Perl's malloc(); the second only
if Perl was built with `-DDEBUGGING'.  See the instructions for how to do
this in the INSTALL podpage at the top level of the Perl source tree.

Using `$ENV{PERL_DEBUG_MSTATS}'
-------------------------------

   If your perl is using Perl's malloc() and was compiled with the
necessary switches (this is the default), then it will print memory usage
statistics after compiling your code hwen `< $ENV{PERL_DEBUG_MSTATS} ' 1
>>, and before termination of the program when `< $ENV{PERL_DEBUG_MSTATS}
'= 1 >>.  The report format is similar to the following example:

     $ PERL_DEBUG_MSTATS=2 perl -e "require Carp"
     Memory allocation statistics after compilation: (buckets 4(4)..8188(8192)
        14216 free:   130   117    28     7     9   0   2     2   1 0 0
     		437    61    36     0     5
        60924 used:   125   137   161    55     7   8   6    16   2 0 1
     		 74   109   304    84    20
     Total sbrk(): 77824/21:119. Odd ends: pad+heads+chain+tail: 0+636+0+2048.
     Memory allocation statistics after execution:   (buckets 4(4)..8188(8192)
        30888 free:   245    78    85    13     6   2   1     3   2 0 1
     		315   162    39    42    11
       175816 used:   265   176  1112   111    26  22  11    27   2 1 1
     		196   178  1066   798    39
     Total sbrk(): 215040/47:145. Odd ends: pad+heads+chain+tail: 0+2192+0+6144.

   It is possible to ask for such a statistic at arbitrary points in your
execution using the mstats() function out of the standard Devel::Peek
module.

   Here is some explanation of that format:

`buckets SMALLEST(APPROX)..GREATEST(APPROX)'
     Perl's malloc() uses bucketed allocations.  Every request is rounded
     up to the closest bucket size available, and a bucket is taken from
     the pool of buckets of that size.

     The line above describes the limits of buckets currently in use.
     Each bucket has two sizes: memory footprint and the maximal size of
     user data that can fit into this bucket.  Suppose in the above
     example that the smallest bucket were size 4.  The biggest bucket
     would have usable size 8188, and the memory footprint would be 8192.

     In a Perl built for debugging, some buckets may have negative usable
     size.  This means that these buckets cannot (and will not) be used.
     For larger buckets, the memory footprint may be one page greater than
     a power of 2.  If so, case the corresponding power of two is printed
     in the `APPROX' field above.

Free/Used
     The 1 or 2 rows of numbers following that correspond to the number of
     buckets of each size between `SMALLEST' and `GREATEST'.  In the first
     row, the sizes (memory footprints) of buckets are powers of two-or
     possibly one page greater.  In the second row, if present, the memory
     footprints of the buckets are between the memory footprints of two
     buckets "above".

     For example, suppose under the pervious example, the memory footprints
     were

          free:    8     16    32    64    128  256 512 1024 2048 4096 8192
          	   4     12    24    48    80

     With non-DEBUGGING perl, the buckets starting from 128 have a 4-byte
     overhead, and thus a 8192-long bucket may take up to 8188-byte
     allocations.

`Total sbrk(): SBRKed/SBRKs:CONTINUOUS'
     The first two fields give the total amount of memory perl sbrk(2)ed
     (ess-broken? :-) and number of sbrk(2)s used.  The third number is
     what perl thinks about continuity of returned chunks.  So long as
     this number is positive, malloc() will assume that it is probable
     that sbrk(2) will provide continuous memory.

     Memory allocated by external libraries is not counted.

`pad: 0'
     The amount of sbrk(2)ed memory needed to keep buckets aligned.

`heads: 2192'
     Although memory overhead of bigger buckets is kept inside the bucket,
     for smaller buckets, it is kept in separate areas.  This field gives
     the total size of these areas.

`chain: 0'
     malloc() may want to subdivide a bigger bucket into smaller buckets.
     If only a part of the deceased bucket is left unsubdivided, the rest
     is kept as an element of a linked list.  This field gives the total
     size of these chunks.

`tail: 6144'
     To minimize the number of sbrk(2)s, malloc() asks for more memory.
     This field gives the size of the yet unused part, which is sbrk(2)ed,
     but never touched.

Example of using *-DL* switch
-----------------------------

   Below we show how to analyse memory usage by

     do 'lib/auto/POSIX/autosplit.ix';

   The file in question contains a header and 146 lines similar to

     sub getcwd;

   WARNING: The discussion below supposes 32-bit architecture.  In newer
releases of Perl, memory usage of the constructs discussed here is greatly
improved, but the story discussed below is a real-life story.  This story
is mercilessly terse, and assumes rather more than cursory knowledge of
Perl internals.  Type space to continue, `q' to quit.  (Actually, you just
want to skip to the next section.)

   Here is the itemized list of Perl allocations performed during parsing
of this file:

     !!! "after" at test.pl line 3.
        Id  subtot   4   8  12  16  20  24  28  32  36  40  48  56  64  72  80 80+
      0 02   13752   .   .   .   . 294   .   .   .   .   .   .   .   .   .   .   4
      0 54    5545   .   .   8 124  16   .   .   .   1   1   .   .   .   .   .   3
      5 05      32   .   .   .   .   .   .   .   1   .   .   .   .   .   .   .   .
      6 02    7152   .   .   .   .   .   .   .   .   .   . 149   .   .   .   .   .
      7 02    3600   .   .   .   .   . 150   .   .   .   .   .   .   .   .   .   .
      7 03      64   .  -1   .   1   .   .   2   .   .   .   .   .   .   .   .   .
      7 04    7056   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   7
      7 17   38404   .   .   .   .   .   .   .   1   .   . 442 149   .   . 147   .
      9 03    2078  17 249  32   .   .   .   .   2   .   .   .   .   .   .   .   .

   To see this list, insert two `warn('!...')' statements around the call:

     warn('!');
     do 'lib/auto/POSIX/autosplit.ix';
     warn('!!! "after"');

   and run it with PErl's *-DL* option.  The first warn() will print
memory allocation info before parsing the file and will memorize the
statistics at this point (we ignore what it prints).  The second warn()
prints increments with respect to these memorized data.  This is the
printout shown above.

   Different Ids on the left correspond to different subsystems of the
perl interpreter.  They are just the first argument given to the perl
memory allocation API named New().  To find what `9 03' means, just grep
the perl source for `903'.  You'll find it in `util.c', function
savepvn().  (I know, you wonder why we told you to grep and then gave away
the answer.  That's because grepping the source is good for the soul.)
This function is used to store a copy of an existing chunk of memory.
Using a C debugger, one can see that the function was called either
directly from gv_init() or via sv_magic(), and that gv_init() is called
from gv_fetchpv()-which was itself called from newSUB().  Please stop to
catch your breath now.

   NOTE: To reach this point in the debugger and skip the calls to
savepvn() during the compilation of the main program, you should set a C
breakpoint in Perl_warn(), continue until this point is reached, and
*then* set a C breakpoint in Perl_savepvn().  Note that you may need to
skip a handful of Perl_savepvn() calls that do not correspond to mass
production of CVs (there are more `903' allocations than 146 similar lines
of `lib/auto/POSIX/autosplit.ix').  Note also that Perl_ prefixes are
added by macroization code in perl header files to avoid conflicts with
external libraries.

   Anyway, we see that `903' ids correspond to creation of globs, twice
per glob - for glob name, and glob stringification magic.

   Here are explanations for other Ids above:

`717'
     CReates bigger `XPV*' structures.  In the case above, it creates 3
     AVs per subroutine, one for a list of lexical variable names, one for
     a scratchpad (which contains lexical variables and targets), and one
     for the array of scratchpads needed for recursion.

     It also creates a GV and a CV per subroutine, all called from
     start_subparse().

`002'
     Creates a C array corresponding to the AV of scratchpads and the
     scratchpad itself.  The first fake entry of this scratchpad is
     created though the subroutine itself is not defined yet.

     It also creates C arrays to keep data for the stash.  This is one HV,
     but it grows; thus, there are 4 big allocations: the big chunks are
     not freed, but are kept as additional arenas for SV allocations.

`054'
     Creates a `HEK' for the name of the glob for the subroutine.  This
     name is a key in a stash.

     Big allocations with this Id correspond to allocations of new arenas
     to keep `HE'.

`602'
     Creates a `GP' for the glob for the subroutine.

`702'
     Creates the MAGIC for the glob for the subroutine.

`704'
     Creates *arenas* which keep SVs.

*-DL* details
-------------

   If Perl is run with *-DL* option, then warn()s that start with `!'
behave specially.  They print a list of categories of memory allocations,
and statistics of allocations of different sizes for these categories.

   If warn() string starts with

`!!!'
     print changed categories only, print the differences in counts of
     allocations.

!!
     print grown categories only; print the absolute values of counts, and
     totals.

!
     print nonempty categories, print the absolute values of counts and
     totals.

Limitations of *-DL* statistics
-------------------------------

   If an extension or external library does not use the Perl API to
allocate memory, such allocations are not counted.

SEE ALSO
========

   *Note Perldebug: perldebug,, *Note Perlguts: perlguts,, *Note Perlrun:
perlrun, *Note Re: (pm.info)re,, and `Devel::Dprof' in this node.


File: perl.info,  Node: perldebug,  Next: perldiag,  Prev: perlcompile,  Up: Top

Perl debugging
**************

NAME
====

   perldebug - Perl debugging

DESCRIPTION
===========

   First of all, have you tried using the -w switch?

The Perl Debugger
=================

   If you invoke Perl with the -d switch, your script runs under the Perl
source debugger.  This works like an interactive Perl environment,
prompting for debugger commands that let you examine source code, set
breakpoints, get stack backtraces, change the values of variables, etc.
This is so convenient that you often fire up the debugger all by itself
just to test out Perl constructs interactively to see what they do.  For
example:

     $ perl -d -e 42

   In Perl, the debugger is not a separate program the way it usually is
in the typical compiled environment.  Instead, the -d flag tells the
compiler to insert source information into the parse trees it's about to
hand off to the interpreter.  That means your code must first compile
correctly for the debugger to work on it.  Then when the interpreter
starts up, it preloads a special Perl library file containing the debugger.

   The program will halt *right before* the first run-time executable
statement (but see below regarding compile-time statements) and ask you to
enter a debugger command.  Contrary to popular expectations, whenever the
debugger halts and shows you a line of code, it always displays the line
it's *about* to execute, rather than the one it has just executed.

   Any command not recognized by the debugger is directly executed
(eval'd) as Perl code in the current package.  (The debugger uses the DB
package for keeping its own state information.)

   For any text entered at the debugger prompt, leading and trailing
whitespace is first stripped before further processing.  If a debugger
command coincides with some function in your own program, merely precede
the function with something that doesn't look like a debugger command, such
as a leading `;' or perhaps a +, or by wrapping it with parentheses or
braces.

Debugger Commands
-----------------

   The debugger understands the following commands:

h [command]
     Prints out a help message.

     If you supply another debugger command as an argument to the h
     command, it prints out the description for just that command.  The
     special argument of `h h' produces a more compact help listing,
     designed to fit together on one screen.

     If the output of the h command (or any command, for that matter)
     scrolls past your screen, precede the command with a leading pipe
     symbol so that it's run through your pager, as in

          DB> |h

     You may change the pager which is used via `O pager=...' command.

p expr
     Same as `print {$DB::OUT} expr' in the current package.  In
     particular, because this is just Perl's own print function, this
     means that nested data structures and objects are not dumped, unlike
     with the x command.

     The `DB::OUT' filehandle is opened to `/dev/tty', regardless of where
     STDOUT may be redirected to.

x expr
     Evaluates its expression in list context and dumps out the result in
     a pretty-printed fashion.  Nested data structures are printed out
     recursively, unlike the real print function in Perl.  See *Note
     Dumpvalue: (pm.info)Dumpvalue, if you'd like to do this yourself.

     The output format is governed by multiple options described under
     `"Options"' in this node.

V [pkg [vars]]
     Display all (or some) variables in package (defaulting to main) using
     a data pretty-printer (hashes show their keys and values so you see
     what's what, control characters are made printable, etc.).  Make sure
     you don't put the type specifier (like `$') there, just the symbol
     names, like this:

          V DB filename line

     Use `~pattern' and `!pattern' for positive and negative regexes.

     This is similar to calling the x command on each applicable var.

X [vars]
     Same as `V currentpackage [vars]'.

T
     Produce a stack backtrace.  See below for details on its output.

s [expr]
     Single step.  Executes until the beginning of another statement,
     descending into subroutine calls.  If an expression is supplied that
     includes function calls, it too will be single-stepped.

n [expr]
     Next.  Executes over subroutine calls, until the beginning of the
     next statement.  If an expression is supplied that includes function
     calls, those functions will be executed with stops before each
     statement.

r
     Continue until the return from the current subroutine.  Dump the
     return value if the `PrintRet' option is set (default).

<CR>
     Repeat last n or s command.

c [line|sub]
     Continue, optionally inserting a one-time-only breakpoint at the
     specified line or subroutine.

l
     List next window of lines.

l min+incr
     List `incr+1' lines starting at min.

l min-max
     List lines min through max.  `l -' is synonymous to -.

l line
     List a single line.

l subname
     List first window of lines from subroutine.  *subname* may be a
     variable that contains a code reference.

-
     List previous window of lines.

w [line]
     List window (a few lines) around the current line.

.
     Return the internal debugger pointer to the line last executed, and
     print out that line.

f filename
     Switch to viewing a different file or eval statement.  If filename is
     not a full pathname found in the values of %INC, it is considered a
     regex.

     evaled strings (when accessible) are considered to be filenames: `f
     (eval 7)' and `f eval 7\b' access the body of the 7th evaled string
     (in the order of execution).  The bodies of the currently executed
     eval and of evaled strings that define subroutines are saved and thus
     accessible.

/pattern/
     Search forwards for pattern (a Perl regex); final / is optional.

?pattern?
     Search backwards for pattern; final ? is optional.

L
     List all breakpoints and actions.

S [[!]regex]
     List subroutine names [not] matching the regex.

t
     Toggle trace mode (see also the `AutoTrace' option).

t expr
     Trace through execution of `expr'.  See `"Frame Listing Output
     Examples"', *Note Perldebguts: perldebguts, for examples.

b [line] [condition]
     Set a breakpoint before the given line.  If line is omitted, set a
     breakpoint on the line about to be executed.  If a condition is
     specified, it's evaluated each time the statement is reached: a
     breakpoint is taken only if the condition is true.  Breakpoints may
     only be set on lines that begin an executable statement.  Conditions
     don't use if:

          b 237 $x > 30
          b 237 ++$count237 < 11
          b 33 /pattern/i

b subname [condition]
     Set a breakpoint before the first line of the named subroutine.
     *subname* may be a variable containing a code reference (in this case
     condition is not supported).

b postpone subname [condition]
     Set a breakpoint at first line of subroutine after it is compiled.

b load filename
     Set a breakpoint before the first executed line of the filename,
     which should be a full pathname found amongst the %INC values.

b compile subname
     Sets a breakpoint before the first statement executed after the
     specified subroutine is compiled.

d [line]
     Delete a breakpoint from the specified line.  If line is omitted,
     deletes the breakpoint from the line about to be executed.

D
     Delete all installed breakpoints.

a [line] command
     Set an action to be done before the line is executed.  If line is
     omitted, set an action on the line about to be executed.  The
     sequence of steps taken by the debugger is

          1. check for a breakpoint at this line
          2. print the line if necessary (tracing)
          3. do any actions associated with that line
          4. prompt user if at a breakpoint or in single-step
          5. evaluate line

     For example, this will print out $foo every time line 53 is passed:

          a 53 print "DB FOUND $foo\n"

a [line]
     Delete an action from the specified line.  If line is omitted, delete
     the action on the line that is about to be executed.

A
     Delete all installed actions.

W expr
     Add a global watch-expression.  We hope you know what one of these
     is, because they're supposed to be obvious.  WARNING: It is far too
     easy to destroy your watch expressions by accidentally omitting the
     *expr*.

W
     Delete all watch-expressions.

O booloption ...
     Set each listed Boolean option to the value 1.

O anyoption? ...
     Print out the value of one or more options.

O option=value ...
     Set the value of one or more options.  If the value has internal
     whitespace, it should be quoted.  For example, you could set `O
     pager="less -MQeicsNfr"' to call less with those specific options.
     You may use either single or double quotes, but if you do, you must
     escape any embedded instances of same sort of quote you began with,
     as well as any escaping any escapes that immediately precede that
     quote but which are not meant to escape the quote itself.  In other
     words, you follow single-quoting rules irrespective of the quote; eg:
     `O option='this isn\'t bad'' or `O option="She said, \"Isn't it?\""'.

     For historical reasons, the `=value' is optional, but defaults to 1
     only where it is safe to do so-that is, mostly for Boolean options.
     It is always better to assign a specific value using =.  The option
     can be abbreviated, but for clarity probably should not be.  Several
     options can be set together.  See `"Options"' in this node for a list
     of these.

< ?
     List out all pre-prompt Perl command actions.

< [ command ]
     Set an action (Perl command) to happen before every debugger prompt.
     A multi-line command may be entered by backslashing the newlines.
     WARNING If command is missing, all actions are wiped out!

<< command
     Add an action (Perl command) to happen before every debugger prompt.
     A multi-line command may be entered by backwhacking the newlines.

> ?
     List out post-prompt Perl command actions.

> command
     Set an action (Perl command) to happen after the prompt when you've
     just given a command to return to executing the script.  A multi-line
     command may be entered by backslashing the newlines (we bet you
     couldn't've guessed this by now).  WARNING If command is missing, all
     actions are wiped out!

>> command
     Adds an action (Perl command) to happen after the prompt when you've
     just given a command to return to executing the script.  A multi-line
     command may be entered by slackbashing the newlines.

{ ?
     List out pre-prompt debugger commands.

{ [ command ]
     Set an action (debugger command) to happen before every debugger
     prompt.  A multi-line command may be entered in the customary fashion.
     WARNING If command is missing, all actions are wiped out!

     Because this command is in some senses new, a warning is issued if
     you appear to have accidentally entered a block instead.  If that's
     what you mean to do, write it as with `;{ ... }' or even `do { ... }'.

{{ command
     Add an action (debugger command) to happen before every debugger
     prompt.  A multi-line command may be entered, if you can guess how:
     see above.

! number
     Redo a previous command (defaults to the previous command).

! -number
     Redo number'th previous command.

! pattern
     Redo last command that started with pattern.  See `O recallCommand',
     too.

!! cmd
     Run cmd in a subprocess (reads from DB::IN, writes to DB::OUT) See `O
     shellBang', also.  Note that the user's current shell (well, their
     `$ENV{SHELL}' variable) will be used, which can interfere with proper
     interpretation of exit status or signal and coredump information.

H -number
     Display last n commands.  Only commands longer than one character are
     listed.  If number is omitted, list them all.

q or ^D
     Quit.  ("quit" doesn't work for this, unless you've made an alias)
     This is the only supported way to exit the debugger, though typing
     exit twice might work.

     Set the `inhibit_exit' option to 0 if you want to be able to step off
     the end the script.  You may also need to set $finished to 0 if you
     want to step through global destruction.

R
     Restart the debugger by exec()ing a new session.  We try to maintain
     your history across this, but internal settings and command-line
     options may be lost.

     The following setting are currently preserved: history, breakpoints,
     actions, debugger options, and the Perl command-line options -w, -I,
     and -e.

|dbcmd
     Run the debugger command, piping DB::OUT into your current pager.

||dbcmd
     Same as |dbcmd but DB::OUT is temporarily selected as well.

= [alias value]
     Define a command alias, like

          = quit q

     or list current aliases.

command
     Execute command as a Perl statement.  A trailing semicolon will be
     supplied.  If the Perl statement would otherwise be confused for a
     Perl debugger, use a leading semicolon, too.

m expr
     List which methods may be called on the result of the evaluated
     expression.  The expression may evaluated to a reference to a blessed
     object, or to a package name.

man [manpage]
     Despite its name, this calls your system's default documentation
     viewer on the given page, or on the viewer itself if *manpage* is
     omitted.  If that viewer is man, the current Config information is
     used to invoke man using the proper MANPATH or -M *manpath* option.
     Failed lookups of the form XXX that match known manpages of the form
     *perlXXX* will be retried.  This lets you type `man debug' or `man
     op' from the debugger.

     On systems traditionally bereft of a usable man command, the debugger
     invokes perldoc.  Occasionally this determination is incorrect due to
     recalcitrant vendors or rather more felicitously, to enterprising
     users.  If you fall into either category, just manually set the
     $DB::doccmd variable to whatever viewer to view the Perl
     documentation on your system.  This may be set in an rc file, or
     through direct assignment.  We're still waiting for a working example
     of something along the lines of:

          $DB::doccmd = 'netscape -remote http://something.here/';

Configurable Options
--------------------

   The debugger has numerous options settable using the O command, either
interactively or from the environment or an rc file.

`recallCommand', `ShellBang'
     The characters used to recall command or spawn shell.  By default,
     both are set to !, which is unfortunate.

`pager'
     Program to use for output of pager-piped commands (those beginning
     with a | character.)  By default, `$ENV{PAGER}' will be used.
     Because the debugger uses your current terminal characteristics for
     bold and underlining, if the chosen pager does not pass escape
     sequences through unchanged, the output of some debugger commands
     will not be readable when sent through the pager.

`tkRunning'
     Run Tk while prompting (with ReadLine).

`signalLevel', `warnLevel', `dieLevel'
     Level of verbosity.  By default, the debugger leaves your exceptions
     and warnings alone, because altering them can break correctly running
     programs.  It will attempt to print a message when uncaught INT, BUS,
     or SEGV signals arrive.  (But see the mention of signals in `BUGS' in
     this node below.)

     To disable this default safe mode, set these values to something
     higher than 0.  At a level of 1, you get backtraces upon receiving
     any kind of warning (this is often annoying) or exception (this is
     often valuable).  Unfortunately, the debugger cannot discern fatal
     exceptions from non-fatal ones.  If `dieLevel' is even 1, then your
     non-fatal exceptions are also traced and unceremoniously altered if
     they came from `eval'd' strings or from any kind of eval within
     modules you're attempting to load.  If `dieLevel' is 2, the debugger
     doesn't care where they came from:  It usurps your exception handler
     and prints out a trace, then modifies all exceptions with its own
     embellishments.  This may perhaps be useful for some tracing
     purposes, but tends to hopelessly destroy any program that takes its
     exception handling seriously.

`AutoTrace'
     Trace mode (similar to t command, but can be put into `PERLDB_OPTS').

`LineInfo'
     File or pipe to print line number info to.  If it is a pipe (say,
     `|visual_perl_db'), then a short message is used.  This is the
     mechanism used to interact with a slave editor or visual debugger,
     such as the special `vi' or emacs hooks, or the `ddd' graphical
     debugger.

`inhibit_exit'
     If 0, allows *stepping off* the end of the script.

`PrintRet'
     Print return value after r command if set (default).

`ornaments'
     Affects screen appearance of the command line (see *Note
     Term/ReadLine: (pm.info)Term/ReadLine,).  There is currently no way
     to disable these, which can render some output illegible on some
     displays, or with some pagers.  This is considered a bug.

frame
     Affects the printing of messages upon entry and exit from
     subroutines.  If `frame & 2' is false, messages are printed on entry
     only. (Printing on exit might be useful if interspersed with other
     messages.)

     If `frame & 4', arguments to functions are printed, plus context and
     caller info.  If `frame & 8', overloaded stringify and tied FETCH is
     enabled on the printed arguments.  If `frame & 16', the return value
     from the subroutine is printed.

     The length at which the argument list is truncated is governed by the
     next option:

`maxTraceLen'
     Length to truncate the argument list when the frame option's bit 4 is
     set.

   The following options affect what happens with V, X, and x commands:

`arrayDepth', `hashDepth'
     Print only first N elements (" for all).

compactDump, veryCompact
     Change the style of array and hash output.  If compactDump, short
     array may be printed on one line.

`globPrint'
     Whether to print contents of globs.

`DumpDBFiles'
     Dump arrays holding debugged files.

`DumpPackages'
     Dump symbol tables of packages.

`DumpReused'
     Dump contents of "reused" addresses.

quote, `HighBit', `undefPrint'
     Change the style of string dump.  The default value for quote is
     `auto'; one can enable double-quotish or single-quotish format by
     setting it to `"' or `'', respectively.  By default, characters with
     their high bit set are printed verbatim.

`UsageOnly'
     Rudimentary per-package memory usage dump.  Calculates total size of
     strings found in variables in the package.  This does not include
     lexicals in a module's file scope, or lost in closures.

   During startup, options are initialized from `$ENV{PERLDB_OPTS}'.  You
may place the initialization options `TTY', `noTTY', ReadLine, and
`NonStop' there.

   If your rc file contains:

     parse_options("NonStop=1 LineInfo=db.out AutoTrace");

   then your script will run without human intervention, putting trace
information into the file *db.out*.  (If you interrupt it, you'd better
reset `LineInfo' to `/dev/tty' if you expect to see anything.)

`TTY'
     The TTY to use for debugging I/O.

`noTTY'
     If set, the debugger goes into `NonStop' mode and will not connect to
     a TTY.  If interrupted (or if control goes to the debugger via
     explicit setting of $DB::signal or $DB::single from the Perl script),
     it connects to a TTY specified in the `TTY' option at startup, or to
     a tty found at runtime using the `Term::Rendezvous' module of your
     choice.

     This module should implement a method named new that returns an object
     with two methods: IN and `OUT'.  These should return filehandles to
     use for debugging input and output correspondingly.  The new method
     should inspect an argument containing the value of
     `$ENV{PERLDB_NOTTY}' at startup, or `"/tmp/perldbtty$$"' otherwise.
     This file is not inspected for proper ownership, so security hazards
     are theoretically possible.

ReadLine
     If false, readline support in the debugger is disabled in order to
     debug applications that themselves use ReadLine.

`NonStop'
     If set, the debugger goes into non-interactive mode until
     interrupted, or programmatically by setting $DB::signal or
     $DB::single.

   Here's an example of using the `$ENV{PERLDB_OPTS}' variable:

     $ PERLDB_OPTS="NonStop frame=2" perl -d myprogram

   That will run the script *myprogram* without human intervention,
printing out the call tree with entry and exit points.  Note that
`NonStop=1 frame=2' is equivalent to `N f=2', and that originally, options
could be uniquely abbreviated by the first letter (modulo the `Dump*'
options).  It is nevertheless recommended that you always spell them out
in full for legibility and future compatibility.

   Other examples include

     $ PERLDB_OPTS="NonStop frame=2" perl -d myprogram

   which runs script non-interactively, printing info on each entry into a
subroutine and each executed line into the file named `listing'.  (If you
interrupt it, you would better reset `LineInfo' to something
"interactive"!)

   Other examples include (using standard shell syntax to show environment
variable settings):

     $ ( PERLDB_OPTS="NonStop frame=1 AutoTrace LineInfo=tperl.out"
         perl -d myprogram )

   which may be useful for debugging a program that uses Term::ReadLine
itself.  Do not forget to detach your shell from the TTY in the window that
corresponds to `/dev/ttyXX', say, by issuing a command like

     $ sleep 1000000

   See `"Debugger Internals"', *Note Perldebguts: perldebguts, for details.

Debugger input/output
---------------------

Prompt
     The debugger prompt is something like

          DB<8>

     or even

          DB<<17>>

     where that number is the command number, and which you'd use to
     access with the built-in *csh*-like history mechanism.  For example,
     `!17' would repeat command number 17.  The depth of the angle
     brackets indicates the nesting depth of the debugger.  You could get
     more than one set of brackets, for example, if you'd already at a
     breakpoint and then printed the result of a function call that itself
     has a breakpoint, or you step into an expression via `s/n/t
     expression' command.

Multiline commands
     If you want to enter a multi-line command, such as a subroutine
     definition with several statements or a format, escape the newline
     that would normally end the debugger command with a backslash.
     Here's an example:

          DB<1> for (1..4) {         \
          cont:     print "ok\n";   \
          cont: }
          ok
          ok
          ok
          ok

     Note that this business of escaping a newline is specific to
     interactive commands typed into the debugger.

Stack backtrace
     Here's an example of what a stack backtrace via T command might look
     like:

          $ = main::infested called from file `Ambulation.pm' line 10
          @ = Ambulation::legs(1, 2, 3, 4) called from file `camel_flea' line 7
          $ = main::pests('bactrian', 4) called from file `camel_flea' line 4

     The left-hand character up there indicates the context in which the
     function was called, with `$' and `@' meaning scalar or list contexts
     respectively, and . meaning void context (which is actually a sort of
     scalar context).  The display above says that you were in the
     function `main::infested' when you ran the stack dump, and that it
     was called in scalar context from line 10 of the file
     *Ambulation.pm*, but without any arguments at all, meaning it was
     called as `&infested'.  The next stack frame shows that the function
     `Ambulation::legs' was called in list context from the *camel_flea*
     file with four arguments.  The last stack frame shows that
     `main::pests' was called in scalar context, also from *camel_flea*,
     but from line 4.

     If you execute the T command from inside an active use statement, the
     backtrace will contain both a require frame and an eval) frame.

Line Listing Format
     This shows the sorts of output the l command can produce:

          DB<<13>> l
            101:                @i{@i} = ();
            102:b               @isa{@i,$pack} = ()
            103                     if(exists $i{$prevpack} || exists $isa{$pack});
            104             }
            105
            106             next
            107==>              if(exists $isa{$pack});
            108
            109:a           if ($extra-- > 0) {
            110:                %isa = ($pack,1);

     Breakable lines are marked with :.  Lines with breakpoints are marked
     by b and those with actions by a.  The line that's about to be
     executed is marked by `< ==' >>.

Frame listing
     When the frame option is set, the debugger would print entered (and
     optionally exited) subroutines in different styles.  See *Note
     Perldebguts: perldebguts, for incredibly long examples of these.

Debugging compile-time statements
---------------------------------

   If you have compile-time executable statements (such as code within
BEGIN and CHECK blocks or use statements), these will not be stopped by
debugger, although requires and INIT blocks will, and compile-time
statements can be traced with `AutoTrace' option set in `PERLDB_OPTS').
From your own Perl code, however, you can transfer control back to the
debugger using the following statement, which is harmless if the debugger
is not running:

     $DB::single = 1;

   If you set $DB::single to 2, it's equivalent to having just typed the n
command, whereas a value of 1 means the s command.  The $DB::trace
variable should be set to 1 to simulate having typed the t command.

   Another way to debug compile-time code is to start the debugger, set a
breakpoint on the load of some module:

     DB<7> b load f:/perllib/lib/Carp.pm
       Will stop on load of `f:/perllib/lib/Carp.pm'.

   and then restart the debugger using the R command (if possible).  One
can use `b compile subname' for the same purpose.

Debugger Customization
----------------------

   The debugger probably contains enough configuration hooks that you
won't ever have to modify it yourself.  You may change the behaviour of
debugger from within the debugger using its O command, from the command
line via the `PERLDB_OPTS' environment variable, and from customization
files.

   You can do some customization by setting up a `.perldb' file, which
contains initialization code.  For instance, you could make aliases like
these (the last one is one people expect to be there):

     $DB::alias{'len'}  = 's/^len(.*)/p length($1)/';
     $DB::alias{'stop'} = 's/^stop (at|in)/b/';
     $DB::alias{'ps'}   = 's/^ps\b/p scalar /';
     $DB::alias{'quit'} = 's/^quit(\s*)/exit/';

   You can change options from `.perldb' by using calls like this one;

     parse_options("NonStop=1 LineInfo=db.out AutoTrace=1 frame=2");

   The code is executed in the package DB.  Note that `.perldb' is
processed before processing `PERLDB_OPTS'.  If `.perldb' defines the
subroutine `afterinit', that function is called after debugger
initialization ends.  `.perldb' may be contained in the current directory,
or in the home directory.  Because this file is sourced in by Perl and may
contain arbitrary commands, for security reasons, it must be owned by the
superuser or the current user, and writable by no one but its owner.

   If you want to modify the debugger, copy `perl5db.pl' from the Perl
library to another name and hack it to your heart's content.  You'll then
want to set your PERL5DB environment variable to say something like this:

     BEGIN { require "myperl5db.pl" }

   As a last resort, you could also use PERL5DB to customize the debugger
by directly setting internal variables or calling debugger functions.

   Note that any variables and functions that are not documented in this
document (or in *Note Perldebguts: perldebguts,) are considered for
internal use only, and as such are subject to change without notice.

Readline Support
----------------

   As shipped, the only command-line history supplied is a simplistic one
that checks for leading exclamation points.  However, if you install the
Term::ReadKey and Term::ReadLine modules from CPAN, you will have full
editing capabilities much like GNU readline(3) provides.  Look for these
in the `modules/by-module/Term' directory on CPAN.  These do not support
normal *vi* command-line editing, however.

   A rudimentary command-line completion is also available.
Unfortunately, the names of lexical variables are not available for
completion.

Editor Support for Debugging
----------------------------

   If you have the FSF's version of emacs installed on your system, it can
interact with the Perl debugger to provide an integrated software
development environment reminiscent of its interactions with C debuggers.

   Perl comes with a start file for making emacs act like a
syntax-directed editor that understands (some of) Perl's syntax.  Look in
the emacs directory of the Perl source distribution.

   A similar setup by Tom Christiansen for interacting with any
vendor-shipped *vi* and the X11 window system is also available.  This
works similarly to the integrated multiwindow support that emacs provides,
where the debugger drives the editor.  At the time of this writing,
however, that tool's eventual location in the Perl distribution was
uncertain.

   Users of *vi* should also look into *vim* and *gvim*, the mousey and
windy version, for coloring of Perl keywords.

   Note that only perl can truly parse Perl, so all such CASE tools fall
somewhat short of the mark, especially if you don't program your Perl as a
C programmer might.

The Perl Profiler
-----------------

   If you wish to supply an alternative debugger for Perl to run, just
invoke your script with a colon and a package argument given to the -d
flag.  The most popular alternative debuggers for Perl is the Perl
profiler.  Devel::DProf is now included with the standard Perl
distribution.  To profile your Perl program in the file `mycode.pl', just
type:

     $ perl -d:DProf mycode.pl

   When the script terminates the profiler will dump the profile
information to a file called `tmon.out'.  A tool like dprofpp, also
supplied with the standard Perl distribution, can be used to interpret the
information in that profile.

Debugging regular expressions
=============================

   `use re 'debug'' enables you to see the gory details of how the Perl
regular expression engine works.  In order to understand this typically
voluminous output, one must not only have some idea about about how
regular expression matching works in general, but also know how Perl's
regular expressions are internally compiled into an automaton.  These
matters are explored in some detail in `"Debugging regular expressions"',
*Note Perldebguts: perldebguts,.

Debugging memory usage
======================

   Perl contains internal support for reporting its own memory usage, but
this is a fairly advanced concept that requires some understanding of how
memory allocation works.  See `"Debugging Perl memory usage"', *Note
Perldebguts: perldebguts, for the details.

SEE ALSO
========

   You did try the -w switch, didn't you?

   *Note Perldebguts: perldebguts,, *Note Re: (pm.info)re,, *Note DB:
(pm.info)DB,, `Devel::Dprof' in this node, `dprofpp' in this node, *Note
Dumpvalue: (pm.info)Dumpvalue,, and *Note Perlrun: perlrun,.

BUGS
====

   You cannot get stack frame information or in any fashion debug functions
that were not compiled by Perl, such as those from C or C++ extensions.

   If you alter your @_ arguments in a subroutine (such as with shift or
pop, the stack backtrace will not show the original values.

   The debugger does not currently work in conjunction with the -W
command-line switch, because it itself is not free of warnings.

   If you're in a slow syscall (like waiting, accepting, or reading from
your keyboard or a socket) and haven't set up your own `$SIG{INT}'
handler, then you won't be able to CTRL-C your way back to the debugger,
because the debugger's own `$SIG{INT}' handler doesn't understand that it
needs to raise an exception to longjmp(3) out of slow syscalls.


File: perl.info,  Node: perldelta,  Next: perl5005delta,  Prev: Top,  Up: Top

what's new for perl v5.6.0
**************************

NAME
====

   perldelta - what's new for perl v5.6.0

DESCRIPTION
===========

   This document describes differences between the 5.005 release and this
one.

Core Enhancements
=================

Interpreter cloning, threads, and concurrency
---------------------------------------------

   Perl 5.005_63 introduces the beginnings of support for running multiple
interpreters concurrently in different threads.  In conjunction with the
perl_clone() API call, which can be used to selectively duplicate the
state of any given interpreter, it is possible to compile a piece of code
once in an interpreter, clone that interpreter one or more times, and run
all the resulting interpreters in distinct threads.

   On the Windows platform, this feature is used to emulate fork() at the
interpreter level.  See *Note Perlfork: perlfork, for details about that.

   This feature is still in evolution.  It is eventually meant to be used
to selectively clone a subroutine and data reachable from that subroutine
in a separate interpreter and run the cloned subroutine in a separate
thread.  Since there is no shared data between the interpreters, little or
no locking will be needed (unless parts of the symbol table are explicitly
shared).  This is obviously intended to be an easy-to-use replacement for
the existing threads support.

   Support for cloning interpreters and interpreter concurrency can be
enabled using the -Dusethreads Configure option (see win32/Makefile for
how to enable it on Windows.)  The resulting perl executable will be
functionally identical to one that was built with -Dmultiplicity, but the
perl_clone() API call will only be available in the former.

   -Dusethreads enables the cpp macro USE_ITHREADS by default, which in
turn enables Perl source code changes that provide a clear separation
between the op tree and the data it operates with.  The former is
immutable, and can therefore be shared between an interpreter and all of
its clones, while the latter is considered local to each interpreter, and
is therefore copied for each clone.

   Note that building Perl with the -Dusemultiplicity Configure option is
adequate if you wish to run multiple independent interpreters concurrently
in different threads.  -Dusethreads only provides the additional
functionality of the perl_clone() API call and other support for running
*cloned* interpreters concurrently.

     NOTE: This is an experimental feature.  Implementation details are
     subject to change.

Lexically scoped warning categories
-----------------------------------

   You can now control the granularity of warnings emitted by perl at a
finer level using the `use warnings' pragma.  *Note Warnings:
(pm.info)warnings, and *Note Perllexwarn: perllexwarn, have copious
documentation on this feature.

Unicode and UTF-8 support
-------------------------

   Perl now uses UTF-8 as its internal representation for character
strings.  The utf8 and bytes pragmas are used to control this support in
the current lexical scope.  See *Note Perlunicode: perlunicode,, *Note
Utf8: (pm.info)utf8, and *Note Bytes: (pm.info)bytes, for more information.

   This feature is expected to evolve quickly to support some form of I/O
disciplines that can be used to specify the kind of input and output data
(bytes or characters).  Until that happens, additional modules from CPAN
will be needed to complete the toolkit for dealing with Unicode.

     NOTE: This should be considered an experimental feature.  Implementation
     details are subject to change.

Support for interpolating named characters
------------------------------------------

   The new `\N' escape interpolates named characters within strings.  For
example, `"Hi! \N{WHITE SMILING FACE}"' evaluates to a string with a
unicode smiley face at the end.

"our" declarations
------------------

   An "our" declaration introduces a value that can be best understood as
a lexically scoped symbolic alias to a global variable in the package that
was current where the variable was declared.  This is mostly useful as an
alternative to the vars pragma, but also provides the opportunity to
introduce typing and other attributes for such variables.  See `our',
*Note Perlfunc: perlfunc,.

Support for strings represented as a vector of ordinals
-------------------------------------------------------

   Literals of the form `v1.2.3.4' are now parsed as a string composed of
characters with the specified ordinals.  This is an alternative, more
readable way to construct (possibly unicode) strings instead of
interpolating characters, as in `"\x{1}\x{2}\x{3}\x{4}"'.  The leading v
may be omitted if there are more than two ordinals, so `1.2.3' is parsed
the same as `v1.2.3'.

   Strings written in this form are also useful to represent version
"numbers".  It is easy to compare such version "numbers" (which are really
just plain strings) using any of the usual string comparison operators eq,
ne, lt, gt, etc., or perform bitwise string operations on them using |, &,
etc.

   In conjunction with the new $^V magic variable (which contains the perl
version as a string), such literals can be used as a readable way to check
if you're running a particular version of Perl:

     # this will parse in older versions of Perl also
     if ($^V and $^V gt v5.6.0) {
         # new features supported
     }

   require and use also have some special magic to support such literals.
They will be interpreted as a version rather than as a module name:

     require v5.6.0;		# croak if $^V lt v5.6.0
     use v5.6.0;			# same, but croaks at compile-time

   Alternatively, the v may be omitted if there is more than one dot:

     require 5.6.0;
     use 5.6.0;

   Also, sprintf and printf support the Perl-specific format flag `%v' to
print ordinals of characters in arbitrary strings:

     printf "v%vd", $^V;		# prints current version, such as "v5.5.650"
     printf "%*vX", ":", $addr;	# formats IPv6 address
     printf "%*vb", " ", $bits;	# displays bitstring

   See `"Scalar value constructors"', *Note Perldata: perldata, for
additional information.

Improved Perl version numbering system
--------------------------------------

   Beginning with Perl version 5.6.0, the version number convention has
been changed to a "dotted integer" scheme that is more commonly found in
open source projects.

   Maintenance versions of v5.6.0 will be released as v5.6.1, v5.6.2 etc.
The next development series following v5.6.0 will be numbered v5.7.x,
beginning with v5.7.0, and the next major production release following
v5.6.0 will be v5.8.0.

   The English module now sets $PERL_VERSION to $^V (a string value) rather
than $] (a numeric value).  (This is a potential incompatibility.  Send us
a report via perlbug if you are affected by this.)

   The v1.2.3 syntax is also now legal in Perl.  See `Support for strings
represented as a vector of ordinals' in this node for more on that.

   To cope with the new versioning system's use of at least three
significant digits for each version component, the method used for
incrementing the subversion number has also changed slightly.  We assume
that versions older than v5.6.0 have been incrementing the subversion
component in multiples of 10.  Versions after v5.6.0 will increment them
by 1.  Thus, using the new notation, 5.005_03 is the "same" as v5.5.30,
and the first maintenance version following v5.6.0 will be v5.6.1 (which
should be read as being equivalent to a floating point value of 5.006_001
in the older format, stored in $]).

New syntax for declaring subroutine attributes
----------------------------------------------

   Formerly, if you wanted to mark a subroutine as being a method call or
as requiring an automatic lock() when it is entered, you had to declare
that with a `use attrs' pragma in the body of the subroutine.  That can
now be accomplished with declaration syntax, like this:

     sub mymethod : locked method ;
     ...
     sub mymethod : locked method {
     	...
     }

     sub othermethod :locked :method ;
     ...
     sub othermethod :locked :method {
     	...
     }

   (Note how only the first : is mandatory, and whitespace surrounding the
: is optional.)

   `AutoSplit.pm' and `SelfLoader.pm' have been updated to keep the
attributes with the stubs they provide.  See *Note Attributes:
(pm.info)attributes,.

File and directory handles can be autovivified
----------------------------------------------

   Similar to how constructs such as `< $x-'[0] >> autovivify a reference,
handle constructors (open(), opendir(), pipe(), socketpair(), sysopen(),
socket(), and accept()) now autovivify a file or directory handle if the
handle passed to them is an uninitialized scalar variable.  This allows
the constructs such as `open(my $fh, ...)' and `open(local $fh,...)'  to
be used to create filehandles that will conveniently be closed
automatically when the scope ends, provided there are no other references
to them.  This largely eliminates the need for typeglobs when opening
filehandles that must be passed around, as in the following example:

     sub myopen {
         open my $fh, "@_"
     	     or die "Can't open '@_': $!";
     	return $fh;
     }

     {
         my $f = myopen("</etc/motd");
     	print <$f>;
     	# $f implicitly closed here
     }

open() with more than two arguments
-----------------------------------

   If open() is passed three arguments instead of two, the second argument
is used as the mode and the third argument is taken to be the file name.
This is primarily useful for protecting against unintended magic behavior
of the traditional two-argument form.  See `open', *Note Perlfunc:
perlfunc,.

64-bit support
--------------

   Any platform that has 64-bit integers either

     (1) natively as longs or ints
     (2) via special compiler flags
     (3) using long long or int64_t

   is able to use "quads" (64-bit integers) as follows:

   * constants (decimal, hexadecimal, octal, binary) in the code

   * arguments to oct() and hex()

   * arguments to print(), printf() and sprintf() (flag prefixes ll, L, q)

   * printed as such

   * pack() and unpack() "q" and "Q" formats

   * in basic arithmetics: + - * / % (NOTE: operating close to the limits
     of the integer values may produce surprising results)

   * in bit arithmetics: & | ^ ~ << >> (NOTE: these used to be forced to
     be 32 bits wide but now operate on the full native width.)

   * vec()

   Note that unless you have the case (a) you will have to configure and
compile Perl using the -Duse64bitint Configure flag.

     NOTE: The Configure flags -Duselonglong and -Duse64bits have been
     deprecated.  Use -Duse64bitint instead.

   There are actually two modes of 64-bitness: the first one is achieved
using Configure -Duse64bitint and the second one using Configure
-Duse64bitall.  The difference is that the first one is minimal and the
second one maximal.  The first works in more places than the second.

   The `use64bitint' does only as much as is required to get 64-bit
integers into Perl (this may mean, for example, using "long longs") while
your memory may still be limited to 2 gigabytes (because your pointers
could still be 32-bit).  Note that the name `64bitint' does not imply that
your C compiler will be using 64-bit ints (it might, but it doesn't have
to): the `use64bitint' means that you will be able to have 64 bits wide
scalar values.

   The `use64bitall' goes all the way by attempting to switch also
integers (if it can), longs (and pointers) to being 64-bit.  This may
create an even more binary incompatible Perl than -Duse64bitint: the
resulting executable may not run at all in a 32-bit box, or you may have
to reboot/reconfigure/rebuild your operating system to be 64-bit aware.

   Natively 64-bit systems like Alpha and Cray need neither -Duse64bitint
nor -Duse64bitall.

   Last but not least: note that due to Perl's habit of always using
floating point numbers, the quads are still not true integers.  When quads
overflow their limits (0...18_446_744_073_709_551_615 unsigned,
-9_223_372_036_854_775_808...9_223_372_036_854_775_807 signed), they are
silently promoted to floating point numbers, after which they will start
losing precision (in their lower digits).

     NOTE: 64-bit support is still experimental on most platforms.
     Existing support only covers the LP64 data model.  In particular, the
     LLP64 data model is not yet supported.  64-bit libraries and system
     APIs on many platforms have not stabilized--your mileage may vary.

Large file support
------------------

   If you have filesystems that support "large files" (files larger than 2
gigabytes), you may now also be able to create and access them from Perl.

     NOTE: The default action is to enable large file support, if
     available on the platform.

   If the large file support is on, and you have a Fcntl constant
O_LARGEFILE, the O_LARGEFILE is automatically added to the flags of
sysopen().

   Beware that unless your filesystem also supports "sparse files" seeking
to umpteen petabytes may be inadvisable.

   Note that in addition to requiring a proper file system to do large
files you may also need to adjust your per-process (or your per-system, or
per-process-group, or per-user-group) maximum filesize limits before
running Perl scripts that try to handle large files, especially if you
intend to write such files.

   Finally, in addition to your process/process group maximum filesize
limits, you may have quota limits on your filesystems that stop you (your
user id or your user group id) from using large files.

   Adjusting your process/user/group/file system/operating system limits
is outside the scope of Perl core language.  For process limits, you may
try increasing the limits using your shell's limits/limit/ulimit command
before running Perl.  The BSD::Resource extension (not included with the
standard Perl distribution) may also be of use, it offers the
getrlimit/setrlimit interface that can be used to adjust process resource
usage limits, including the maximum filesize limit.

Long doubles
------------

   In some systems you may be able to use long doubles to enhance the
range and precision of your double precision floating point numbers (that
is, Perl's numbers).  Use Configure -Duselongdouble to enable this support
(if it is available).

"more bits"
-----------

   You can "Configure -Dusemorebits" to turn on both the 64-bit support
and the long double support.

Enhanced support for sort() subroutines
---------------------------------------

   Perl subroutines with a prototype of `($$)', and XSUBs in general, can
now be used as sort subroutines.  In either case, the two elements to be
compared are passed as normal parameters in @_.  See `sort', *Note
Perlfunc: perlfunc,.

   For unprototyped sort subroutines, the historical behavior of passing
the elements to be compared as the global variables $a and $b remains
unchanged.

`sort $coderef @foo' allowed
----------------------------

   sort() did not accept a subroutine reference as the comparison function
in earlier versions.  This is now permitted.

File globbing implemented internally
------------------------------------

   Perl now uses the File::Glob implementation of the glob() operator
automatically.  This avoids using an external csh process and the problems
associated with it.

     NOTE: This is currently an experimental feature.  Interfaces and
     implementation are subject to change.

Support for CHECK blocks
     In addition to BEGIN, `INIT', END, DESTROY and AUTOLOAD, subroutines
     named CHECK are now special.  These are queued up during compilation
     and behave similar to END blocks, except they are called at the end
     of compilation rather than at the end of execution.  They cannot be
     called directly.

POSIX character class syntax [: :] supported
--------------------------------------------

   For example to match alphabetic characters use /[[:alpha:]]/.  See
*Note Perlre: perlre, for details.

Better pseudo-random number generator
     In 5.005_0x and earlier, perl's rand() function used the C library
     rand(3) function.  As of 5.005_52, Configure tests for drand48(),
     random(), and rand() (in that order) and picks the first one it finds.

     These changes should result in better random numbers from rand().

Improved `qw//' operator
------------------------

   The `qw//' operator is now evaluated at compile time into a true list
instead of being replaced with a run time call to `split()'.  This removes
the confusing misbehaviour of `qw//' in scalar context, which had
inherited that behaviour from split().

   Thus:

     $foo = ($bar) = qw(a b c); print "$foo|$bar\n";

   now correctly prints "3|a", instead of "2|a".

Better worst-case behavior of hashes
     Small changes in the hashing algorithm have been implemented in order
     to improve the distribution of lower order bits in the hashed value.
     This is expected to yield better performance on keys that are
     repeated sequences.

pack() format 'Z' supported
---------------------------

   The new format type 'Z' is useful for packing and unpacking
null-terminated strings.  See `"pack"', *Note Perlfunc: perlfunc,.

pack() format modifier '!' supported
------------------------------------

   The new format type modifier '!' is useful for packing and unpacking
native shorts, ints, and longs.  See `"pack"', *Note Perlfunc: perlfunc,.

pack() and unpack() support counted strings
-------------------------------------------

   The template character '/' can be used to specify a counted string type
to be packed or unpacked.  See `"pack"', *Note Perlfunc: perlfunc,.

Comments in pack() templates
----------------------------

   The '#' character in a template introduces a comment up to end of the
line.  This facilitates documentation of pack() templates.

Weak references
---------------

   In previous versions of Perl, you couldn't cache objects so as to allow
them to be deleted if the last reference from outside the cache is
deleted.  The reference in the cache would hold a reference count on the
object and the objects would never be destroyed.

   Another familiar problem is with circular references.  When an object
references itself, its reference count would never go down to zero, and it
would not get destroyed until the program is about to exit.

   Weak references solve this by allowing you to "weaken" any reference,
that is, make it not count towards the reference count.  When the last
non-weak reference to an object is deleted, the object is destroyed and
all the weak references to the object are automatically undef-ed.

   To use this feature, you need the WeakRef package from CPAN, which
contains additional documentation.

     NOTE: This is an experimental feature.  Details are subject to change.

Binary numbers supported
------------------------

   Binary numbers are now supported as literals, in s?printf formats, and
`oct()':

     $answer = 0b101010;
     printf "The answer is: %b\n", oct("0b101010");

Lvalue subroutines
------------------

   Subroutines can now return modifiable lvalues.  See `"Lvalue
subroutines"', *Note Perlsub: perlsub,.

     NOTE: This is an experimental feature.  Details are subject to change.

Some arrows may be omitted in calls through references
------------------------------------------------------

   Perl now allows the arrow to be omitted in many constructs involving
subroutine calls through references.  For example, `< $foo[10]-'('foo') >>
may now be written `$foo[10]('foo')'.  This is rather similar to how the
arrow may be omitted from `< $foo[10]-'{'foo'} >>.  Note however, that the
arrow is still required for `< foo(10)-'('bar') >>.

Boolean assignment operators are legal lvalues
----------------------------------------------

   Constructs such as `($a ||= 2) += 1' are now allowed.

exists() is supported on subroutine names
-----------------------------------------

   The exists() builtin now works on subroutine names.  A subroutine is
considered to exist if it has been declared (even if implicitly).  See
`exists', *Note Perlfunc: perlfunc, for examples.

exists() and delete() are supported on array elements
-----------------------------------------------------

   The exists() and delete() builtins now work on simple arrays as well.
The behavior is similar to that on hash elements.

   exists() can be used to check whether an array element has been
initialized.  This avoids autovivifying array elements that don't exist.
If the array is tied, the EXISTS() method in the corresponding tied
package will be invoked.

   delete() may be used to remove an element from the array and return it.
The array element at that position returns to its unintialized state, so
that testing for the same element with exists() will return false.  If the
element happens to be the one at the end, the size of the array also
shrinks up to the highest element that tests true for exists(), or 0 if
none such is found.  If the array is tied, the DELETE() method in the
corresponding tied package will be invoked.

   See `exists', *Note Perlfunc: perlfunc, and `delete', *Note Perlfunc:
perlfunc, for examples.

Pseudo-hashes work better
-------------------------

   Dereferencing some types of reference values in a pseudo-hash, such as
`< $ph-'{foo}[1] >>, was accidentally disallowed.  This has been corrected.

   When applied to a pseudo-hash element, exists() now reports whether the
specified value exists, not merely if the key is valid.

   delete() now works on pseudo-hashes.  When given a pseudo-hash element
or slice it deletes the values corresponding to the keys (but not the keys
themselves).  See `"Pseudo-hashes: Using an array as a hash"', *Note
Perlref: perlref,.

   Pseudo-hash slices with constant keys are now optimized to array lookups
at compile-time.

   List assignments to pseudo-hash slices are now supported.

   The fields pragma now provides ways to create pseudo-hashes, via
fields::new() and fields::phash().  See *Note Fields: (pm.info)fields,.

     NOTE: The pseudo-hash data type continues to be experimental.
     Limiting oneself to the interface elements provided by the
     fields pragma will provide protection from any future changes.

Automatic flushing of output buffers
------------------------------------

   fork(), exec(), system(), qx//, and pipe open()s now flush buffers of
all files opened for output when the operation was attempted.  This mostly
eliminates confusing buffering mishaps suffered by users unaware of how
Perl internally handles I/O.

   This is not supported on some platforms like Solaris where a suitably
correct implementation of fflush(NULL) isn't available.

Better diagnostics on meaningless filehandle operations
-------------------------------------------------------

   Constructs such as `< open(<FH') >> and `< close(<FH') >> are compile
time errors.  Attempting to read from filehandles that were opened only
for writing will now produce warnings (just as writing to read-only
filehandles does).

Where possible, buffered data discarded from duped input filehandle
-------------------------------------------------------------------

   `< open(NEW, "<&OLD") '> now attempts to discard any data that was
previously read and buffered in `OLD' before duping the handle.  On
platforms where doing this is allowed, the next read operation on NEW will
return the same data as the corresponding operation on `OLD'.  Formerly,
it would have returned the data from the start of the following disk block
instead.

eof() has the same old magic as <>
----------------------------------

   eof() would return true if no attempt to read from `< <' >> had yet
been made.  eof() has been changed to have a little magic of its own, it
now opens the `< <' >> files.

binmode() can be used to set :crlf and :raw modes
-------------------------------------------------

   binmode() now accepts a second argument that specifies a discipline for
the handle in question.  The two pseudo-disciplines ":raw" and ":crlf" are
currently supported on DOS-derivative platforms.  See `"binmode"', *Note
Perlfunc: perlfunc, and `"binmode"', *Note Open: (pm.info)open,.

-T filetest recognizes UTF-8 encoded files as "text"
----------------------------------------------------

   The algorithm used for the -T filetest has been enhanced to correctly
identify UTF-8 content as "text".

system(), backticks and pipe open now reflect exec() failure
------------------------------------------------------------

   On Unix and similar platforms, system(), qx() and open(FOO, "cmd |")
etc., are implemented via fork() and exec().  When the underlying exec()
fails, earlier versions did not report the error properly, since the
exec() happened to be in a different process.

   The child process now communicates with the parent about the error in
launching the external command, which allows these constructs to return
with their usual error value and set $!.

Improved diagnostics
--------------------

   Line numbers are no longer suppressed (under most likely circumstances)
during the global destruction phase.

   Diagnostics emitted from code running in threads other than the main
thread are now accompanied by the thread ID.

   Embedded null characters in diagnostics now actually show up.  They
used to truncate the message in prior versions.

   $foo::a and $foo::b are now exempt from "possible typo" warnings only
if sort() is encountered in package foo.

   Unrecognized alphabetic escapes encountered when parsing quote
constructs now generate a warning, since they may take on new semantics in
later versions of Perl.

   Many diagnostics now report the internal operation in which the warning
was provoked, like so:

     Use of uninitialized value in concatenation (.) at (eval 1) line 1.
     Use of uninitialized value in print at (eval 1) line 1.

   Diagnostics  that occur within eval may also report the file and line
number where the eval is located, in addition to the eval sequence number
and the line number within the evaluated text itself.  For example:

     Not enough arguments for scalar at (eval 4)[newlib/perl5db.pl:1411] line 2, at EOF

Diagnostics follow STDERR
-------------------------

   Diagnostic output now goes to whichever file the `STDERR' handle is
pointing at, instead of always going to the underlying C runtime library's
stderr.

More consistent close-on-exec behavior
     On systems that support a close-on-exec flag on filehandles, the flag
     is now set for any handles created by pipe(), socketpair(), socket(),
     and accept(), if that is warranted by the value of $^F that may be in
     effect.  Earlier versions neglected to set the flag for handles
     created with these operators.  See `pipe', *Note Perlfunc: perlfunc,,
     `socketpair', *Note Perlfunc: perlfunc,, `socket', *Note Perlfunc:
     perlfunc,, `accept', *Note Perlfunc: perlfunc,, and `$^F', *Note
     Perlvar: perlvar,.

syswrite() ease-of-use
----------------------

   The length argument of syswrite() has become optional.

Better syntax checks on parenthesized unary operators
-----------------------------------------------------

   Expressions such as:

     print defined(&foo,&bar,&baz);
     print uc("foo","bar","baz");
     undef($foo,&bar);

   used to be accidentally allowed in earlier versions, and produced
unpredictable behaviour.  Some produced ancillary warnings when used in
this way; others silently did the wrong thing.

   The parenthesized forms of most unary operators that expect a single
argument now ensure that they are not called with more than one argument,
making the cases shown above syntax errors.  The usual behaviour of:

     print defined &foo, &bar, &baz;
     print uc "foo", "bar", "baz";
     undef $foo, &bar;

   remains unchanged.  See *Note Perlop: perlop,.

Bit operators support full native integer width
-----------------------------------------------

   The bit operators (& | ^ ~ << >>) now operate on the full native
integral width (the exact size of which is available in $Config{ivsize}).
For example, if your platform is either natively 64-bit or if Perl has
been configured to use 64-bit integers, these operations apply to 8 bytes
(as opposed to 4 bytes on 32-bit platforms).  For portability, be sure to
mask off the excess bits in the result of unary `~', e.g., `~$x &
0xffffffff'.

Improved security features
--------------------------

   More potentially unsafe operations taint their results for improved
security.

   The `passwd' and `shell' fields returned by the getpwent(), getpwnam(),
and getpwuid() are now tainted, because the user can affect their own
encrypted password and login shell.

   The variable modified by shmread(), and messages returned by msgrcv()
(and its object-oriented interface IPC::SysV::Msg::rcv) are also tainted,
because other untrusted processes can modify messages and shared memory
segments for their own nefarious purposes.

More functional bareword prototype (*)
     Bareword prototypes have been rationalized to enable them to be used
     to override builtins that accept barewords and interpret them in a
     special way, such as require or do.

     Arguments prototyped as * will now be visible within the subroutine
     as either a simple scalar or as a reference to a typeglob.  See
     `Prototypes', *Note Perlsub: perlsub,.

require and do may be overridden
--------------------------------

   require and `do 'file'' operations may be overridden locally by
importing subroutines of the same name into the current package (or
globally by importing them into the CORE::GLOBAL:: namespace).  Overriding
require will also affect use, provided the override is visible at
compile-time.  See `"Overriding Built-in Functions"', *Note Perlsub:
perlsub,.

$^X variables may now have names longer than one character
----------------------------------------------------------

   Formerly, $^X was synonymous with ${"\cX"}, but $^XY was a syntax
error.  Now variable names that begin with a control character may be
arbitrarily long.  However, for compatibility reasons, these variables
must be written with explicit braces, as `${^XY}' for example.  `${^XYZ}'
is synonymous with ${"\cXYZ"}.  Variable names with more than one control
character, such as `${^XY^Z}', are illegal.

   The old syntax has not changed.  As before, `^X' may be either a
literal control-X character or the two-character sequence `caret' plus
`X'.  When braces are omitted, the variable name stops after the control
character.  Thus `"$^XYZ"' continues to be synonymous with `$^X . "YZ"' as
before.

   As before, lexical variables may not have names beginning with control
characters.  As before, variables whose names begin with a control
character are always forced to be in package `main'.  All such variables
are reserved for future extensions, except those that begin with `^_',
which may be used by user programs and are guaranteed not to acquire
special meaning in any future version of Perl.

New variable $^C reflects -c switch
-----------------------------------

   $^C has a boolean value that reflects whether perl is being run in
compile-only mode (i.e. via the -c switch).  Since BEGIN blocks are
executed under such conditions, this variable enables perl code to
determine whether actions that make sense only during normal running are
warranted.  See *Note Perlvar: perlvar,.

New variable $^V contains Perl version as a string
--------------------------------------------------

   $^V contains the Perl version number as a string composed of characters
whose ordinals match the version numbers, i.e. v5.6.0.  This may be used
in string comparisons.

   See Support for strings represented as a vector of ordinals for an
example.

Optional Y2K warnings
---------------------

   If Perl is built with the cpp macro `PERL_Y2KWARN' defined, it emits
optional warnings when concatenating the number 19 with another number.

   This behavior must be specifically enabled when running Configure.  See
INSTALL and `README.Y2K'.

Modules and Pragmata
====================

Modules
-------

attributes
     While used internally by Perl as a pragma, this module also provides
     a way to fetch subroutine and variable attributes.  See *Note
     Attributes: (pm.info)attributes,.

B
     The Perl Compiler suite has been extensively reworked for this
     release.  More of the standard Perl testsuite passes when run under
     the Compiler, but there is still a significant way to go to achieve
     production quality compiled executables.

          NOTE: The Compiler suite remains highly experimental.  The
          generated code may not be correct, even it manages to execute
          without errors.

Benchmark
     Overall, Benchmark results exhibit lower average error and better
     timing accuracy.

     You can now run tests for n seconds instead of guessing the right
     number of tests to run: e.g., timethese(-5, ...) will run each code
     for at least 5 CPU seconds.  Zero as the "number of repetitions"
     means "for at least 3 CPU seconds".  The output format has also
     changed.  For example:

          use Benchmark;$x=3;timethese(-5,{a=>sub{$x*$x},b=>sub{$x**2}})

     will now output something like this:

          Benchmark: running a, b, each for at least 5 CPU seconds...
                   a:  5 wallclock secs ( 5.77 usr +  0.00 sys =  5.77 CPU) @ 200551.91/s (n=1156516)
                   b:  4 wallclock secs ( 5.00 usr +  0.02 sys =  5.02 CPU) @ 159605.18/s (n=800686)

     New features: "each for at least N CPU seconds...", "wallclock secs",
     and the "@ operations/CPU second (n=operations)".

     timethese() now returns a reference to a hash of Benchmark objects
     containing the test results, keyed on the names of the tests.

     timethis() now returns the iterations field in the Benchmark result
     object instead of 0.

     timethese(), timethis(), and the new cmpthese() (see below) can also
     take a format specifier of 'none' to suppress output.

     A new function countit() is just like timeit() except that it takes a
     TIME instead of a COUNT.

     A new function cmpthese() prints a chart comparing the results of
     each test returned from a timethese() call.  For each possible pair
     of tests, the percentage speed difference (iters/sec or seconds/iter)
     is shown.

     For other details, see *Note Benchmark: (pm.info)Benchmark,.

ByteLoader
     The ByteLoader is a dedicated extension to generate and run Perl
     bytecode.  See *Note ByteLoader: (pm.info)ByteLoader,.

constant
     References can now be used.

     The new version also allows a leading underscore in constant names,
     but disallows a double leading underscore (as in "__LINE__").  Some
     other names are disallowed or warned against, including BEGIN, END,
     etc.  Some names which were forced into main:: used to fail silently
     in some cases; now they're fatal (outside of main::) and an optional
     warning (inside of main::).  The ability to detect whether a constant
     had been set with a given name has been added.

     See *Note Constant: (pm.info)constant,.

charnames
     This pragma implements the `\N' string escape.  See *Note Charnames:
     (pm.info)charnames,.

Data::Dumper
     A `Maxdepth' setting can be specified to avoid venturing too deeply
     into deep data structures.  See *Note Data/Dumper:
     (pm.info)Data/Dumper,.

     The XSUB implementation of Dump() is now automatically called if the
     `Useqq' setting is not in use.

     Dumping `qr//' objects works correctly.

DB
     DB is an experimental module that exposes a clean abstraction to
     Perl's debugging API.

DB_File
     DB_File can now be built with Berkeley DB versions 1, 2 or 3.  See
     `ext/DB_File/Changes'.

Devel::DProf
     Devel::DProf, a Perl source code profiler has been added.  See *Note
     Devel/DProf: (pm.info)Devel/DProf, and `dprofpp' in this node.

Devel::Peek
     The Devel::Peek module provides access to the internal representation
     of Perl variables and data.  It is a data debugging tool for the XS
     programmer.

Dumpvalue
     The Dumpvalue module provides screen dumps of Perl data.

DynaLoader
     DynaLoader now supports a dl_unload_file() function on platforms that
     support unloading shared objects using dlclose().

     Perl can also optionally arrange to unload all extension shared
     objects loaded by Perl.  To enable this, build Perl with the
     Configure option `-Accflags=-DDL_UNLOAD_ALL_AT_EXIT'.  (This maybe
     useful if you are using Apache with mod_perl.)

English
     $PERL_VERSION now stands for $^V (a string value) rather than for $]
     (a numeric value).

Env
     Env now supports accessing environment variables like PATH as array
     variables.

Fcntl
     More Fcntl constants added: F_SETLK64, F_SETLKW64, O_LARGEFILE for
     large file (more than 4GB) access (NOTE: the O_LARGEFILE is
     automatically added to sysopen() flags if large file support has been
     configured, as is the default), Free/Net/OpenBSD locking behaviour
     flags F_FLOCK, F_POSIX, Linux F_SHLCK, and O_ACCMODE: the combined
     mask of O_RDONLY, O_WRONLY, and O_RDWR.  The seek()/sysseek()
     constants SEEK_SET, SEEK_CUR, and SEEK_END are available via the
     `:seek' tag.  The chmod()/stat() S_IF* constants and S_IS* functions
     are available via the `:mode' tag.

File::Compare
     A compare_text() function has been added, which allows custom
     comparison functions.  See *Note File/Compare: (pm.info)File/Compare,.

File::Find
     File::Find now works correctly when the wanted() function is either
     autoloaded or is a symbolic reference.

     A bug that caused File::Find to lose track of the working directory
     when pruning top-level directories has been fixed.

     File::Find now also supports several other options to control its
     behavior.  It can follow symbolic links if the `follow' option is
     specified.  Enabling the `no_chdir' option will make File::Find skip
     changing the current directory when walking directories.  The untaint
     flag can be useful when running with taint checks enabled.

     See *Note File/Find: (pm.info)File/Find,.

File::Glob
     This extension implements BSD-style file globbing.  By default, it
     will also be used for the internal implementation of the glob()
     operator.  See *Note File/Glob: (pm.info)File/Glob,.

File::Spec
     New methods have been added to the File::Spec module: devnull()
     returns the name of the null device (/dev/null on Unix) and tmpdir()
     the name of the temp directory (normally /tmp on Unix).  There are
     now also methods to convert between absolute and relative filenames:
     abs2rel() and rel2abs().  For compatibility with operating systems
     that specify volume names in file paths, the splitpath(), splitdir(),
     and catdir() methods have been added.

File::Spec::Functions
     The new File::Spec::Functions modules provides a function interface
     to the File::Spec module.  Allows shorthand

          $fullname = catfile($dir1, $dir2, $file);

     instead of

          $fullname = File::Spec->catfile($dir1, $dir2, $file);

Getopt::Long
     Getopt::Long licensing has changed to allow the Perl Artistic License
     as well as the GPL. It used to be GPL only, which got in the way of
     non-GPL applications that wanted to use Getopt::Long.

     Getopt::Long encourages the use of Pod::Usage to produce help
     messages. For example:

          use Getopt::Long;
          use Pod::Usage;
          my $man = 0;
          my $help = 0;
          GetOptions('help|?' => \$help, man => \$man) or pod2usage(2);
          pod2usage(1) if $help;
          pod2usage(-exitstatus => 0, -verbose => 2) if $man;

          __END__

          =head1 NAME

          sample - Using GetOpt::Long and Pod::Usage

          =head1 SYNOPSIS

          sample [options] [file ...]

          Options:
            -help            brief help message
            -man             full documentation

          =head1 OPTIONS

          =over 8

          =item B<-help>

          Print a brief help message and exits.

          =item B<-man>

          Prints the manual page and exits.

          =back

          =head1 DESCRIPTION

          B<This program> will read the given input file(s) and do someting
          useful with the contents thereof.

          =cut

     See *Note Pod/Usage: (pm.info)Pod/Usage, for details.

     A bug that prevented the non-option call-back <> from being specified
     as the first argument has been fixed.

     To specify the characters < and > as option starters, use ><. Note,
     however, that changing option starters is strongly deprecated.

IO
     write() and syswrite() will now accept a single-argument form of the
     call, for consistency with Perl's syswrite().

     You can now create a TCP-based IO::Socket::INET without forcing a
     connect attempt.  This allows you to configure its options (like
     making it non-blocking) and then call connect() manually.

     A bug that prevented the IO::Socket::protocol() accessor from ever
     returning the correct value has been corrected.

     IO::Socket::connect now uses non-blocking IO instead of alarm() to do
     connect timeouts.

     IO::Socket::accept now uses select() instead of alarm() for doing
     timeouts.

     IO::Socket::INET->new now sets $! correctly on failure. $@ is still
     set for backwards compatability.

JPL
     Java Perl Lingo is now distributed with Perl.  See jpl/README for
     more information.

lib
     `use lib' now weeds out any trailing duplicate entries.  `no lib'
     removes all named entries.

Math::BigInt
     The bitwise operations `<< << '>>, `<< '> >>>, &, |, and `~' are now
     supported on bigints.

Math::Complex
     The accessor methods Re, Im, arg, abs, rho, and theta can now also
     act as mutators (accessor $z->Re(), mutator $z->Re(3)).

     The class method `display_format' and the corresponding object method
     `display_format', in addition to accepting just one argument, now can
     also accept a parameter hash.  Recognized keys of a parameter hash are
     `"style"', which corresponds to the old one parameter case, and two
     new parameters: `"format"', which is a printf()-style format string
     (defaults usually to `"%.15g"', you can revert to the default by
     setting the format string to undef) used for both parts of a complex
     number, and `"polar_pretty_print"' (defaults to true), which controls
     whether an attempt is made to try to recognize small multiples and
     rationals of pi (2pi, pi/2) at the argument (angle) of a polar
     complex number.

     The potentially disruptive change is that in list context both methods
     now *return the parameter hash*, instead of only the value of the
     `"style"' parameter.

Math::Trig
     A little bit of radial trigonometry (cylindrical and spherical),
     radial coordinate conversions, and the great circle distance were
     added.

Pod::Parser, Pod::InputObjects
     Pod::Parser is a base class for parsing and selecting sections of pod
     documentation from an input stream.  This module takes care of
     identifying pod paragraphs and commands in the input and hands off the
     parsed paragraphs and commands to user-defined methods which are free
     to interpret or translate them as they see fit.

     Pod::InputObjects defines some input objects needed by Pod::Parser,
     and for advanced users of Pod::Parser that need more about a command
     besides its name and text.

     As of release 5.6.0 of Perl, Pod::Parser is now the officially
     sanctioned "base parser code" recommended for use by all pod2xxx
     translators.  Pod::Text (pod2text) and Pod::Man (pod2man) have
     already been converted to use Pod::Parser and efforts to convert
     Pod::HTML (pod2html) are already underway.  For any questions or
     comments about pod parsing and translating issues and utilities,
     please use the pod-people@perl.org mailing list.

     For further information, please see *Note Pod/Parser:
     (pm.info)Pod/Parser, and *Note Pod/InputObjects:
     (pm.info)Pod/InputObjects,.

Pod::Checker, podchecker
     This utility checks pod files for correct syntax, according to *Note
     Perlpod: perlpod,.  Obvious errors are flagged as such, while
     warnings are printed for mistakes that can be handled gracefully.
     The checklist is not complete yet.  See *Note Pod/Checker:
     (pm.info)Pod/Checker,.

Pod::ParseUtils, Pod::Find
     These modules provide a set of gizmos that are useful mainly for pod
     translators.  `Pod::Find|Pod::Find' in this node traverses directory
     structures and returns found pod files, along with their canonical
     names (like File::Spec::Unix).  `Pod::ParseUtils|Pod::ParseUtils' in
     this node contains Pod::List (useful for storing pod list
     information), Pod::Hyperlink (for parsing the contents of `L<>'
     sequences) and Pod::Cache (for caching information about pod files,
     e.g., link nodes).

Pod::Select, podselect
     Pod::Select is a subclass of Pod::Parser which provides a function
     named "podselect()" to filter out user-specified sections of raw pod
     documentation from an input stream. podselect is a script that
     provides access to Pod::Select from other scripts to be used as a
     filter.  See *Note Pod/Select: (pm.info)Pod/Select,.

Pod::Usage, pod2usage
     Pod::Usage provides the function "pod2usage()" to print usage
     messages for a Perl script based on its embedded pod documentation.
     The pod2usage() function is generally useful to all script authors
     since it lets them write and maintain a single source (the pods) for
     documentation, thus removing the need to create and maintain
     redundant usage message text consisting of information already in the
     pods.

     There is also a pod2usage script which can be used from other kinds of
     scripts to print usage messages from pods (even for non-Perl scripts
     with pods embedded in comments).

     For details and examples, please see *Note Pod/Usage:
     (pm.info)Pod/Usage,.

Pod::Text and Pod::Man
     Pod::Text has been rewritten to use Pod::Parser.  While pod2text() is
     still available for backwards compatibility, the module now has a new
     preferred interface.  See *Note Pod/Text: (pm.info)Pod/Text, for the
     details.  The new Pod::Text module is easily subclassed for tweaks to
     the output, and two such subclasses (Pod::Text::Termcap for
     man-page-style bold and underlining using termcap information, and
     Pod::Text::Color for markup with ANSI color sequences) are now
     standard.

     pod2man has been turned into a module, Pod::Man, which also uses
     Pod::Parser.  In the process, several outstanding bugs related to
     quotes in section headers, quoting of code escapes, and nested lists
     have been fixed.  pod2man is now a wrapper script around this module.

SDBM_File
     An EXISTS method has been added to this module (and sdbm_exists() has
     been added to the underlying sdbm library), so one can now call exists
     on an SDBM_File tied hash and get the correct result, rather than a
     runtime error.

     A bug that may have caused data loss when more than one disk block
     happens to be read from the database in a single FETCH() has been
     fixed.

Sys::Syslog
     Sys::Syslog now uses XSUBs to access facilities from syslog.h so it
     no longer requires syslog.ph to exist.

Sys::Hostname
     Sys::Hostname now uses XSUBs to call the C library's gethostname() or
     uname() if they exist.

Term::ANSIColor
     Term::ANSIColor is a very simple module to provide easy and readable
     access to the ANSI color and highlighting escape sequences, supported
     by most ANSI terminal emulators.  It is now included standard.

Time::Local
     The timelocal() and timegm() functions used to silently return bogus
     results when the date fell outside the machine's integer range.  They
     now consistently croak() if the date falls in an unsupported range.

Win32
     The error return value in list context has been changed for all
     functions that return a list of values.  Previously these functions
     returned a list with a single element undef if an error occurred.
     Now these functions return the empty list in these situations.  This
     applies to the following functions:

          Win32::FsType
          Win32::GetOSVersion

     The remaining functions are unchanged and continue to return undef on
     error even in list context.

     The Win32::SetLastError(ERROR) function has been added as a complement
     to the Win32::GetLastError() function.

     The new Win32::GetFullPathName(FILENAME) returns the full absolute
     pathname for FILENAME in scalar context.  In list context it returns
     a two-element list containing the fully qualified directory name and
     the filename.  See *Note Win32: (pm.info)Win32,.

XSLoader
     The XSLoader extension is a simpler alternative to DynaLoader.  See
     *Note XSLoader: (pm.info)XSLoader,.

DBM Filters
     A new feature called "DBM Filters" has been added to all the DBM
     modules-DB_File, GDBM_File, NDBM_File, ODBM_File, and SDBM_File.  DBM
     Filters add four new methods to each DBM module:

          filter_store_key
          filter_store_value
          filter_fetch_key
          filter_fetch_value

     These can be used to filter key-value pairs before the pairs are
     written to the database or just after they are read from the database.
     See *Note Perldbmfilter: perldbmfilter, for further information.

Pragmata
--------

   `use attrs' is now obsolete, and is only provided for
backward-compatibility.  It's been replaced by the `sub : attributes'
syntax.  See `"Subroutine Attributes"', *Note Perlsub: perlsub, and
`"Subroutine Attributes"', *Note Attributes: (pm.info)attributes,.

   Lexical warnings pragma, `use warnings;', to control optional warnings.
See *Note Perllexwarn: perllexwarn,.

   `use filetest' to control the behaviour of filetests (-r -w ...).
Currently only one subpragma implemented, "use filetest 'access';", that
uses access(2) or equivalent to check permissions instead of using stat(2)
as usual.  This matters in filesystems where there are ACLs (access
control lists): the stat(2) might lie, but access(2) knows better.

   The open pragma can be used to specify default disciplines for handle
constructors (e.g. open()) and for qx//.  The two pseudo-disciplines
`:raw' and `:crlf' are currently supported on DOS-derivative platforms
(i.e. where binmode is not a no-op).  See also `' in this node.

Utility Changes
===============

dprofpp
-------

   dprofpp is used to display profile data generated using Devel::DProf.
See `dprofpp' in this node.

find2perl
---------

   The find2perl utility now uses the enhanced features of the File::Find
module.  The -depth and -follow options are supported.  Pod documentation
is also included in the script.

h2xs
----

   The h2xs tool can now work in conjunction with `C::Scan' (available
from CPAN) to automatically parse real-life header files.  The -M, -a, -k,
and -o options are new.

perlcc
------

   perlcc now supports the C and Bytecode backends.  By default, it
generates output from the simple C backend rather than the optimized C
backend.

   Support for non-Unix platforms has been improved.

perldoc
-------

   perldoc has been reworked to avoid possible security holes.  It will
not by default let itself be run as the superuser, but you may still use
the -U switch to try to make it drop privileges first.

The Perl Debugger
-----------------

   Many bug fixes and enhancements were added to `perl5db.pl', the Perl
debugger.  The help documentation was rearranged.  New commands include `<
< ? '>, `< ' ? >>, and `< { ? '> to list out current actions, `man
*docpage*' to run your doc viewer on some perl docset, and support for
quoted options.  The help information was rearranged, and should be
viewable once again if you're using less as your pager.  A serious
security hole was plugged-you should immediately remove all older versions
of the Perl debugger as installed in previous releases, all the way back
to perl3, from your system to avoid being bitten by this.

Improved Documentation
======================

   Many of the platform-specific README files are now part of the perl
installation.  See *Note Perl: perl, for the complete list.

perlapi.pod
     The official list of public Perl API functions.

perlboot.pod
     A tutorial for beginners on object-oriented Perl.

perlcompile.pod
     An introduction to using the Perl Compiler suite.

perldbmfilter.pod
     A howto document on using the DBM filter facility.

perldebug.pod
     All material unrelated to running the Perl debugger, plus all
     low-level guts-like details that risked crushing the casual user of
     the debugger, have been relocated from the old manpage to the next
     entry below.

perldebguts.pod
     This new manpage contains excessively low-level material not related
     to the Perl debugger, but slightly related to debugging Perl itself.
     It also contains some arcane internal details of how the debugging
     process works that may only be of interest to developers of Perl
     debuggers.

perlfork.pod
     Notes on the fork() emulation currently available for the Windows
     platform.

perlfilter.pod
     An introduction to writing Perl source filters.

perlhack.pod
     Some guidelines for hacking the Perl source code.

perlintern.pod
     A list of internal functions in the Perl source code.  (List is
     currently empty.)

perllexwarn.pod
     Introduction and reference information about lexically scoped warning
     categories.

perlnumber.pod
     Detailed information about numbers as they are represented in Perl.

perlopentut.pod
     A tutorial on using open() effectively.

perlreftut.pod
     A tutorial that introduces the essentials of references.

perltootc.pod
     A tutorial on managing class data for object modules.

perltodo.pod
     Discussion of the most often wanted features that may someday be
     supported in Perl.

perlunicode.pod
     An introduction to Unicode support features in Perl.

Performance enhancements
========================

Simple sort() using { $a <=> $b } and the like are optimized
------------------------------------------------------------

   Many common sort() operations using a simple inlined block are now
optimized for faster performance.

Optimized assignments to lexical variables
------------------------------------------

   Certain operations in the RHS of assignment statements have been
optimized to directly set the lexical variable on the LHS, eliminating
redundant copying overheads.

Faster subroutine calls
-----------------------

   Minor changes in how subroutine calls are handled internally provide
marginal improvements in performance.

delete(), each(), values() and hash iteration are faster
     The hash values returned by delete(), each(), values() and hashes in a
     list context are the actual values in the hash, instead of copies.
     This results in significantly better performance, because it
     eliminates needless copying in most situations.

Installation and Configuration Improvements
===========================================

-Dusethreads means something different
--------------------------------------

   The -Dusethreads flag now enables the experimental interpreter-based
thread support by default.  To get the flavor of experimental threads that
was in 5.005 instead, you need to run Configure with "-Dusethreads
-Duse5005threads".

   As of v5.6.0, interpreter-threads support is still lacking a way to
create new threads from Perl (i.e., `use Thread;' will not work with
interpreter threads).  `use Thread;' continues to be available when you
specify the -Duse5005threads option to Configure, bugs and all.

     NOTE: Support for threads continues to be an experimental feature.
     Interfaces and implementation are subject to sudden and drastic changes.

New Configure flags
-------------------

   The following new flags may be enabled on the Configure command line by
running Configure with `-Dflag'.

     usemultiplicity
     usethreads useithreads	(new interpreter threads: no Perl API yet)
     usethreads use5005threads	(threads as they were in 5.005)

     use64bitint			(equal to now deprecated 'use64bits')
     use64bitall

     uselongdouble
     usemorebits
     uselargefiles
     usesocks			(only SOCKS v5 supported)

Threadedness and 64-bitness now more daring
-------------------------------------------

   The Configure options enabling the use of threads and the use of
64-bitness are now more daring in the sense that they no more have an
explicit list of operating systems of known threads/64-bit capabilities.
In other words: if your operating system has the necessary APIs and
datatypes, you should be able just to go ahead and use them, for threads
by Configure -Dusethreads, and for 64 bits either explicitly by Configure
-Duse64bitint or implicitly if your system has 64-bit wide datatypes.  See
also `"64-bit support"' in this node.

Long Doubles
------------

   Some platforms have "long doubles", floating point numbers of even
larger range than ordinary "doubles".  To enable using long doubles for
Perl's scalars, use -Duselongdouble.

-Dusemorebits
-------------

   You can enable both -Duse64bitint and -Duselongdouble with
-Dusemorebits.  See also `"64-bit support"' in this node.

-Duselargefiles
---------------

   Some platforms support system APIs that are capable of handling large
files (typically, files larger than two gigabytes).  Perl will try to use
these APIs if you ask for -Duselargefiles.

   See `"Large file support"' in this node for more information.

installusrbinperl
-----------------

   You can use "Configure -Uinstallusrbinperl" which causes installperl to
skip installing perl also as /usr/bin/perl.  This is useful if you prefer
not to modify /usr/bin for some reason or another but harmful because many
scripts assume to find Perl in /usr/bin/perl.

SOCKS support
-------------

   You can use "Configure -Dusesocks" which causes Perl to probe for the
SOCKS proxy protocol library (v5, not v4).  For more information on SOCKS,
see:

     http://www.socks.nec.com/

-A flag
-------

   You can "post-edit" the Configure variables using the Configure -A
switch.  The editing happens immediately after the platform specific hints
files have been processed but before the actual configuration process
starts.  Run `Configure -h' to find out the full -A syntax.

Enhanced Installation Directories
---------------------------------

   The installation structure has been enriched to improve the support for
maintaining multiple versions of perl, to provide locations for
vendor-supplied modules, scripts, and manpages, and to ease maintenance of
locally-added modules, scripts, and manpages.  See the section on
Installation Directories in the INSTALL file for complete details.  For
most users building and installing from source, the defaults should be
fine.

   If you previously used `Configure -Dsitelib' or `-Dsitearch' to set
special values for library directories, you might wish to consider using
the new `-Dsiteprefix' setting instead.  Also, if you wish to re-use a
config.sh file from an earlier version of perl, you should be sure to
check that Configure makes sensible choices for the new directories.  See
INSTALL for complete details.

Platform specific changes
=========================

Supported platforms
-------------------

   * VM/ESA is now supported.

   * Siemens BS2000 is now supported under the POSIX Shell.

   * The Mach CThreads (NEXTSTEP, OPENSTEP) are now supported by the Thread
     extension.

   * GNU/Hurd is now supported.

   * Rhapsody/Darwin is now supported.

   * EPOC is is now supported (on Psion 5).

   * The cygwin port (formerly cygwin32) has been greatly improved.

DOS
---

   * Perl now works with djgpp 2.02 (and 2.03 alpha).

   * Environment variable names are not converted to uppercase any more.

   * Incorrect exit codes from backticks have been fixed.

   * This port continues to use its own builtin globbing (not File::Glob).

OS390 (OpenEdition MVS)
-----------------------

   Support for this EBCDIC platform has not been renewed in this release.
There are difficulties in reconciling Perl's standardization on UTF-8 as
its internal representation for characters with the EBCDIC character set,
because the two are incompatible.

   It is unclear whether future versions will renew support for this
platform, but the possibility exists.

VMS
---

   Numerous revisions and extensions to configuration, build, testing, and
installation process to accomodate core changes and VMS-specific options.

   Expand %ENV-handling code to allow runtime mapping to logical names,
CLI symbols, and CRTL environ array.

   Extension of subprocess invocation code to accept filespecs as command
"verbs".

   Add to Perl command line processing the ability to use default file
types and to recognize Unix-style `2>&1'.

   Expansion of File::Spec::VMS routines, and integration into
ExtUtils::MM_VMS.

   Extension of ExtUtils::MM_VMS to handle complex extensions more
flexibly.

   Barewords at start of Unix-syntax paths may be treated as text rather
than only as logical names.

   Optional secure translation of several logical names used internally by
Perl.

   Miscellaneous bugfixing and porting of new core code to VMS.

   Thanks are gladly extended to the many people who have contributed VMS
patches, testing, and ideas.

Win32
-----

   Perl can now emulate fork() internally, using multiple interpreters
running in different concurrent threads.  This support must be enabled at
build time.  See *Note Perlfork: perlfork, for detailed information.

   When given a pathname that consists only of a drivename, such as `A:',
opendir() and stat() now use the current working directory for the drive
rather than the drive root.

   The builtin XSUB functions in the Win32:: namespace are documented.  See
*Note Win32: (pm.info)Win32,.

   $^X now contains the full path name of the running executable.

   A Win32::GetLongPathName() function is provided to complement
Win32::GetFullPathName() and Win32::GetShortPathName().  See *Note Win32:
(pm.info)Win32,.

   POSIX::uname() is supported.

   system(1,...) now returns true process IDs rather than process handles.
kill() accepts any real process id, rather than strictly return values
from system(1,...).

   For better compatibility with Unix, `kill(0, $pid)' can now be used to
test whether a process exists.

   The Shell module is supported.

   Better support for building Perl under command.com in Windows 95 has
been added.

   Scripts are read in binary mode by default to allow ByteLoader (and the
filter mechanism in general) to work properly.  For compatibility, the
DATA filehandle will be set to text mode if a carriage return is detected
at the end of the line containing the __END__ or __DATA__ token; if not,
the DATA filehandle will be left open in binary mode.  Earlier versions
always opened the DATA filehandle in text mode.

   The glob() operator is implemented via the File::Glob extension, which
supports glob syntax of the C shell.  This increases the flexibility of
the glob() operator, but there may be compatibility issues for programs
that relied on the older globbing syntax.  If you want to preserve
compatibility with the older syntax, you might want to run perl with
`-MFile::DosGlob'.  For details and compatibility information, see *Note
File/Glob: (pm.info)File/Glob,.

Significant bug fixes
=====================

<HANDLE> on empty files
-----------------------

   With $/ set to undef, "slurping" an empty file returns a string of zero
length (instead of undef, as it used to) the first time the HANDLE is read
after $/ is set to undef.  Further reads yield undef.

   This means that the following will append "foo" to an empty file (it
used to do nothing):

     perl -0777 -pi -e 's/^/foo/' empty_file

   The behaviour of:

     perl -pi -e 's/^/foo/' empty_file

   is unchanged (it continues to leave the file empty).

`eval '...'' improvements
-------------------------

   Line numbers (as reflected by caller() and most diagnostics) within
`eval '...'' were often incorrect where here documents were involved.
This has been corrected.

   Lexical lookups for variables appearing in `eval '...'' within
functions that were themselves called within an `eval '...'' were
searching the wrong place for lexicals.  The lexical search now correctly
ends at the subroutine's block boundary.

   The use of return within `eval {...}' caused $@ not to be reset
correctly when no exception occurred within the eval.  This has been fixed.

   Parsing of here documents used to be flawed when they appeared as the
replacement expression in `eval 's/.../.../e''.  This has been fixed.

All compilation errors are true errors
--------------------------------------

   Some "errors" encountered at compile time were by neccessity generated
as warnings followed by eventual termination of the program.  This enabled
more such errors to be reported in a single run, rather than causing a
hard stop at the first error that was encountered.

   The mechanism for reporting such errors has been reimplemented to queue
compile-time errors and report them at the end of the compilation as true
errors rather than as warnings.  This fixes cases where error messages
leaked through in the form of warnings when code was compiled at run time
using `eval STRING', and also allows such errors to be reliably trapped
using `eval "..."'.

Implicitly closed filehandles are safer
---------------------------------------

   Sometimes implicitly closed filehandles (as when they are localized,
and Perl automatically closes them on exiting the scope) could
inadvertently set $? or $!.  This has been corrected.

Behavior of list slices is more consistent
------------------------------------------

   When taking a slice of a literal list (as opposed to a slice of an
array or hash), Perl used to return an empty list if the result happened
to be composed of all undef values.

   The new behavior is to produce an empty list if (and only if) the
original list was empty.  Consider the following example:

     @a = (1,undef,undef,2)[2,1,2];

   The old behavior would have resulted in @a having no elements.  The new
behavior ensures it has three undefined elements.

   Note in particular that the behavior of slices of the following cases
remains unchanged:

     @a = ()[1,2];
     @a = (getpwent)[7,0];
     @a = (anything_returning_empty_list())[2,1,2];
     @a = @b[2,1,2];
     @a = @c{'a','b','c'};

   See *Note Perldata: perldata,.

`(\$)' prototype and `$foo{a}'
------------------------------

   A scalar reference prototype now correctly allows a hash or array
element in that slot.

`goto &sub' and AUTOLOAD
------------------------

   The `goto &sub' construct works correctly when `&sub' happens to be
autoloaded.

`-bareword' allowed under `use integer'
---------------------------------------

   The autoquoting of barewords preceded by - did not work in prior
versions when the integer pragma was enabled.  This has been fixed.

Failures in DESTROY()
---------------------

   When code in a destructor threw an exception, it went unnoticed in
earlier versions of Perl, unless someone happened to be looking in $@ just
after the point the destructor happened to run.  Such failures are now
visible as warnings when warnings are enabled.

Locale bugs fixed
-----------------

   printf() and sprintf() previously reset the numeric locale back to the
default "C" locale.  This has been fixed.

   Numbers formatted according to the local numeric locale (such as using
a decimal comma instead of a decimal dot) caused "isn't numeric" warnings,
even while the operations accessing those numbers produced correct
results.  These warnings have been discontinued.

Memory leaks
------------

   The `eval 'return sub {...}'' construct could sometimes leak memory.
This has been fixed.

   Operations that aren't filehandle constructors used to leak memory when
used on invalid filehandles.  This has been fixed.

   Constructs that modified `@_' could fail to deallocate values in `@_'
and thus leak memory.  This has been corrected.

Spurious subroutine stubs after failed subroutine calls
-------------------------------------------------------

   Perl could sometimes create empty subroutine stubs when a subroutine
was not found in the package.  Such cases stopped later method lookups
from progressing into base packages.  This has been corrected.

Taint failures under -U
-----------------------

   When running in unsafe mode, taint violations could sometimes cause
silent failures.  This has been fixed.

END blocks and the -c switch
----------------------------

   Prior versions used to run BEGIN and END blocks when Perl was run in
compile-only mode.  Since this is typically not the expected behavior, END
blocks are not executed anymore when the -c switch is used.

   See `CHECK blocks' in this node for how to run things when the compile
phase ends.

Potential to leak DATA filehandles
----------------------------------

   Using the `__DATA__' token creates an implicit filehandle to the file
that contains the token.  It is the program's responsibility to close it
when it is done reading from it.

   This caveat is now better explained in the documentation.  See *Note
Perldata: perldata,.

New or Changed Diagnostics
==========================

"%s" variable %s masks earlier declaration in same %s
     (W misc) A "my" or "our" variable has been redeclared in the current
     scope or statement, effectively eliminating all access to the
     previous instance.  This is almost always a typographical error.
     Note that the earlier variable will still exist until the end of the
     scope or until all closure referents to it are destroyed.

"my sub" not yet implemented
     (F) Lexically scoped subroutines are not yet implemented.  Don't try
     that yet.

"our" variable %s redeclared
     (W misc) You seem to have already declared the same global once
     before in the current lexical scope.

'!' allowed only after types %s
     (F) The '!' is allowed in pack() and unpack() only after certain
     types.  See `pack', *Note Perlfunc: perlfunc,.

/ cannot take a count
     (F) You had an unpack template indicating a counted-length string,
     but you have also specified an explicit size for the string.  See
     `pack', *Note Perlfunc: perlfunc,.

/ must be followed by a, A or Z
     (F) You had an unpack template indicating a counted-length string,
     which must be followed by one of the letters a, A or Z to indicate
     what sort of string is to be unpacked.  See `pack', *Note Perlfunc:
     perlfunc,.

/ must be followed by a*, A* or Z*
     (F) You had a pack template indicating a counted-length string,
     Currently the only things that can have their length counted are a*,
     A* or Z*.  See `pack', *Note Perlfunc: perlfunc,.

/ must follow a numeric type
     (F) You had an unpack template that contained a '#', but this did not
     follow some numeric unpack specification.  See `pack', *Note
     Perlfunc: perlfunc,.

/%s/: Unrecognized escape \\%c passed through
     (W regexp) You used a backslash-character combination which is not
     recognized by Perl.  This combination appears in an interpolated
     variable or a `''-delimited regular expression.  The character was
     understood literally.

/%s/: Unrecognized escape \\%c in character class passed through
     (W regexp) You used a backslash-character combination which is not
     recognized by Perl inside character classes.  The character was
     understood literally.

/%s/ should probably be written as "%s"
     (W syntax) You have used a pattern where Perl expected to find a
     string, as in the first argument to join.  Perl will treat the true
     or false result of matching the pattern against $_ as the string,
     which is probably not what you had in mind.

%s() called too early to check prototype
     (W prototype) You've called a function that has a prototype before
     the parser saw a definition or declaration for it, and Perl could not
     check that the call conforms to the prototype.  You need to either
     add an early prototype declaration for the subroutine in question, or
     move the subroutine definition ahead of the call to get proper
     prototype checking.  Alternatively, if you are certain that you're
     calling the function correctly, you may put an ampersand before the
     name to avoid the warning.  See *Note Perlsub: perlsub,.

%s argument is not a HASH or ARRAY element
     (F) The argument to exists() must be a hash or array element, such as:

          $foo{$bar}
          $ref->{"susie"}[12]

%s argument is not a HASH or ARRAY element or slice
     (F) The argument to delete() must be either a hash or array element,
     such as:

          $foo{$bar}
          $ref->{"susie"}[12]

     or a hash or array slice, such as:

          @foo[$bar, $baz, $xyzzy]
          @{$ref->[12]}{"susie", "queue"}

%s argument is not a subroutine name
     (F) The argument to exists() for `exists &sub' must be a subroutine
     name, and not a subroutine call.  `exists &sub()' will generate this
     error.

%s package attribute may clash with future reserved word: %s
     (W reserved) A lowercase attribute name was used that had a
     package-specific handler.  That name might have a meaning to Perl
     itself some day, even though it doesn't yet.  Perhaps you should use
     a mixed-case attribute name, instead.  See *Note Attributes:
     (pm.info)attributes,.

(in cleanup) %s
     (W misc) This prefix usually indicates that a DESTROY() method raised
     the indicated exception.  Since destructors are usually called by the
     system at arbitrary points during execution, and often a vast number
     of times, the warning is issued only once for any number of failures
     that would otherwise result in the same message being repeated.

     Failure of user callbacks dispatched using the G_KEEPERR flag could
     also result in this warning.  See `G_KEEPERR', *Note Perlcall:
     perlcall,.

<> should be quotes
     (F) You wrote `< require <file' >> when you should have written
     `require 'file''.

Attempt to join self
     (F) You tried to join a thread from within itself, which is an
     impossible task.  You may be joining the wrong thread, or you may
     need to move the join() to some other thread.

Bad evalled substitution pattern
     (F) You've used the /e switch to evaluate the replacement for a
     substitution, but perl found a syntax error in the code to evaluate,
     most likely an unexpected right brace '}'.

Bad realloc() ignored
     (S) An internal routine called realloc() on something that had never
     been malloc()ed in the first place. Mandatory, but can be disabled by
     setting environment variable `PERL_BADFREE' to 1.

Bareword found in conditional
     (W bareword) The compiler found a bareword where it expected a
     conditional, which often indicates that an || or && was parsed as
     part of the last argument of the previous construct, for example:

          open FOO || die;

     It may also indicate a misspelled constant that has been interpreted
     as a bareword:

          use constant TYPO => 1;
          if (TYOP) { print "foo" }

     The strict pragma is useful in avoiding such errors.

Binary number > 0b11111111111111111111111111111111 non-portable
     (W portable) The binary number you specified is larger than 2**32-1
     (4294967295) and therefore non-portable between systems.  See *Note
     Perlport: perlport, for more on portability concerns.

Bit vector size > 32 non-portable
     (W portable) Using bit vector sizes larger than 32 is non-portable.

Buffer overflow in prime_env_iter: %s
     (W internal) A warning peculiar to VMS.  While Perl was preparing to
     iterate over %ENV, it encountered a logical name or symbol definition
     which was too long, so it was truncated to the string shown.

Can't check filesystem of script "%s"
     (P) For some reason you can't check the filesystem of the script for
     nosuid.

Can't declare class for non-scalar %s in "%s"
     (S) Currently, only scalar variables can declared with a specific
     class qualifier in a "my" or "our" declaration.  The semantics may be
     extended for other types of variables in future.

Can't declare %s in "%s"
     (F) Only scalar, array, and hash variables may be declared as "my" or
     "our" variables.  They must have ordinary identifiers as names.

Can't ignore signal CHLD, forcing to default
     (W signal) Perl has detected that it is being run with the SIGCHLD
     signal (sometimes known as SIGCLD) disabled.  Since disabling this
     signal will interfere with proper determination of exit status of
     child processes, Perl has reset the signal to its default value.
     This situation typically indicates that the parent program under
     which Perl may be running (e.g., cron) is being very careless.

Can't modify non-lvalue subroutine call
     (F) Subroutines meant to be used in lvalue context should be declared
     as such, see `"Lvalue subroutines"', *Note Perlsub: perlsub,.

Can't read CRTL environ
     (S) A warning peculiar to VMS.  Perl tried to read an element of %ENV
     from the CRTL's internal environment array and discovered the array
     was missing.  You need to figure out where your CRTL misplaced its
     environ or define `PERL_ENV_TABLES' (see *Note Perlvms: perlvms,) so
     that environ is not searched.

Can't remove %s: %s, skipping file
     (S) You requested an inplace edit without creating a backup file.
     Perl was unable to remove the original file to replace it with the
     modified file.  The file was left unmodified.

Can't return %s from lvalue subroutine
     (F) Perl detected an attempt to return illegal lvalues (such as
     temporary or readonly values) from a subroutine used as an lvalue.
     This is not allowed.

Can't weaken a nonreference
     (F) You attempted to weaken something that was not a reference.  Only
     references can be weakened.

Character class [:%s:] unknown
     (F) The class in the character class [: :] syntax is unknown.  See
     *Note Perlre: perlre,.

Character class syntax [%s] belongs inside character classes
     (W unsafe) The character class constructs [: :], [= =], and [. .]  go
     *inside* character classes, the [] are part of the construct, for
     example: /[012[:alpha:]345]/.  Note that [= =] and [. .]  are not
     currently implemented; they are simply placeholders for future
     extensions.

Constant is not %s reference
     (F) A constant value (perhaps declared using the `use constant'
     pragma) is being dereferenced, but it amounts to the wrong type of
     reference.  The message indicates the type of reference that was
     expected. This usually indicates a syntax error in dereferencing the
     constant value.  See `"Constant Functions"', *Note Perlsub: perlsub,
     and `"Constant Functions"', *Note Constant: (pm.info)constant,.

constant(%s): %s
     (F) The parser found inconsistencies either while attempting to
     define an overloaded constant, or when trying to find the character
     name specified in the `\N{...}' escape.  Perhaps you forgot to load
     the corresponding overload or charnames pragma?  See *Note Charnames:
     (pm.info)charnames, and *Note Overload: (pm.info)overload,.

CORE::%s is not a keyword
     (F) The CORE:: namespace is reserved for Perl keywords.

defined(@array) is deprecated
     (D) defined() is not usually useful on arrays because it checks for an
     undefined scalar value.  If you want to see if the array is empty,
     just use `if (@array) { # not empty }' for example.

defined(%hash) is deprecated
     (D) defined() is not usually useful on hashes because it checks for an
     undefined scalar value.  If you want to see if the hash is empty,
     just use `if (%hash) { # not empty }' for example.

Did not produce a valid header
     See Server error.

(Did you mean "local" instead of "our"?)
     (W misc) Remember that "our" does not localize the declared global
     variable.  You have declared it again in the same lexical scope,
     which seems superfluous.

Document contains no data
     See Server error.

entering effective %s failed
     (F) While under the `use filetest' pragma, switching the real and
     effective uids or gids failed.

false [] range "%s" in regexp
     (W regexp) A character class range must start and end at a literal
     character, not another character class like `\d' or `[:alpha:]'.  The
     "-" in your false range is interpreted as a literal "-".  Consider
     quoting the "-",  "\-".  See *Note Perlre: perlre,.

Filehandle %s opened only for output
     (W io) You tried to read from a filehandle opened only for writing.
     If you intended it to be a read/write filehandle, you needed to open
     it with "+<" or "+>" or "+>>" instead of with "<" or nothing.  If you
     intended only to read from the file, use "<".  See `open', *Note
     Perlfunc: perlfunc,.

flock() on closed filehandle %s
     (W closed) The filehandle you're attempting to flock() got itself
     closed some time before now.  Check your logic flow.  flock()
     operates on filehandles.  Are you attempting to call flock() on a
     dirhandle by the same name?

Global symbol "%s" requires explicit package name
     (F) You've said "use strict vars", which indicates that all variables
     must either be lexically scoped (using "my"), declared beforehand
     using "our", or explicitly qualified to say which package the global
     variable is in (using "::").

Hexadecimal number > 0xffffffff non-portable
     (W portable) The hexadecimal number you specified is larger than
     2**32-1 (4294967295) and therefore non-portable between systems.  See
     *Note Perlport: perlport, for more on portability concerns.

Ill-formed CRTL environ value "%s"
     (W internal) A warning peculiar to VMS.  Perl tried to read the
     CRTL's internal environ array, and encountered an element without the
     = delimiter used to spearate keys from values.  The element is
     ignored.

Ill-formed message in prime_env_iter: |%s|
     (W internal) A warning peculiar to VMS.  Perl tried to read a logical
     name or CLI symbol definition when preparing to iterate over %ENV, and
     didn't see the expected delimiter between key and value, so the line
     was ignored.

Illegal binary digit %s
     (F) You used a digit other than 0 or 1 in a binary number.

Illegal binary digit %s ignored
     (W digit) You may have tried to use a digit other than 0 or 1 in a
     binary number.  Interpretation of the binary number stopped before
     the offending digit.

Illegal number of bits in vec
     (F) The number of bits in vec() (the third argument) must be a power
     of two from 1 to 32 (or 64, if your platform supports that).

Integer overflow in %s number
     (W overflow) The hexadecimal, octal or binary number you have
     specified either as a literal or as an argument to hex() or oct() is
     too big for your architecture, and has been converted to a floating
     point number.  On a 32-bit architecture the largest hexadecimal,
     octal or binary number representable without overflow is 0xFFFFFFFF,
     037777777777, or 0b11111111111111111111111111111111 respectively.
     Note that Perl transparently promotes all numbers to a floating point
     representation internally-subject to loss of precision errors in
     subsequent operations.

Invalid %s attribute: %s
     The indicated attribute for a subroutine or variable was not
     recognized by Perl or by a user-supplied handler.  See *Note
     Attributes: (pm.info)attributes,.

Invalid %s attributes: %s
     The indicated attributes for a subroutine or variable were not
     recognized by Perl or by a user-supplied handler.  See *Note
     Attributes: (pm.info)attributes,.

invalid [] range "%s" in regexp
     The offending range is now explicitly displayed.

Invalid separator character %s in attribute list
     (F) Something other than a colon or whitespace was seen between the
     elements of an attribute list.  If the previous attribute had a
     parenthesised parameter list, perhaps that list was terminated too
     soon.  See *Note Attributes: (pm.info)attributes,.

Invalid separator character %s in subroutine attribute list
     (F) Something other than a colon or whitespace was seen between the
     elements of a subroutine attribute list.  If the previous attribute
     had a parenthesised parameter list, perhaps that list was terminated
     too soon.

leaving effective %s failed
     (F) While under the `use filetest' pragma, switching the real and
     effective uids or gids failed.

Lvalue subs returning %s not implemented yet
     (F) Due to limitations in the current implementation, array and hash
     values cannot be returned in subroutines used in lvalue context.  See
     `"Lvalue subroutines"', *Note Perlsub: perlsub,.

Method %s not permitted
     See Server error.

Missing %sbrace%s on \N{}
     (F) Wrong syntax of character name literal `\N{charname}' within
     double-quotish context.

Missing command in piped open
     (W pipe) You used the `open(FH, "| command")' or `open(FH, "command
     |")' construction, but the command was missing or blank.

Missing name in "my sub"
     (F) The reserved syntax for lexically scoped subroutines requires
     that they have a name with which they can be found.

No %s specified for -%c
     (F) The indicated command line switch needs a mandatory argument, but
     you haven't specified one.

No package name allowed for variable %s in "our"
     (F) Fully qualified variable names are not allowed in "our"
     declarations, because that doesn't make much sense under existing
     semantics.  Such syntax is reserved for future extensions.

No space allowed after -%c
     (F) The argument to the indicated command line switch must follow
     immediately after the switch, without intervening spaces.

no UTC offset information; assuming local time is UTC
     (S) A warning peculiar to VMS.  Perl was unable to find the local
     timezone offset, so it's assuming that local system time is equivalent
     to UTC.  If it's not, define the logical name
     `SYS$TIMEZONE_DIFFERENTIAL' to translate to the number of seconds
     which need to be added to UTC to get local time.

Octal number > 037777777777 non-portable
     (W portable) The octal number you specified is larger than 2**32-1
     (4294967295) and therefore non-portable between systems.  See *Note
     Perlport: perlport, for more on portability concerns.

     See also *Note Perlport: perlport, for writing portable code.

panic: del_backref
     (P) Failed an internal consistency check while trying to reset a weak
     reference.

panic: kid popen errno read
     (F) forked child returned an incomprehensible message about its errno.

panic: magic_killbackrefs
     (P) Failed an internal consistency check while trying to reset all
     weak references to an object.

Parentheses missing around "%s" list
     (W parenthesis) You said something like

          my $foo, $bar = @_;

     when you meant

          my ($foo, $bar) = @_;

     Remember that "my", "our", and "local" bind tighter than comma.

Possible Y2K bug: %s
     (W y2k) You are concatenating the number 19 with another number, which
     could be a potential Year 2000 problem.

pragma "attrs" is deprecated, use "sub NAME : ATTRS" instead
     (W deprecated) You have written somehing like this:

          sub doit
          {
              use attrs qw(locked);
          }

     You should use the new declaration syntax instead.

          sub doit : locked
          {
              ...

     The `use attrs' pragma is now obsolete, and is only provided for
     backward-compatibility. See `"Subroutine Attributes"', *Note Perlsub:
     perlsub,.

Premature end of script headers
     See Server error.

Repeat count in pack overflows
     (F) You can't specify a repeat count so large that it overflows your
     signed integers.  See `pack', *Note Perlfunc: perlfunc,.

Repeat count in unpack overflows
     (F) You can't specify a repeat count so large that it overflows your
     signed integers.  See `unpack', *Note Perlfunc: perlfunc,.

realloc() of freed memory ignored
     (S) An internal routine called realloc() on something that had already
     been freed.

Reference is already weak
     (W misc) You have attempted to weaken a reference that is already
     weak.  Doing so has no effect.

setpgrp can't take arguments
     (F) Your system has the setpgrp() from BSD 4.2, which takes no
     arguments, unlike POSIX setpgid(), which takes a process ID and
     process group ID.

Strange *+?{} on zero-length expression
     (W regexp) You applied a regular expression quantifier in a place
     where it makes no sense, such as on a zero-width assertion.  Try
     putting the quantifier inside the assertion instead.  For example,
     the way to match "abc" provided that it is followed by three
     repetitions of "xyz" is `/abc(?=(?:xyz){3})/', not `/abc(?=xyz){3}/'.

switching effective %s is not implemented
     (F) While under the `use filetest' pragma, we cannot switch the real
     and effective uids or gids.

This Perl can't reset CRTL environ elements (%s)
This Perl can't set CRTL environ elements (%s=%s)
     (W internal) Warnings peculiar to VMS.  You tried to change or delete
     an element of the CRTL's internal environ array, but your copy of
     Perl wasn't built with a CRTL that contained the setenv() function.
     You'll need to rebuild Perl with a CRTL that does, or redefine
     `PERL_ENV_TABLES' (see *Note Perlvms: perlvms,) so that the environ
     array isn't the target of the change to %ENV which produced the
     warning.

Too late to run %s block
     (W void) A CHECK or INIT block is being defined during run time
     proper, when the opportunity to run them has already passed.  Perhaps
     you are loading a file with require or do when you should be using
     use instead.  Or perhaps you should put the require or do inside a
     BEGIN block.

Unknown open() mode '%s'
     (F) The second argument of 3-argument open() is not among the list of
     valid modes: `< < '>, `< ' >>, `<< '> >>>, `< +< '>, `< +' >>, `<<
     +'> >>>, `-|', `|-'.

Unknown process %x sent message to prime_env_iter: %s
     (P) An error peculiar to VMS.  Perl was reading values for %ENV before
     iterating over it, and someone else stuck a message in the stream of
     data Perl expected.  Someone's very confused, or perhaps trying to
     subvert Perl's population of %ENV for nefarious purposes.

Unrecognized escape \\%c passed through
     (W misc) You used a backslash-character combination which is not
     recognized by Perl.  The character was understood literally.

Unterminated attribute parameter in attribute list
     (F) The lexer saw an opening (left) parenthesis character while
     parsing an attribute list, but the matching closing (right)
     parenthesis character was not found.  You may need to add (or remove)
     a backslash character to get your parentheses to balance.  See *Note
     Attributes: (pm.info)attributes,.

Unterminated attribute list
     (F) The lexer found something other than a simple identifier at the
     start of an attribute, and it wasn't a semicolon or the start of a
     block.  Perhaps you terminated the parameter list of the previous
     attribute too soon.  See *Note Attributes: (pm.info)attributes,.

Unterminated attribute parameter in subroutine attribute list
     (F) The lexer saw an opening (left) parenthesis character while
     parsing a subroutine attribute list, but the matching closing (right)
     parenthesis character was not found.  You may need to add (or remove)
     a backslash character to get your parentheses to balance.

Unterminated subroutine attribute list
     (F) The lexer found something other than a simple identifier at the
     start of a subroutine attribute, and it wasn't a semicolon or the
     start of a block.  Perhaps you terminated the parameter list of the
     previous attribute too soon.

Value of CLI symbol "%s" too long
     (W misc) A warning peculiar to VMS.  Perl tried to read the value of
     an %ENV element from a CLI symbol table, and found a resultant string
     longer than 1024 characters.  The return value has been truncated to
     1024 characters.

Version number must be a constant number
     (P) The attempt to translate a `use Module n.n LIST' statement into
     its equivalent BEGIN block found an internal inconsistency with the
     version number.

New tests
=========

lib/attrs
     Compatibility tests for `sub : attrs' vs the older `use attrs'.

lib/env
     Tests for new environment scalar capability (e.g., `use Env
     qw($BAR);').

lib/env-array
     Tests for new environment array capability (e.g., `use Env
     qw(@PATH);').

lib/io_const
     IO constants (SEEK_*, _IO*).

lib/io_dir
     Directory-related IO methods (new, read, close, rewind, tied delete).

lib/io_multihomed
     INET sockets with multi-homed hosts.

lib/io_poll
     IO poll().

lib/io_unix
     UNIX sockets.

op/attrs
     Regression tests for `my ($x,@y,%z) : attrs' and <sub : attrs>.

op/filetest
     File test operators.

op/lex_assign
     Verify operations that access pad objects (lexicals and temporaries).

op/exists_sub
     Verify `exists &sub' operations.

Incompatible Changes
====================

Perl Source Incompatibilities
-----------------------------

   Beware that any new warnings that have been added or old ones that have
been enhanced are not considered incompatible changes.

   Since all new warnings must be explicitly requested via the -w switch
or the warnings pragma, it is ultimately the programmer's responsibility
to ensure that warnings are enabled judiciously.

CHECK is a new keyword
     All subroutine definitions named CHECK are now special.  See
     `/"Support for CHECK blocks"' for more information.

Treatment of list slices of undef has changed
     There is a potential incompatibility in the behavior of list slices
     that are comprised entirely of undefined values.  See `' in this node.

Format of $English::PERL_VERSION is different
---------------------------------------------

   The English module now sets $PERL_VERSION to $^V (a string value) rather
than $] (a numeric value).  This is a potential incompatibility.  Send us
a report via perlbug if you are affected by this.

   See `' in this node for the reasons for this change.

Literals of the form `1.2.3' parse differently
     Previously, numeric literals with more than one dot in them were
     interpreted as a floating point number concatenated with one or more
     numbers.  Such "numbers" are now parsed as strings composed of the
     specified ordinals.

     For example, `print 97.98.99' used to output `97.9899' in earlier
     versions, but now prints `abc'.

     See `' in this node.

Possibly changed pseudo-random number generator
     Perl programs that depend on reproducing a specific set of
     pseudo-random numbers may now produce different output due to
     improvements made to the rand() builtin.  You can use `sh Configure
     -Drandfunc=rand' to obtain the old behavior.

     See `' in this node.

Hashing function for hash keys has changed
     Even though Perl hashes are not order preserving, the apparently
     random order encountered when iterating on the contents of a hash is
     actually determined by the hashing algorithm used.  Improvements in
     the algorithm may yield a random order that is *different* from that
     of previous versions, especially when iterating on hashes.

     See `' in this node for additional information.

undef fails on read only values
     Using the undef operator on a readonly value (such as $1) has the
     same effect as assigning undef to the readonly value-it throws an
     exception.

Close-on-exec bit may be set on pipe and socket handles
     Pipe and socket handles are also now subject to the close-on-exec
     behavior determined by the special variable $^F.

     See `' in this node.

Writing `"$$1"' to mean `"${$}1"' is unsupported
     Perl 5.004 deprecated the interpretation of `$$1' and similar within
     interpolated strings to mean `$$ . "1"', but still allowed it.

     In Perl 5.6.0 and later, `"$$1"' always means `"${$1}"'.

delete(), values() and `\(%h)' operate on aliases to values, not copies
     delete(), each(), values() and hashes in a list context return the
     actual values in the hash, instead of copies (as they used to in
     earlier versions).  Typical idioms for using these constructs copy the
     returned values, but this can make a significant difference when
     creating references to the returned values.  Keys in the hash are
     still returned as copies when iterating on a hash.

     See also `' in this node.

vec(EXPR,OFFSET,BITS) enforces powers-of-two BITS
     vec() generates a run-time error if the BITS argument is not a valid
     power-of-two integer.

Text of some diagnostic output has changed
     Most references to internal Perl operations in diagnostics have been
     changed to be more descriptive.  This may be an issue for programs
     that may incorrectly rely on the exact text of diagnostics for proper
     functioning.

`%@' has been removed
     The undocumented special variable `%@' that used to accumulate
     "background" errors (such as those that happen in DESTROY()) has been
     removed, because it could potentially result in memory leaks.

Parenthesized not() behaves like a list operator
     The not operator now falls under the "if it looks like a function, it
     behaves like a function" rule.

     As a result, the parenthesized form can be used with grep and map.
     The following construct used to be a syntax error before, but it works
     as expected now:

          grep not($_), @things;

     On the other hand, using not with a literal list slice may not work.
     The following previously allowed construct:

          print not (1,2,3)[0];

     needs to be written with additional parentheses now:

          print not((1,2,3)[0]);

     The behavior remains unaffected when not is not followed by
     parentheses.

Semantics of bareword prototype `(*)' have changed
     The semantics of the bareword prototype * have changed.  Perl 5.005
     always coerced simple scalar arguments to a typeglob, which wasn't
     useful in situations where the subroutine must distinguish between a
     simple scalar and a typeglob.  The new behavior is to not coerce
     bareword arguments to a typeglob.  The value will always be visible
     as either a simple scalar or as a reference to a typeglob.

     See `' in this node.

Semantics of bit operators may have changed on 64-bit platforms
---------------------------------------------------------------

   If your platform is either natively 64-bit or if Perl has been
configured to used 64-bit integers, i.e., $Config{ivsize} is 8, there may
be a potential incompatibility in the behavior of bitwise numeric
operators (& | ^ ~ << >>).  These operators used to strictly operate on
the lower 32 bits of integers in previous versions, but now operate over
the entire native integral width.  In particular, note that unary `~' will
produce different results on platforms that have different
$Config{ivsize}.  For portability, be sure to mask off the excess bits in
the result of unary `~', e.g., `~$x & 0xffffffff'.

   See `' in this node.

More builtins taint their results
---------------------------------

   As described in `' in this node, there may be more sources of taint in
a Perl program.

   To avoid these new tainting behaviors, you can build Perl with the
Configure option `-Accflags=-DINCOMPLETE_TAINTS'.  Beware that the ensuing
perl binary may be insecure.

C Source Incompatibilities
--------------------------

`PERL_POLLUTE'
     Release 5.005 grandfathered old global symbol names by providing
     preprocessor macros for extension source compatibility.  As of
     release 5.6.0, these preprocessor definitions are not available by
     default.  You need to explicitly compile perl with `-DPERL_POLLUTE'
     to get these definitions.  For extensions still using the old
     symbols, this option can be specified via MakeMaker:

          perl Makefile.PL POLLUTE=1

`PERL_IMPLICIT_CONTEXT'
     This new build option provides a set of macros for all API functions
     such that an implicit interpreter/thread context argument is passed to
     every API function.  As a result of this, something like
     `sv_setsv(foo,bar)' amounts to a macro invocation that actually
     translates to something like `Perl_sv_setsv(my_perl,foo,bar)'.  While
     this is generally expected to not have any significant source
     compatibility issues, the difference between a macro and a real
     function call will need to be considered.

     This means that there *is* a source compatibility issue as a result of
     this if your extensions attempt to use pointers to any of the Perl API
     functions.

     Note that the above issue is not relevant to the default build of
     Perl, whose interfaces continue to match those of prior versions (but
     subject to the other options described here).

     See `"The Perl API"', *Note Perlguts: perlguts, for detailed
     information on the ramifications of building Perl with this option.

          NOTE: PERL_IMPLICIT_CONTEXT is automatically enabled whenever Perl is built
          with one of -Dusethreads, -Dusemultiplicity, or both.  It is not
          intended to be enabled by users at this time.

`PERL_POLLUTE_MALLOC'
     Enabling Perl's malloc in release 5.005 and earlier caused the
     namespace of the system's malloc family of functions to be usurped by
     the Perl versions, since by default they used the same names.
     Besides causing problems on platforms that do not allow these
     functions to be cleanly replaced, this also meant that the system
     versions could not be called in programs that used Perl's malloc.
     Previous versions of Perl have allowed this behaviour to be
     suppressed with the HIDEMYMALLOC and EMBEDMYMALLOC preprocessor
     definitions.

     As of release 5.6.0, Perl's malloc family of functions have default
     names distinct from the system versions.  You need to explicitly
     compile perl with `-DPERL_POLLUTE_MALLOC' to get the older behaviour.
     HIDEMYMALLOC and EMBEDMYMALLOC have no effect, since the behaviour
     they enabled is now the default.

     Note that these functions do not constitute Perl's memory allocation
     API.  See `"Memory Allocation"', *Note Perlguts: perlguts, for
     further information about that.

Compatible C Source API Changes
-------------------------------

`PATCHLEVEL' is now `PERL_VERSION'
     The cpp macros `PERL_REVISION', `PERL_VERSION', and `PERL_SUBVERSION'
     are now available by default from perl.h, and reflect the base
     revision, patchlevel, and subversion respectively.  `PERL_REVISION'
     had no prior equivalent, while `PERL_VERSION' and `PERL_SUBVERSION'
     were previously available as `PATCHLEVEL' and `SUBVERSION'.

     The new names cause less pollution of the *cpp* namespace and reflect
     what the numbers have come to stand for in common practice.  For
     compatibility, the old names are still supported when `patchlevel.h'
     is explicitly included (as required before), so there is no source
     incompatibility from the change.

Binary Incompatibilities
------------------------

   In general, the default build of this release is expected to be binary
compatible for extensions built with the 5.005 release or its maintenance
versions.  However, specific platforms may have broken binary compatibility
due to changes in the defaults used in hints files.  Therefore, please be
sure to always check the platform-specific README files for any notes to
the contrary.

   The usethreads or usemultiplicity builds are not binary compatible with
the corresponding builds in 5.005.

   On platforms that require an explicit list of exports (AIX, OS/2 and
Windows, among others), purely internal symbols such as parser functions
and the run time opcodes are not exported by default.  Perl 5.005 used to
export all functions irrespective of whether they were considered part of
the public API or not.

   For the full list of public API functions, see *Note Perlapi: perlapi,.

Known Problems
==============

Thread test failures
--------------------

   The subtests 19 and 20 of lib/thr5005.t test are known to fail due to
fundamental problems in the 5.005 threading implementation.  These are not
new failures-Perl 5.005_0x has the same bugs, but didn't have these tests.

EBCDIC platforms not supported
------------------------------

   In earlier releases of Perl, EBCDIC environments like OS390 (also known
as Open Edition MVS) and VM-ESA were supported.  Due to changes required
by the UTF-8 (Unicode) support, the EBCDIC platforms are not supported in
Perl 5.6.0.

In 64-bit HP-UX the lib/io_multihomed test may hang
---------------------------------------------------

   The lib/io_multihomed test may hang in HP-UX if Perl has been
configured to be 64-bit.  Because other 64-bit platforms do not hang in
this test, HP-UX is suspect.  All other tests pass in 64-bit HP-UX.  The
test attempts to create and connect to "multihomed" sockets (sockets which
have multiple IP addresses).

NEXTSTEP 3.3 POSIX test failure
-------------------------------

   In NEXTSTEP 3.3p2 the implementation of the strftime(3) in the
operating system libraries is buggy: the %j format numbers the days of a
month starting from zero, which, while being logical to programmers, will
cause the subtests 19 to 27 of the lib/posix test may fail.

Tru64 (aka Digital UNIX, aka DEC OSF/1) lib/sdbm test failure with gcc
----------------------------------------------------------------------

   If compiled with gcc 2.95 the lib/sdbm test will fail (dump core).  The
cure is to use the vendor cc, it comes with the operating system and
produces good code.

UNICOS/mk CC failures during Configure run
------------------------------------------

   In UNICOS/mk the following errors may appear during the Configure run:

     Guessing which symbols your C compiler and preprocessor define...
     CC-20 cc: ERROR File = try.c, Line = 3
     ...
       bad switch yylook 79bad switch yylook 79bad switch yylook 79bad switch yylook 79#ifdef A29K
     ...
     4 errors detected in the compilation of "try.c".

   The culprit is the broken awk of UNICOS/mk.  The effect is fortunately
rather mild: Perl itself is not adversely affected by the error, only the
h2ph utility coming with Perl, and that is rather rarely needed these days.

Arrow operator and arrays
-------------------------

   When the left argument to the arrow operator `< -' >> is an array, or
the scalar operator operating on an array, the result of the operation
must be considered erroneous. For example:

     @x->[2]
     scalar(@x)->[2]

   These expressions will get run-time errors in some future release of
Perl.

Windows 2000
------------

   Windows 2000 is known to fail test 22 in lib/open3.t (cause unknown at
this time).  That test passes under Windows NT.

Experimental features
---------------------

   As discussed above, many features are still experimental.  Interfaces
and implementation of these features are subject to change, and in extreme
cases, even subject to removal in some future release of Perl.  These
features include the following:

Threads
Unicode

support
Lvalue subroutines
Weak references
The pseudo-hash data type
The Compiler suite
Internal implementation of file globbing
The DB module
The regular expression constructs `(?{ code })' and `(??{ code })'
Obsolete Diagnostics
====================

Character class syntax [: :] is reserved for future extensions
     (W) Within regular expression character classes ([]) the syntax
     beginning with "[:" and ending with ":]" is reserved for future
     extensions.  If you need to represent those character sequences
     inside a regular expression character class, just quote the square
     brackets with the backslash: "\[:" and ":\]".

Ill-formed logical name |%s| in prime_env_iter
     (W) A warning peculiar to VMS.  A logical name was encountered when
     preparing to iterate over %ENV which violates the syntactic rules
     governing logical names.  Because it cannot be translated normally,
     it is skipped, and will not appear in %ENV.  This may be a benign
     occurrence, as some software packages might directly modify logical
     name tables and introduce nonstandard names, or it may indicate that
     a logical name table has been corrupted.

Probable precedence problem on %s
     (W) The compiler found a bareword where it expected a conditional,
     which often indicates that an || or && was parsed as part of the last
     argument of the previous construct, for example:

          open FOO || die;

regexp too big
     (F) The current implementation of regular expressions uses shorts as
     address offsets within a string.  Unfortunately this means that if
     the regular expression compiles to longer than 32767, it'll blow up.
     Usually when you want a regular expression this big, there is a better
     way to do it with multiple statements.  See *Note Perlre: perlre,.

Use of "$$<digit>" to mean "${$}<digit>" is deprecated
     (D) Perl versions before 5.004 misinterpreted any type marker followed
     by "$" and a digit.  For example, "$$0" was incorrectly taken to mean
     "${$}0" instead of "${$0}".  This bug is (mostly) fixed in Perl 5.004.

     However, the developers of Perl 5.004 could not fix this bug
     completely, because at least two widely-used modules depend on the
     old meaning of "$$0" in a string.  So Perl 5.004 still interprets
     "$$<digit>" in the old (broken) way inside strings; but it generates
     this message as a warning.  And in Perl 5.005, this special treatment
     will cease.

Reporting Bugs
==============

   If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup.  There may also be
information at http://www.perl.com/perl/, the Perl Home Page.

   If you believe you have an unreported bug, please run the *perlbug*
program included with your release.  Be sure to trim your bug down to a
tiny but sufficient test case.  Your bug report, along with the output of
`perl -V', will be sent off to perlbug@perl.com to be analysed by the Perl
porting team.

SEE ALSO
========

   The Changes file for exhaustive details on what changed.

   The INSTALL file for how to build Perl.

   The README file for general stuff.

   The `Artistic' and `Copying' files for copyright information.

HISTORY
=======

   Written by Gurusamy Sarathy <`gsar@activestate.com'>, with many
contributions from The Perl Porters.

   Send omissions or corrections to <`perlbug@perl.com'>.


File: perl.info,  Node: perldiag,  Next: perlnumber,  Prev: perldebug,  Up: Top

various Perl diagnostics
************************

NAME
====

   perldiag - various Perl diagnostics

DESCRIPTION
===========

   These messages are classified as follows (listed in increasing order of
desperation):

     (W) A warning (optional).
     (D) A deprecation (optional).
     (S) A severe warning (default).
     (F) A fatal error (trappable).
     (P) An internal error you should never see (trappable).
     (X) A very fatal error (nontrappable).
     (A) An alien error message (not generated by Perl).

   The majority of messages from the first three classifications above (W,
D & S) can be controlled using the warnings pragma.

   If a message can be controlled by the warnings pragma, its warning
category is included with the classification letter in the description
below.

   Optional warnings are enabled by using the warnings pragma or the -w
and -W switches. Warnings may be captured by setting `$SIG{__WARN__}' to a
reference to a routine that will be called on each warning instead of
printing it.  See *Note Perlvar: perlvar,.

   Default warnings are always enabled unless they are explicitly disabled
with the warnings pragma or the -X switch.

   Trappable errors may be trapped using the eval operator.  See `eval',
*Note Perlfunc: perlfunc,.  In almost all cases, warnings may be
selectively disabled or promoted to fatal errors using the warnings pragma.
See `eval', *Note Warnings: (pm.info)warnings,.

   Some of these messages are generic.  Spots that vary are denoted with a
%s, just as in a printf format.  Note that some messages start with a %s!
Since the messages are listed in alphabetical order, the symbols `"%(-?@'
sort before the letters, while [ and \ sort after.

"%s" variable %s masks earlier declaration in same %s
     (W misc) A "my" or "our" variable has been redeclared in the current
     scope or statement, effectively eliminating all access to the
     previous instance.  This is almost always a typographical error.
     Note that the earlier variable will still exist until the end of the
     scope or until all closure referents to it are destroyed.

"my sub" not yet implemented
     (F) Lexically scoped subroutines are not yet implemented.  Don't try
     that yet.

"my" variable %s can't be in a package
     (F) Lexically scoped variables aren't in a package, so it doesn't
     make sense to try to declare one with a package qualifier on the
     front.  Use local() if you want to localize a package variable.

"no" not allowed in expression
     (F) The "no" keyword is recognized and executed at compile time, and
     returns no useful value.  See *Note Perlmod: perlmod,.

"our" variable %s redeclared
     (W misc) You seem to have already declared the same global once
     before in the current lexical scope.

"use" not allowed in expression
     (F) The "use" keyword is recognized and executed at compile time, and
     returns no useful value.  See *Note Perlmod: perlmod,.

'!' allowed only after types %s
     (F) The '!' is allowed in pack() and unpack() only after certain
     types.  See `pack', *Note Perlfunc: perlfunc,.

/ cannot take a count
     (F) You had an unpack template indicating a counted-length string,
     but you have also specified an explicit size for the string.  See
     `pack', *Note Perlfunc: perlfunc,.

/ must be followed by a, A or Z
     (F) You had an unpack template indicating a counted-length string,
     which must be followed by one of the letters a, A or Z to indicate
     what sort of string is to be unpacked.  See `pack', *Note Perlfunc:
     perlfunc,.

/ must be followed by a*, A* or Z*
     (F) You had a pack template indicating a counted-length string,
     Currently the only things that can have their length counted are a*,
     A* or Z*.  See `pack', *Note Perlfunc: perlfunc,.

/ must follow a numeric type
     (F) You had an unpack template that contained a '#', but this did not
     follow some numeric unpack specification.  See `pack', *Note
     Perlfunc: perlfunc,.

% may only be used in unpack
     (F) You can't pack a string by supplying a checksum, because the
     checksumming process loses information, and you can't go the other
     way.  See `unpack', *Note Perlfunc: perlfunc,.

/%s/: Unrecognized escape \\%c passed through
     (W regexp) You used a backslash-character combination which is not
     recognized by Perl.  This combination appears in an interpolated
     variable or a `''-delimited regular expression.  The character was
     understood literally.

/%s/: Unrecognized escape \\%c in character class passed through
     (W regexp) You used a backslash-character combination which is not
     recognized by Perl inside character classes.  The character was
     understood literally.

/%s/ should probably be written as "%s"
     (W syntax) You have used a pattern where Perl expected to find a
     string, as in the first argument to join.  Perl will treat the true
     or false result of matching the pattern against $_ as the string,
     which is probably not what you had in mind.

%s (...) interpreted as function
     (W syntax) You've run afoul of the rule that says that any list
     operator followed by parentheses turns into a function, with all the
     list operators arguments found inside the parentheses.  See `Terms
     and List Operators (Leftward)', *Note Perlop: perlop,.

%s() called too early to check prototype
     (W prototype) You've called a function that has a prototype before
     the parser saw a definition or declaration for it, and Perl could not
     check that the call conforms to the prototype.  You need to either
     add an early prototype declaration for the subroutine in question, or
     move the subroutine definition ahead of the call to get proper
     prototype checking.  Alternatively, if you are certain that you're
     calling the function correctly, you may put an ampersand before the
     name to avoid the warning.  See *Note Perlsub: perlsub,.

%s argument is not a HASH or ARRAY element
     (F) The argument to exists() must be a hash or array element, such as:

          $foo{$bar}
          $ref->{"susie"}[12]

%s argument is not a HASH or ARRAY element or slice
     (F) The argument to delete() must be either a hash or array element,
     such as:

          $foo{$bar}
          $ref->{"susie"}[12]

     or a hash or array slice, such as:

          @foo[$bar, $baz, $xyzzy]
          @{$ref->[12]}{"susie", "queue"}

%s argument is not a subroutine name
     (F) The argument to exists() for `exists &sub' must be a subroutine
     name, and not a subroutine call.  `exists &sub()' will generate this
     error.

%s did not return a true value
     (F) A required (or used) file must return a true value to indicate
     that it compiled correctly and ran its initialization code correctly.
     It's traditional to end such a file with a "1;", though any true
     value would do.  See `require', *Note Perlfunc: perlfunc,.

%s found where operator expected
     (S) The Perl lexer knows whether to expect a term or an operator.  If
     it sees what it knows to be a term when it was expecting to see an
     operator, it gives you this warning.  Usually it indicates that an
     operator or delimiter was omitted, such as a semicolon.

%s had compilation errors
     (F) The final summary message when a `perl -c' fails.

%s has too many errors
     (F) The parser has given up trying to parse the program after 10
     errors.  Further error messages would likely be uninformative.

%s matches null string many times
     (W regexp) The pattern you've specified would be an infinite loop if
     the regular expression engine didn't specifically check for that.
     See *Note Perlre: perlre,.

%s never introduced
     (S internal) The symbol in question was declared but somehow went out
     of scope before it could possibly have been used.

%s package attribute may clash with future reserved word: %s
     (W reserved) A lowercase attribute name was used that had a
     package-specific handler.  That name might have a meaning to Perl
     itself some day, even though it doesn't yet.  Perhaps you should use
     a mixed-case attribute name, instead.  See *Note Attributes:
     (pm.info)attributes,.

%s syntax OK
     (F) The final summary message when a `perl -c' succeeds.

%s: Command not found
     (A) You've accidentally run your script through *csh* instead of
     Perl.  Check the #! line, or manually feed your script into Perl
     yourself.

%s: Expression syntax
     (A) You've accidentally run your script through *csh* instead of
     Perl.  Check the #! line, or manually feed your script into Perl
     yourself.

%s: Undefined variable
     (A) You've accidentally run your script through *csh* instead of
     Perl.  Check the #! line, or manually feed your script into Perl
     yourself.

%s: not found
     (A) You've accidentally run your script through the Bourne shell
     instead of Perl.  Check the #! line, or manually feed your script
     into Perl yourself.

(in cleanup) %s
     (W misc) This prefix usually indicates that a DESTROY() method raised
     the indicated exception.  Since destructors are usually called by the
     system at arbitrary points during execution, and often a vast number
     of times, the warning is issued only once for any number of failures
     that would otherwise result in the same message being repeated.

     Failure of user callbacks dispatched using the G_KEEPERR flag could
     also result in this warning.  See `G_KEEPERR', *Note Perlcall:
     perlcall,.

(Missing semicolon on previous line?)
     (S) This is an educated guess made in conjunction with the message "%s
     found where operator expected".  Don't automatically put a semicolon
     on the previous line just because you saw this message.

-P not allowed for setuid/setgid script
     (F) The script would have to be opened by the C preprocessor by name,
     which provides a race condition that breaks security.

-T and -B not implemented on filehandles
     (F) Perl can't peek at the stdio buffer of filehandles when it doesn't
     know about your kind of stdio.  You'll have to use a filename instead.

-p destination: %s
     (F) An error occurred during the implicit output invoked by the -p
     command-line switch.  (This output goes to STDOUT unless you've
     redirected it with select().)

Server error
     See Server error.

follows nothing in regexp
     (F) You started a regular expression with a quantifier.  Backslash it
     if you meant it literally.   See *Note Perlre: perlre,.

@ outside of string
     (F) You had a pack template that specified an absolute position
     outside the string being unpacked.  See `pack', *Note Perlfunc:
     perlfunc,.

<> should be quotes
     (F) You wrote `< require <file' >> when you should have written
     `require 'file''.

accept() on closed socket %s
     (W closed) You tried to do an accept on a closed socket.  Did you
     forget to check the return value of your socket() call?  See
     `accept', *Note Perlfunc: perlfunc,.

Allocation too large: %lx
     (X) You can't allocate more than 64K on an MS-DOS machine.

Applying %s to %s will act on scalar(%s)
     (W misc) The pattern match (//), substitution (s///), and
     transliteration (tr///) operators work on scalar values.  If you
     apply one of them to an array or a hash, it will convert the array or
     hash to a scalar value - the length of an array, or the population
     info of a hash - and then work on that scalar value.  This is
     probably not what you meant to do.  See `grep', *Note Perlfunc:
     perlfunc, and `map', *Note Perlfunc: perlfunc, for alternatives.

Arg too short for msgsnd
     (F) msgsnd() requires a string at least as long as sizeof(long).

Ambiguous use of %s resolved as %s
     (W ambiguous)(S) You said something that may not be interpreted the
     way you thought.  Normally it's pretty easy to disambiguate it by
     supplying a missing quote, operator, parenthesis pair or declaration.

Ambiguous call resolved as CORE::%s(), qualify as such or use &
     (W ambiguous) A subroutine you have declared has the same name as a
     Perl keyword, and you have used the name without qualification for
     calling one or the other.  Perl decided to call the builtin because
     the subroutine is not imported.

     To force interpretation as a subroutine call, either put an ampersand
     before the subroutine name, or qualify the name with its package.
     Alternatively, you can import the subroutine (or pretend that it's
     imported with the `use subs' pragma).

     To silently interpret it as the Perl operator, use the `CORE::' prefix
     on the operator (e.g. `CORE::log($x)') or by declaring the subroutine
     to be an object method (see `"Subroutine Attributes"', *Note Perlsub:
     perlsub, or `"Subroutine Attributes"', *Note Attributes:
     (pm.info)attributes,).

Args must match #! line
     (F) The setuid emulator requires that the arguments Perl was invoked
     with match the arguments specified on the #! line.  Since some systems
     impose a one-argument limit on the #! line, try combining switches;
     for example, turn `-w -U' into `-wU'.

Argument "%s" isn't numeric%s
     (W numeric) The indicated string was fed as an argument to an
     operator that expected a numeric value instead.  If you're fortunate
     the message will identify which operator was so unfortunate.

Array @%s missing the @ in argument %d of %s()
     (D deprecated) Really old Perl let you omit the @ on array names in
     some spots.  This is now heavily deprecated.

assertion botched: %s
     (P) The malloc package that comes with Perl had an internal failure.

Assertion failed: file "%s"
     (P) A general assertion failed.  The file in question must be
     examined.

Assignment to both a list and a scalar
     (F) If you assign to a conditional operator, the 2nd and 3rd arguments
     must either both be scalars or both be lists.  Otherwise Perl won't
     know which context to supply to the right side.

Attempt to free non-arena SV: 0x%lx
     (P internal) All SV objects are supposed to be allocated from arenas
     that will be garbage collected on exit.  An SV was discovered to be
     outside any of those arenas.

Attempt to free nonexistent shared string
     (P internal) Perl maintains a reference counted internal table of
     strings to optimize the storage and access of hash keys and other
     strings.  This indicates someone tried to decrement the reference
     count of a string that can no longer be found in the table.

Attempt to free temp prematurely
     (W debugging) Mortalized values are supposed to be freed by the
     free_tmps() routine.  This indicates that something else is freeing
     the SV before the free_tmps() routine gets a chance, which means that
     the free_tmps() routine will be freeing an unreferenced scalar when
     it does try to free it.

Attempt to free unreferenced glob pointers
     (P internal) The reference counts got screwed up on symbol aliases.

Attempt to free unreferenced scalar
     (W internal) Perl went to decrement the reference count of a scalar
     to see if it would go to 0, and discovered that it had already gone
     to 0 earlier, and should have been freed, and in fact, probably was
     freed.  This could indicate that SvREFCNT_dec() was called too many
     times, or that SvREFCNT_inc() was called too few times, or that the
     SV was mortalized when it shouldn't have been, or that memory has
     been corrupted.

Attempt to join self
     (F) You tried to join a thread from within itself, which is an
     impossible task.  You may be joining the wrong thread, or you may
     need to move the join() to some other thread.

Attempt to pack pointer to temporary value
     (W pack) You tried to pass a temporary value (like the result of a
     function, or a computed expression) to the "p" pack() template.  This
     means the result contains a pointer to a location that could become
     invalid anytime, even before the end of the current statement.  Use
     literals or global values as arguments to the "p" pack() template to
     avoid this warning.

Attempt to use reference as lvalue in substr
     (W substr) You supplied a reference as the first argument to substr()
     used as an lvalue, which is pretty strange.  Perhaps you forgot to
     dereference it first.  See `substr', *Note Perlfunc: perlfunc,.

Bad arg length for %s, is %d, should be %d
     (F) You passed a buffer of the wrong size to one of msgctl(),
     semctl() or shmctl().  In C parlance, the correct sizes are,
     respectively, sizeof(struct msqid_ds *), sizeof(struct semid_ds *),
     and sizeof(struct shmid_ds *).

Bad evalled substitution pattern
     (F) You've used the /e switch to evaluate the replacement for a
     substitution, but perl found a syntax error in the code to evaluate,
     most likely an unexpected right brace '}'.

Bad filehandle: %s
     (F) A symbol was passed to something wanting a filehandle, but the
     symbol has no filehandle associated with it.  Perhaps you didn't do
     an open(), or did it in another package.

Bad free() ignored
     (S malloc) An internal routine called free() on something that had
     never been malloc()ed in the first place. Mandatory, but can be
     disabled by setting environment variable `PERL_BADFREE' to 1.

     This message can be quite often seen with DB_File on systems with
     "hard" dynamic linking, like `AIX' and OS/2. It is a bug of `Berkeley
     DB' which is left unnoticed if DB uses *forgiving* system malloc().

Bad hash
     (P) One of the internal hash routines was passed a null HV pointer.

Bad index while coercing array into hash
     (F) The index looked up in the hash found as the 0'th element of a
     pseudo-hash is not legal.  Index values must be at 1 or greater.  See
     *Note Perlref: perlref,.

Bad name after %s::
     (F) You started to name a symbol by using a package prefix, and then
     didn't finish the symbol.  In particular, you can't interpolate
     outside of quotes, so

          $var = 'myvar';
          $sym = mypack::$var;

     is not the same as

          $var = 'myvar';
          $sym = "mypack::$var";

Bad realloc() ignored
     (S malloc) An internal routine called realloc() on something that had
     never been malloc()ed in the first place. Mandatory, but can be
     disabled by setting environment variable `PERL_BADFREE' to 1.

Bad symbol for array
     (P) An internal request asked to add an array entry to something that
     wasn't a symbol table entry.

Bad symbol for filehandle
     (P) An internal request asked to add a filehandle entry to something
     that wasn't a symbol table entry.

Bad symbol for hash
     (P) An internal request asked to add a hash entry to something that
     wasn't a symbol table entry.

Badly placed ()'s
     (A) You've accidentally run your script through *csh* instead of
     Perl.  Check the #! line, or manually feed your script into Perl
     yourself.

Bareword "%s" not allowed while "strict subs" in use
     (F) With "strict subs" in use, a bareword is only allowed as a
     subroutine identifier, in curly brackets or to the left of the "=>"
     symbol.  Perhaps you need to predeclare a subroutine?

Bareword "%s" refers to nonexistent package
     (W bareword) You used a qualified bareword of the form `Foo::', but
     the compiler saw no other uses of that namespace before that point.
     Perhaps you need to predeclare a package?

Bareword found in conditional
     (W bareword) The compiler found a bareword where it expected a
     conditional, which often indicates that an || or && was parsed as
     part of the last argument of the previous construct, for example:

          open FOO || die;

     It may also indicate a misspelled constant that has been interpreted
     as a bareword:

          use constant TYPO => 1;
          if (TYOP) { print "foo" }

     The strict pragma is useful in avoiding such errors.

BEGIN failed-compilation aborted
     (F) An untrapped exception was raised while executing a BEGIN
     subroutine.  Compilation stops immediately and the interpreter is
     exited.

BEGIN not safe after errors-compilation aborted
     (F) Perl found a `BEGIN {}' subroutine (or a use directive, which
     implies a `BEGIN {}') after one or more compilation errors had
     already occurred.  Since the intended environment for the `BEGIN {}'
     could not be guaranteed (due to the errors), and since subsequent code
     likely depends on its correct operation, Perl just gave up.

Binary number > 0b11111111111111111111111111111111 non-portable
     (W portable) The binary number you specified is larger than 2**32-1
     (4294967295) and therefore non-portable between systems.  See *Note
     Perlport: perlport, for more on portability concerns.

bind() on closed socket %s
     (W closed) You tried to do a bind on a closed socket.  Did you forget
     to check the return value of your socket() call?  See `bind', *Note
     Perlfunc: perlfunc,.

Bit vector size > 32 non-portable
     (W portable) Using bit vector sizes larger than 32 is non-portable.

Bizarre copy of %s in %s
     (P) Perl detected an attempt to copy an internal value that is not
     copiable.

Buffer overflow in prime_env_iter: %s
     (W internal) A warning peculiar to VMS.  While Perl was preparing to
     iterate over %ENV, it encountered a logical name or symbol definition
     which was too long, so it was truncated to the string shown.

Callback called exit
     (F) A subroutine invoked from an external package via call_sv()
     exited by calling exit.

Can't "goto" out of a pseudo block
     (F) A "goto" statement was executed to jump out of what might look
     like a block, except that it isn't a proper block.  This usually
     occurs if you tried to jump out of a sort() block or subroutine, which
     is a no-no.  See `goto', *Note Perlfunc: perlfunc,.

Can't "goto" into the middle of a foreach loop
     (F) A "goto" statement was executed to jump into the middle of a
     foreach loop.  You can't get there from here.  See `goto', *Note
     Perlfunc: perlfunc,.

Can't "last" outside a loop block
     (F) A "last" statement was executed to break out of the current block,
     except that there's this itty bitty problem called there isn't a
     current block.  Note that an "if" or "else" block doesn't count as a
     "loopish" block, as doesn't a block given to sort(), map() or grep().
     You can usually double the curlies to get the same effect though,
     because the inner curlies will be considered a block that loops once.
     See `last', *Note Perlfunc: perlfunc,.

Can't "next" outside a loop block
     (F) A "next" statement was executed to reiterate the current block,
     but there isn't a current block.  Note that an "if" or "else" block
     doesn't count as a "loopish" block, as doesn't a block given to
     sort(), map() or grep().  You can usually double the curlies to get
     the same effect though, because the inner curlies will be considered
     a block that loops once.  See `next', *Note Perlfunc: perlfunc,.

Can't read CRTL environ
     (S) A warning peculiar to VMS.  Perl tried to read an element of %ENV
     from the CRTL's internal environment array and discovered the array
     was missing.  You need to figure out where your CRTL misplaced its
     environ or define `PERL_ENV_TABLES' (see *Note Perlvms: perlvms,) so
     that environ is not searched.

Can't "redo" outside a loop block
     (F) A "redo" statement was executed to restart the current block, but
     there isn't a current block.  Note that an "if" or "else" block
     doesn't count as a "loopish" block, as doesn't a block given to
     sort(), map() or grep().  You can usually double the curlies to get
     the same effect though, because the inner curlies will be considered
     a block that loops once.  See `redo', *Note Perlfunc: perlfunc,.

Can't bless non-reference value
     (F) Only hard references may be blessed.  This is how Perl "enforces"
     encapsulation of objects.  See *Note Perlobj: perlobj,.

Can't break at that line
     (S internal) A warning intended to only be printed while running
     within the debugger, indicating the line number specified wasn't the
     location of a statement that could be stopped at.

Can't call method "%s" in empty package "%s"
     (F) You called a method correctly, and it correctly indicated a
     package functioning as a class, but that package doesn't have
     ANYTHING defined in it, let alone methods.  See *Note Perlobj:
     perlobj,.

Can't call method "%s" on unblessed reference
     (F) A method call must know in what package it's supposed to run.  It
     ordinarily finds this out from the object reference you supply, but
     you didn't supply an object reference in this case.  A reference isn't
     an object reference until it has been blessed.  See *Note Perlobj:
     perlobj,.

Can't call method "%s" without a package or object reference
     (F) You used the syntax of a method call, but the slot filled by the
     object reference or package name contains an expression that returns
     a defined value which is neither an object reference nor a package
     name.  Something like this will reproduce the error:

          $BADREF = 42;
          process $BADREF 1,2,3;
          $BADREF->process(1,2,3);

Can't call method "%s" on an undefined value
     (F) You used the syntax of a method call, but the slot filled by the
     object reference or package name contains an undefined value.
     Something like this will reproduce the error:

          $BADREF = undef;
          process $BADREF 1,2,3;
          $BADREF->process(1,2,3);

Can't chdir to %s
     (F) You called `perl -x/foo/bar', but `/foo/bar' is not a directory
     that you can chdir to, possibly because it doesn't exist.

Can't check filesystem of script "%s" for nosuid
     (P) For some reason you can't check the filesystem of the script for
     nosuid.

Can't coerce %s to integer in %s
     (F) Certain types of SVs, in particular real symbol table entries
     (typeglobs), can't be forced to stop being what they are.  So you
     can't say things like:

          *foo += 1;

     You CAN say

          $foo = *foo;
          $foo += 1;

     but then $foo no longer contains a glob.

Can't coerce %s to number in %s
     (F) Certain types of SVs, in particular real symbol table entries
     (typeglobs), can't be forced to stop being what they are.

Can't coerce %s to string in %s
     (F) Certain types of SVs, in particular real symbol table entries
     (typeglobs), can't be forced to stop being what they are.

Can't coerce array into hash
     (F) You used an array where a hash was expected, but the array has no
     information on how to map from keys to array indices.  You can do that
     only with arrays that have a hash reference at index 0.

Can't create pipe mailbox
     (P) An error peculiar to VMS.  The process is suffering from
     exhausted quotas or other plumbing problems.

Can't declare class for non-scalar %s in "%s"
     (S) Currently, only scalar variables can declared with a specific
     class qualifier in a "my" or "our" declaration.  The semantics may be
     extended for other types of variables in future.

Can't declare %s in "%s"
     (F) Only scalar, array, and hash variables may be declared as "my" or
     "our" variables.  They must have ordinary identifiers as names.

Can't do inplace edit on %s: %s
     (S inplace) The creation of the new file failed for the indicated
     reason.

Can't do inplace edit without backup
     (F) You're on a system such as MS-DOS that gets confused if you try
     reading from a deleted (but still opened) file.  You have to say
     `-i.bak', or some such.

Can't do inplace edit: %s would not be unique
     (S inplace) Your filesystem does not support filenames longer than 14
     characters and Perl was unable to create a unique filename during
     inplace editing with the -i switch.  The file was ignored.

Can't do inplace edit: %s is not a regular file
     (S inplace) You tried to use the -i switch on a special file, such as
     a file in /dev, or a FIFO.  The file was ignored.

Can't do setegid!
     (P) The setegid() call failed for some reason in the setuid emulator
     of suidperl.

Can't do seteuid!
     (P) The setuid emulator of suidperl failed for some reason.

Can't do setuid
     (F) This typically means that ordinary perl tried to exec suidperl to
     do setuid emulation, but couldn't exec it.  It looks for a name of the
     form sperl5.000 in the same directory that the perl executable resides
     under the name perl5.000, typically /usr/local/bin on Unix machines.
     If the file is there, check the execute permissions.  If it isn't, ask
     your sysadmin why he and/or she removed it.

Can't do waitpid with flags
     (F) This machine doesn't have either waitpid() or wait4(), so only
     waitpid() without flags is emulated.

Can't do {n,m} with n > m
     (F) Minima must be less than or equal to maxima.  If you really want
     your regexp to match something 0 times, just put {0}.  See *Note
     Perlre: perlre,.

Can't emulate -%s on #! line
     (F) The #! line specifies a switch that doesn't make sense at this
     point.  For example, it'd be kind of silly to put a -x on the #! line.

Can't exec "%s": %s
     (W exec) An system(), exec(), or piped open call could not execute
     the named program for the indicated reason.  Typical reasons include:
     the permissions were wrong on the file, the file wasn't found in
     `$ENV{PATH}', the executable in question was compiled for another
     architecture, or the #! line in a script points to an interpreter
     that can't be run for similar reasons.  (Or maybe your system doesn't
     support #! at all.)

Can't exec %s
     (F) Perl was trying to execute the indicated program for you because
     that's what the #! line said.  If that's not what you wanted, you may
     need to mention "perl" on the #! line somewhere.

Can't execute %s
     (F) You used the -S switch, but the copies of the script to execute
     found in the PATH did not have correct permissions.

Can't find %s on PATH, '.' not in PATH
     (F) You used the -S switch, but the script to execute could not be
     found in the PATH, or at least not with the correct permissions.  The
     script exists in the current directory, but PATH prohibits running it.

Can't find %s on PATH
     (F) You used the -S switch, but the script to execute could not be
     found in the PATH.

Can't find label %s
     (F) You said to goto a label that isn't mentioned anywhere that it's
     possible for us to go to.  See `goto', *Note Perlfunc: perlfunc,.

Can't find string terminator %s anywhere before EOF
     (F) Perl strings can stretch over multiple lines.  This message means
     that the closing delimiter was omitted.  Because bracketed quotes
     count nesting levels, the following is missing its final parenthesis:

          print q(The character '(' starts a side comment.);

     If you're getting this error from a here-document, you may have
     included unseen whitespace before or after your closing tag. A good
     programmer's editor will have a way to help you find these characters.

Can't fork
     (F) A fatal error occurred while trying to fork while opening a
     pipeline.

Can't get filespec - stale stat buffer?
     (S) A warning peculiar to VMS.  This arises because of the difference
     between access checks under VMS and under the Unix model Perl
     assumes.  Under VMS, access checks are done by filename, rather than
     by bits in the stat buffer, so that ACLs and other protections can be
     taken into account.  Unfortunately, Perl assumes that the stat buffer
     contains all the necessary information, and passes it, instead of the
     filespec, to the access checking routine.  It will try to retrieve
     the filespec using the device name and FID present in the stat buffer,
     but this works only if you haven't made a subsequent call to the CRTL
     stat() routine, because the device name is overwritten with each
     call.  If this warning appears, the name lookup failed, and the
     access checking routine gave up and returned FALSE, just to be
     conservative.  (Note: The access checking routine knows about the
     Perl stat operator and file tests, so you shouldn't ever see this
     warning in response to a Perl command; it arises only if some internal
     code takes stat buffers lightly.)

Can't get pipe mailbox device name
     (P) An error peculiar to VMS.  After creating a mailbox to act as a
     pipe, Perl can't retrieve its name for later use.

Can't get SYSGEN parameter value for MAXBUF
     (P) An error peculiar to VMS.  Perl asked $GETSYI how big you want
     your mailbox buffers to be, and didn't get an answer.

Can't goto subroutine outside a subroutine
     (F) The deeply magical "goto subroutine" call can only replace one
     subroutine call for another.  It can't manufacture one out of whole
     cloth.  In general you should be calling it out of only an AUTOLOAD
     routine anyway.  See `goto', *Note Perlfunc: perlfunc,.

Can't goto subroutine from an eval-string
     (F) The "goto subroutine" call can't be used to jump out of an eval
     "string".  (You can use it to jump out of an eval {BLOCK}, but you
     probably don't want to.)

Can't ignore signal CHLD, forcing to default
     (W signal) Perl has detected that it is being run with the SIGCHLD
     signal (sometimes known as SIGCLD) disabled.  Since disabling this
     signal will interfere with proper determination of exit status of
     child processes, Perl has reset the signal to its default value.
     This situation typically indicates that the parent program under
     which Perl may be running (e.g. cron) is being very careless.

Can't localize through a reference
     (F) You said something like `local $$ref', which Perl can't currently
     handle, because when it goes to restore the old value of whatever $ref
     pointed to after the scope of the local() is finished, it can't be
     sure that $ref will still be a reference.

Can't localize lexical variable %s
     (F) You used local on a variable name that was previously declared as
     a lexical variable using "my".  This is not allowed.  If you want to
     localize a package variable of the same name, qualify it with the
     package name.

Can't localize pseudo-hash element
     (F) You said something like `< local $ar-'{'key'} >>, where $ar is a
     reference to a pseudo-hash.  That hasn't been implemented yet, but
     you can get a similar effect by localizing the corresponding array
     element directly - `< local $ar-'[$ar->[0]{'key'}] >>.

Can't locate auto/%s.al in @INC
     (F) A function (or method) was called in a package which allows
     autoload, but there is no function to autoload.  Most probable causes
     are a misprint in a function/method name or a failure to AutoSplit
     the file, say, by doing make install.

Can't locate %s
     (F) You said to do (or require, or use) a file that couldn't be
     found. Perl looks for the file in all the locations mentioned in @INC,
     unless the file name included the full path to the file.  Perhaps you
     need to set the PERL5LIB or PERL5OPT environment variable to say
     where the extra library is, or maybe the script needs to add the
     library name to @INC.  Or maybe you just misspelled the name of the
     file.  See `require', *Note Perlfunc: perlfunc, and `require', *Note
     Lib: (pm.info)lib,.

Can't locate object method "%s" via package "%s"
     (F) You called a method correctly, and it correctly indicated a
     package functioning as a class, but that package doesn't define that
     particular method, nor does any of its base classes.  See *Note
     Perlobj: perlobj,.

Can't locate package %s for @%s::ISA
     (W syntax) The @ISA array contained the name of another package that
     doesn't seem to exist.

Can't make list assignment to \%ENV on this system
     (F) List assignment to %ENV is not supported on some systems, notably
     VMS.

Can't modify %s in %s
     (F) You aren't allowed to assign to the item indicated, or otherwise
     try to change it, such as with an auto-increment.

Can't modify non-lvalue subroutine call
     (F) Subroutines meant to be used in lvalue context should be declared
     as such, see `"Lvalue subroutines"', *Note Perlsub: perlsub,.

Can't modify nonexistent substring
     (P) The internal routine that does assignment to a substr() was handed
     a NULL.

Can't msgrcv to read-only var
     (F) The target of a msgrcv must be modifiable to be used as a receive
     buffer.

Can't open %s: %s
     (S inplace) The implicit opening of a file through use of the `< <' >>
     filehandle, either implicitly under the -n or -p command-line
     switches, or explicitly, failed for the indicated reason.  Usually
     this is because you don't have read permission for a file which you
     named on the command line.

Can't open bidirectional pipe
     (W pipe) You tried to say `open(CMD, "|cmd|")', which is not
     supported.  You can try any of several modules in the Perl library to
     do this, such as IPC::Open2.  Alternately, direct the pipe's output
     to a file using ">", and then read it in under a different file
     handle.

Can't open error file %s as stderr
     (F) An error peculiar to VMS.  Perl does its own command line
     redirection, and couldn't open the file specified after '2>' or '2>>'
     on the command line for writing.

Can't open input file %s as stdin
     (F) An error peculiar to VMS.  Perl does its own command line
     redirection, and couldn't open the file specified after '<' on the
     command line for reading.

Can't open output file %s as stdout
     (F) An error peculiar to VMS.  Perl does its own command line
     redirection, and couldn't open the file specified after '>' or '>>'
     on the command line for writing.

Can't open output pipe (name: %s)
     (P) An error peculiar to VMS.  Perl does its own command line
     redirection, and couldn't open the pipe into which to send data
     destined for stdout.

Can't open perl script "%s": %s
     (F) The script you specified can't be opened for the indicated reason.

Can't redefine active sort subroutine %s
     (F) Perl optimizes the internal handling of sort subroutines and keeps
     pointers into them.  You tried to redefine one such sort subroutine
     when it was currently active, which is not allowed.  If you really
     want to do this, you should write `sort { &func } @x' instead of
     `sort func @x'.

Can't remove %s: %s, skipping file
     (S inplace) You requested an inplace edit without creating a backup
     file.  Perl was unable to remove the original file to replace it with
     the modified file.  The file was left unmodified.

Can't rename %s to %s: %s, skipping file
     (S inplace) The rename done by the -i switch failed for some reason,
     probably because you don't have write permission to the directory.

Can't reopen input pipe (name: %s) in binary mode
     (P) An error peculiar to VMS.  Perl thought stdin was a pipe, and
     tried to reopen it to accept binary data.  Alas, it failed.

Can't reswap uid and euid
     (P) The setreuid() call failed for some reason in the setuid emulator
     of suidperl.

Can't return outside a subroutine
     (F) The return statement was executed in mainline code, that is, where
     there was no subroutine call to return out of.  See *Note Perlsub:
     perlsub,.

Can't return %s from lvalue subroutine
     (F) Perl detected an attempt to return illegal lvalues (such as
     temporary or readonly values) from a subroutine used as an lvalue.
     This is not allowed.

Can't stat script "%s"
     (P) For some reason you can't fstat() the script even though you have
     it open already.  Bizarre.

Can't swap uid and euid
     (P) The setreuid() call failed for some reason in the setuid emulator
     of suidperl.

Can't take log of %g
     (F) For ordinary real numbers, you can't take the logarithm of a
     negative number or zero. There's a Math::Complex package that comes
     standard with Perl, though, if you really want to do that for the
     negative numbers.

Can't take sqrt of %g
     (F) For ordinary real numbers, you can't take the square root of a
     negative number.  There's a Math::Complex package that comes standard
     with Perl, though, if you really want to do that.

Can't undef active subroutine
     (F) You can't undefine a routine that's currently running.  You can,
     however, redefine it while it's running, and you can even undef the
     redefined subroutine while the old routine is running.  Go figure.

Can't unshift
     (F) You tried to unshift an "unreal" array that can't be unshifted,
     such as the main Perl stack.

Can't upgrade that kind of scalar
     (P) The internal sv_upgrade routine adds "members" to an SV, making
     it into a more specialized kind of SV.  The top several SV types are
     so specialized, however, that they cannot be interconverted.  This
     message indicates that such a conversion was attempted.

Can't upgrade to undef
     (P) The undefined SV is the bottom of the totem pole, in the scheme
     of upgradability.  Upgrading to undef indicates an error in the code
     calling sv_upgrade.

Can't use %%! because Errno.pm is not available
     (F) The first time the %! hash is used, perl automatically loads the
     Errno.pm module. The Errno module is expected to tie the %! hash to
     provide symbolic names for $! errno values.

Can't use "my %s" in sort comparison
     (F) The global variables $a and $b are reserved for sort comparisons.
     You mentioned $a or $b in the same line as the <=> or cmp operator,
     and the variable had earlier been declared as a lexical variable.
     Either qualify the sort variable with the package name, or rename the
     lexical variable.

Can't use %s for loop variable
     (F) Only a simple scalar variable may be used as a loop variable on a
     foreach.

Can't use %s ref as %s ref
     (F) You've mixed up your reference types.  You have to dereference a
     reference of the type needed.  You can use the ref() function to test
     the type of the reference, if need be.

Can't use \%c to mean $%c in expression
     (W syntax) In an ordinary expression, backslash is a unary operator
     that creates a reference to its argument.  The use of backslash to
     indicate a backreference to a matched substring is valid only as part
     of a regular expression pattern.  Trying to do this in ordinary Perl
     code produces a value that prints out looking like SCALAR(0xdecaf).
     Use the $1 form instead.

Can't use bareword ("%s") as %s ref while "strict refs" in use
     (F) Only hard references are allowed by "strict refs".  Symbolic
     references are disallowed.  See *Note Perlref: perlref,.

Can't use string ("%s") as %s ref while "strict refs" in use
     (F) Only hard references are allowed by "strict refs".  Symbolic
     references are disallowed.  See *Note Perlref: perlref,.

Can't use an undefined value as %s reference
     (F) A value used as either a hard reference or a symbolic reference
     must be a defined value.  This helps to delurk some insidious errors.

Can't use global %s in "my"
     (F) You tried to declare a magical variable as a lexical variable.
     This is not allowed, because the magic can be tied to only one
     location (namely the global variable) and it would be incredibly
     confusing to have variables in your program that looked like magical
     variables but weren't.

Can't use subscript on %s
     (F) The compiler tried to interpret a bracketed expression as a
     subscript.  But to the left of the brackets was an expression that
     didn't look like an array reference, or anything else subscriptable.

Can't weaken a nonreference
     (F) You attempted to weaken something that was not a reference.  Only
     references can be weakened.

Can't x= to read-only value
     (F) You tried to repeat a constant value (often the undefined value)
     with an assignment operator, which implies modifying the value itself.
     Perhaps you need to copy the value to a temporary, and repeat that.

Can't find an opnumber for "%s"
     (F) A string of a form `CORE::word' was given to prototype(), but
     there is no builtin with the name word.

Can't resolve method `%s' overloading `%s' in package `%s'
     (F|P) Error resolving overloading specified by a method name (as
     opposed to a subroutine reference): no such method callable via the
     package. If method name is ???, this is an internal error.

Character class [:%s:] unknown
     (F) The class in the character class [: :] syntax is unknown.  See
     *Note Perlre: perlre,.

Character class syntax [%s] belongs inside character classes
     (W unsafe) The character class constructs [: :], [= =], and [. .]  go
     *inside* character classes, the [] are part of the construct, for
     example: /[012[:alpha:]345]/.  Note that [= =] and [. .]  are not
     currently implemented; they are simply placeholders for future
     extensions.

Character class syntax [. .] is reserved for future extensions
     (W regexp) Within regular expression character classes ([]) the
     syntax beginning with "[." and ending with ".]" is reserved for
     future extensions.  If you need to represent those character
     sequences inside a regular expression character class, just quote the
     square brackets with the backslash: "\[." and ".\]".

Character class syntax [= =] is reserved for future extensions
     (W regexp) Within regular expression character classes ([]) the syntax
     beginning with "[=" and ending with "=]" is reserved for future
     extensions.  If you need to represent those character sequences
     inside a regular expression character class, just quote the square
     brackets with the backslash: "\[=" and "=\]".

chmod() mode argument is missing initial 0
     (W chmod) A novice will sometimes say

          chmod 777, $filename

     not realizing that 777 will be interpreted as a decimal number,
     equivalent to 01411.  Octal constants are introduced with a leading 0
     in Perl, as in C.

Close on unopened file <%s>
     (W unopened) You tried to close a filehandle that was never opened.

Compilation failed in require
     (F) Perl could not compile a file specified in a require statement.
     Perl uses this generic message when none of the errors that it
     encountered were severe enough to halt compilation immediately.

Complex regular subexpression recursion limit (%d) exceeded
     (W regexp) The regular expression engine uses recursion in complex
     situations where back-tracking is required.  Recursion depth is
     limited to 32766, or perhaps less in architectures where the stack
     cannot grow arbitrarily.  ("Simple" and "medium" situations are
     handled without recursion and are not subject to a limit.)  Try
     shortening the string under examination; looping in Perl code (e.g.
     with while) rather than in the regular expression engine; or
     rewriting the regular expression so that it is simpler or backtracks
     less.  (See *Note Perlbook: perlbook, for information on *Mastering
     Regular Expressions*.)

connect() on closed socket %s
     (W closed) You tried to do a connect on a closed socket.  Did you
     forget to check the return value of your socket() call?  See
     `connect', *Note Perlfunc: perlfunc,.

Constant is not %s reference
     (F) A constant value (perhaps declared using the `use constant'
     pragma) is being dereferenced, but it amounts to the wrong type of
     reference.  The message indicates the type of reference that was
     expected. This usually indicates a syntax error in dereferencing the
     constant value.  See `"Constant Functions"', *Note Perlsub: perlsub,
     and `"Constant Functions"', *Note Constant: (pm.info)constant,.

Constant subroutine %s redefined
     (S|W redefine) You redefined a subroutine which had previously been
     eligible for inlining.  See `"Constant Functions"', *Note Perlsub:
     perlsub, for commentary and workarounds.

Constant subroutine %s undefined
     (W misc) You undefined a subroutine which had previously been
     eligible for inlining.  See `"Constant Functions"', *Note Perlsub:
     perlsub, for commentary and workarounds.

constant(%s): %s
     (F) The parser found inconsistencies either while attempting to
     define an overloaded constant, or when trying to find the character
     name specified in the `\N{...}' escape.  Perhaps you forgot to load
     the corresponding overload or charnames pragma?  See *Note Charnames:
     (pm.info)charnames, and *Note Overload: (pm.info)overload,.

Copy method did not return a reference
     (F) The method which overloads "=" is buggy. See `Copy Constructor',
     *Note Overload: (pm.info)overload,.

CORE::%s is not a keyword
     (F) The CORE:: namespace is reserved for Perl keywords.

Corrupt malloc ptr 0x%lx at 0x%lx
     (P) The malloc package that comes with Perl had an internal failure.

corrupted regexp pointers
     (P) The regular expression engine got confused by what the regular
     expression compiler gave it.

corrupted regexp program
     (P) The regular expression engine got passed a regexp program without
     a valid magic number.

Deep recursion on subroutine "%s"
     (W recursion) This subroutine has called itself (directly or
     indirectly) 100 times more than it has returned.  This probably
     indicates an infinite recursion, unless you're writing strange
     benchmark programs, in which case it indicates something else.

defined(@array) is deprecated
     (D deprecated) defined() is not usually useful on arrays because it
     checks for an undefined scalar value.  If you want to see if the
     array is empty, just use `if (@array) { # not empty }' for example.

defined(%hash) is deprecated
     (D deprecated) defined() is not usually useful on hashes because it
     checks for an undefined scalar value.  If you want to see if the hash
     is empty, just use `if (%hash) { # not empty }' for example.

Delimiter for here document is too long
     (F) In a here document construct like `<<FOO', the label FOO is too
     long for Perl to handle.  You have to be seriously twisted to write
     code that triggers this error.

Did not produce a valid header
     See Server error.

(Did you mean &%s instead?)
     (W) You probably referred to an imported subroutine &FOO as $FOO or
     some such.

(Did you mean "local" instead of "our"?)
     (W misc) Remember that "our" does not localize the declared global
     variable.  You have declared it again in the same lexical scope,
     which seems superfluous.

(Did you mean $ or @ instead of %?)
     (W) You probably said %hash{$key} when you meant $hash{$key} or
     @hash{@keys}.  On the other hand, maybe you just meant %hash and got
     carried away.

Died
     (F) You passed die() an empty string (the equivalent of `die ""') or
     you called it with no args and both `$@' and $_ were empty.

(Do you need to predeclare %s?)
     (S) This is an educated guess made in conjunction with the message "%s
     found where operator expected".  It often means a subroutine or module
     name is being referenced that hasn't been declared yet.  This may be
     because of ordering problems in your file, or because of a missing
     "sub", "package", "require", or "use" statement.  If you're
     referencing something that isn't defined yet, you don't actually have
     to define the subroutine or package before the current location.  You
     can use an empty "sub foo;" or "package FOO;" to enter a "forward"
     declaration.

Document contains no data
     See Server error.

Don't know how to handle magic of type '%s'
     (P) The internal handling of magical variables has been cursed.

do_study: out of memory
     (P) This should have been caught by safemalloc() instead.

Duplicate free() ignored
     (S malloc) An internal routine called free() on something that had
     already been freed.

elseif should be elsif
     (S) There is no keyword "elseif" in Perl because Larry thinks it's
     ugly.  Your code will be interpreted as an attempt to call a method
     named "elseif" for the class returned by the following block.  This is
     unlikely to be what you want.

%s failed-call queue aborted
     (F) An untrapped exception was raised while executing a CHECK, INIT,
     or END subroutine.  Processing of the remainder of the queue of such
     routines has been prematurely ended.

entering effective %s failed
     (F) While under the `use filetest' pragma, switching the real and
     effective uids or gids failed.

Error converting file specification %s
     (F) An error peculiar to VMS.  Because Perl may have to deal with file
     specifications in either VMS or Unix syntax, it converts them to a
     single form when it must operate on them directly.  Either you've
     passed an invalid file specification to Perl, or you've found a case
     the conversion routines don't handle.  Drat.

%s: Eval-group in insecure regular expression
     (F) Perl detected tainted data when trying to compile a regular
     expression that contains the `(?{ ... })' zero-width assertion, which
     is unsafe.  See `(?{ code })', *Note Perlre: perlre,, and `(?{ code
     })', *Note Perlsec: perlsec,.

%s: Eval-group not allowed, use re 'eval'
     (F) A regular expression contained the `(?{ ... })' zero-width
     assertion, but that construct is only allowed when the `use re
     'eval'' pragma is in effect.  See `(?{ code })', *Note Perlre:
     perlre,.

%s: Eval-group not allowed at run time
     (F) Perl tried to compile a regular expression containing the `(?{
     ... })' zero-width assertion at run time, as it would when the
     pattern contains interpolated values.  Since that is a security risk,
     it is not allowed.  If you insist, you may still do this by
     explicitly building the pattern from an interpolated string at run
     time and using that in an eval().  See `(?{ code })', *Note Perlre:
     perlre,.

Excessively long <> operator
     (F) The contents of a <> operator may not exceed the maximum size of a
     Perl identifier.  If you're just trying to glob a long list of
     filenames, try using the glob() operator, or put the filenames into a
     variable and glob that.

Execution of %s aborted due to compilation errors
     (F) The final summary message when a Perl compilation fails.

Exiting eval via %s
     (W exiting) You are exiting an eval by unconventional means, such as
     a goto, or a loop control statement.

Exiting format via %s
     (W exiting) You are exiting an eval by unconventional means, such as
     a goto, or a loop control statement.

Exiting pseudo-block via %s
     (W exiting) You are exiting a rather special block construct (like a
     sort block or subroutine) by unconventional means, such as a goto, or
     a loop control statement.  See `sort', *Note Perlfunc: perlfunc,.

Exiting subroutine via %s
     (W exiting) You are exiting a subroutine by unconventional means,
     such as a goto, or a loop control statement.

Exiting substitution via %s
     (W exiting) You are exiting a substitution by unconventional means,
     such as a return, a goto, or a loop control statement.

Explicit blessing to " (assuming package main)
     (W misc) You are blessing a reference to a zero length string.  This
     has the effect of blessing the reference into the package main.  This
     is usually not what you want.  Consider providing a default target
     package, e.g. bless($ref, $p || 'MyPackage');

false [] range "%s" in regexp
     (W regexp) A character class range must start and end at a literal
     character, not another character class like `\d' or `[:alpha:]'.  The
     "-" in your false range is interpreted as a literal "-".  Consider
     quoting the "-",  "\-".  See *Note Perlre: perlre,.

Fatal VMS error at %s, line %d
     (P) An error peculiar to VMS.  Something untoward happened in a VMS
     system service or RTL routine; Perl's exit status should provide more
     details.  The filename in "at %s" and the line number in "line %d"
     tell you which section of the Perl source code is distressed.

fcntl is not implemented
     (F) Your machine apparently doesn't implement fcntl().  What is this,
     a PDP-11 or something?

Filehandle %s never opened
     (W unopened) An I/O operation was attempted on a filehandle that was
     never initialized.  You need to do an open() or a socket() call, or
     call a constructor from the FileHandle package.

Filehandle %s opened only for input
     (W io) You tried to write on a read-only filehandle.  If you intended
     it to be a read-write filehandle, you needed to open it with "+<" or
     "+>" or "+>>" instead of with "<" or nothing.  If you intended only
     to write the file, use ">" or ">>".  See `open', *Note Perlfunc:
     perlfunc,.

Filehandle %s opened only for output
     (W io) You tried to read from a filehandle opened only for writing.
     If you intended it to be a read/write filehandle, you needed to open
     it with "+<" or "+>" or "+>>" instead of with "<" or nothing.  If you
     intended only to read from the file, use "<".  See `open', *Note
     Perlfunc: perlfunc,.

Final $ should be \$ or $name
     (F) You must now decide whether the final $ in a string was meant to
     be a literal dollar sign, or was meant to introduce a variable name
     that happens to be missing.  So you have to put either the backslash
     or the name.

Final @ should be \@ or @name
     (F) You must now decide whether the final @ in a string was meant to
     be a literal "at" sign, or was meant to introduce a variable name
     that happens to be missing.  So you have to put either the backslash
     or the name.

flock() on closed filehandle %s
     (W closed) The filehandle you're attempting to flock() got itself
     closed some time before now.  Check your logic flow.  flock()
     operates on filehandles.  Are you attempting to call flock() on a
     dirhandle by the same name?

Format %s redefined
     (W redefine) You redefined a format.  To suppress this warning, say

          {
          	no warnings;
          	eval "format NAME =...";
          }

Format not terminated
     (F) A format must be terminated by a line with a solitary dot.  Perl
     got to the end of your file without finding such a line.

Found = in conditional, should be ==
     (W syntax) You said

          if ($foo = 123)

     when you meant

          if ($foo == 123)

     (or something like that).

gdbm store returned %d, errno %d, key "%s"
     (S) A warning from the GDBM_File extension that a store failed.

gethostent not implemented
     (F) Your C library apparently doesn't implement gethostent(), probably
     because if it did, it'd feel morally obligated to return every
     hostname on the Internet.

get%sname() on closed socket %s
     (W closed) You tried to get a socket or peer socket name on a closed
     socket.  Did you forget to check the return value of your socket()
     call?

getpwnam returned invalid UIC %#o for user "%s"
     (S) A warning peculiar to VMS.  The call to `sys$getuai' underlying
     the getpwnam operator returned an invalid UIC.

glob failed (%s)
     (W glob) Something went wrong with the external program(s) used for
     glob and `< <*.c' >>.  Usually, this means that you supplied a glob
     pattern that caused the external program to fail and exit with a
     nonzero status.  If the message indicates that the abnormal exit
     resulted in a coredump, this may also mean that your csh (C shell) is
     broken.  If so, you should change all of the csh-related variables in
     config.sh:  If you have tcsh, make the variables refer to it as if it
     were csh (e.g.  `full_csh='/usr/bin/tcsh''); otherwise, make them all
     empty (except that `d_csh' should be `'undef'') so that Perl will
     think csh is missing.  In either case, after editing config.sh, run
     `./Configure -S' and rebuild Perl.

Glob not terminated
     (F) The lexer saw a left angle bracket in a place where it was
     expecting a term, so it's looking for the corresponding right angle
     bracket, and not finding it.  Chances are you left some needed
     parentheses out earlier in the line, and you really meant a "less
     than".

Global symbol "%s" requires explicit package name
     (F) You've said "use strict vars", which indicates that all variables
     must either be lexically scoped (using "my"), declared beforehand
     using "our", or explicitly qualified to say which package the global
     variable is in (using "::").

goto must have label
     (F) Unlike with "next" or "last", you're not allowed to goto an
     unspecified destination.  See `goto', *Note Perlfunc: perlfunc,.

Had to create %s unexpectedly
     (S internal) A routine asked for a symbol from a symbol table that
     ought to have existed already, but for some reason it didn't, and had
     to be created on an emergency basis to prevent a core dump.

Hash %%s missing the % in argument %d of %s()
     (D deprecated) Really old Perl let you omit the % on hash names in
     some spots.  This is now heavily deprecated.

Hexadecimal number > 0xffffffff non-portable
     (W portable) The hexadecimal number you specified is larger than
     2**32-1 (4294967295) and therefore non-portable between systems.  See
     *Note Perlport: perlport, for more on portability concerns.

Identifier too long
     (F) Perl limits identifiers (names for variables, functions, etc.) to
     about 250 characters for simple names, and somewhat more for compound
     names (like `$A::B').  You've exceeded Perl's limits.  Future
     versions of Perl are likely to eliminate these arbitrary limitations.

Ill-formed CRTL environ value "%s"
     (W internal) A warning peculiar to VMS.  Perl tried to read the
     CRTL's internal environ array, and encountered an element without the
     = delimiter used to spearate keys from values.  The element is
     ignored.

Ill-formed message in prime_env_iter: |%s|
     (W internal) A warning peculiar to VMS.  Perl tried to read a logical
     name or CLI symbol definition when preparing to iterate over %ENV, and
     didn't see the expected delimiter between key and value, so the line
     was ignored.

Illegal character %s (carriage return)
     (F) Perl normally treats carriage returns in the program text as it
     would any other whitespace, which means you should never see this
     error when Perl was built using standard options.  For some reason,
     your version of Perl appears to have been built without this support.
     Talk to your Perl administrator.

Illegal division by zero
     (F) You tried to divide a number by 0.  Either something was wrong in
     your logic, or you need to put a conditional in to guard against
     meaningless input.

Illegal modulus zero
     (F) You tried to divide a number by 0 to get the remainder.  Most
     numbers don't take to this kindly.

Illegal binary digit %s
     (F) You used a digit other than 0 or 1 in a binary number.

Illegal octal digit %s
     (F) You used an 8 or 9 in a octal number.

Illegal binary digit %s ignored
     (W digit) You may have tried to use a digit other than 0 or 1 in a
     binary number.  Interpretation of the binary number stopped before
     the offending digit.

Illegal octal digit %s ignored
     (W digit) You may have tried to use an 8 or 9 in a octal number.
     Interpretation of the octal number stopped before the 8 or 9.

Illegal hexadecimal digit %s ignored
     (W digit) You may have tried to use a character other than 0 - 9 or A
     - F, a - f in a hexadecimal number.  Interpretation of the
     hexadecimal number stopped before the illegal character.

Illegal number of bits in vec
     (F) The number of bits in vec() (the third argument) must be a power
     of two from 1 to 32 (or 64, if your platform supports that).

Illegal switch in PERL5OPT: %s
     (X) The PERL5OPT environment variable may only be used to set the
     following switches: *-[DIMUdmw]*.

In string, @%s now must be written as \@%s
     (F) It used to be that Perl would try to guess whether you wanted an
     array interpolated or a literal @.  It did this when the string was
     first used at runtime.  Now strings are parsed at compile time, and
     ambiguous instances of @ must be disambiguated, either by prepending
     a backslash to indicate a literal, or by declaring (or using) the
     array within the program before the string (lexically).  (Someday it
     will simply assume that an unbackslashed @ interpolates an array.)

Insecure dependency in %s
     (F) You tried to do something that the tainting mechanism didn't like.
     The tainting mechanism is turned on when you're running setuid or
     setgid, or when you specify -T to turn it on explicitly.  The
     tainting mechanism labels all data that's derived directly or
     indirectly from the user, who is considered to be unworthy of your
     trust.  If any such data is used in a "dangerous" operation, you get
     this error.  See *Note Perlsec: perlsec, for more information.

Insecure directory in %s
     (F) You can't use system(), exec(), or a piped open in a setuid or
     setgid script if `$ENV{PATH}' contains a directory that is writable
     by the world.  See *Note Perlsec: perlsec,.

Insecure $ENV{%s} while running %s
     (F) You can't use system(), exec(), or a piped open in a setuid or
     setgid script if any of `$ENV{PATH}', `$ENV{IFS}', `$ENV{CDPATH}',
     `$ENV{ENV}' or `$ENV{BASH_ENV}' are derived from data supplied (or
     potentially supplied) by the user.  The script must set the path to a
     known value, using trustworthy data.  See *Note Perlsec: perlsec,.

Integer overflow in %s number
     (W overflow) The hexadecimal, octal or binary number you have
     specified either as a literal or as an argument to hex() or oct() is
     too big for your architecture, and has been converted to a floating
     point number.  On a 32-bit architecture the largest hexadecimal,
     octal or binary number representable without overflow is 0xFFFFFFFF,
     037777777777, or 0b11111111111111111111111111111111 respectively.
     Note that Perl transparently promotes all numbers to a floating point
     representation internally-subject to loss of precision errors in
     subsequent operations.

Internal inconsistency in tracking vforks
     (S) A warning peculiar to VMS.  Perl keeps track of the number of
     times you've called fork and exec, to determine whether the current
     call to exec should affect the current script or a subprocess (see
     `"exec LIST"', *Note Perlvms: perlvms,).  Somehow, this count has
     become scrambled, so Perl is making a guess and treating this exec as
     a request to terminate the Perl script and execute the specified
     command.

internal disaster in regexp
     (P) Something went badly wrong in the regular expression parser.

internal urp in regexp at /%s/
     (P) Something went badly awry in the regular expression parser.

Invalid %s attribute: %s
     The indicated attribute for a subroutine or variable was not
     recognized by Perl or by a user-supplied handler.  See *Note
     Attributes: (pm.info)attributes,.

Invalid %s attributes: %s
     The indicated attributes for a subroutine or variable were not
     recognized by Perl or by a user-supplied handler.  See *Note
     Attributes: (pm.info)attributes,.

invalid [] range "%s" in regexp
     (F) The range specified in a character class had a minimum character
     greater than the maximum character.  See *Note Perlre: perlre,.

Invalid conversion in %s: "%s"
     (W printf) Perl does not understand the given format conversion.  See
     `sprintf', *Note Perlfunc: perlfunc,.

Invalid separator character %s in attribute list
     (F) Something other than a colon or whitespace was seen between the
     elements of an attribute list.  If the previous attribute had a
     parenthesised parameter list, perhaps that list was terminated too
     soon.  See *Note Attributes: (pm.info)attributes,.

Invalid type in pack: '%s'
     (F) The given character is not a valid pack type.  See `pack', *Note
     Perlfunc: perlfunc,.  (W pack) The given character is not a valid
     pack type but used to be silently ignored.

Invalid type in unpack: '%s'
     (F) The given character is not a valid unpack type.  See `unpack',
     *Note Perlfunc: perlfunc,.  (W unpack) The given character is not a
     valid unpack type but used to be silently ignored.

ioctl is not implemented
     (F) Your machine apparently doesn't implement ioctl(), which is pretty
     strange for a machine that supports C.

junk on end of regexp
     (P) The regular expression parser is confused.

Label not found for "last %s"
     (F) You named a loop to break out of, but you're not currently in a
     loop of that name, not even if you count where you were called from.
     See `last', *Note Perlfunc: perlfunc,.

Label not found for "next %s"
     (F) You named a loop to continue, but you're not currently in a loop
     of that name, not even if you count where you were called from.  See
     `last', *Note Perlfunc: perlfunc,.

Label not found for "redo %s"
     (F) You named a loop to restart, but you're not currently in a loop of
     that name, not even if you count where you were called from.  See
     `last', *Note Perlfunc: perlfunc,.

leaving effective %s failed
     (F) While under the `use filetest' pragma, switching the real and
     effective uids or gids failed.

listen() on closed socket %s
     (W closed) You tried to do a listen on a closed socket.  Did you
     forget to check the return value of your socket() call?  See
     `listen', *Note Perlfunc: perlfunc,.

Lvalue subs returning %s not implemented yet
     (F) Due to limitations in the current implementation, array and hash
     values cannot be returned in subroutines used in lvalue context.  See
     `"Lvalue subroutines"', *Note Perlsub: perlsub,.

Method for operation %s not found in package %s during blessing
     (F) An attempt was made to specify an entry in an overloading table
     that doesn't resolve to a valid subroutine.  See *Note Overload:
     (pm.info)overload,.

Method %s not permitted
     See Server error.

Might be a runaway multi-line %s string starting on line %d
     (S) An advisory indicating that the previous error may have been
     caused by a missing delimiter on a string or pattern, because it
     eventually ended earlier on the current line.

Misplaced _ in number
     (W syntax) An underline in a decimal constant wasn't on a 3-digit
     boundary.

Missing $ on loop variable
     (F) Apparently you've been programming in *csh* too much.  Variables
     are always mentioned with the $ in Perl, unlike in the shells, where
     it can vary from one line to the next.

Missing %sbrace%s on \N{}
     (F) Wrong syntax of character name literal `\N{charname}' within
     double-quotish context.

Missing comma after first argument to %s function
     (F) While certain functions allow you to specify a filehandle or an
     "indirect object" before the argument list, this ain't one of them.

Missing command in piped open
     (W pipe) You used the `open(FH, "| command")' or `open(FH, "command
     |")' construction, but the command was missing or blank.

(Missing operator before %s?)
     (S) This is an educated guess made in conjunction with the message "%s
     found where operator expected".  Often the missing operator is a
     comma.

Missing right curly or square bracket
     (F) The lexer counted more opening curly or square brackets than
     closing ones.  As a general rule, you'll find it's missing near the
     place you were last editing.

Modification of a read-only value attempted
     (F) You tried, directly or indirectly, to change the value of a
     constant.  You didn't, of course, try "2 = 1", because the compiler
     catches that.  But an easy way to do the same thing is:

          sub mod { $_[0] = 1 }
          mod(2);

     Another way is to assign to a substr() that's off the end of the
     string.

Modification of non-creatable array value attempted, subscript %d
     (F) You tried to make an array value spring into existence, and the
     subscript was probably negative, even counting from end of the array
     backwards.

Modification of non-creatable hash value attempted, subscript "%s"
     (P) You tried to make a hash value spring into existence, and it
     couldn't be created for some peculiar reason.

Module name must be constant
     (F) Only a bare module name is allowed as the first argument to a
     "use".

msg%s not implemented
     (F) You don't have System V message IPC on your system.

Multidimensional syntax %s not supported
     (W syntax) Multidimensional arrays aren't written like `$foo[1,2,3]'.
     They're written like `$foo[1][2][3]', as in C.

Missing name in "my sub"
     (F) The reserved syntax for lexically scoped subroutines requires
     that they have a name with which they can be found.

Name "%s::%s" used only once: possible typo
     (W once) Typographical errors often show up as unique variable names.
     If you had a good reason for having a unique name, then just mention
     it again somehow to suppress the message.  The our declaration is
     provided for this purpose.

Negative length
     (F) You tried to do a read/write/send/recv operation with a buffer
     length that is less than 0.  This is difficult to imagine.

nested *?+ in regexp
     (F) You can't quantify a quantifier without intervening parentheses.
     So things like ** or +* or ?* are illegal.

     Note, however, that the minimal matching quantifiers, `*?', `+?', and
     `??' appear to be nested quantifiers, but aren't.  See *Note Perlre:
     perlre,.

No #! line
     (F) The setuid emulator requires that scripts have a well-formed #!
     line even on machines that don't support the #! construct.

No %s allowed while running setuid
     (F) Certain operations are deemed to be too insecure for a setuid or
     setgid script to even be allowed to attempt.  Generally speaking
     there will be another way to do what you want that is, if not secure,
     at least securable.  See *Note Perlsec: perlsec,.

No -e allowed in setuid scripts
     (F) A setuid script can't be specified by the user.

No %s specified for -%c
     (F) The indicated command line switch needs a mandatory argument, but
     you haven't specified one.

No comma allowed after %s
     (F) A list operator that has a filehandle or "indirect object" is not
     allowed to have a comma between that and the following arguments.
     Otherwise it'd be just another one of the arguments.

     One possible cause for this is that you expected to have imported a
     constant to your name space with use or import while no such
     importing took place, it may for example be that your operating system
     does not support that particular constant. Hopefully you did use an
     explicit import list for the constants you expect to see, please see
     `use', *Note Perlfunc: perlfunc, and `import', *Note Perlfunc:
     perlfunc,. While an explicit import list would probably have caught
     this error earlier it naturally does not remedy the fact that your
     operating system still does not support that constant. Maybe you have
     a typo in the constants of the symbol import list of use or import or
     in the constant name at the line where this error was triggered?

No command into which to pipe on command line
     (F) An error peculiar to VMS.  Perl handles its own command line
     redirection, and found a '|' at the end of the command line, so it
     doesn't know where you want to pipe the output from this command.

No DB::DB routine defined
     (F) The currently executing code was compiled with the -d switch, but
     for some reason the perl5db.pl file (or some facsimile thereof)
     didn't define a routine to be called at the beginning of each
     statement.  Which is odd, because the file should have been required
     automatically, and should have blown up the require if it didn't parse
     right.

No dbm on this machine
     (P) This is counted as an internal error, because every machine should
     supply dbm nowadays, because Perl comes with SDBM.  See *Note
     SDBM_File: (pm.info)SDBM_File,.

No DBsub routine
     (F) The currently executing code was compiled with the -d switch, but
     for some reason the perl5db.pl file (or some facsimile thereof)
     didn't define a DB::sub routine to be called at the beginning of each
     ordinary subroutine call.

No error file after 2> or 2>> on command line
     (F) An error peculiar to VMS.  Perl handles its own command line
     redirection, and found a '2>' or a '2>>' on the command line, but
     can't find the name of the file to which to write data destined for
     stderr.

No input file after < on command line
     (F) An error peculiar to VMS.  Perl handles its own command line
     redirection, and found a '<' on the command line, but can't find the
     name of the file from which to read data for stdin.

No output file after > on command line
     (F) An error peculiar to VMS.  Perl handles its own command line
     redirection, and found a lone '>' at the end of the command line, so
     it doesn't know where you wanted to redirect stdout.

No output file after > or >> on command line
     (F) An error peculiar to VMS.  Perl handles its own command line
     redirection, and found a '>' or a '>>' on the command line, but can't
     find the name of the file to which to write data destined for stdout.

No package name allowed for variable %s in "our"
     (F) Fully qualified variable names are not allowed in "our"
     declarations, because that doesn't make much sense under existing
     semantics.  Such syntax is reserved for future extensions.

No Perl script found in input
     (F) You called `perl -x', but no line was found in the file beginning
     with #! and containing the word "perl".

No setregid available
     (F) Configure didn't find anything resembling the setregid() call for
     your system.

No setreuid available
     (F) Configure didn't find anything resembling the setreuid() call for
     your system.

No space allowed after -%c
     (F) The argument to the indicated command line switch must follow
     immediately after the switch, without intervening spaces.

No such pseudo-hash field "%s"
     (F) You tried to access an array as a hash, but the field name used is
     not defined.  The hash at index 0 should map all valid field names to
     array indices for that to work.

No such pseudo-hash field "%s" in variable %s of type %s
     (F) You tried to access a field of a typed variable where the type
     does not know about the field name.  The field names are looked up in
     the %FIELDS hash in the type package at compile time.  The %FIELDS
     hash is usually set up with the 'fields' pragma.

No such pipe open
     (P) An error peculiar to VMS.  The internal routine my_pclose() tried
     to close a pipe which hadn't been opened.  This should have been
     caught earlier as an attempt to close an unopened filehandle.

No such signal: SIG%s
     (W signal) You specified a signal name as a subscript to %SIG that
     was not recognized.  Say `kill -l' in your shell to see the valid
     signal names on your system.

no UTC offset information; assuming local time is UTC
     (S) A warning peculiar to VMS.  Perl was unable to find the local
     timezone offset, so it's assuming that local system time is equivalent
     to UTC.  If it's not, define the logical name
     `SYS$TIMEZONE_DIFFERENTIAL' to translate to the number of seconds
     which need to be added to UTC to get local time.

Not a CODE reference
     (F) Perl was trying to evaluate a reference to a code value (that is,
     a subroutine), but found a reference to something else instead.  You
     can use the ref() function to find out what kind of ref it really was.
     See also *Note Perlref: perlref,.

Not a format reference
     (F) I'm not sure how you managed to generate a reference to an
     anonymous format, but this indicates you did, and that it didn't
     exist.

Not a GLOB reference
     (F) Perl was trying to evaluate a reference to a "typeglob" (that is,
     a symbol table entry that looks like `*foo'), but found a reference to
     something else instead.  You can use the ref() function to find out
     what kind of ref it really was.  See *Note Perlref: perlref,.

Not a HASH reference
     (F) Perl was trying to evaluate a reference to a hash value, but
     found a reference to something else instead.  You can use the ref()
     function to find out what kind of ref it really was.  See *Note
     Perlref: perlref,.

Not a perl script
     (F) The setuid emulator requires that scripts have a well-formed #!
     line even on machines that don't support the #! construct.  The line
     must mention perl.

Not a SCALAR reference
     (F) Perl was trying to evaluate a reference to a scalar value, but
     found a reference to something else instead.  You can use the ref()
     function to find out what kind of ref it really was.  See *Note
     Perlref: perlref,.

Not a subroutine reference
     (F) Perl was trying to evaluate a reference to a code value (that is,
     a subroutine), but found a reference to something else instead.  You
     can use the ref() function to find out what kind of ref it really was.
     See also *Note Perlref: perlref,.

Not a subroutine reference in overload table
     (F) An attempt was made to specify an entry in an overloading table
     that doesn't somehow point to a valid subroutine.  See *Note
     Overload: (pm.info)overload,.

Not an ARRAY reference
     (F) Perl was trying to evaluate a reference to an array value, but
     found a reference to something else instead.  You can use the ref()
     function to find out what kind of ref it really was.  See *Note
     Perlref: perlref,.

Not enough arguments for %s
     (F) The function requires more arguments than you specified.

Not enough format arguments
     (W syntax) A format specified more picture fields than the next line
     supplied.  See *Note Perlform: perlform,.

Null filename used
     (F) You can't require the null filename, especially because on many
     machines that means the current directory!  See `require', *Note
     Perlfunc: perlfunc,.

Null picture in formline
     (F) The first argument to formline must be a valid format picture
     specification.  It was found to be empty, which probably means you
     supplied it an uninitialized value.  See *Note Perlform: perlform,.

NULL OP IN RUN
     (P debugging) Some internal routine called run() with a null opcode
     pointer.

Null realloc
     (P) An attempt was made to realloc NULL.

NULL regexp argument
     (P) The internal pattern matching routines blew it big time.

NULL regexp parameter
     (P) The internal pattern matching routines are out of their gourd.

Number too long
     (F) Perl limits the representation of decimal numbers in programs to
     about about 250 characters.  You've exceeded that length.  Future
     versions of Perl are likely to eliminate this arbitrary limitation.
     In the meantime, try using scientific notation (e.g. "1e6" instead of
     "1_000_000").

Octal number > 037777777777 non-portable
     (W portable) The octal number you specified is larger than 2**32-1
     (4294967295) and therefore non-portable between systems.  See *Note
     Perlport: perlport, for more on portability concerns.

     See also *Note Perlport: perlport, for writing portable code.

Octal number in vector unsupported
     (F) Numbers with a leading 0 are not currently allowed in vectors.
     The octal number interpretation of such numbers may be supported in a
     future version.

Odd number of elements in hash assignment
     (W misc) You specified an odd number of elements to initialize a
     hash, which is odd, because hashes come in key/value pairs.

Offset outside string
     (F) You tried to do a read/write/send/recv operation with an offset
     pointing outside the buffer.  This is difficult to imagine.  The sole
     exception to this is that `sysread()'ing past the buffer will extend
     the buffer and zero pad the new area.

oops: oopsAV
     (S internal) An internal warning that the grammar is screwed up.

oops: oopsHV
     (S internal) An internal warning that the grammar is screwed up.

Operation `%s': no method found, %s
     (F) An attempt was made to perform an overloaded operation for which
     no handler was defined.  While some handlers can be autogenerated in
     terms of other handlers, there is no default handler for any
     operation, unless `fallback' overloading key is specified to be true.
     See *Note Overload: (pm.info)overload,.

Operator or semicolon missing before %s
     (S ambiguous) You used a variable or subroutine call where the parser
     was expecting an operator.  The parser has assumed you really meant
     to use an operator, but this is highly likely to be incorrect.  For
     example, if you say "*foo *foo" it will be interpreted as if you said
     "*foo * 'foo'".

Out of memory!
     (X) The malloc() function returned 0, indicating there was
     insufficient remaining memory (or virtual memory) to satisfy the
     request.  Perl has no option but to exit immediately.

Out of memory for yacc stack
     (F) The yacc parser wanted to grow its stack so it could continue
     parsing, but realloc() wouldn't give it more memory, virtual or
     otherwise.

Out of memory during request for %s
     (X|F) The malloc() function returned 0, indicating there was
     insufficient remaining memory (or virtual memory) to satisfy the
     request.

     The request was judged to be small, so the possibility to trap it
     depends on the way perl was compiled.  By default it is not trappable.
     However, if compiled for this, Perl may use the contents of $^M as an
     emergency pool after die()ing with this message.  In this case the
     error is trappable *once*.

Out of memory during "large" request for %s
     (F) The malloc() function returned 0, indicating there was
     insufficient remaining memory (or virtual memory) to satisfy the
     request. However, the request was judged large enough (compile-time
     default is 64K), so a possibility to shut down by trapping this error
     is granted.

Out of memory during ridiculously large request
     (F) You can't allocate more than 2^31+"small amount" bytes.  This
     error is most likely to be caused by a typo in the Perl program.
     e.g., `$arr[time]' instead of `$arr[$time]'.

page overflow
     (W io) A single call to write() produced more lines than can fit on a
     page.  See *Note Perlform: perlform,.

panic: ck_grep
     (P) Failed an internal consistency check trying to compile a grep.

panic: ck_split
     (P) Failed an internal consistency check trying to compile a split.

panic: corrupt saved stack index
     (P) The savestack was requested to restore more localized values than
     there are in the savestack.

panic: del_backref
     (P) Failed an internal consistency check while trying to reset a weak
     reference.

panic: die %s
     (P) We popped the context stack to an eval context, and then
     discovered it wasn't an eval context.

panic: do_match
     (P) The internal pp_match() routine was called with invalid
     operational data.

panic: do_split
     (P) Something terrible went wrong in setting up for the split.

panic: do_subst
     (P) The internal pp_subst() routine was called with invalid
     operational data.

panic: do_trans
     (P) The internal do_trans() routine was called with invalid
     operational data.

panic: frexp
     (P) The library function frexp() failed, making printf("%f")
     impossible.

panic: goto
     (P) We popped the context stack to a context with the specified label,
     and then discovered it wasn't a context we know how to do a goto in.

panic: INTERPCASEMOD
     (P) The lexer got into a bad state at a case modifier.

panic: INTERPCONCAT
     (P) The lexer got into a bad state parsing a string with brackets.

panic: kid popen errno read
     (F) forked child returned an incomprehensible message about its errno.

panic: last
     (P) We popped the context stack to a block context, and then
     discovered it wasn't a block context.

panic: leave_scope clearsv
     (P) A writable lexical variable became read-only somehow within the
     scope.

panic: leave_scope inconsistency
     (P) The savestack probably got out of sync.  At least, there was an
     invalid enum on the top of it.

panic: malloc
     (P) Something requested a negative number of bytes of malloc.

panic: magic_killbackrefs
     (P) Failed an internal consistency check while trying to reset all
     weak references to an object.

panic: mapstart
     (P) The compiler is screwed up with respect to the map() function.

panic: null array
     (P) One of the internal array routines was passed a null AV pointer.

panic: pad_alloc
     (P) The compiler got confused about which scratch pad it was
     allocating and freeing temporaries and lexicals from.

panic: pad_free curpad
     (P) The compiler got confused about which scratch pad it was
     allocating and freeing temporaries and lexicals from.

panic: pad_free po
     (P) An invalid scratch pad offset was detected internally.

panic: pad_reset curpad
     (P) The compiler got confused about which scratch pad it was
     allocating and freeing temporaries and lexicals from.

panic: pad_sv po
     (P) An invalid scratch pad offset was detected internally.

panic: pad_swipe curpad
     (P) The compiler got confused about which scratch pad it was
     allocating and freeing temporaries and lexicals from.

panic: pad_swipe po
     (P) An invalid scratch pad offset was detected internally.

panic: pp_iter
     (P) The foreach iterator got called in a non-loop context frame.

panic: realloc
     (P) Something requested a negative number of bytes of realloc.

panic: restartop
     (P) Some internal routine requested a goto (or something like it), and
     didn't supply the destination.

panic: return
     (P) We popped the context stack to a subroutine or eval context, and
     then discovered it wasn't a subroutine or eval context.

panic: scan_num
     (P) scan_num() got called on something that wasn't a number.

panic: sv_insert
     (P) The sv_insert() routine was told to remove more string than there
     was string.

panic: top_env
     (P) The compiler attempted to do a goto, or something weird like that.

panic: yylex
     (P) The lexer got into a bad state while processing a case modifier.

panic: %s
     (P) An internal error.

Parentheses missing around "%s" list
     (W parenthesis) You said something like

          my $foo, $bar = @_;

     when you meant

          my ($foo, $bar) = @_;

     Remember that "my", "our", and "local" bind tighter than comma.

Perl %3.3f required-this is only version %s, stopped
     (F) The module in question uses features of a version of Perl more
     recent than the currently running version.  How long has it been
     since you upgraded, anyway?  See `require', *Note Perlfunc: perlfunc,.

Permission denied
     (F) The setuid emulator in suidperl decided you were up to no good.

pid %x not a child
     (W exec) A warning peculiar to VMS.  Waitpid() was asked to wait for
     a process which isn't a subprocess of the current process.  While
     this is fine from VMS' perspective, it's probably not what you
     intended.

POSIX getpgrp can't take an argument
     (F) Your system has POSIX getpgrp(), which takes no argument, unlike
     the BSD version, which takes a pid.

Possible Y2K bug: %s
     (W y2k) You are concatenating the number 19 with another number, which
     could be a potential Year 2000 problem.

Possible attempt to put comments in qw() list
     (W qw) qw() lists contain items separated by whitespace; as with
     literal strings, comment characters are not ignored, but are instead
     treated as literal data.  (You may have used different delimiters
     than the parentheses shown here; braces are also frequently used.)

     You probably wrote something like this:

          @list = qw(
          	a # a comment
              b # another comment
          );

     when you should have written this:

          @list = qw(
          	a
              b
          );

     If you really want comments, build your list the old-fashioned way,
     with quotes and commas:

          @list = (
              'a',    # a comment
              'b',    # another comment
          );

Possible attempt to separate words with commas
     (W qw) qw() lists contain items separated by whitespace; therefore
     commas aren't needed to separate the items.  (You may have used
     different delimiters than the parentheses shown here; braces are also
     frequently used.)

     You probably wrote something like this:

          qw! a, b, c !;

     which puts literal commas into some of the list items.  Write it
     without commas if you don't want them to appear in your data:

          qw! a b c !;

Possible memory corruption: %s overflowed 3rd argument
     (F) An ioctl() or fcntl() returned more than Perl was bargaining for.
     Perl guesses a reasonable buffer size, but puts a sentinel byte at the
     end of the buffer just in case.  This sentinel byte got clobbered, and
     Perl assumes that memory is now corrupted.  See `ioctl', *Note
     Perlfunc: perlfunc,.

pragma "attrs" is deprecated, use "sub NAME : ATTRS" instead
     (W deprecated) You have written somehing like this:

          sub doit
          {
              use attrs qw(locked);
          }

     You should use the new declaration syntax instead.

          sub doit : locked
          {
              ...

     The `use attrs' pragma is now obsolete, and is only provided for
     backward-compatibility. See `"Subroutine Attributes"', *Note Perlsub:
     perlsub,.

Precedence problem: open %s should be open(%s)
     (S precedence) The old irregular construct

          open FOO || die;

     is now misinterpreted as

          open(FOO || die);

     because of the strict regularization of Perl 5's grammar into unary
     and list operators.  (The old open was a little of both.)  You must
     put parentheses around the filehandle, or use the new "or" operator
     instead of "||".

Premature end of script headers
     See Server error.

print() on closed filehandle %s
     (W closed) The filehandle you're printing on got itself closed
     sometime before now.  Check your logic flow.

printf() on closed filehandle %s
     (W closed) The filehandle you're writing to got itself closed
     sometime before now.  Check your logic flow.

Prototype mismatch: %s vs %s
     (S unsafe) The subroutine being declared or defined had previously
     been declared or defined with a different function prototype.

Range iterator outside integer range
     (F) One (or both) of the numeric arguments to the range operator ".."
     are outside the range which can be represented by integers internally.
     One possible workaround is to force Perl to use magical string
     increment by prepending "0" to your numbers.

readline() on closed filehandle %s
     (W closed) The filehandle you're reading from got itself closed
     sometime before now.  Check your logic flow.

realloc() of freed memory ignored
     (S malloc) An internal routine called realloc() on something that had
     already been freed.

Reallocation too large: %lx
     (F) You can't allocate more than 64K on an MS-DOS machine.

Recompile perl with -DDEBUGGING to use -D switch
     (F debugging) You can't use the -D option unless the code to produce
     the desired output is compiled into Perl, which entails some overhead,
     which is why it's currently left out of your copy.

Recursive inheritance detected in package '%s'
     (F) More than 100 levels of inheritance were used.  Probably indicates
     an unintended loop in your inheritance hierarchy.

Recursive inheritance detected while looking for method '%s' in package '%s'
     (F) More than 100 levels of inheritance were encountered while
     invoking a method.  Probably indicates an unintended loop in your
     inheritance hierarchy.

Reference found where even-sized list expected
     (W misc) You gave a single reference where Perl was expecting a list
     with an even number of elements (for assignment to a hash). This
     usually means that you used the anon hash constructor when you meant
     to use parens. In any case, a hash requires key/value *pairs*.

          %hash = { one => 1, two => 2, };	# WRONG
          %hash = [ qw/ an anon array / ];	# WRONG
          %hash = ( one => 1, two => 2, );	# right
          %hash = qw( one 1 two 2 );			# also fine

Reference is already weak
     (W misc) You have attempted to weaken a reference that is already
     weak.  Doing so has no effect.

Reference miscount in sv_replace()
     (W internal) The internal sv_replace() function was handed a new SV
     with a reference count of other than 1.

regexp *+ operand could be empty
     (F) The part of the regexp subject to either the * or + quantifier
     could match an empty string.

regexp memory corruption
     (P) The regular expression engine got confused by what the regular
     expression compiler gave it.

regexp out of space
     (P) A "can't happen" error, because safemalloc() should have caught
     it earlier.

Repeat count in pack overflows
     (F) You can't specify a repeat count so large that it overflows your
     signed integers.  See `pack', *Note Perlfunc: perlfunc,.

Repeat count in unpack overflows
     (F) You can't specify a repeat count so large that it overflows your
     signed integers.  See `unpack', *Note Perlfunc: perlfunc,.

Reversed %s= operator
     (W syntax) You wrote your assignment operator backwards.  The = must
     always comes last, to avoid ambiguity with subsequent unary operators.

Runaway format
     (F) Your format contained the ~~ repeat-until-blank sequence, but it
     produced 200 lines at once, and the 200th line looked exactly like the
     199th line.  Apparently you didn't arrange for the arguments to
     exhaust themselves, either by using ^ instead of @ (for scalar
     variables), or by shifting or popping (for array variables).  See
     *Note Perlform: perlform,.

Scalar value @%s[%s] better written as $%s[%s]
     (W syntax) You've used an array slice (indicated by @) to select a
     single element of an array.  Generally it's better to ask for a
     scalar value (indicated by $).  The difference is that `$foo[&bar]'
     always behaves like a scalar, both when assigning to it and when
     evaluating its argument, while `@foo[&bar]' behaves like a list when
     you assign to it, and provides a list context to its subscript, which
     can do weird things if you're expecting only one subscript.

     On the other hand, if you were actually hoping to treat the array
     element as a list, you need to look into how references work, because
     Perl will not magically convert between scalars and lists for you.
     See *Note Perlref: perlref,.

Scalar value @%s{%s} better written as $%s{%s}
     (W syntax) You've used a hash slice (indicated by @) to select a
     single element of a hash.  Generally it's better to ask for a scalar
     value (indicated by $).  The difference is that `$foo{&bar}' always
     behaves like a scalar, both when assigning to it and when evaluating
     its argument, while `@foo{&bar}' behaves like a list when you assign
     to it, and provides a list context to its subscript, which can do
     weird things if you're expecting only one subscript.

     On the other hand, if you were actually hoping to treat the hash
     element as a list, you need to look into how references work, because
     Perl will not magically convert between scalars and lists for you.
     See *Note Perlref: perlref,.

Script is not setuid/setgid in suidperl
     (F) Oddly, the suidperl program was invoked on a script without a
     setuid or setgid bit set.  This doesn't make much sense.

Search pattern not terminated
     (F) The lexer couldn't find the final delimiter of a // or m{}
     construct.  Remember that bracketing delimiters count nesting level.
     Missing the leading `$' from a variable $m may cause this error.

%sseek() on unopened file
     (W unopened) You tried to use the seek() or sysseek() function on a
     filehandle that was either never opened or has since been closed.

select not implemented
     (F) This machine doesn't implement the select() system call.

sem%s not implemented
     (F) You don't have System V semaphore IPC on your system.

semi-panic: attempt to dup freed string
     (S internal) The internal newSVsv() routine was called to duplicate a
     scalar that had previously been marked as free.

Semicolon seems to be missing
     (W semicolon) A nearby syntax error was probably caused by a missing
     semicolon, or possibly some other missing operator, such as a comma.

send() on closed socket %s
     (W closed) The socket you're sending to got itself closed sometime
     before now.  Check your logic flow.

Sequence (? incomplete
     (F) A regular expression ended with an incomplete extension (?.  See
     *Note Perlre: perlre,.

Sequence (?#... not terminated
     (F) A regular expression comment must be terminated by a closing
     parenthesis.  Embedded parentheses aren't allowed.  See *Note Perlre:
     perlre,.

Sequence (?%s...) not implemented
     (F) A proposed regular expression extension has the character reserved
     but has not yet been written.  See *Note Perlre: perlre,.

Sequence (?%s...) not recognized
     (F) You used a regular expression extension that doesn't make sense.
     See *Note Perlre: perlre,.

Server error
     This is the error message generally seen in a browser window when
     trying to run a CGI program (including SSI) over the web. The actual
     error text varies widely from server to server. The most
     frequently-seen variants are "500 Server error", "Method (something)
     not permitted", "Document contains no data", "Premature end of script
     headers", and "Did not produce a valid header".

     *This is a CGI error, not a Perl error*.

     You need to make sure your script is executable, is accessible by the
     user CGI is running the script under (which is probably not the user
     account you tested it under), does not rely on any environment
     variables (like PATH) from the user it isn't running under, and isn't
     in a location where the CGI server can't find it, basically, more or
     less.  Please see the following for more information:

          http://www.perl.com/CPAN/doc/FAQs/cgi/idiots-guide.html
          http://www.perl.com/CPAN/doc/FAQs/cgi/perl-cgi-faq.html
          ftp://rtfm.mit.edu/pub/usenet/news.answers/www/cgi-faq
          http://hoohoo.ncsa.uiuc.edu/cgi/interface.html
          http://www-genome.wi.mit.edu/WWW/faqs/www-security-faq.html

     You should also look at *Note Perlfaq9: perlfaq9,.

setegid() not implemented
     (F) You tried to assign to $), and your operating system doesn't
     support the setegid() system call (or equivalent), or at least
     Configure didn't think so.

seteuid() not implemented
     (F) You tried to assign to `< $' >>, and your operating system
     doesn't support the seteuid() system call (or equivalent), or at
     least Configure didn't think so.

setpgrp can't take arguments
     (F) Your system has the setpgrp() from BSD 4.2, which takes no
     arguments, unlike POSIX setpgid(), which takes a process ID and
     process group ID.

setrgid() not implemented
     (F) You tried to assign to $(, and your operating system doesn't
     support the setrgid() system call (or equivalent), or at least
     Configure didn't think so.

setruid() not implemented
     (F) You tried to assign to $<, and your operating system doesn't
     support the setruid() system call (or equivalent), or at least
     Configure didn't think so.

Setuid/gid script is writable by world
     (F) The setuid emulator won't run a script that is writable by the
     world, because the world might have written on it already.

shm%s not implemented
     (F) You don't have System V shared memory IPC on your system.

shutdown() on closed socket %s
     (W closed) You tried to do a shutdown on a closed socket.  Seems a
     bit superfluous.

SIG%s handler "%s" not defined
     (W signal) The signal handler named in %SIG doesn't, in fact, exist.
     Perhaps you put it into the wrong package?

sort is now a reserved word
     (F) An ancient error message that almost nobody ever runs into
     anymore.  But before sort was a keyword, people sometimes used it as
     a filehandle.

Sort subroutine didn't return a numeric value
     (F) A sort comparison routine must return a number.  You probably blew
     it by not using `< <=' >> or cmp, or by not using them correctly.
     See `sort', *Note Perlfunc: perlfunc,.

Sort subroutine didn't return single value
     (F) A sort comparison subroutine may not return a list value with more
     or less than one element.  See `sort', *Note Perlfunc: perlfunc,.

Split loop
     (P) The split was looping infinitely.  (Obviously, a split shouldn't
     iterate more times than there are characters of input, which is what
     happened.)  See `split', *Note Perlfunc: perlfunc,.

Stat on unopened file <%s>
     (W unopened) You tried to use the stat() function (or an equivalent
     file test) on a filehandle that was either never opened or has since
     been closed.

Statement unlikely to be reached
     (W exec) You did an exec() with some statement after it other than a
     die().  This is almost always an error, because exec() never returns
     unless there was a failure.  You probably wanted to use system()
     instead, which does return.  To suppress this warning, put the exec()
     in a block by itself.

Strange *+?{} on zero-length expression
     (W regexp) You applied a regular expression quantifier in a place
     where it makes no sense, such as on a zero-width assertion.  Try
     putting the quantifier inside the assertion instead.  For example,
     the way to match "abc" provided that it is followed by three
     repetitions of "xyz" is `/abc(?=(?:xyz){3})/', not `/abc(?=xyz){3}/'.

Stub found while resolving method `%s' overloading `%s' in package `%s'
     (P) Overloading resolution over @ISA tree may be broken by
     importation stubs.  Stubs should never be implicitely created, but
     explicit calls to can may break this.

Subroutine %s redefined
     (W redefine) You redefined a subroutine.  To suppress this warning,
     say

          {
          	no warnings;
          	eval "sub name { ... }";
          }

Substitution loop
     (P) The substitution was looping infinitely.  (Obviously, a
     substitution shouldn't iterate more times than there are characters of
     input, which is what happened.)  See the discussion of substitution in
     `"Quote and Quote-like Operators"', *Note Perlop: perlop,.

Substitution pattern not terminated
     (F) The lexer couldn't find the interior delimiter of a s/// or s{}{}
     construct.  Remember that bracketing delimiters count nesting level.
     Missing the leading `$' from variable $s may cause this error.

Substitution replacement not terminated
     (F) The lexer couldn't find the final delimiter of a s/// or s{}{}
     construct.  Remember that bracketing delimiters count nesting level.
     Missing the leading `$' from variable $s may cause this error.

substr outside of string
     (W substr),(F) You tried to reference a substr() that pointed outside
     of a string.  That is, the absolute value of the offset was larger
     than the length of the string.  See `substr', *Note Perlfunc:
     perlfunc,.  This warning is fatal if substr is used in an lvalue
     context (as the left hand side of an assignment or as a subroutine
     argument for example).

suidperl is no longer needed since %s
     (F) Your Perl was compiled with -DSETUID_SCRIPTS_ARE_SECURE_NOW, but a
     version of the setuid emulator somehow got run anyway.

switching effective %s is not implemented
     (F) While under the `use filetest' pragma, we cannot switch the real
     and effective uids or gids.

syntax error
     (F) Probably means you had a syntax error.  Common reasons include:

          A keyword is misspelled.
          A semicolon is missing.
          A comma is missing.
          An opening or closing parenthesis is missing.
          An opening or closing brace is missing.
          A closing quote is missing.

     Often there will be another error message associated with the syntax
     error giving more information.  (Sometimes it helps to turn on -w.)
     The error message itself often tells you where it was in the line when
     it decided to give up.  Sometimes the actual error is several tokens
     before this, because Perl is good at understanding random input.
     Occasionally the line number may be misleading, and once in a blue
     moon the only way to figure out what's triggering the error is to call
     `perl -c' repeatedly, chopping away half the program each time to see
     if the error went away.  Sort of the cybernetic version of
     20 questions.

syntax error at line %d: `%s' unexpected
     (A) You've accidentally run your script through the Bourne shell
     instead of Perl.  Check the #! line, or manually feed your script
     into Perl yourself.

System V %s is not implemented on this machine
     (F) You tried to do something with a function beginning with "sem",
     "shm", or "msg" but that System V IPC is not implemented in your
     machine.  In some machines the functionality can exist but be
     unconfigured.  Consult your system support.

syswrite() on closed filehandle %s
     (W closed) The filehandle you're writing to got itself closed
     sometime before now.  Check your logic flow.

Target of goto is too deeply nested
     (F) You tried to use goto to reach a label that was too deeply nested
     for Perl to reach.  Perl is doing you a favor by refusing.

tell() on unopened file
     (W unopened) You tried to use the tell() function on a filehandle
     that was either never opened or has since been closed.

Test on unopened file <%s>
     (W unopened) You tried to invoke a file test operator on a filehandle
     that isn't open.  Check your logic.  See also `-X', *Note Perlfunc:
     perlfunc,.

That use of $[ is unsupported
     (F) Assignment to $[ is now strictly circumscribed, and interpreted as
     a compiler directive.  You may say only one of

          $[ = 0;
          $[ = 1;
          ...
          local $[ = 0;
          local $[ = 1;
          ...

     This is to prevent the problem of one module changing the array base
     out from under another module inadvertently.  See `$[', *Note
     Perlvar: perlvar,.

The %s function is unimplemented
     The function indicated isn't implemented on this architecture,
     according to the probings of Configure.

The crypt() function is unimplemented due to excessive paranoia
     (F) Configure couldn't find the crypt() function on your machine,
     probably because your vendor didn't supply it, probably because they
     think the U.S. Government thinks it's a secret, or at least that they
     will continue to pretend that it is.  And if you quote me on that, I
     will deny it.

The stat preceding `-l _' wasn't an lstat
     (F) It makes no sense to test the current stat buffer for symbolic
     linkhood if the last stat that wrote to the stat buffer already went
     past the symlink to get to the real file.  Use an actual filename
     instead.

This Perl can't reset CRTL environ elements (%s)
This Perl can't set CRTL environ elements (%s=%s)
     (W internal) Warnings peculiar to VMS.  You tried to change or delete
     an element of the CRTL's internal environ array, but your copy of
     Perl wasn't built with a CRTL that contained the setenv() function.
     You'll need to rebuild Perl with a CRTL that does, or redefine
     `PERL_ENV_TABLES' (see *Note Perlvms: perlvms,) so that the environ
     array isn't the target of the change to %ENV which produced the
     warning.

times not implemented
     (F) Your version of the C library apparently doesn't do times().  I
     suspect you're not running on Unix.

Too few args to syscall
     (F) There has to be at least one argument to syscall() to specify the
     system call to call, silly dilly.

Too late for "-T" option
     (X) The #! line (or local equivalent) in a Perl script contains the
     -T option, but Perl was not invoked with -T in its command line.
     This is an error because, by the time Perl discovers a -T in a
     script, it's too late to properly taint everything from the
     environment.  So Perl gives up.

     If the Perl script is being executed as a command using the #!
     mechanism (or its local equivalent), this error can usually be fixed
     by editing the #! line so that the -T option is a part of Perl's
     first argument: e.g. change `perl -n -T' to `perl -T -n'.

     If the Perl script is being executed as `perl scriptname', then the
     -T option must appear on the command line: `perl -T scriptname'.

Too late for "-%s" option
     (X) The #! line (or local equivalent) in a Perl script contains the
     -M or -m option.  This is an error because -M and -m options are not
     intended for use inside scripts.  Use the use pragma instead.

Too late to run %s block
     (W void) A CHECK or INIT block is being defined during run time
     proper, when the opportunity to run them has already passed.  Perhaps
     you are loading a file with require or do when you should be using
     use instead.  Or perhaps you should put the require or do inside a
     BEGIN block.

Too many ('s
Too many )'s
     (A) You've accidentally run your script through *csh* instead of
     Perl.  Check the #! line, or manually feed your script into Perl
     yourself.

Too many args to syscall
     (F) Perl supports a maximum of only 14 args to syscall().

Too many arguments for %s
     (F) The function requires fewer arguments than you specified.

trailing \ in regexp
     (F) The regular expression ends with an unbackslashed backslash.
     Backslash it.   See *Note Perlre: perlre,.

Transliteration pattern not terminated
     (F) The lexer couldn't find the interior delimiter of a tr/// or
     tr[][] or y/// or y[][] construct.  Missing the leading `$' from
     variables `$tr' or `$y' may cause this error.

Transliteration replacement not terminated
     (F) The lexer couldn't find the final delimiter of a tr/// or tr[][]
     construct.

truncate not implemented
     (F) Your machine doesn't implement a file truncation mechanism that
     Configure knows about.

Type of arg %d to %s must be %s (not %s)
     (F) This function requires the argument in that position to be of a
     certain type.  Arrays must be @NAME or `@{EXPR}'.  Hashes must be
     %NAME or `%{EXPR}'.  No implicit dereferencing is allowed-use the
     {EXPR} forms as an explicit dereference.  See *Note Perlref: perlref,.

umask: argument is missing initial 0
     (W umask) A umask of 222 is incorrect.  It should be 0222, because
     octal literals always start with 0 in Perl, as in C.

umask not implemented
     (F) Your machine doesn't implement the umask function and you tried
     to use it to restrict permissions for yourself (EXPR & 0700).

Unable to create sub named "%s"
     (F) You attempted to create or access a subroutine with an illegal
     name.

Unbalanced context: %d more PUSHes than POPs
     (W internal) The exit code detected an internal inconsistency in how
     many execution contexts were entered and left.

Unbalanced saves: %d more saves than restores
     (W internal) The exit code detected an internal inconsistency in how
     many values were temporarily localized.

Unbalanced scopes: %d more ENTERs than LEAVEs
     (W internal) The exit code detected an internal inconsistency in how
     many blocks were entered and left.

Unbalanced tmps: %d more allocs than frees
     (W internal) The exit code detected an internal inconsistency in how
     many mortal scalars were allocated and freed.

Undefined format "%s" called
     (F) The format indicated doesn't seem to exist.  Perhaps it's really
     in another package?  See *Note Perlform: perlform,.

Undefined sort subroutine "%s" called
     (F) The sort comparison routine specified doesn't seem to exist.
     Perhaps it's in a different package?  See `sort', *Note Perlfunc:
     perlfunc,.

Undefined subroutine &%s called
     (F) The subroutine indicated hasn't been defined, or if it was, it
     has since been undefined.

Undefined subroutine called
     (F) The anonymous subroutine you're trying to call hasn't been
     defined, or if it was, it has since been undefined.

Undefined subroutine in sort
     (F) The sort comparison routine specified is declared but doesn't
     seem to have been defined yet.  See `sort', *Note Perlfunc: perlfunc,.

Undefined top format "%s" called
     (F) The format indicated doesn't seem to exist.  Perhaps it's really
     in another package?  See *Note Perlform: perlform,.

Undefined value assigned to typeglob
     (W misc) An undefined value was assigned to a typeglob, a la `*foo =
     undef'.  This does nothing.  It's possible that you really mean
     `undef *foo'.

unexec of %s into %s failed!
     (F) The unexec() routine failed for some reason.  See your local FSF
     representative, who probably put it there in the first place.

Unknown BYTEORDER
     (F) There are no byte-swapping functions for a machine with this byte
     order.

Unknown open() mode '%s'
     (F) The second argument of 3-argument open() is not among the list of
     valid modes: `< < '>, `< ' >>, `<< '> >>>, `< +< '>, `< +' >>, `<<
     +'> >>>, `-|', `|-'.

Unknown process %x sent message to prime_env_iter: %s
     (P) An error peculiar to VMS.  Perl was reading values for %ENV before
     iterating over it, and someone else stuck a message in the stream of
     data Perl expected.  Someone's very confused, or perhaps trying to
     subvert Perl's population of %ENV for nefarious purposes.

unmatched () in regexp
     (F) Unbackslashed parentheses must always be balanced in regular
     expressions.  If you're a vi user, the % key is valuable for finding
     the matching parenthesis.  See *Note Perlre: perlre,.

Unmatched right %s bracket
     (F) The lexer counted more closing curly or square brackets than
     opening ones, so you're probably missing a matching opening bracket.
     As a general rule, you'll find the missing one (so to speak) near the
     place you were last editing.

unmatched [] in regexp
     (F) The brackets around a character class must match.  If you wish to
     include a closing bracket in a character class, backslash it or put
     it first.  See *Note Perlre: perlre,.

Unquoted string "%s" may clash with future reserved word
     (W reserved) You used a bareword that might someday be claimed as a
     reserved word.  It's best to put such a word in quotes, or capitalize
     it somehow, or insert an underbar into it.  You might also declare it
     as a subroutine.

Unrecognized character %s
     (F) The Perl parser has no idea what to do with the specified
     character in your Perl script (or eval).  Perhaps you tried to run a
     compressed script, a binary program, or a directory as a Perl program.

Unrecognized escape \\%c passed through
     (W misc) You used a backslash-character combination which is not
     recognized by Perl.

Unrecognized signal name "%s"
     (F) You specified a signal name to the kill() function that was not
     recognized.  Say `kill -l' in your shell to see the valid signal
     names on your system.

Unrecognized switch: -%s  (-h will show valid options)
     (F) You specified an illegal option to Perl.  Don't do that.  (If you
     think you didn't do that, check the #! line to see if it's supplying
     the bad switch on your behalf.)

Unsuccessful %s on filename containing newline
     (W newline) A file operation was attempted on a filename, and that
     operation failed, PROBABLY because the filename contained a newline,
     PROBABLY because you forgot to chop() or chomp() it off.  See
     `chomp', *Note Perlfunc: perlfunc,.

Unsupported directory function "%s" called
     (F) Your machine doesn't support opendir() and readdir().

Unsupported function fork
     (F) Your version of executable does not support forking.

     Note that under some systems, like OS/2, there may be different
     flavors of Perl executables, some of which may support fork, some
     not. Try changing the name you call Perl by to `perl_', `perl__', and
     so on.

Unsupported function %s
     (F) This machine doesn't implement the indicated function, apparently.
     At least, Configure doesn't think so.

Unsupported socket function "%s" called
     (F) Your machine doesn't support the Berkeley socket mechanism, or at
     least that's what Configure thought.

Unterminated <> operator
     (F) The lexer saw a left angle bracket in a place where it was
     expecting a term, so it's looking for the corresponding right angle
     bracket, and not finding it.  Chances are you left some needed
     parentheses out earlier in the line, and you really meant a "less
     than".

Unterminated attribute parameter in attribute list
     (F) The lexer saw an opening (left) parenthesis character while
     parsing an attribute list, but the matching closing (right)
     parenthesis character was not found.  You may need to add (or remove)
     a backslash character to get your parentheses to balance.  See *Note
     Attributes: (pm.info)attributes,.

Unterminated attribute list
     (F) The lexer found something other than a simple identifier at the
     start of an attribute, and it wasn't a semicolon or the start of a
     block.  Perhaps you terminated the parameter list of the previous
     attribute too soon.  See *Note Attributes: (pm.info)attributes,.

Use of $# is deprecated
     (D deprecated) This was an ill-advised attempt to emulate a poorly
     defined *awk* feature.  Use an explicit printf() or sprintf() instead.

Use of $* is deprecated
     (D deprecated) This variable magically turned on multi-line pattern
     matching, both for you and for any luckless subroutine that you
     happen to call.  You should use the new `//m' and `//s' modifiers now
     to do that without the dangerous action-at-a-distance effects of $*.

Use of %s in printf format not supported
     (F) You attempted to use a feature of printf that is accessible from
     only C.  This usually means there's a better way to do it in Perl.

Use of bare << to mean <<"" is deprecated
     (D deprecated) You are now encouraged to use the explicitly quoted
     form if you wish to use an empty line as the terminator of the
     here-document.

Use of implicit split to @_ is deprecated
     (D deprecated) It makes a lot of work for the compiler when you
     clobber a subroutine's argument list, so it's better if you assign
     the results of a split() explicitly to an array (or list).

Use of inherited AUTOLOAD for non-method %s() is deprecated
     (D deprecated) As an (ahem) accidental feature, AUTOLOAD subroutines
     are looked up as methods (using the `@ISA' hierarchy) even when the
     subroutines to be autoloaded were called as plain functions (e.g.
     `Foo::bar()'), not as methods (e.g. `< Foo-'bar() >> or `<
     $obj-'bar() >>).

     This bug will be rectified in Perl 5.005, which will use method lookup
     only for methods' AUTOLOADs.  However, there is a significant base of
     existing code that may be using the old behavior.  So, as an interim
     step, Perl 5.004 issues an optional warning when non-methods use
     inherited AUTOLOADs.

     The simple rule is:  Inheritance will not work when autoloading
     non-methods.  The simple fix for old code is:  In any module that
     used to depend on inheriting AUTOLOAD for non-methods from a base
     class named `BaseClass', execute `*AUTOLOAD = \&BaseClass::AUTOLOAD'
     during startup.

     In code that currently says `use AutoLoader; @ISA = qw(AutoLoader);'
     you should remove AutoLoader from @ISA and change `use AutoLoader;' to
     `use AutoLoader 'AUTOLOAD';'.

Use of reserved word "%s" is deprecated
     (D deprecated) The indicated bareword is a reserved word.  Future
     versions of perl may use it as a keyword, so you're better off either
     explicitly quoting the word in a manner appropriate for its context
     of use, or using a different name altogether.  The warning can be
     suppressed for subroutine names by either adding a & prefix, or using
     a package qualifier, e.g. `&our()', or `Foo::our()'.

Use of %s is deprecated
     (D deprecated) The construct indicated is no longer recommended for
     use, generally because there's a better way to do it, and also
     because the old way has bad side effects.

Use of uninitialized value%s
     (W uninitialized) An undefined value was used as if it were already
     defined.  It was interpreted as a "" or a 0, but maybe it was a
     mistake.  To suppress this warning assign a defined value to your
     variables.

Useless use of "re" pragma
     (W) You did `use re;' without any arguments.   That isn't very useful.

Useless use of %s in void context
     (W void) You did something without a side effect in a context that
     does nothing with the return value, such as a statement that doesn't
     return a value from a block, or the left side of a scalar comma
     operator.  Very often this points not to stupidity on your part, but
     a failure of Perl to parse your program the way you thought it would.
     For example, you'd get this if you mixed up your C precedence with
     Python precedence and said

          $one, $two = 1, 2;

     when you meant to say

          ($one, $two) = (1, 2);

     Another common error is to use ordinary parentheses to construct a
     list reference when you should be using square or curly brackets, for
     example, if you say

          $array = (1,2);

     when you should have said

          $array = [1,2];

     The square brackets explicitly turn a list value into a scalar value,
     while parentheses do not.  So when a parenthesized list is evaluated
     in a scalar context, the comma is treated like C's comma operator,
     which throws away the left argument, which is not what you want.  See
     *Note Perlref: perlref, for more on this.

untie attempted while %d inner references still exist
     (W untie) A copy of the object returned from tie (or tied) was still
     valid when untie was called.

Value of %s can be "0"; test with defined()
     (W misc) In a conditional expression, you used <HANDLE>, <*> (glob),
     `each()', or `readdir()' as a boolean value.  Each of these
     constructs can return a value of "0"; that would make the conditional
     expression false, which is probably not what you intended.  When
     using these constructs in conditional expressions, test their values
     with the defined operator.

Value of CLI symbol "%s" too long
     (W misc) A warning peculiar to VMS.  Perl tried to read the value of
     an %ENV element from a CLI symbol table, and found a resultant string
     longer than 1024 characters.  The return value has been truncated to
     1024 characters.

Variable "%s" is not imported%s
     (F) While "use strict" in effect, you referred to a global variable
     that you apparently thought was imported from another module, because
     something else of the same name (usually a subroutine) is exported by
     that module.  It usually means you put the wrong funny character on
     the front of your variable.

Variable "%s" may be unavailable
     (W closure) An inner (nested) anonymous subroutine is inside a *named*
     subroutine, and outside that is another subroutine; and the anonymous
     (innermost) subroutine is referencing a lexical variable defined in
     the outermost subroutine.  For example:

          sub outermost { my $a; sub middle { sub { $a } } }

     If the anonymous subroutine is called or referenced (directly or
     indirectly) from the outermost subroutine, it will share the variable
     as you would expect.  But if the anonymous subroutine is called or
     referenced when the outermost subroutine is not active, it will see
     the value of the shared variable as it was before and during the
     *first* call to the outermost subroutine, which is probably not what
     you want.

     In these circumstances, it is usually best to make the middle
     subroutine anonymous, using the `sub {}' syntax.  Perl has specific
     support for shared variables in nested anonymous subroutines; a named
     subroutine in between interferes with this feature.

Variable "%s" will not stay shared
     (W closure) An inner (nested) *named* subroutine is referencing a
     lexical variable defined in an outer subroutine.

     When the inner subroutine is called, it will probably see the value of
     the outer subroutine's variable as it was before and during the
     *first* call to the outer subroutine; in this case, after the first
     call to the outer subroutine is complete, the inner and outer
     subroutines will no longer share a common value for the variable.  In
     other words, the variable will no longer be shared.

     Furthermore, if the outer subroutine is anonymous and references a
     lexical variable outside itself, then the outer and inner subroutines
     will never share the given variable.

     This problem can usually be solved by making the inner subroutine
     anonymous, using the `sub {}' syntax.  When inner anonymous subs that
     reference variables in outer subroutines are called or referenced,
     they are automatically rebound to the current values of such
     variables.

Variable syntax
     (A) You've accidentally run your script through *csh* instead of
     Perl.  Check the #! line, or manually feed your script into Perl
     yourself.

Version number must be a constant number
     (P) The attempt to translate a `use Module n.n LIST' statement into
     its equivalent BEGIN block found an internal inconsistency with the
     version number.

perl: warning: Setting locale failed.
     (S) The whole warning message will look something like:

          perl: warning: Setting locale failed.
          perl: warning: Please check that your locale settings:
                  LC_ALL = "En_US",
                  LANG = (unset)
              are supported and installed on your system.
          perl: warning: Falling back to the standard locale ("C").

     Exactly what were the failed locale settings varies.  In the above the
     settings were that the LC_ALL was "En_US" and the LANG had no value.
     This error means that Perl detected that you and/or your system
     administrator have set up the so-called variable system but Perl could
     not use those settings.  This was not dead serious, fortunately: there
     is a "default locale" called "C" that Perl can and will use, the
     script will be run.  Before you really fix the problem, however, you
     will get the same error message each time you run Perl.  How to really
     fix the problem can be found in *Note Perllocale: perllocale, section
     LOCALE PROBLEMS.

Warning: something's wrong
     (W) You passed warn() an empty string (the equivalent of `warn ""') or
     you called it with no args and $_ was empty.

Warning: unable to close filehandle %s properly
     (S) The implicit close() done by an open() got an error indication on
     the close().  This usually indicates your file system ran out of disk
     space.

Warning: Use of "%s" without parentheses is ambiguous
     (S ambiguous) You wrote a unary operator followed by something that
     looks like a binary operator that could also have been interpreted as
     a term or unary operator.  For instance, if you know that the rand
     function has a default argument of 1.0, and you write

          rand + 5;

     you may THINK you wrote the same thing as

          rand() + 5;

     but in actual fact, you got

          rand(+5);

     So put in parentheses to say what you really mean.

write() on closed filehandle %s
     (W closed) The filehandle you're writing to got itself closed
     sometime before now.  Check your logic flow.

X outside of string
     (F) You had a pack template that specified a relative position before
     the beginning of the string being unpacked.  See `pack', *Note
     Perlfunc: perlfunc,.

x outside of string
     (F) You had a pack template that specified a relative position after
     the end of the string being unpacked.  See `pack', *Note Perlfunc:
     perlfunc,.

Xsub "%s" called in sort
     (F) The use of an external subroutine as a sort comparison is not yet
     supported.

Xsub called in sort
     (F) The use of an external subroutine as a sort comparison is not yet
     supported.

You can't use -l on a filehandle
     (F) A filehandle represents an opened file, and when you opened the
     file it already went past any symlink you are presumably trying to
     look for.  Use a filename instead.

YOU HAVEN'T DISABLED SET-ID SCRIPTS IN THE KERNEL YET!
     (F) And you probably never will, because you probably don't have the
     sources to your kernel, and your vendor probably doesn't give a rip
     about what you want.  Your best bet is to use the wrapsuid script in
     the eg directory to put a setuid C wrapper around your script.

You need to quote "%s"
     (W syntax) You assigned a bareword as a signal handler name.
     Unfortunately, you already have a subroutine of that name declared,
     which means that Perl 5 will try to call the subroutine when the
     assignment is executed, which is probably not what you want.  (If it
     IS what you want, put an & in front.)

%cetsockopt() on closed socket %s
     (W closed) You tried to get or set a socket option on a closed socket.
     Did you forget to check the return value of your socket() call?  See
     `getsockopt', *Note Perlfunc: perlfunc, and `setsockopt', *Note
     Perlfunc: perlfunc,.

\1 better written as $1
     (W syntax) Outside of patterns, backreferences live on as variables.
     The use of backslashes is grandfathered on the right-hand side of a
     substitution, but stylistically it's better to use the variable form
     because other Perl programmers will expect it, and it works better if
     there are more than 9 backreferences.

'|' and '<' may not both be specified on command line
     (F) An error peculiar to VMS.  Perl does its own command line
     redirection, and found that STDIN was a pipe, and that you also tried
     to redirect STDIN using '<'.  Only one STDIN stream to a customer,
     please.

'|' and '>' may not both be specified on command line
     (F) An error peculiar to VMS.  Perl does its own command line
     redirection, and thinks you tried to redirect stdout both to a file
     and into a pipe to another command.  You need to choose one or the
     other, though nothing's stopping you from piping into a program or
     Perl script which 'splits' output into two streams, such as

          open(OUT,">$ARGV[0]") or die "Can't write to $ARGV[0]: $!";
          while (<STDIN>) {
              print;
              print OUT;
          }
          close OUT;

Got an error from DosAllocMem
     (P) An error peculiar to OS/2.  Most probably you're using an obsolete
     version of Perl, and this should not happen anyway.

Malformed PERLLIB_PREFIX
     (F) An error peculiar to OS/2.  PERLLIB_PREFIX should be of the form

          prefix1;prefix2

     or

          prefix1 prefix2

     with nonempty prefix1 and prefix2.  If `prefix1' is indeed a prefix
     of a builtin library search path, prefix2 is substituted.  The error
     may appear if components are not found, or are too long.  See
     "PERLLIB_PREFIX" in `README.os2'.

PERL_SH_DIR too long
     (F) An error peculiar to OS/2. PERL_SH_DIR is the directory to find
     the `sh'-shell in.  See "PERL_SH_DIR" in `README.os2'.

Process terminated by SIG%s
     (W) This is a standard message issued by OS/2 applications, while *nix
     applications die in silence.  It is considered a feature of the OS/2
     port.  One can easily disable this by appropriate sighandlers, see
     `"Signals"', *Note Perlipc: perlipc,.  See also "Process terminated
     by SIGTERM/SIGINT" in `README.os2'.


