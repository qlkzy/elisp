This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Geo/TigerLine/Record/2,  Next: Geo/TigerLine/Record/3,  Prev: Geo/TigerLine/Record/1,  Up: Module List

TIGER/Line 1998 Complete Chain Shape Coordinates
************************************************

NAME
====

   Geo::TigerLine::Record::2 - TIGER/Line 1998 Complete Chain Shape
Coordinates

SYNOPSIS
========

     use Geo::TigerLine::Record::2;

     @records = Geo::TigerLine::Record::2->parse_file($fh);
     @records = Geo::TigerLine::Record::2->parse_file($fh, \&callback);

     $record = Geo::TigerLine::Record::2->new(\%fields);

     $record->rt();
     $record->version();
     $record->tlid();
     $record->rtsq();
     $record->long1();
     $record->lat1();
     $record->long2();
     $record->lat2();
     $record->long3();
     $record->lat3();
     $record->long4();
     $record->lat4();
     $record->long5();
     $record->lat5();
     $record->long6();
     $record->lat6();
     $record->long7();
     $record->lat7();
     $record->long8();
     $record->lat8();
     $record->long9();
     $record->lat9();
     $record->long10();
     $record->lat10();

DESCRIPTION
===========

   This is a class representing record type 2 of the TIGER/Line 1998
census geographic database.  Each object is one record.  It also contains
methods to parse TIGER/Line record type 2 files and turn them into objects.

   This is intended as an intermediate format between pulling the raw data
out of the simplistic TIGER/Line data files into something more
sophisticated (a process you should only have to do once).  As such, its
not very fast, but its careful, easy to use and performs some
verifications on the data being read.

   As this class is autogenerated by mk_parsers, think before you modify
this file.  Its OO, so consider sub-classing instead.

Accessors
---------

   These are simple get/set accessors for each field of a record generated
from the TIGER/Line 1998 data dictionary.  They perform some data
validation.

rt
          $data = $record->rt();
          $record->rt($data);

     Record Type.

     Expects alphanumeric data of no more than 1 characters.  $data cannot
     be blank and should be left justified.

version
          $data = $record->version();
          $record->version($data);

     Version Number.

     Expects numeric data of no more than 4 characters.  $data cannot be
     blank and should be left justified.

tlid
          $data = $record->tlid();
          $record->tlid($data);

     TIGER/Line ID, Permanent Record Number.

     Expects numeric data of no more than 10 characters.  $data cannot be
     blank and should be right justified.

rtsq
          $data = $record->rtsq();
          $record->rtsq($data);

     Record Sequence Number.

     Expects numeric data of no more than 3 characters.  $data cannot be
     blank and should be right justified.

long1
          $data = $record->long1();
          $record->long1($data);

     Point 1, Longitude.

     Expects numeric data of no more than 10 characters.  $data cannot be
     blank and should be right justified.

lat1
          $data = $record->lat1();
          $record->lat1($data);

     Point 1, Latitude.

     Expects numeric data of no more than 9 characters.  $data cannot be
     blank and should be right justified.

long2
          $data = $record->long2();
          $record->long2($data);

     Point 2, Longitude.

     Expects numeric data of no more than 10 characters.  $data can be
     blank and should be right justified.

lat2
          $data = $record->lat2();
          $record->lat2($data);

     Point 2, Latitude.

     Expects numeric data of no more than 9 characters.  $data can be blank
     and should be right justified.

long3
          $data = $record->long3();
          $record->long3($data);

     Point 3, Longitude.

     Expects numeric data of no more than 10 characters.  $data can be
     blank and should be right justified.

lat3
          $data = $record->lat3();
          $record->lat3($data);

     Point 3, Latitude.

     Expects numeric data of no more than 9 characters.  $data can be blank
     and should be right justified.

long4
          $data = $record->long4();
          $record->long4($data);

     Point 4, Longitude.

     Expects numeric data of no more than 10 characters.  $data can be
     blank and should be right justified.

lat4
          $data = $record->lat4();
          $record->lat4($data);

     Point 4, Latitude.

     Expects numeric data of no more than 9 characters.  $data can be blank
     and should be right justified.

long5
          $data = $record->long5();
          $record->long5($data);

     Point 5, Longitude.

     Expects numeric data of no more than 10 characters.  $data can be
     blank and should be right justified.

lat5
          $data = $record->lat5();
          $record->lat5($data);

     Point 5, Latitude.

     Expects numeric data of no more than 9 characters.  $data can be blank
     and should be right justified.

long6
          $data = $record->long6();
          $record->long6($data);

     Point 6, Longitude.

     Expects numeric data of no more than 10 characters.  $data can be
     blank and should be right justified.

lat6
          $data = $record->lat6();
          $record->lat6($data);

     Point 6, Latitude.

     Expects numeric data of no more than 9 characters.  $data can be blank
     and should be right justified.

long7
          $data = $record->long7();
          $record->long7($data);

     Point 7, Longitude.

     Expects numeric data of no more than 10 characters.  $data can be
     blank and should be right justified.

lat7
          $data = $record->lat7();
          $record->lat7($data);

     Point 7, Latitude.

     Expects numeric data of no more than 9 characters.  $data can be blank
     and should be right justified.

long8
          $data = $record->long8();
          $record->long8($data);

     Point 8, Longitude.

     Expects numeric data of no more than 10 characters.  $data can be
     blank and should be right justified.

lat8
          $data = $record->lat8();
          $record->lat8($data);

     Point 8, Latitude.

     Expects numeric data of no more than 9 characters.  $data can be blank
     and should be right justified.

long9
          $data = $record->long9();
          $record->long9($data);

     Point 9, Longitude.

     Expects numeric data of no more than 10 characters.  $data can be
     blank and should be right justified.

lat9
          $data = $record->lat9();
          $record->lat9($data);

     Point 9, Latitude.

     Expects numeric data of no more than 9 characters.  $data can be blank
     and should be right justified.

long10
          $data = $record->long10();
          $record->long10($data);

     Point 10, Longitude.

     Expects numeric data of no more than 10 characters.  $data can be
     blank and should be right justified.

lat10
          $data = $record->lat10();
          $record->lat10($data);

     Point 10, Latitude.

     Expects numeric data of no more than 9 characters.  $data can be blank
     and should be right justified.

Data dictionary
---------------

   This is the original TIGER/Line 1998 data dictionary from which this
class was generated.

     Record Type 2 - Complete Chain Shape Coordinates
     
          Field   BV  Fmt  Type  Beg  End  Len  Description
             RT   No    L     A    1    1    1  Record Type
        VERSION   No    L     N    2    5    4  Version Number
           TLID   No    R     N    6   15   10  TIGER/Line ID, Permanent Record Number
           RTSQ   No    R     N   16   18    3  Record Sequence Number
          LONG1   No    R     N   19   28   10  Point 1, Longitude
           LAT1   No    R     N   29   37    9  Point 1, Latitude
          LONG2  Yes    R     N   38   47   10  Point 2, Longitude
           LAT2  Yes    R     N   48   56    9  Point 2, Latitude
          LONG3  Yes    R     N   57   66   10  Point 3, Longitude
           LAT3  Yes    R     N   67   75    9  Point 3, Latitude
          LONG4  Yes    R     N   76   85   10  Point 4, Longitude
           LAT4  Yes    R     N   86   94    9  Point 4, Latitude
          LONG5  Yes    R     N   95  104   10  Point 5, Longitude
           LAT5  Yes    R     N  105  113    9  Point 5, Latitude
          LONG6  Yes    R     N  114  123   10  Point 6, Longitude
           LAT6  Yes    R     N  124  132    9  Point 6, Latitude
          LONG7  Yes    R     N  133  142   10  Point 7, Longitude
           LAT7  Yes    R     N  143  151    9  Point 7, Latitude
          LONG8  Yes    R     N  152  161   10  Point 8, Longitude
           LAT8  Yes    R     N  162  170    9  Point 8, Latitude
          LONG9  Yes    R     N  171  180   10  Point 9, Longitude
           LAT9  Yes    R     N  181  189    9  Point 9, Latitude
         LONG10  Yes    R     N  190  199   10  Point 10, Longitude
          LAT10  Yes    R     N  200  208    9  Point 10, Latitude

AUTHOR
======

   Michael G Schwern <schwern@pobox.com>

SEE ALSO
========

   *Note Geo/TigerLine: Geo/TigerLine,, `mk_parsers' in this node


File: pm.info,  Node: Geo/TigerLine/Record/3,  Next: Geo/TigerLine/Record/4,  Prev: Geo/TigerLine/Record/2,  Up: Module List

TIGER/Line 1998 Complete Chain Geographic Entity Codes
******************************************************

NAME
====

   Geo::TigerLine::Record::3 - TIGER/Line 1998 Complete Chain Geographic
Entity Codes

SYNOPSIS
========

     use Geo::TigerLine::Record::3;

     @records = Geo::TigerLine::Record::3->parse_file($fh);
     @records = Geo::TigerLine::Record::3->parse_file($fh, \&callback);

     $record = Geo::TigerLine::Record::3->new(\%fields);

     $record->rt();
     $record->version();
     $record->tlid();
     $record->state90l();
     $record->state90r();
     $record->coun90l();
     $record->coun90r();
     $record->fmcd90l();
     $record->fmcd90r();
     $record->fpl90l();
     $record->fpl90r();
     $record->ctbna90l();
     $record->ctbna90r();
     $record->air90l();
     $record->air90r();
     $record->trust90l();
     $record->trust90r();
     $record->rs1();
     $record->blk90l();
     $record->blk90r();
     $record->airl();
     $record->airr();
     $record->fanrcl();
     $record->fanrcr();
     $record->census3();
     $record->census4();
     $record->rs2();
     $record->vtd90l();
     $record->vtd90r();

DESCRIPTION
===========

   This is a class representing record type 3 of the TIGER/Line 1998
census geographic database.  Each object is one record.  It also contains
methods to parse TIGER/Line record type 3 files and turn them into objects.

   This is intended as an intermediate format between pulling the raw data
out of the simplistic TIGER/Line data files into something more
sophisticated (a process you should only have to do once).  As such, its
not very fast, but its careful, easy to use and performs some
verifications on the data being read.

   As this class is autogenerated by mk_parsers, think before you modify
this file.  Its OO, so consider sub-classing instead.

Accessors
---------

   These are simple get/set accessors for each field of a record generated
from the TIGER/Line 1998 data dictionary.  They perform some data
validation.

rt
          $data = $record->rt();
          $record->rt($data);

     Record Type.

     Expects alphanumeric data of no more than 1 characters.  $data cannot
     be blank and should be left justified.

version
          $data = $record->version();
          $record->version($data);

     Version Number.

     Expects numeric data of no more than 4 characters.  $data cannot be
     blank and should be left justified.

tlid
          $data = $record->tlid();
          $record->tlid($data);

     TIGER/Line ID, Permanent Record Number.

     Expects numeric data of no more than 10 characters.  $data cannot be
     blank and should be right justified.

state90l
          $data = $record->state90l();
          $record->state90l($data);

     FIPS State Code, 1990 Left.

     Expects numeric data of no more than 2 characters.  $data can be blank
     and should be left justified.

state90r
          $data = $record->state90r();
          $record->state90r($data);

     FIPS State Code, 1990 Right.

     Expects numeric data of no more than 2 characters.  $data can be blank
     and should be left justified.

coun90l
          $data = $record->coun90l();
          $record->coun90l($data);

     FIPS County Code, 1990 Left.

     Expects numeric data of no more than 3 characters.  $data can be blank
     and should be left justified.

coun90r
          $data = $record->coun90r();
          $record->coun90r($data);

     FIPS County Code, 1990 Right.

     Expects numeric data of no more than 3 characters.  $data can be blank
     and should be left justified.

fmcd90l
          $data = $record->fmcd90l();
          $record->fmcd90l($data);

     FIPS 55 Code (MCD/CCD), 1990 Left.

     Expects numeric data of no more than 5 characters.  $data can be blank
     and should be left justified.

fmcd90r
          $data = $record->fmcd90r();
          $record->fmcd90r($data);

     FIPS 55 Code (MCD/CCD), 1990 Right.

     Expects numeric data of no more than 5 characters.  $data can be blank
     and should be left justified.

fpl90l
          $data = $record->fpl90l();
          $record->fpl90l($data);

     FIPS 55 Code (Place/CDP), 1990 Left.

     Expects numeric data of no more than 5 characters.  $data can be blank
     and should be left justified.

fpl90r
          $data = $record->fpl90r();
          $record->fpl90r($data);

     FIPS 55 Code (Place/CDP), 1990 Right.

     Expects numeric data of no more than 5 characters.  $data can be blank
     and should be left justified.

ctbna90l
          $data = $record->ctbna90l();
          $record->ctbna90l($data);

     Census Tract/BNA Code, 1990 Left.

     Expects numeric data of no more than 6 characters.  $data can be blank
     and should be left justified.

ctbna90r
          $data = $record->ctbna90r();
          $record->ctbna90r($data);

     Census Tract/BNA Code, 1990 Right.

     Expects numeric data of no more than 6 characters.  $data can be blank
     and should be left justified.

air90l
          $data = $record->air90l();
          $record->air90l($data);

     Census American Indian/Alaska Native Area Code 1990, Left.

     Expects numeric data of no more than 4 characters.  $data can be blank
     and should be left justified.

air90r
          $data = $record->air90r();
          $record->air90r($data);

     Census American Indian/Alaska Native Area Code 1990, Right.

     Expects numeric data of no more than 4 characters.  $data can be blank
     and should be left justified.

trust90l
          $data = $record->trust90l();
          $record->trust90l($data);

     American Indian Trust Land Flag 1990, Left.

     Expects alphanumeric data of no more than 1 characters.  $data can be
     blank and should be left justified.

trust90r
          $data = $record->trust90r();
          $record->trust90r($data);

     American Indian Trust Land Flag 1990, Right.

     Expects alphanumeric data of no more than 1 characters.  $data can be
     blank and should be left justified.

rs1
          $data = $record->rs1();
          $record->rs1($data);

     Reserved Space 1.

     Expects alphanumeric data of no more than 2 characters.  $data can be
     blank and should be left justified.

blk90l
          $data = $record->blk90l();
          $record->blk90l($data);

     Census Block Number, 1990 Left.

     Expects alphanumeric data of no more than 4 characters.  $data can be
     blank and should be left justified.

blk90r
          $data = $record->blk90r();
          $record->blk90r($data);

     Census Block Number, 1990 Right.

     Expects alphanumeric data of no more than 4 characters.  $data can be
     blank and should be left justified.

airl
          $data = $record->airl();
          $record->airl($data);

     Census American Indian/Alaska Native Area Code, Current Left.

     Expects numeric data of no more than 4 characters.  $data can be blank
     and should be left justified.

airr
          $data = $record->airr();
          $record->airr($data);

     Census American Indian/Alaska Native Area Code, Current Right.

     Expects numeric data of no more than 4 characters.  $data can be blank
     and should be left justified.

fanrcl
          $data = $record->fanrcl();
          $record->fanrcl($data);

     FIPS 55 Code (ANRC), Current Left.

     Expects numeric data of no more than 5 characters.  $data can be blank
     and should be left justified.

fanrcr
          $data = $record->fanrcr();
          $record->fanrcr($data);

     FIPS 55 Code (ANRC), Current Right.

     Expects numeric data of no more than 5 characters.  $data can be blank
     and should be left justified.

census3
          $data = $record->census3();
          $record->census3($data);

     Census Use 3.

     Expects numeric data of no more than 3 characters.  $data can be blank
     and should be left justified.

census4
          $data = $record->census4();
          $record->census4($data);

     Census Use 4.

     Expects numeric data of no more than 3 characters.  $data can be blank
     and should be left justified.

rs2
          $data = $record->rs2();
          $record->rs2($data);

     Reserved Space 2.

     Expects alphanumeric data of no more than 2 characters.  $data can be
     blank and should be left justified.

vtd90l
          $data = $record->vtd90l();
          $record->vtd90l($data);

     Voting District Code, 1990 Left.

     Expects alphanumeric data of no more than 4 characters.  $data can be
     blank and should be left justified.

vtd90r
          $data = $record->vtd90r();
          $record->vtd90r($data);

     Voting District Code, 1990 Right.

     Expects alphanumeric data of no more than 4 characters.  $data can be
     blank and should be left justified.

Data dictionary
---------------

   This is the original TIGER/Line 1998 data dictionary from which this
class was generated.

     Record Type 3 - Complete Chain Geographic Entity Codes
     
          Field   BV  Fmt  Type  Beg  End  Len  Description
             RT   No    L     A    1    1    1  Record Type
        VERSION   No    L     N    2    5    4  Version Number
           TLID   No    R     N    6   15   10  TIGER/Line ID, Permanent Record Number
       STATE90L  Yes    L     N   16   17    2  FIPS State Code, 1990 Left
       STATE90R  Yes    L     N   18   19    2  FIPS State Code, 1990 Right
        COUN90L  Yes    L     N   20   22    3  FIPS County Code, 1990 Left
        COUN90R  Yes    L     N   23   25    3  FIPS County Code, 1990 Right
        FMCD90L  Yes    L     N   26   30    5  FIPS 55 Code (MCD/CCD), 1990 Left
        FMCD90R  Yes    L     N   31   35    5  FIPS 55 Code (MCD/CCD), 1990 Right
         FPL90L  Yes    L     N   36   40    5  FIPS 55 Code (Place/CDP), 1990 Left
         FPL90R  Yes    L     N   41   45    5  FIPS 55 Code (Place/CDP), 1990 Right
       CTBNA90L  Yes    L     N   46   51    6  Census Tract/BNA Code, 1990 Left
       CTBNA90R  Yes    L     N   52   57    6  Census Tract/BNA Code, 1990 Right
         AIR90L  Yes    L     N   58   61    4  Census American Indian/Alaska Native Area Code 1990, Left
         AIR90R  Yes    L     N   62   65    4  Census American Indian/Alaska Native Area Code 1990, Right
       TRUST90L  Yes    L     A   66   66    1  American Indian Trust Land Flag 1990, Left
       TRUST90R  Yes    L     A   67   67    1  American Indian Trust Land Flag 1990, Right
            RS1  Yes    L     A   68   69    2  Reserved Space 1
         BLK90L  Yes    L     A   70   73    4  Census Block Number, 1990 Left
         BLK90R  Yes    L     A   74   77    4  Census Block Number, 1990 Right
           AIRL  Yes    L     N   78   81    4  Census American Indian/Alaska Native Area Code, Current Left
           AIRR  Yes    L     N   82   85    4  Census American Indian/Alaska Native Area Code, Current Right
         FANRCL  Yes    L     N   86   90    5  FIPS 55 Code (ANRC), Current Left
         FANRCR  Yes    L     N   91   95    5  FIPS 55 Code (ANRC), Current Right
        CENSUS3  Yes    L     N   96   98    3  Census Use 3
        CENSUS4  Yes    L     N   99  101    3  Census Use 4
            RS2  Yes    L     A  102  103    2  Reserved Space 2
         VTD90L  Yes    L     A  104  107    4  Voting District Code, 1990 Left
         VTD90R  Yes    L     A  108  111    4  Voting District Code, 1990 Right

AUTHOR
======

   Michael G Schwern <schwern@pobox.com>

SEE ALSO
========

   *Note Geo/TigerLine: Geo/TigerLine,, `mk_parsers' in this node


File: pm.info,  Node: Geo/TigerLine/Record/4,  Next: Geo/TigerLine/Record/5,  Prev: Geo/TigerLine/Record/3,  Up: Module List

TIGER/Line 1998 Index to Alternative Feature Identifiers
********************************************************

NAME
====

   Geo::TigerLine::Record::4 - TIGER/Line 1998 Index to Alternative
Feature Identifiers

SYNOPSIS
========

     use Geo::TigerLine::Record::4;

     @records = Geo::TigerLine::Record::4->parse_file($fh);
     @records = Geo::TigerLine::Record::4->parse_file($fh, \&callback);

     $record = Geo::TigerLine::Record::4->new(\%fields);

     $record->rt();
     $record->version();
     $record->tlid();
     $record->rtsq();
     $record->feat1();
     $record->feat2();
     $record->feat3();
     $record->feat4();
     $record->feat5();

DESCRIPTION
===========

   This is a class representing record type 4 of the TIGER/Line 1998
census geographic database.  Each object is one record.  It also contains
methods to parse TIGER/Line record type 4 files and turn them into objects.

   This is intended as an intermediate format between pulling the raw data
out of the simplistic TIGER/Line data files into something more
sophisticated (a process you should only have to do once).  As such, its
not very fast, but its careful, easy to use and performs some
verifications on the data being read.

   As this class is autogenerated by mk_parsers, think before you modify
this file.  Its OO, so consider sub-classing instead.

Accessors
---------

   These are simple get/set accessors for each field of a record generated
from the TIGER/Line 1998 data dictionary.  They perform some data
validation.

rt
          $data = $record->rt();
          $record->rt($data);

     Record Type.

     Expects alphanumeric data of no more than 1 characters.  $data cannot
     be blank and should be left justified.

version
          $data = $record->version();
          $record->version($data);

     Version Number.

     Expects numeric data of no more than 4 characters.  $data cannot be
     blank and should be left justified.

tlid
          $data = $record->tlid();
          $record->tlid($data);

     TIGER/Line ID, Permanent Record Number.

     Expects numeric data of no more than 10 characters.  $data cannot be
     blank and should be right justified.

rtsq
          $data = $record->rtsq();
          $record->rtsq($data);

     Record Sequence Number.

     Expects numeric data of no more than 3 characters.  $data cannot be
     blank and should be right justified.

feat1
          $data = $record->feat1();
          $record->feat1($data);

     Line Additional Name Identification Number, First.

     Expects numeric data of no more than 8 characters.  $data cannot be
     blank and should be right justified.

feat2
          $data = $record->feat2();
          $record->feat2($data);

     Line Additional Name Identification Number, Second.

     Expects numeric data of no more than 8 characters.  $data can be blank
     and should be right justified.

feat3
          $data = $record->feat3();
          $record->feat3($data);

     Line Additional Name Identification Number, Third.

     Expects numeric data of no more than 8 characters.  $data can be blank
     and should be right justified.

feat4
          $data = $record->feat4();
          $record->feat4($data);

     Line Additional Name Identification Number, Fourth.

     Expects numeric data of no more than 8 characters.  $data can be blank
     and should be right justified.

feat5
          $data = $record->feat5();
          $record->feat5($data);

     Line Additional Name Identification Number, Fifth.

     Expects numeric data of no more than 8 characters.  $data can be blank
     and should be right justified.

Data dictionary
---------------

   This is the original TIGER/Line 1998 data dictionary from which this
class was generated.

     Record Type 4 - Index to Alternative Feature Identifiers
     
          Field   BV  Fmt  Type  Beg  End  Len  Description
             RT   No    L     A    1    1    1  Record Type
        VERSION   No    L     N    2    5    4  Version Number
           TLID   No    R     N    6   15   10  TIGER/Line ID, Permanent Record Number
           RTSQ   No    R     N   16   18    3  Record Sequence Number
          FEAT1   No    R     N   19   26    8  Line Additional Name Identification Number, First
          FEAT2  Yes    R     N   27   34    8  Line Additional Name Identification Number, Second
          FEAT3  Yes    R     N   35   42    8  Line Additional Name Identification Number, Third
          FEAT4  Yes    R     N   43   50    8  Line Additional Name Identification Number, Fourth
          FEAT5  Yes    R     N   51   58    8  Line Additional Name Identification Number, Fifth

AUTHOR
======

   Michael G Schwern <schwern@pobox.com>

SEE ALSO
========

   *Note Geo/TigerLine: Geo/TigerLine,, `mk_parsers' in this node


File: pm.info,  Node: Geo/TigerLine/Record/5,  Next: Geo/TigerLine/Record/6,  Prev: Geo/TigerLine/Record/4,  Up: Module List

TIGER/Line 1998 Complete Chain Feature Identifiers
**************************************************

NAME
====

   Geo::TigerLine::Record::5 - TIGER/Line 1998 Complete Chain Feature
Identifiers

SYNOPSIS
========

     use Geo::TigerLine::Record::5;

     @records = Geo::TigerLine::Record::5->parse_file($fh);
     @records = Geo::TigerLine::Record::5->parse_file($fh, \&callback);

     $record = Geo::TigerLine::Record::5->new(\%fields);

     $record->rt();
     $record->state();
     $record->county();
     $record->feat();
     $record->fedirp();
     $record->fename();
     $record->fetype();
     $record->fedirs();

DESCRIPTION
===========

   This is a class representing record type 5 of the TIGER/Line 1998
census geographic database.  Each object is one record.  It also contains
methods to parse TIGER/Line record type 5 files and turn them into objects.

   This is intended as an intermediate format between pulling the raw data
out of the simplistic TIGER/Line data files into something more
sophisticated (a process you should only have to do once).  As such, its
not very fast, but its careful, easy to use and performs some
verifications on the data being read.

   As this class is autogenerated by mk_parsers, think before you modify
this file.  Its OO, so consider sub-classing instead.

Accessors
---------

   These are simple get/set accessors for each field of a record generated
from the TIGER/Line 1998 data dictionary.  They perform some data
validation.

rt
          $data = $record->rt();
          $record->rt($data);

     Record Type.

     Expects alphanumeric data of no more than 1 characters.  $data cannot
     be blank and should be left justified.

state
          $data = $record->state();
          $record->state($data);

     FIPS State Code for File.

     Expects numeric data of no more than 2 characters.  $data cannot be
     blank and should be left justified.

county
          $data = $record->county();
          $record->county($data);

     FIPS County Code for File.

     Expects numeric data of no more than 3 characters.  $data cannot be
     blank and should be left justified.

feat
          $data = $record->feat();
          $record->feat($data);

     Line Name Identification Number.

     Expects numeric data of no more than 8 characters.  $data cannot be
     blank and should be right justified.

fedirp
          $data = $record->fedirp();
          $record->fedirp($data);

     Feature Direction, Prefix.

     Expects alphanumeric data of no more than 2 characters.  $data can be
     blank and should be left justified.

fename
          $data = $record->fename();
          $record->fename($data);

     Feature Name.

     Expects alphanumeric data of no more than 30 characters.  $data can
     be blank and should be left justified.

fetype
          $data = $record->fetype();
          $record->fetype($data);

     Feature Type.

     Expects alphanumeric data of no more than 4 characters.  $data can be
     blank and should be left justified.

fedirs
          $data = $record->fedirs();
          $record->fedirs($data);

     Feature Direction, Suffix.

     Expects alphanumeric data of no more than 2 characters.  $data can be
     blank and should be left justified.

Data dictionary
---------------

   This is the original TIGER/Line 1998 data dictionary from which this
class was generated.

     Record Type 5 - Complete Chain Feature Identifiers
     
          Field   BV  Fmt  Type  Beg  End  Len  Description
             RT   No    L     A    1    1    1  Record Type
          STATE   No    L     N    2    3    2  FIPS State Code for File
         COUNTY   No    L     N    4    6    3  FIPS County Code for File
           FEAT   No    R     N    7   14    8  Line Name Identification Number
         FEDIRP  Yes    L     A   15   16    2  Feature Direction, Prefix
         FENAME  Yes    L     A   17   46   30  Feature Name
         FETYPE  Yes    L     A   47   50    4  Feature Type
         FEDIRS  Yes    L     A   51   52    2  Feature Direction, Suffix

AUTHOR
======

   Michael G Schwern <schwern@pobox.com>

SEE ALSO
========

   *Note Geo/TigerLine: Geo/TigerLine,, `mk_parsers' in this node


File: pm.info,  Node: Geo/TigerLine/Record/6,  Next: Geo/TigerLine/Record/7,  Prev: Geo/TigerLine/Record/5,  Up: Module List

TIGER/Line 1998 Additional Address Range and ZIP Code Data
**********************************************************

NAME
====

   Geo::TigerLine::Record::6 - TIGER/Line 1998 Additional Address Range
and ZIP Code Data

SYNOPSIS
========

     use Geo::TigerLine::Record::6;

     @records = Geo::TigerLine::Record::6->parse_file($fh);
     @records = Geo::TigerLine::Record::6->parse_file($fh, \&callback);

     $record = Geo::TigerLine::Record::6->new(\%fields);

     $record->rt();
     $record->version();
     $record->tlid();
     $record->rtsq();
     $record->fraddl();
     $record->toaddl();
     $record->fraddr();
     $record->toaddr();
     $record->friaddl();
     $record->toiaddl();
     $record->friaddr();
     $record->toiaddr();
     $record->zipl();
     $record->zipr();

DESCRIPTION
===========

   This is a class representing record type 6 of the TIGER/Line 1998
census geographic database.  Each object is one record.  It also contains
methods to parse TIGER/Line record type 6 files and turn them into objects.

   This is intended as an intermediate format between pulling the raw data
out of the simplistic TIGER/Line data files into something more
sophisticated (a process you should only have to do once).  As such, its
not very fast, but its careful, easy to use and performs some
verifications on the data being read.

   As this class is autogenerated by mk_parsers, think before you modify
this file.  Its OO, so consider sub-classing instead.

Accessors
---------

   These are simple get/set accessors for each field of a record generated
from the TIGER/Line 1998 data dictionary.  They perform some data
validation.

rt
          $data = $record->rt();
          $record->rt($data);

     Record Type.

     Expects alphanumeric data of no more than 1 characters.  $data cannot
     be blank and should be left justified.

version
          $data = $record->version();
          $record->version($data);

     Version Number.

     Expects numeric data of no more than 4 characters.  $data cannot be
     blank and should be left justified.

tlid
          $data = $record->tlid();
          $record->tlid($data);

     TIGER/Line ID, Permanent Record Number.

     Expects numeric data of no more than 10 characters.  $data cannot be
     blank and should be right justified.

rtsq
          $data = $record->rtsq();
          $record->rtsq($data);

     Record Sequence Number.

     Expects numeric data of no more than 3 characters.  $data cannot be
     blank and should be right justified.

fraddl
          $data = $record->fraddl();
          $record->fraddl($data);

     Start Address, Left.

     Expects alphanumeric data of no more than 11 characters.  $data can
     be blank and should be right justified.

toaddl
          $data = $record->toaddl();
          $record->toaddl($data);

     End Address, Left.

     Expects alphanumeric data of no more than 11 characters.  $data can
     be blank and should be right justified.

fraddr
          $data = $record->fraddr();
          $record->fraddr($data);

     Start Address, Right.

     Expects alphanumeric data of no more than 11 characters.  $data can
     be blank and should be right justified.

toaddr
          $data = $record->toaddr();
          $record->toaddr($data);

     End Address, Right.

     Expects alphanumeric data of no more than 11 characters.  $data can
     be blank and should be right justified.

friaddl
          $data = $record->friaddl();
          $record->friaddl($data);

     Start Imputed Address Flag, Left.

     Expects alphanumeric data of no more than 1 characters.  $data can be
     blank and should be left justified.

toiaddl
          $data = $record->toiaddl();
          $record->toiaddl($data);

     End Imputed Address Flag, Left.

     Expects alphanumeric data of no more than 1 characters.  $data can be
     blank and should be left justified.

friaddr
          $data = $record->friaddr();
          $record->friaddr($data);

     Start Imputed Address Flag, Right.

     Expects alphanumeric data of no more than 1 characters.  $data can be
     blank and should be left justified.

toiaddr
          $data = $record->toiaddr();
          $record->toiaddr($data);

     End Imputed Address Flag, Right.

     Expects alphanumeric data of no more than 1 characters.  $data can be
     blank and should be left justified.

zipl
          $data = $record->zipl();
          $record->zipl($data);

     ZIP Code, Left.

     Expects numeric data of no more than 5 characters.  $data can be blank
     and should be left justified.

zipr
          $data = $record->zipr();
          $record->zipr($data);

     ZIP Code, Right.

     Expects numeric data of no more than 5 characters.  $data can be blank
     and should be left justified.

Data dictionary
---------------

   This is the original TIGER/Line 1998 data dictionary from which this
class was generated.

     Record Type 6 - Additional Address Range and ZIP Code Data
     
          Field   BV  Fmt  Type  Beg  End  Len  Description
             RT   No    L     A    1    1    1  Record Type
        VERSION   No    L     N    2    5    4  Version Number
           TLID   No    R     N    6   15   10  TIGER/Line ID, Permanent Record Number
           RTSQ   No    R     N   16   18    3  Record Sequence Number
         FRADDL  Yes    R     A   19   29   11  Start Address, Left
         TOADDL  Yes    R     A   30   40   11  End Address, Left
         FRADDR  Yes    R     A   41   51   11  Start Address, Right
         TOADDR  Yes    R     A   52   62   11  End Address, Right
        FRIADDL  Yes    L     A   63   63    1  Start Imputed Address Flag, Left
        TOIADDL  Yes    L     A   64   64    1  End Imputed Address Flag, Left
        FRIADDR  Yes    L     A   65   65    1  Start Imputed Address Flag, Right
        TOIADDR  Yes    L     A   66   66    1  End Imputed Address Flag, Right
           ZIPL  Yes    L     N   67   71    5  ZIP Code, Left
           ZIPR  Yes    L     N   72   76    5  ZIP Code, Right

AUTHOR
======

   Michael G Schwern <schwern@pobox.com>

SEE ALSO
========

   *Note Geo/TigerLine: Geo/TigerLine,, `mk_parsers' in this node


File: pm.info,  Node: Geo/TigerLine/Record/7,  Next: Geo/TigerLine/Record/8,  Prev: Geo/TigerLine/Record/6,  Up: Module List

TIGER/Line 1998 Landmark  Features
**********************************

NAME
====

   Geo::TigerLine::Record::7 - TIGER/Line 1998 Landmark  Features

SYNOPSIS
========

     use Geo::TigerLine::Record::7;

     @records = Geo::TigerLine::Record::7->parse_file($fh);
     @records = Geo::TigerLine::Record::7->parse_file($fh, \&callback);

     $record = Geo::TigerLine::Record::7->new(\%fields);

     $record->rt();
     $record->version();
     $record->state();
     $record->county();
     $record->land();
     $record->source();
     $record->cfcc();
     $record->laname();
     $record->lalong();
     $record->lalat();
     $record->filler();

DESCRIPTION
===========

   This is a class representing record type 7 of the TIGER/Line 1998
census geographic database.  Each object is one record.  It also contains
methods to parse TIGER/Line record type 7 files and turn them into objects.

   This is intended as an intermediate format between pulling the raw data
out of the simplistic TIGER/Line data files into something more
sophisticated (a process you should only have to do once).  As such, its
not very fast, but its careful, easy to use and performs some
verifications on the data being read.

   As this class is autogenerated by mk_parsers, think before you modify
this file.  Its OO, so consider sub-classing instead.

Accessors
---------

   These are simple get/set accessors for each field of a record generated
from the TIGER/Line 1998 data dictionary.  They perform some data
validation.

rt
          $data = $record->rt();
          $record->rt($data);

     Record Type.

     Expects alphanumeric data of no more than 1 characters.  $data cannot
     be blank and should be left justified.

version
          $data = $record->version();
          $record->version($data);

     Version Number.

     Expects numeric data of no more than 4 characters.  $data cannot be
     blank and should be left justified.

state
          $data = $record->state();
          $record->state($data);

     FIPS State Code for File.

     Expects numeric data of no more than 2 characters.  $data cannot be
     blank and should be left justified.

county
          $data = $record->county();
          $record->county($data);

     FIPS County Code for File.

     Expects numeric data of no more than 3 characters.  $data cannot be
     blank and should be left justified.

land
          $data = $record->land();
          $record->land($data);

     Landmark Identification Number.

     Expects numeric data of no more than 10 characters.  $data cannot be
     blank and should be right justified.

source
          $data = $record->source();
          $record->source($data);

     Source or First Source Code to Update.

     Expects alphanumeric data of no more than 1 characters.  $data can be
     blank and should be left justified.

cfcc
          $data = $record->cfcc();
          $record->cfcc($data);

     Census Feature Class Code.

     Expects alphanumeric data of no more than 3 characters.  $data can be
     blank and should be left justified.

laname
          $data = $record->laname();
          $record->laname($data);

     Landmark Name.

     Expects alphanumeric data of no more than 30 characters.  $data can
     be blank and should be left justified.

lalong
          $data = $record->lalong();
          $record->lalong($data);

     Longitude.

     Expects numeric data of no more than 10 characters.  $data can be
     blank and should be right justified.

lalat
          $data = $record->lalat();
          $record->lalat($data);

     Latitude.

     Expects numeric data of no more than 9 characters.  $data can be blank
     and should be right justified.

filler
          $data = $record->filler();
          $record->filler($data);

     Filler (to make even character count).

     Expects alphanumeric data of no more than 1 characters.  $data can be
     blank and should be left justified.

Data dictionary
---------------

   This is the original TIGER/Line 1998 data dictionary from which this
class was generated.

     Record Type 7 - Landmark  Features
     
          Field   BV  Fmt  Type  Beg  End  Len  Description
             RT   No    L     A    1    1    1  Record Type
        VERSION   No    L     N    2    5    4  Version Number
          STATE   No    L     N    6    7    2  FIPS State Code for File
         COUNTY   No    L     N    8   10    3  FIPS County Code for File
           LAND   No    R     N   11   20   10  Landmark Identification Number
         SOURCE  Yes    L     A   21   21    1  Source or First Source Code to Update
           CFCC  Yes    L     A   22   24    3  Census Feature Class Code
         LANAME  Yes    L     A   25   54   30  Landmark Name
         LALONG  Yes    R     N   55   64   10  Longitude
          LALAT  Yes    R     N   65   73    9  Latitude
         FILLER  Yes    L     A   74   74    1  Filler (to make even character count)

AUTHOR
======

   Michael G Schwern <schwern@pobox.com>

SEE ALSO
========

   *Note Geo/TigerLine: Geo/TigerLine,, `mk_parsers' in this node


File: pm.info,  Node: Geo/TigerLine/Record/8,  Next: Geo/TigerLine/Record/9,  Prev: Geo/TigerLine/Record/7,  Up: Module List

TIGER/Line 1998 Polygons Linked to Area Landmarks
*************************************************

NAME
====

   Geo::TigerLine::Record::8 - TIGER/Line 1998 Polygons Linked to Area
Landmarks

SYNOPSIS
========

     use Geo::TigerLine::Record::8;

     @records = Geo::TigerLine::Record::8->parse_file($fh);
     @records = Geo::TigerLine::Record::8->parse_file($fh, \&callback);

     $record = Geo::TigerLine::Record::8->new(\%fields);

     $record->rt();
     $record->version();
     $record->state();
     $record->county();
     $record->cenid();
     $record->polyid();
     $record->land();
     $record->filler();

DESCRIPTION
===========

   This is a class representing record type 8 of the TIGER/Line 1998
census geographic database.  Each object is one record.  It also contains
methods to parse TIGER/Line record type 8 files and turn them into objects.

   This is intended as an intermediate format between pulling the raw data
out of the simplistic TIGER/Line data files into something more
sophisticated (a process you should only have to do once).  As such, its
not very fast, but its careful, easy to use and performs some
verifications on the data being read.

   As this class is autogenerated by mk_parsers, think before you modify
this file.  Its OO, so consider sub-classing instead.

Accessors
---------

   These are simple get/set accessors for each field of a record generated
from the TIGER/Line 1998 data dictionary.  They perform some data
validation.

rt
          $data = $record->rt();
          $record->rt($data);

     Record Type.

     Expects alphanumeric data of no more than 1 characters.  $data cannot
     be blank and should be left justified.

version
          $data = $record->version();
          $record->version($data);

     Version Number.

     Expects numeric data of no more than 4 characters.  $data cannot be
     blank and should be left justified.

state
          $data = $record->state();
          $record->state($data);

     FIPS State Code for File.

     Expects numeric data of no more than 2 characters.  $data cannot be
     blank and should be left justified.

county
          $data = $record->county();
          $record->county($data);

     FIPS County Code for File.

     Expects numeric data of no more than 3 characters.  $data cannot be
     blank and should be left justified.

cenid
          $data = $record->cenid();
          $record->cenid($data);

     Census File Identification Code.

     Expects alphanumeric data of no more than 5 characters.  $data cannot
     be blank and should be left justified.

polyid
          $data = $record->polyid();
          $record->polyid($data);

     Polygon Identification Code.

     Expects numeric data of no more than 10 characters.  $data cannot be
     blank and should be right justified.

land
          $data = $record->land();
          $record->land($data);

     Landmark Identification Number.

     Expects numeric data of no more than 10 characters.  $data cannot be
     blank and should be right justified.

filler
          $data = $record->filler();
          $record->filler($data);

     Filler (to make even character count).

     Expects alphanumeric data of no more than 1 characters.  $data can be
     blank and should be left justified.

Data dictionary
---------------

   This is the original TIGER/Line 1998 data dictionary from which this
class was generated.

     Record Type 8 - Polygons Linked to Area Landmarks
     
          Field   BV  Fmt  Type  Beg  End  Len  Description
             RT   No    L     A    1    1    1  Record Type
        VERSION   No    L     N    2    5    4  Version Number
          STATE   No    L     N    6    7    2  FIPS State Code for File
         COUNTY   No    L     N    8   10    3  FIPS County Code for File
          CENID   No    L     A   11   15    5  Census File Identification Code
         POLYID   No    R     N   16   25   10  Polygon Identification Code
           LAND   No    R     N   26   35   10  Landmark Identification Number
         FILLER  Yes    L     A   36   36    1  Filler (to make even character count)

AUTHOR
======

   Michael G Schwern <schwern@pobox.com>

SEE ALSO
========

   *Note Geo/TigerLine: Geo/TigerLine,, `mk_parsers' in this node


File: pm.info,  Node: Geo/TigerLine/Record/9,  Next: Geo/TigerLine/Record/A,  Prev: Geo/TigerLine/Record/8,  Up: Module List

TIGER/Line 1998 Key Geographic Location Features
************************************************

NAME
====

   Geo::TigerLine::Record::9 - TIGER/Line 1998 Key Geographic Location
Features

SYNOPSIS
========

     use Geo::TigerLine::Record::9;

     @records = Geo::TigerLine::Record::9->parse_file($fh);
     @records = Geo::TigerLine::Record::9->parse_file($fh, \&callback);

     $record = Geo::TigerLine::Record::9->new(\%fields);

     $record->rt();
     $record->version();
     $record->state();
     $record->county();
     $record->cenid();
     $record->polyid();
     $record->source();
     $record->cfcc();
     $record->kglname();
     $record->kgladd();
     $record->kglzip();
     $record->kglzip4();
     $record->feat();
     $record->filler();

DESCRIPTION
===========

   This is a class representing record type 9 of the TIGER/Line 1998
census geographic database.  Each object is one record.  It also contains
methods to parse TIGER/Line record type 9 files and turn them into objects.

   This is intended as an intermediate format between pulling the raw data
out of the simplistic TIGER/Line data files into something more
sophisticated (a process you should only have to do once).  As such, its
not very fast, but its careful, easy to use and performs some
verifications on the data being read.

   As this class is autogenerated by mk_parsers, think before you modify
this file.  Its OO, so consider sub-classing instead.

Accessors
---------

   These are simple get/set accessors for each field of a record generated
from the TIGER/Line 1998 data dictionary.  They perform some data
validation.

rt
          $data = $record->rt();
          $record->rt($data);

     Record Type.

     Expects alphanumeric data of no more than 1 characters.  $data cannot
     be blank and should be left justified.

version
          $data = $record->version();
          $record->version($data);

     Version Number.

     Expects numeric data of no more than 4 characters.  $data cannot be
     blank and should be left justified.

state
          $data = $record->state();
          $record->state($data);

     FIPS State Code for File.

     Expects numeric data of no more than 2 characters.  $data cannot be
     blank and should be left justified.

county
          $data = $record->county();
          $record->county($data);

     FIPS County Code for File.

     Expects numeric data of no more than 3 characters.  $data cannot be
     blank and should be left justified.

cenid
          $data = $record->cenid();
          $record->cenid($data);

     Census File Identification Code.

     Expects alphanumeric data of no more than 5 characters.  $data cannot
     be blank and should be left justified.

polyid
          $data = $record->polyid();
          $record->polyid($data);

     Polygon Identification Code.

     Expects numeric data of no more than 10 characters.  $data cannot be
     blank and should be right justified.

source
          $data = $record->source();
          $record->source($data);

     Source or First Source Code to Update.

     Expects alphanumeric data of no more than 1 characters.  $data can be
     blank and should be left justified.

cfcc
          $data = $record->cfcc();
          $record->cfcc($data);

     Census Feature Class Code.

     Expects alphanumeric data of no more than 3 characters.  $data can be
     blank and should be left justified.

kglname
          $data = $record->kglname();
          $record->kglname($data);

     Key Geographic Location Name.

     Expects alphanumeric data of no more than 30 characters.  $data can
     be blank and should be left justified.

kgladd
          $data = $record->kgladd();
          $record->kgladd($data);

     Key Geographic Location Address.

     Expects alphanumeric data of no more than 11 characters.  $data
     cannot be blank and should be right justified.

kglzip
          $data = $record->kglzip();
          $record->kglzip($data);

     Key Geographic Location ZIP Code.

     Expects numeric data of no more than 5 characters.  $data cannot be
     blank and should be left justified.

kglzip4
          $data = $record->kglzip4();
          $record->kglzip4($data);

     +4 Postal Add-On Code for KGL.

     Expects numeric data of no more than 4 characters.  $data cannot be
     blank and should be left justified.

feat
          $data = $record->feat();
          $record->feat($data);

     Line Name Identification Number.

     Expects numeric data of no more than 8 characters.  $data can be blank
     and should be right justified.

filler
          $data = $record->filler();
          $record->filler($data);

     Filler (to make even character count).

     Expects alphanumeric data of no more than 1 characters.  $data can be
     blank and should be left justified.

Data dictionary
---------------

   This is the original TIGER/Line 1998 data dictionary from which this
class was generated.

     Record Type 9 - Key Geographic Location Features
     
          Field   BV  Fmt  Type  Beg  End  Len  Description
             RT   No    L     A    1    1    1  Record Type
        VERSION   No    L     N    2    5    4  Version Number
          STATE   No    L     N    6    7    2  FIPS State Code for File
         COUNTY   No    L     N    8   10    3  FIPS County Code for File
          CENID   No    L     A   11   15    5  Census File Identification Code
         POLYID   No    R     N   16   25   10  Polygon Identification Code
         SOURCE  Yes    L     A   26   26    1  Source or First Source Code to Update
           CFCC  Yes    L     A   27   29    3  Census Feature Class Code
        KGLNAME  Yes    L     A   30   59   30  Key Geographic Location Name
         KGLADD  No*    R     A   60   70   11  Key Geographic Location Address
         KGLZIP  No*    L     N   71   75    5  Key Geographic Location ZIP Code
        KGLZIP4  No*    L     N   76   79    4  +4 Postal Add-On Code for KGL
           FEAT  Yes    R     N   80   87    8  Line Name Identification Number
         FILLER  Yes    L     A   88   88    1  Filler (to make even character count)

AUTHOR
======

   Michael G Schwern <schwern@pobox.com>

SEE ALSO
========

   *Note Geo/TigerLine: Geo/TigerLine,, `mk_parsers' in this node


