This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Class/Tree,  Next: Class/Virtual,  Prev: Class/Translucent,  Up: Module List

Build and print hierarchical information such as directory trees and C++ classes.
*********************************************************************************

NAME
====

   `Class::Tree' - Build and print hierarchical information such as
directory trees and C++ classes.

SYNOPSIS
========

     use Class::Tree;

     # Or ...
     # use Class::Tree qw($root);

     # 1. A directory tree.
     my($dir1)  = 'someDir/someSubdir';
     my($tree1) = new Class::Tree;
     $tree1 -> buildDirTree($dir1, ['CVS']);
     $tree1 -> writeTree();

     # 2. A C++ class tree.
     use Cwd;
     my($currentDir) = cwd();
     my($dir2)       = 'someDir/someSubdir'; # Contains *.h. See t/family.h.
     my($origin)     = 'Root';
     my($tree2)      = new Class::Tree;
     $tree2 -> buildClassTree($dir2, $origin, $currentDir);
     print "Class tree\n----------\n";
     $tree2 -> writeTree();
     print "\n";
     print "Class list\n----------\n";
     $tree2 -> writeClassList();

DESCRIPTION
===========

   The `Class::Tree' module provides a simple way of building:

   * Directory trees

   * C++ class trees

ENVIRONMENT VARIABLE PERCEPS
============================

   I assume $ENV{'PERCEPS'} is the directory containing the C++ parser
perceps, or perceps.pl. So, you must define this variable before calling
buildClassTree().

THE HASH REFERENCE $classRef -> {'root'}
========================================

   This is an alias for $root. See below.

THE HASH REFERENCE $root
========================

   This points to the root of the tree.

METHOD: buildClassTree($dir, $fontName, $baseDir)
=================================================

   Call this to initiate processing by the C++ parser 'perceps'.

   The directories $dir and $baseDir are passed to 'perceps'.

   $fontName is a string used to label the root of the tree.

   Then call writeTree() and/or writeClassList().

METHOD: buildDirTree($dir, [qw/dirs to ignore/])
================================================

   Call this to build a memory image of a directory tree. Use the 2nd
parameter to specify a list of directories to ignore.

   Then call writeTree().

METHOD: writeClassList()
========================

   Call this after calling buildClassTree(), to print the C++ class
structure.

METHOD: writeTree()
===================

   Call this after calling buildClassTree() or buildDirTree(), to print
the directory structure.

INSTALLATION
============

   You install `Class::Tree', as you would install any perl module library,
by running these commands:

     perl Makefile.PL
     make
     make test
     make install

   If you want to install a private copy of `Class::Tree' in your home
directory, then you should try to produce the initial Makefile with
something like this command:

     perl Makefile.PL LIB=~/perl
     	or
     perl Makefile.PL LIB=C:/Perl/Site/Lib

   If, like me, you don't have permission to write man pages into unix
system directories, use:

     make pure_install

   instead of make install. This option is secreted in the middle of p 414
of the second edition of the dromedary book.

WARNING re Perl bug
===================

   As always, be aware that these 2 lines mean the same thing, sometimes:

   * $self -> {'thing'}

   * $self->{'thing'}

   The problem is the spaces around the ->. Inside double quotes, "...",
the first space stops the dereference taking place. Outside double quotes
the scanner correctly associates the $self token with the {'thing'} token.

   I regard this as a bug.

AUTHOR
======

   `Class::Tree' was written by Ron Savage *<rpsavage@ozemail.com.au>* in
1997.

LICENCE
=======

   This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


File: pm.info,  Node: Class/Virtual,  Next: Class/Virtually/Abstract,  Prev: Class/Tree,  Up: Module List

Base class for virtual base classes.
************************************

NAME
====

   Class::Virtual - Base class for virtual base classes.

SYNOPSIS
========

     package My::Virtual::Idaho;
     use base qw(Class::Virtual);

     __PACKAGE__->virtual_methods(qw(new foo bar this that));

     package My::Private::Idaho;
     use base qw(My::Virtual::Idaho);

     # Check to make sure My::Private::Idaho implemented everything
     my @missing = __PACKAGE__->missing_methods;
     die __PACKAGE__ . ' forgot to implement ' . join ', ', @missing
         if @missing;

     # If My::Private::Idaho forgot to implement new(), the program will
     # halt and yell about that.
     my $idaho = My::Private::Idaho->new;

     # See what methods we're obligated to implement.
     my @must_implement = __PACKAGE__->virtual_methods;

DESCRIPTION
===========

   This is a base class for implementing virtual base classes (what some
people call an abstract class).  Kinda kooky.  It allows you to explicitly
declare what methods are virtual and that must be implemented by
subclasses.  This might seem silly, since your program will halt and catch
fire when an unimplemented virtual method is hit anyway, but there's some
benefits.

   The error message is more informative.  Instead of the usual "Can't
locate object method" error, you'll get one explaining that a virtual
method was left unimplemented.

   Subclass authors can explicitly check to make sure they've implemented
all the necessary virtual methods.  When used as part of a regression
test, it will shield against the virtual method requirements changing out
from under the subclass.

   Finally, subclass authors can get an explicit list of everything
they're expected to implement.

   Doesn't hurt and it doesn't slow you down.

Methods
-------

virtual_methods
          Virtual::Class->virtual_methods(@virtual_methods);
          my @must_implement = Sub::Class->virtual_methods;

     This is an accessor to the list of virtual_methods.  Virtual base
     classes will declare their list of virtual methods.  Subclasses will
     look at them.  Once the virtual methods are set they cannot be undone.

     XXX I'm tempted to make it possible for the subclass to override the
     XXX virtual methods, perhaps add to them.  Too hairy to think about
     for XXX 0.01.

missing_methods
          my @missing_methods = Sub::Class->missing_methods;

     Returns a list of methods Sub::Class has not yet implemented.

CAVEATS and BUGS
================

   Autoloaded methods are currently not recognized.  I have no idea how to
solve this.

AUTHOR
======

   Michael G Schwern <schwern@pobox.com>

SEE ALSO
========

   *Note Class/Virtually/Abstract: Class/Virtually/Abstract,


File: pm.info,  Node: Class/Virtually/Abstract,  Next: Class/Visitor,  Prev: Class/Virtual,  Up: Module List

Compile-time enforcement of Class::Virtual
******************************************

NAME
====

   Class::Virtually::Abstract - Compile-time enforcement of Class::Virtual

SYNOPSIS
========

     package My::Virtual::Idaho;
     use base qw(Class::Virtually::Abstract);

     __PACKAGE__->virtual_methods(qw(new foo bar this that));

     package My::Private::Idaho;
     use base qw(My::Virtual::Idaho);

     sub new { ... }
     sub foo { ... }
     sub bar { ... }
     sub this { ... }
     # oops, forgot to implement that()!!  Whatever will happen?!

     # Meanwhile, in another piece of code!
     # KA-BLAM!  My::Private::Idaho fails to compile because it didn't
     # fully implement My::Virtual::Idaho.
     use My::Private::Idaho;

DESCRIPTION
===========

   This subclass of Class::Virtual provides *compile-time* enforcement.
That means subclasses of your virtual class are required to implement all
virtual methods or else it will not compile.

BUGS and CAVEATS
================

   Because this relies on import() it is important that your classes are
used instead of required.  This is a problem, and I'm trying to figure a
way around it.

   Also, if a subclass defines its own import() routine (why would a class
need to export stuff?  I've done it) Class::Virtually::Abstract's
compile-time checking is defeated.

   Got to think of a better way to do this besides import().

AUTHOR
======

   Original idea from Ben Tilly's AbstractClass
http://www.perlmonks.org/index.pl?node_id=44300&lastnode_id=45341

   Embraced and Extended by Michael G Schwern <schwern@pobox.com>

SEE ALSO
========

   *Note Class/Virtual: Class/Virtual,


File: pm.info,  Node: Class/Visitor,  Next: Class/WhiteHole,  Prev: Class/Virtually/Abstract,  Up: Module List

Visitor and Iterator extensions to Class::Template
**************************************************

NAME
====

   Class::Visitor - Visitor and Iterator extensions to Class::Template

SYNOPSIS
========

     use Class::Visitor;

     visitor_class 'CLASS', 'SUPER', { TEMPLATE };
     visitor_class 'CLASS', 'SUPER', [ TEMPLATE ];

     $obj = CLASS->new ();
     $iter = $obj->iter;
     $iter = $obj->iter ($parent, $array, $index);

     $obj->accept($visitor, ...);
     $obj->children_accept($visitor, ...);
     $obj->children_accept_ARRAYMEMBER ($visitor, ...);
     $obj->push_ARRAYMEMBER($value[, ...]);
     $value = $obj->pop_ARRAYMEMBER;
     $obj->as_string ([$context[, ...]]);
     $obj->ARRAYMEMBER_as_string ([$context[, ...]]);

     $iter inherits the following from Class::Iter:

     $iter->parent;
     $iter->is_iter;
     $iter->root;
     $iter->rootpath;
     $iter->next;
     $iter->at_end;
     $iter->delegate;
     $iter->is_same ($obj);

DESCRIPTION
===========

   `Class::Visitor' extends the getter/setter functions provided by
`Class::Template' for CLASS by defining methods for using the Visitor and
Iterator design patterns.  All of the Iterator methods are inherited from
`Class::Iter' except `iter'.

   CLASS is the name of the new class, SUPER the superclass of this class
(will define `@ISA'), and TEMPLATE is as defined in `Class::Template'.

   `$obj-'iter> returns a new iterator for this object.  If parent, array,
and index are not defined, then the new iterator is treated as the root
object.  Except as inherited from `Class::Iter' or as defined below,
methods for `$iter' and $obj work the same.

   The accept methods cause a callback to `$visitor' with `$self' as the
first argument plus the rest of the arguments passed to accept.  This is
implemented like:

     sub accept {
         my $self = shift; my $visitor = shift;
         $visitor->visit_MyClass ($self, @_);
     }

   `children_accept' calls accept on each object in the array field named
`contents'.  `children_accept_*ARRAYMEMBER*' does the same for
*ARRAYMEMBER*.

   Calling accept methods on iterators always calls back using iterators.
Calling accept on non-iterators calls back using non-iterators.  The
latter is significantly faster.

   push and pop act like their respective array functions.

   as_string returns the concatenated scalar values of the array field
named `contents', possibly modified by `$context'.
`*ARRAYMEMBER*_as_string' does the same for *ARRAYMEMBER*.

   Visitor handles scalars specially for `children_accept' and as_string.
In the case of `children_accept', Visitor will create an iterator in the
class `Class::Scalar::Iter' with the scalar as the delegate.

   In the case of as_string, Visitor will use the string unless
`$context->{cdata_mapper}' is defined, in which case it returns the result
of calling the `cdata_mapper' subroutine with the scalar and the remaining
arguments.  The actual implementation is:

     &{$context->{cdata_mapper}} ($scalar, @_);

AUTHOR
======

   Ken MacLeod, ken@bitsko.slc.ut.us

SEE ALSO
========

   perl(1), Class::Template(3), Class::Iter(3).

   The package `SGML::SPGrove' uses `Class::Visitor' extensively.


File: pm.info,  Node: Class/WhiteHole,  Next: ClearCase/Argv,  Prev: Class/Visitor,  Up: Module List

base class to treat unhandled method calls as errors
****************************************************

NAME
====

   Class::WhiteHole - base class to treat unhandled method calls as errors

SYNOPSIS
========

     package Bar;

     # DBI inherits from DynaLoader which inherits from AutoLoader
     # Bar wants to avoid this accidental inheritance of AutoLoader.
     use base qw(Class::WhiteHole DBI);

DESCRIPTION
===========

   Its possible to accidentally inherit an AUTOLOAD method.  Often this
will happen if a class somewhere in the chain uses AutoLoader or defines
one of their own.  This can lead to confusing error messages when method
lookups fail.

   Sometimes you want to avoid this accidental inheritance.  In that case,
inherit from Class::WhiteHole.  All unhandled methods will produce normal
Perl error messages.

BUGS & CAVEATS
==============

   Be sure to have Class::WhiteHole before the class from which you're
inheriting AUTOLOAD in the ISA.  Usually you'll want Class::WhiteHole to
come first.

   If your class inherits autoloaded routines this class may cause them to
stop working.  Choose wisely before using.

   White holes are only a hypothesis and may not really exist.

COPYRIGHT
=========

   Copyright 2000 Michael G Schwern <schwern@pobox.com> all rights
reserved.  This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

AUTHOR
======

   Michael G Schwern <schwern@pobox.com>

SEE ALSO
========

   *Note Class/BlackHole: Class/BlackHole,


File: pm.info,  Node: ClearCase/Argv,  Next: ClearCase/ClearPrompt,  Prev: Class/WhiteHole,  Up: Module List

ClearCase-specific subclass of Argv
***********************************

NAME
====

   ClearCase::Argv - ClearCase-specific subclass of Argv

SYNOPSIS
========

     # OO interface
     use ClearCase::Argv;
     ClearCase::Argv->dbglevel(1);
     # Note how the command, flags, and arguments are separated ...
     my $describe = ClearCase::Argv->new('desc', [qw(-fmt %c)], ".");
     # Run the basic "ct describe" command.
     $describe->system;
     # Run it with with stderr turned off.
     $describe->stderr(0)->system;
     # Run it without the flags.
     $describe->system(-);
     # Create label type iff it doesn't exist
     ClearCase::Argv->new(qw(mklbtype -nc XX))
     	    if ClearCase::Argv->new(qw(lstype lbtype:XX))->stderr(0)->qx;

     # functional interface
     use ClearCase::Argv qw(ctsystem ctexec ctqx);
     ctsystem('pwv');
     my @lsco = ctqx(qw(lsco -avobs -s));
     # Similar to OO example: create label type iff it doesn't exist
     ctsystem(qw(mklbtype XX)) if !ctqx({stderr=>0}, "lstype lbtype:XX");

   *There are more examples in the ./examples subdir that comes with this
module. Also, the test script is designed as a demo and benchmark; it's
probably your best source for cut-and-paste code.*

DESCRIPTION
===========

   This is a subclass of *Argv* for use with ClearCase.  It overrides the
Argv->prog() method to recognize the fact that ClearCase commands have two
words, e.g. "cleartool checkout".

   It also provides a special method `'ipc_cleartool'' which, as the name
implies, enables use of the IPC::ClearTool module such that subsequent
cleartool commands are sent to a coprocess.

   *ClearCase::Argv is in most ways identical to its base class, so see
"perldoc Argv" for substantial further documentation.*

IPC::ClearTool INTERFACE
========================

   The `'ipc_cleartool'' method creates an IPC::ClearTool object and sends
subsequent commands to it. This method is highly context-sensitive:

   * When called with no arguments and a non-void context, it returns the
     underlying ClearTool object (in case you want to use it directly).

   * When called with a non-zero argument it creates an IPC::ClearTool
     object; if this fails for any reason a warning is printed and
     execution continues in 'normal mode'. The warning may be suppressed
     or turned to a fatal error by specifying different true values; see
     examples below.

   * When called with an argument of 0, it shuts down any existing
     ClearTool object; any further executions would revert to 'normal
     mode'.

Examples
--------

     # use IPC::ClearTool if available, else continue silently
     ClearCase::Argv->ipc_cleartool(1);
     # use IPC::ClearTool if available, else print warning and continue
     ClearCase::Argv->ipc_cleartool(2);
     # same as above since default == 2
     ClearCase::Argv->ipc_cleartool;
     # use IPC::ClearTool, die if not available
     ClearCase::Argv->ipc_cleartool(3);
     # shut down the IPC::ClearTool coprocess
     ClearCase::Argv->ipc_cleartool(0);
     # Use the IPC::ClearTool object directly
     ClearCase::Argv->ipc_cleartool->cmd('pwv');

   Typically `ipc_cleartool' will be used as a class method to specify a
place for all cleartool commands to be sent. However, it may also be
invoked on an object to associate just that instance with a coprocess.

FUNCTIONAL INTERFACE
====================

   For those who don't like OO style, or who want to convert existing
scripts with the least effort, the *execution methods* are made available
as traditional functions. Examples:

     use ClearCase::Argv qw(ctsystem ctexec ctqx);
     my $cwv = ctqx(pwv -s);
     ctsystem('mklbtype', ['-global'], 'FOO') && exit $?>>8;
     my @vobs = ctqx({autochomp=>1}, 'lsvob -s');

   If you prefer you can override the "real" Perl builtins. This is easier
for converting an existing script which makes heavy use of `system(),
exec(), or qx()':

     use ClearCase::Argv qw(system exec qv);
     my $cwv = qv(cleartool pwv -s);
     system('cleartool', 'mklbtype', ['-global'], 'FOO') && exit $?>>8;
     my @vobs = qv({autochomp=>1}, 'lsvob -s');

   Note that when using an overridden `system()' et al you must still
specify 'cleartool' as the program, whereas `ctsystem()' and friends
handle that.

CAREFUL PROGRAMMERS WANTED
==========================

   If you're the kind of programmer who tends to execute whole strings
such as `system("cleartool pwv -s")' or who uses backquotes in a void
context, this module won't help you much. These are bad habits regardless
of whether you use ClearCase::Argv and you should strive to overcome them.

STICKINESS
==========

   A subtlety: when an execution attribute is set in a void context, it's
*"sticky"*, meaning that it's set until explicitly reset. But in a
non-void context the new value is temporary or *"non-sticky"*; it's pushed
on a stack and popped off after being read once. This applies to both
class and instance uses. It's done this way to allow the following
locutions:

     ClearCase::Argv->stdout(0);	# turn off stdout for all objects
     $obj->stdout(0);		# turn off stdout for this object, forever
     $obj->stdout(0)->system;	# suppress stdout, this time only

   This allows you to set up an object with various sticky attributes and
keep it around, executing it at will and overriding other attrs
temporarily. In the example below, note that another way of setting sticky
attrs is shown:

     my $obj = ClearCase::Argv->new({autofail=>1, autochomp=>1});
     my $view = $obj->argv('pwv -s')->qx;
     my $exists = $obj->argv('lstype', 'brtype:FOO')->autofail(0)->qx;

   Here we keep an object with attrs 'autochomp' and 'autofail' (autofail
means to exit on any failure) around and use it to exec whichever commands
we want. While checking to see if a type exists, we suppress autofail
temporarily. On the next use the object will have both attributes again.

BUGS
====

   I suspect there are still some special quoting situations unaccounted
for in the quote method. This will need to be refined over time. Bug
reports or patches gratefully accepted.

PORTABILITY
===========

   ClearCase::Argv should work on all ClearCase platforms. It's primarily
been tested on Solaris 7 and NT 4.0, with CC 3.2.1 and 4.0, using
Perl5.004, 5.005, and 5.6. The CAL stuff doesn't work with CC versions <
3.2.1.

FILES
=====

   This is a subclass of *Argv* and thus requires it to be installed.  If
running in *ipc mode* it will also need IPC::ClearTool.

SEE ALSO
========

   perl(1), Argv, IPC::ClearTool, IPC::ChildSafe

AUTHOR
======

   David Boyce <dsb@world.std.com>

COPYRIGHT
=========

   Copyright (c) 1999,19100 David Boyce. All rights reserved.  This Perl
program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.


File: pm.info,  Node: ClearCase/ClearPrompt,  Next: ClearCase/SyncTree,  Prev: ClearCase/Argv,  Up: Module List

Handle clearprompt in a portable, convenient way
************************************************

NAME
====

   ClearCase::ClearPrompt - Handle clearprompt in a portable, convenient
way

SYNOPSIS
========

     use ClearCase::ClearPrompt qw(clearprompt clearprompt_dir);

     # boolean usage
     my $rc = clearprompt(qw(yes_no -mask y,n -type ok -prompt), 'Well?');

     # returns text into specified variable (context sensitive).
     my $txt = clearprompt(qw(text -pref -pro), 'Enter text data here: ');

     # asynchronous usage - show dialog box and continue
     clearprompt(qw(proceed -mask p -type ok -prompt), "You said: $txt");

     # prompt for a directory (not supported natively by clearprompt cmd)
     my $dir = clearprompt_dir('/tmp', "Please choose a directory");

DESCRIPTION
===========

   Native ClearCase provides a utility (*clearprompt*) for collecting user
input or displaying messages within triggers. However, usage of this tool
is awkward and error-prone, especially in multi-platform environments.
Often you must create temp files, invoke clearprompt to write into them,
open them and read the data, then unlink them. In many cases this code
must run seamlessly on both Unix and Windows systems and is replicated
throughout many trigger scripts. ClearCase::ClearPrompt abstracts this
dirty work without changing the interface to *clearprompt*.

   The `clearprompt()' function takes the exact same set of flags as the
eponymous ClearCase command, e.g.:

     my $response = clearprompt('text', '-def', '0', '-pro', 'Well? ');

   except that the `-outfile' flag is unnecessary since creation, reading,
and removal of this temp file is managed internally.

   In a void context, clearprompt() behaves asynchronously; i.e. it
displays the dialog box and returns so that execution can continue.  In
any other context it waits for the dialog's button to be pushed and
returns the appropriate data type.

   The clearprompt() function always leaves the return code of the
clearprompt command in $? just as `system()' would.  If the prompt was
interrupted via a signal, the function returns the undefined value.

DIRECTORY PROMPTING
===================

   The clearprompt command has no way to prompt for a directory, so this
module provides a separate `clearprompt_dir()' function which implements
it via "clearprompt list" and `opendir/readdir/closedir'.  Usage is

     use ClearCase::ClearPrompt qw(clearprompt_dir);
     $dir = clearprompt_dir($starting_dir, $prompt_string);

   This is a little awkward to use since it doesn't use a standard
directory-chooser interface but it works. There's no way to create a
directory within this interface, though.

NOTE
====

   *An apparent undocumented "feature" of clearprompt(1) is that it
catches SIGINT (Ctrl-C) and provides a status of 4 rather than returning
the signal number in $? according to normal (UNIX) signal semantics.*  We
fix that up here so it looks like a normal signal 2.  Thus, if
`clearprompt()' returns undef the signal number is reliably in $? as it's
documented to be.

PORTING
=======

   This package is known to work fine on Solaris 2.5.1/perl5.004_04,
Solaris 7/perl5.6, and Windows NT 4.0SP3/5.005_02.  As these platforms are
quite different, this should take care of any *significant* portability
issues but please send reports of tweaks needed for other platforms to the
address below.

AUTHOR
======

   David Boyce <dsb@world.std.com>

   Copyright (c) 1999,2000 David Boyce. All rights reserved.  This Perl
program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

SEE ALSO
========

   clearprompt(1), perl(1)


File: pm.info,  Node: ClearCase/SyncTree,  Next: ClearCase/Wrapper,  Prev: ClearCase/ClearPrompt,  Up: Module List

Synchronize a tree of files with a tree of elements
***************************************************

NAME
====

   ClearCase::SyncTree - Synchronize a tree of files with a tree of
elements

SYNOPSIS
========

     # Create a 'synctree' object.
     my $sync = ClearCase::SyncTree->new;
     # Tell it where the files are coming from ...
     $sync->srcbase($sbase);
     # Tell it where they're going to ...
     $sync->dstbase($dbase);
     # Supply the list of files to work on (relative or absolute paths).
     $sync->srclist(keys %files);
     # Compare src and dest lists and figure out what to do.
     $sync->analyze;
     # Create new elements in the target area.
     $sync->add;
     # Update existing files which differ between src and dest.
     $sync->modify;
     # Remove any files from dest that aren't in src.
     $sync->subtract;
     # Check in the changes.
     $sync->checkin;

   See the enclosed *synctree* script for full example usage.

DESCRIPTION
===========

   This module provides an infrastructure for programs which want to
*synchronize* a set of files, typically a subtree, with a similar
destination subtree in VOB space.  The enclosed *synctree* script is an
example of such a program.

   The source area may be in a VOB or may be a regular filesystem; the
destination area must be in a VOB. Methods are supplied for adding,
subtracting, and modifying destination files so as to make that area look
identical to the source.

   Symbolic links are supported, even on Windows (of course in this case
the source filesystem must support them, which is only likely in the event
of an MVFS->MVFS transfer). Note that the text of the link is transported
verbatim from source area to dest area; thus relative symlinks may no
longer resolve in the destination.

CONSTRUCTOR
-----------

   Use `ClearCase::SyncTree->new' to construct a SyncTree object, which
can then be filled in and used via the instance methods below.

INSTANCE METHODS
----------------

   Following is a brief description of each supported method. Examples are
given for all methods that take parameters; if no example is given usage
may be assumed to look like:

     $obj->method;

   * ->srcbase

     Provides the base by which to 'relativize' the incoming pathnames.
     E.g.  with a *srcbase* of */tmp/x* the incoming file */tmp/x/y/z*
     will become *y/z* and will be deposited under the *dstbase* (see) by
     that path. Example:

          $obj->srcbase('/var/tmp/newstuff');

   * ->dstbase

     Provides the root of the tree into which to place the relative paths
     derived from *srcbase* as described above. Example:

          $obj->dstbase('/vobs/tps/newstuff');

   * ->srclist/->srcmap

     There are two ways to specify the list of incoming files. They may be
     provided as a simple list via *srclist*, in which case they'll be
     relativized as described above and deposited in *dstbase*, or they can
     be specified via *srcmap* which allows the destination file to have a
     different name from the source.

     *srclist* takes a list of input filenames. These may be absolute or
     relative; they will be canonicalized and then relativized internally.

     *srcmap* is similar but takes a hash mapping input filenames to their
     destination counterparts.

     Examples:

          $obj->srclist(@ARGV);	# check in the named files

          my %filemap = (x/y/z.c => 'x/y/z.cxx', a/b => 'foo');
          $obj->srcmap(%filemap);	# check in the named files

   * ->analyze

     After the object knows its *srcbase*, *dstbase*, and input file
     lists, this method compares the source and target trees and
     categorizes the required actions into *additions* (new files in the
     destination area), modifications (those which exist but need to be
     updated) and *subtractions* (those which no longer exist in the
     source area).  After analysis is complete, these actions may be taken
     via the add, modify, and subtract methods as desired.

   * ->add

     Takes the list of *additions* as determined by the analyze method and
     creates them as new elements.

   * ->modify

     Takes the list of modifications as determined by the analyze method
     and updates them in the destination tree.

   * ->subtract

     Takes the list of *subtractions* as determined by the analyze method
     and rmname's them in the destination tree.

   * ->label

     Labels the new work. The label type can be specified as a parameter;
     otherwise it will be taken from the attribute previously set by the
     *lbtype* method.

     Labeling consists of a *mklabel -recurse* from *dstbase* down,
     followed by labeling of parent directories from *dstbase* up to the
     vob root. Example:

          $obj->label('FOO');

   * ->checkin

     Checks in all checkouts under the *dstbase* area.

   * ->cleanup

     Undoes all checkouts under the *dstbase* area.

   * ->fail

     Calls the cleanup method, then exits with a failure status. This is
     the default exception handler; a different handler can be registered
     via the *err_handler* method (see).

   * ->err_handler

     Registers an exception handler to be called upon failure of any
     cleartool command. Call with 0 to have no handler Pass it a code ref
     to register a function, with an object and method name to register a
     method. Examples:

          $obj->err_handler(0);		# ignore cleartool errors
          $obj->err_handler(\&func);		# register func() for errors
          $obj->err_handler($self, 'method');	# register $obj->method

   * ->protect

     Sets an attribute which causes the checkin method to align file
     permissions after checking in. By default this attribute is set on
     UNIX, unset on Windows. Example:

          $obj->protect(0);

   * ->reuse

     Attempt "element reuse". Before creating a new file with *mkelem*,
     look through its directory's version tree to see if another of the
     same name exists in any other version. If so, assume the new file
     intended to be the same element and link the old and new names.

          $obj->reuse(1);

   * ->ctime

     Sets a boolean indicating whether to throw away the timestamp of the
     source file and give modified files their checkin date instead. This
     flag is false by default (i.e. checkins have *-ptime* behavior).

   * ->no_cr

     By default, checkins initiated by the checkin method are done one at
     a time using the *-from* flag. This will preserve config records in
     the case where the input file is a derived object.  Setting the
     *no_cr* attribute causes checkins to be done in one big `"cleartool
     ci"' operation, which is faster but loses CR's.

   * ->no_cmp

     This attribute causes all files which exist in both src and dest areas
     to be considered modified by the analyze method.

   * ->cmp_func

     Sets or returns the coderef that's used to compare the source and
     destination files. The default is *File::Compare::compare()* but can
     be modifed by passing in a ref to your preferred function, like so:

          $obj->cmp_func(\&my_compare_function);

     A replacement function should set $! on failure.

   * ->comment

     Provides a comment to be used by the checkin method. The default
     comment is `"By:$0"'. Example:

          $obj->comment("your comment here");

   * ->eltypemap

     In case the eltype of a particular file or set of files needs to be
     overridden at creation time. Example:

          $obj->eltypemap('\.(ht|x)ml$' => 'compressed_file');

BUGS
====

   * Subtraction of symlinks is currently unimplemented (it's just a little
     corner case I haven't gotten to).

   * If a file is removed via the ->subtract method and later added back
     via ->add, the result will be a new element (aka *evil twin*).
     SyncTree does not have the smarts to find the old element of the same
     name and relink to it. This could be handled but I haven't yet needed
     it.

   * I have not tested SyncTree in snapshot views and would not expect it
     to work out of the box, though the fixes would be largely mechanical.
     At the least, though, expect it to be slower in a snapshot view.

AUTHOR
======

   Based on code originally written by Paul D. Smith
<pausmith@nortelnetworks.com>.  Paul's version was based on the Bourne
shell script 'citree' delivered as sample code with ClearCase.

   Rewritten for Unix/Win32 portability by David Boyce <dsb@world.std.com>
in 8/1999, then reorganized into a module in 1/2000. This module no longer
bears the slightest resemblance to citree.

COPYRIGHT
=========

   Copyright 1997,1998 Paul D. Smith and Bay Networks, Inc.

   Copyright 1999,2000 David Boyce (dsb@world.std.com).

   This script is distributed under the terms of the GNU General Public
License.  You can get a copy via ftp://ftp.gnu.org/pub/gnu/ or its many
mirrors.  This script comes with NO WARRANTY whatsoever, not even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

STATUS
======

   This is currently ALPHA code and thus I reserve the right to change the
API incompatibly. At some point I'll bump the version suitably and remove
this warning, which will constitute an (almost) ironclad promise to leave
the interface alone.

PORTING
=======

   This module is known to work on Solaris 2.6-7 and Windows NT 4.0SP3-5,
and with perl 5.004_04 and 5.6.  As these platforms cover a fairly wide
range there should be no *major* portability issues, but please send bug
reports or patches to the address above.

SEE ALSO
========

   perl(1), ClearCase::Argv(3), Getopt::Long(3), IPC::ChildSafe(3)


File: pm.info,  Node: ClearCase/Wrapper,  Next: ClearCase/Wrapper/Site,  Prev: ClearCase/SyncTree,  Up: Module List

general-purpose wrapper for *cleartool*
***************************************

NAME
====

   ClearCase::Wrapper - general-purpose wrapper for *cleartool*

SYNOPSIS
========

   This perl module functions as a wrapper for *cleartool*, allowing the
command-line interface of *cleartool* to be extended or modified. It
allows defaults to be changed, new flags to be added to existing
*cleartool* commands, or entirely new *cleartool* commands to be
synthesized.

CLEARTOOL ENHANCEMENTS
======================

   * CATCS
       1. New *-expand* flag Follows all include statements recursively in
          order to print a complete config spec. When used with the
          *-cmnt* flag, comments are stripped from this listing.

       2. New *-sources* flag Prints all files involved in the config spec
          (the *config_spec* file itself plus any files it includes).

       3. New *-start* flag Prints the preferred *initial working
          directory* of a view by examining its config spec. If the
          conventional string C"<##:Start: dir"> is present then the value
          of dir is printed. Otherwise no output is produced. The *workon*
          command (see) uses this value.  E.g., using *workon* instead of
          *setview* with the config spec:

               ##:Start: /vobs_fw/src/java
               element * CHECKEDOUT
               element * /main/LATEST

          would automatically cd to `/vobs_fw/src/java' within the set
          view.

       4. New *-rdl* flag Prints the value of the config spec's
          C"<##:RDL:> attribute.


   * CI/CHECKIN

     Extended to handle the *-dir/-rec/-all/-avobs* flags.

     Extended to allow *symbolic links* to be checked in (by operating on
     the target of the link instead).

     Extended to implement a *-diff* flag, which runs a **diff -pred**
     command before each checkin so the user can see his/her changes while
     typing the comment.

     Automatically supplies *-nc* to checkins if the element list consists
     of only directories (since directories get a default comment).

     Implements a new *-revert* flag. This causes identical (unchanged)
     elements to be unchecked-out instead of being checked in.

     Since checkin is such a common operation, an unadorned ci is
     "promoted" to *ci -diff -dir -revert* to save typing.

   * COMMENT

     For each ClearCase object specified, dump the current comment into a
     temp file, allow the user to edit it with his/her favorite editor,
     then change the objects's comment to the results of the edit. This is
     useful if you mistyped a comment and want to correct it.

     The *-new* flag causes it to ignore the previous comment.

     See *edattr* for editor selection rules.

   * DIFF

     Extended to handle the *-dir/-rec/-all/-avobs* flags.

     Improved default: if given just one element and no flags, assume
     *-pred*.

     Extended to implement -n, where n is an integer requesting that the
     diff take place against the n'th predecessor.

   * DIFFCS

     New command.  *Diffcs* dumps the config specs of two specified views
     into temp files and diffs them. If only one view is specified,
     compares against the current working view's config spec.

   * EDATTR

     New command, inspired by the *edcs* cmd.  *Edattr* dumps the
     attributes of the specified object into a temp file, then execs your
     favorite editor on it, and adds, removes or modifies the attributes as
     appropriate after you exit the editor.  Attribute types are created
     and deleted automatically.  This is particularly useful on Unix
     platforms because as of CC 3.2 the Unix GUI doesn't support
     modification of attributes and the quoting rules make it difficult to
     use the command line.

     The environment variables WINEDITOR, VISUAL, and EDITOR are checked
     in that order for editor names. If none of the above are set, the
     default editor used is vi on UNIX and notepad on Windows.

   * EDIT

     Convenience command. Same as 'checkout' but execs your favorite editor
     afterwards. Takes all the same flags as checkout, plus *-ci* to check
     the element back in afterwards. When *-ci* is used in conjunction with
     *-diff* the file will be either checked in or un-checked out depending
     on whether it was modified.

     The aggregation flags *-dir/-rec/-all/-avo* may be used, with the
     effect being to run the editor on all checked-out files in the named
     scope. Example: *"ct edit -all"*.

   * GREP

     New command. Greps through past revisions of a file for a pattern, so
     you can see which revision introduced a particular function or a
     particular bug. By analogy with *lsvtree*, grep searches only
     "interesting" versions unless *-all* is specified.

     Flags *-nnn* are accepted where *nnn* represents the number of
     versions to go back. Thus `grep -1 foo' would search only the
     predecessor.

   * LOCK

     New *-allow* and *-deny* flags. These work like *-nuser* but operate
     incrementally on an existing *-nuser* list rather than completely
     replacing it. When *-allow* or *-deny* are used, *-replace* is
     implied.

     When *-iflocked* is used, no lock will be created where one didn't
     previously exist; the *-nusers* list will only be modified for
     existing locks.

   * LSPRIVATE

     Extended to recognize *-dir/-rec/-all/-avobs*.  Also allows a
     directory to be specified such that 'ct lsprivate .' restricts output
     to the cwd, etc. This directory arg may be used in combination with
     *-dir* etc. Output in these cases is relative to the current or
     specified directory if the *-rel/ative* flag is used.

     The flag *-type d|f* is also supported with the usual semantics.

     The flag *-visible* flag removes files not currently visible in the
     view.

     The *-ext* flag sorts the output by extension.

   * LSVIEW

     Extended to recognize the general *-me* flag, restricting the search
     namespace to <username>_*.

   * LSVTREE

     Modified default to always use -a flag.

   * MKELEM

     Extended to handle the *-dir/-rec* flags, enabling automated mkelems
     with otherwise the same syntax as original. Directories are also
     automatically checked out as required in this mode. *Note that this
     automatic directory checkout is only enabled when the candidate list
     is derived via the *-dir/-rec* flags*.  If the *-ci* flag is present,
     any directories automatically checked out are checked back in too.

     By default, only regular view-private files are considered by
     *-dir|-rec*.  The *-do* flag causes derived objects to be made into
     elements as well.

   * MKLABEL

     The new *-up* flag, when combined with *-recurse*, also labels the
     parent directories of the specified *pname*s all the way up to their
     vob tags.

   * MKBRTYPE,MKLBTYPE

     Modification: if user tries to make a type in the current VOB without
     explicitly specifying -ordinary or -global, and if said VOB is
     associated with an admin VOB, then by default create the type as a
     global type in the admin VOB instead. **In effect, this makes -global
     the default iff a suitable admin VOB exists**.

   * MKVIEW

     Extended in the following ways:

       1. New *-me* flag Supports the *-me* flag to prepend $LOGNAME to
          the view name, separated by an underscore. This enables the
          convention that all user views be named *<username>_<whatever>*.

       2. Default view-storage location Provides a standard default
          view-storage path which includes the user's name. Thus a user
          can simply type *"mkview -me -tag foo"* and the view will be
          created as <username>_foo with the view storage placed in a
          default location determined by the sysadmin.

       3. New *-clone* flag This allows you to specify another view from
          which to copy the config spec and other properties. Note that it
          does not copy view-private files from the old view, just the
          view properties.


   * MOUNT

     This is a Windows-only enhancement: on UNIX, *mount* behaves correctly
     and we do not mess with its behavior. On Windows, *cleartool mount
     -all* gives an error for already-mounted VOBs for some reason; these
     are now ignored as on UNIX. At the same time, VOB tags containing /
     are normalized to \ so they'll match the registry, and an extension
     is made to allow multiple VOB tags to be passed to one *mount*
     command.

   * SETVIEW

     ClearCase 4.0 for Windows completely removes *setview* functionality,
     but this wrapper emulates it by attaching the view to a drive letter
     and cd-ing to that drive. It supports all the flags *setview* for CC
     3.2.1/Windows supported (*-drive*, *-exec*, etc.) and adds a new one:
     *-persistent*.

     If the view is already mapped to a drive letter that drive is used.
     If not, the first available drive working backwards from Z: is used.
     Without *-persistent* a drive mapped by setview will be unmapped when
     the setview process is existed.

     The setview emulation sets *CLEARCASE_ROOT* for compatibility and adds
     a new EV *CLEARCASE_VIEWDRIVE*.

     UNIX setview functionality is left alone.

   * SETCS

     Adds a *-clone* flag which lets you specify another view from which
     to copy the config spec.

     Adds a *-sync* flag. This is similar to *-current* except that it
     analyzes the view dependencies and only flushes the view cache if the
     *compiled_spec* file is out of date with respect to the *config_spec*
     source file or any file it includes. In other words: *-sync* is to
     *-curr* as `make foo.o' is to `cc -c foo.c'.

     Adds a *-expand* flag, which "flattens out" the config spec by
     inlining the contents of any include files.

   * WORKON

     New command, similar to *setview* but provides hooks to cd to a
     preferred *initial working directory* within the view and to set up
     any required environment variables. The *initial working directory*
     is defined as the output of *ct catcs -start* (see).

     If a file called *.viewenv.pl* exists in the *initial working
     directory*, it's read before starting the user's shell. This file uses
     Perl syntax and must end with a "1;" like any `require-d' file.  Any
     unrecognized arguments given to *workon* following the view name will
     be passed on to `.viewenv.pl' in `@ARGV'. Environment variables
     required for builds within the setview may be set here.

   * UNCO

     Extended to accept (and ignore) the standard comment flags for
     consistency with other cleartool cmds.

     Extended to handle the -dir/-rec/-all/-avobs flags.

   * WINKIN

     The *-tag* flag allows you specify a local file path plus another
     view; the named DO in the named view will be winked into the current
     view.

     The *-vp* flag, when used with *-tag*, causes the "remote" file to be
     converted into a DO if required before winkin is attempted. See the
     *winkout* extension for details.

   * WINKOUT

     The *winkout* pseudo-cmd takes a set of view-private files as
     arguments and, using clearaudit, makes them into derived objects. The
     config records generated are meaningless but the mere fact of being a
     DO makes a file eligible for forced winkin.

     If the *-promote* flag is given, the view scrubber will be run on the
     new DO's. This has the effect of promoting them to the VOB and winking
     them back into the current view.

     If a meta-DO filename is specified with *-meta*, this file is created
     as a DO and caused to reference all the other new DO's, thus defining
     a *DO set* and allowing the entire set to be winked in using the
     meta-DO as a hook. E.g. assuming view-private files X, Y, and Z
     already exist:

          ct winkout -meta .WINKIN X Y Z

     will make them into derived objects and create a 4th DO ".WINKIN"
     containing references to the others. A subsequent

          ct winkin -recurse -adirs /view/extended/path/to/.WINKIN

     from a different view will wink all four files into the current view.

     Accepts *-dir/-rec/-all/-avobs*, a file containing a list of files
     with *-flist*, or a literal list of view-private files. When using
     *-dir/-rec/-all/-avobs* to derive the file list only the output of
     `lsprivate -other' is considered unless *-do* is used; *-do* causes
     existing DO's to be re-converted.

     The *"-flist -"* flag can be used to read the file list from stdin.

GENERAL FEATURES
================

   * symlink expansion

     Before processing a checkin or checkout command, any symbolic links on
     the command line are replaced with the file they point to. This allows
     allowd developers to operate directly on symlinks for ci/co.

   * -M flag

     As a convenience feature, the -M flag runs all output through your
     pager. Of course `"ct lsh -M foo"' saves only a few keystrokes over
     "ct lsh foo | more" but for heavy users of shell history the more
     important feature is that it preserves the value of ESC-_ (`ksh -o
     vi') or !$ (csh).

   * -me -tag

     Introduces a global convenience/standardization feature: the flag
     *-me* in the context of a command which takes a *-tag view-tag*
     causes *"$LOGNAME"* to be prefixed to the tag name with an
     underscore.  This relies on the fact that even though *-me* is a
     native cleartool flag, at least through CC4.0 no command which takes
     *-tag* also takes *-me* natively. For example:

          % <wrapper-context> mkview -me -tag myview ...

     The commands *setview, startview, endview, and lsview* also take
     *-me*, such that the following commands are equivalent:

          % <wrapper-context> setview dboyce_myview
          % <wrapper-context> setview -me myview

CONFIGURATION
=============

   Various degrees of configurability are supported:

   * Global Enhancements and Extensions

     To add a global override for 'cleartool xxx', simply define a
     subroutine 'xxx' after the __END__ token in Wrapper.pm or in
     lib/ClearCase/Wrapper/Site.pm and re-run 'make install'.  When doing
     so it's a good idea to document it in POD format right above the sub
     and make the appropriate addition to the "Usage Message Extensions"
     section.  Also, if the command has an abbreviation (e.g.  checkout/co)
     you should add that to the "Command Aliases" section.

     This override subroutine is called with @ARGV as its parameter list
     (and  @ARGV is also available directly of course). The sub can do
     whatever it likes but it's strongly recommended that
     *ClearCase::Argv* be used to run any cleartool subcommands and its
     base class *Argv* be used to run other programs. These modules
     provide value for UNIX/Windows portability and aid in parsing flags
     into different categories where required. See their PODs for full
     documentation.

   * Personal Preference Setting

     As well as allowing for site-wide enhancements to be made in
     Wrapper.pm, a hook is also provided for individual users (who must be
     knowledgeable about both ClearCase and Perl) to set their own
     defaults.  If the file `~/.clearcase_profile.pl' exists it will be
     read before launching any of the sitewide enhancements. Note that this
     file is passed to the Perl interpreter and thus has access to the full
     array of Perl syntax.

   * Sitewide ClearCase Comment Defaults

     This distribution comes with a file called *clearcase_profile* which
     is installed as part of the module. If the user has no
     *clearcase_profile* file in his/her home directory and if
     CLEARCASE_PROFILE isn't already set, CLEARCASE_PROFILE will
     automatically be pointed at this supplied file. This allows the
     administrator to set sitewide defaults of checkin/checkout comment
     handling using the syntax supported by ClearCase natively but without
     each user needing to maintain their own config file or set their own
     EV.

   * CLEARCASE_WRAPPER_NATIVE

     This environment variable may be set to suppress all extensions,
     causing the wrapper to behave just like an alias to cleartool (but
     slower).

DIAGNOSTICS
===========

   The flag *-/dbg=1* prints all "real" cleartool operations executed by
the wrapper to stderr as long as the extension in use was coded with
ClearCase::Argv, which is the case for all supplied extensions.

INSTALLATION
============

   I recommend you install the *cleartool.plx* file to some global dir
(e.g. /usr/local/bin), then symlink it to ct or whatever short name you
prefer.  Unfortunately, there's no equivalent mechanism for wrapping GUI
access to clearcase. For Windows the strategy is similar but requires a
"ct.bat" redirector instead of a symlink. See "ct.bat.sample" in the
distribution.

   To install or update a global enhancement you must re-run "make
install".  Also, don't forget to check that the contents of
`lib/ClearCase/Wrapper/clearcase_profile' are what you want users to have
by default.

COPYRIGHT
=========

   Copyright (c) 1997,1998,1999,2000 David Boyce (dsb@world.std.com). All
rights reserved.  This Perl program is free software; you may redistribute
it and/or modify it under the same terms as Perl itself.


