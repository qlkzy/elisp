This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Net/Jabber/X/SXPM/Map,  Next: Net/Jabber/X/Signed,  Prev: Net/Jabber/X/SXPM,  Up: Module List

Jabber X SXPM Map Module
************************

NAME
====

   Net::Jabber::X::SXPM::Map - Jabber X SXPM Map Module

SYNOPSIS
========

     Net::Jabber::X::SXPM::Map is a companion to the
     Net::Jabber::X::SXPM module.  It provides the user a simple
     interface to set and retrieve all parts of a Jabber SXPM Map.

DESCRIPTION
===========

     To initialize the Map with a Jabber <x/> and then access the </x>
     you must pass it the XML::Parser Tree array from the
     Net::Jabber::Client module.  In the callback function for the object
     type foo:

     use Net::Jabber;

     sub foo {
       my $foo = new Net::Jabber::Foo(@_);

     my @xTags = $foo->GetX("jabber:x:sxpm");

     my $xTag;
     foreach $xTag (@xTags) {
       my @maps = $xTag->GetMaps();
     	my $map;
     	foreach $map (@maps) {
     	  $map->GetXXXX();
     	  .
     	  .
     	  .
     	}
     }
     .
     .
     .
         }

     You now have access to all of the retrieval functions available below.

     To create a new IQ SXPM Map to send to the server:

     use Net::Jabber;

     $Client = new Net::Jabber::Client();
     ...

     $foo = new Net::Jabber::Foo();
     $sxpm = $foo->NewX("jabber:x:sxpm");
     $foo = $sxpm->AddMap();
     ...

     $client->Send($foo);

     Using $map you can call the creation functions below to populate the
     tag before sending it.

     For more information about the array format being passed to the CallBack
     please read the Net::Jabber::Client documentation.

Retrieval functions
-------------------

     $char  = $map->GetChar();
     $color = $map->GetColor();

     @map   = $map->GetTree();
     $str   = $map->GetXML();

Creation functions
------------------

     $map->SetMap(char=>"@");     # for erasing a pixel
     $map->SetMap(char=>"a",
     		 color=>"#FFFFFF");
     
     $map->SetChar('b');
     $map->SetColor('#FF0000');

METHODS
=======

Retrieval functions
-------------------

     GetChar() - returns a string with the character of the <map/>.

     GetColor() - returns a string with the RGB color of the <map/>.

     GetXML() - returns the XML string that represents the <presence/>.
                This is used by the Send() function in Client.pm to send
                this object as a Jabber Presence.

     GetTree() - returns an array that contains the <presence/> tag
                 in XML::Parser Tree format.

Creation functions
------------------

     SetMap(char=>string,  - set multiple fields in the <map/>
            color=>string)   at one time.  This is a cumulative
                             and overwriting action.  If you
                             set the "char" twice, the second
                             setting is what is used.  If you set
                             the char, and then set the color
                             then both will be in the <map/>
                             tag.  For valid settings read the
                             specific Set functions below.

     SetChar(string) - sets the character that is associated with this
                       color map entry.

     SetColor(string) - sets the color that is associated with this
                        color map entry.  Must be in RGB #xxxxxx format.

AUTHOR
======

   By Ryan Eatmon in January of 2001 for http://jabber.org..

COPYRIGHT
=========

   This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


File: pm.info,  Node: Net/Jabber/X/Signed,  Next: Net/Jabber/XDB,  Prev: Net/Jabber/X/SXPM/Map,  Up: Module List

Jabber X Signed Module
**********************

NAME
====

   Net::Jabber::X::Signed - Jabber X Signed Module

SYNOPSIS
========

     Net::Jabber::X::Signed is a companion to the Net::Jabber::X module.
     It provides the user a simple interface to set and retrieve all
     parts of a Jabber X Signed.

DESCRIPTION
===========

     To initialize the Signed with a Jabber <x/> you must pass it the
     XML::Parser Tree array from the module trying to access the <x/>.
     In the callback function:

     use Net::Jabber;

     sub iq {
       my $foo = new Net::Jabber::Foo(@_);

     my @xTags = $foo->GetX("jabber:x:signed");

     my $xTag;
     foreach $xTag (@xTags) {
     	$xTag->....
     
     }
     .
     .
     .
         }

     You now have access to all of the retrieval functions available.

     To create a new Signed to send to the server:

     use Net::Jabber;

     $foo = new Net::Jabber::Foo();
     $x = $foo->NewX("jabber:x:signed");

     Now you can call the creation functions below.

     For more information about the array format being passed to the CallBack
     please read the Net::Jabber::Client documentation.

Retrieval functions
-------------------

     $signature = $xTag->GetSignature();

Creation functions
------------------

     $xTag->SetSigned(signature=>data);

     $xTag->SetSignature(data);

METHODS
=======

Retrieval functions
-------------------

     GetSignature() - returns a string with the signature data.

Creation functions
------------------

     SetSigned(signature=>string) - set multiple fields in the <x/> at one
                                    time.  This is a cumulative and over
                                    writing action.  If you set the
                                    "signature" attribute twice, the second
                                    setting is what is used.  If you set the
                                    signature, and then set another field
                                    then both will be in the <x/> tag.  For
                                    valid settings read the specific Set
                                    functions below.

     SetSignature(string) - sets the data for the signature

AUTHOR
======

   By Ryan Eatmon in December of 2000 for http://jabber.org..

COPYRIGHT
=========

   This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


File: pm.info,  Node: Net/Jabber/XDB,  Next: Net/LDAP,  Prev: Net/Jabber/X/Signed,  Up: Module List

Jabber XDB Library
******************

NAME
====

   Net::Jabber::XDB - Jabber XDB Library

SYNOPSIS
========

     Net::Jabber::XDB is a companion to the Net::Jabber module. It
     provides the user a simple interface to set and retrieve all
     parts of a Jabber XDB.

DESCRIPTION
===========

     Net::Jabber::XDB differs from the other Net::Jabber::* modules in that
     the XMLNS of the data is split out into more submodules under
     XDB.  For specifics on each module please view the documentation
     for each Net::Jabber::Data::* module.  To see the list of avilable
     namspaces and modules see Net::Jabber::Data.

     To initialize the XDB with a Jabber <xdb/> you must pass it the
     XML::Parser Tree array.  For example:

     my $xdb = new Net::Jabber::XDB(@tree);

     There has been a change from the old way of handling the callbacks.
     You no longer have to do the above, a Net::Jabber::XDB object is passed
     to the callback function for the xdb:

     use Net::Jabber;

     sub xdb {
       my ($XDB) = @_;
       .
       .
       .
     }

     You now have access to all of the retrieval functions available.

     To create a new xdb to send to the server:

     use Net::Jabber;

     $XDB = new Net::Jabber::XDB();
     $XDBType = $XDB->NewData( type );
     $XDBType->SetXXXXX("yyyyy");

     Now you can call the creation functions for the XDB, and for the <data/>
     on the new Data object itself.  See below for the <xdb/> functions, and
     in each data module for those functions.

     For more information about the array format being passed to the CallBack
     please read the Net::Jabber::Client documentation.

Retrieval functions
-------------------

     $to       = $XDB->GetTo();
     $toJID    = $XDB->GetTo("jid");
     $from     = $XDB->GetFrom();
     $fromJID  = $XDB->GetFrom("jid");
     $type     = $XDB->GetType();

     $data     = $XDB->GetData();
     $dataTree = $XDB->GetDataTree();

     $str      = $XDB->GetXML();
     @xdb     d  = $XDB->GetTree();

Creation functions
------------------

     $XDB->SetXDB(tYpE=>"get",
     		 tO=>"bob@jabber.org");

     $XDB->SetTo("bob@jabber.org");
     $XDB->SetFrom("me\@jabber.org");
     $XDB->SetType("set");

     $XDBObject = $XDB->NewData("jabber:iq:auth");
     $XDBObject = $XDB->NewData("jabber:iq:roster");

     $xdbReply = $XDB->Reply();
     $xdbReply = $XDB->Reply("client");
     $xdbReply = $XDB->Reply("transport");

Test functions
--------------

     $test = $XDB->DefinedTo();
     $test = $XDB->DefinedFrom();
     $test = $XDB->DefinedType();

METHODS
=======

Retrieval functions
-------------------

     GetTo()      - returns either a string with the Jabber Identifier,
     GetTo("jid")   or a Net::Jabber::JID object for the person who is
                    going to receive the <xdb/>.  To get the JID
                    object set the string to "jid", otherwise leave
                    blank for the text string.

     GetFrom()      -  returns either a string with the Jabber Identifier,
     GetFrom("jid")    or a Net::Jabber::JID object for the person who
                       sent the <xdb/>.  To get the JID object set
                       the string to "jid", otherwise leave blank for the
                       text string.

     GetType() - returns a string with the type <xdb/> this is.

     GetData() - returns a Net::Jabber::Data object that contains the data
                  in the <data/> of the <xdb/>.

     GetDataTree() - returns an XML::Parser::Tree object that contains the
                      data in the <data/> of the <xdb/>.

     GetXML() - returns the XML string that represents the <xdb/>. This
                is used by the Send() function in Client.pm to send
                this object as a Jabber XDB.

     GetTree() - returns an array that contains the <xdb/> tag in XML::Parser
                 Tree format.

Creation functions
------------------

     SetXDB(to=>string|JID,    - set multiple fields in the <xdb/> at one
            from=>string|JID,    time.  This is a cumulative and over
            id=>string,          writing action.  If you set the "to"
            type=>string,        attribute twice, the second setting is
            errorcode=>string,   what is used.  If you set the status, and
            error=>string)       then set the priority then both will be in
                                 the <xdb/> tag.  For valid settings read the
                                 specific Set functions below.

     SetTo(string) - sets the to attribute.  You can either pass a string
     SetTo(JID)      or a JID object.  They must be a valid Jabber
                     Identifiers or the server will return an error message.
                     (ie.  jabber:bob@jabber.org, etc...)

     SetFrom(string) - sets the from attribute.  You can either pass a string
     SetFrom(JID)      or a JID object.  They must be a valid Jabber
                       Identifiers or the server will return an error message.
                       (ie.  jabber:bob@jabber.org, etc...)

     SetType(string) - sets the type attribute.  Valid settings are:

     get      request information
     set      set information
     result   results of a get

     NewData(string) - creates a new Net::Jabber::Data object with the
                        namespace in the string.  In order for this function
                        to work with a custom namespace, you must define and
                        register that namespace with the XDB module.  For more
                        information please read the documentation for
                        Net::Jabber::Data.  NOTE: Jabber does not support
                        custom XDBs at the time of this writing.  This was just
                        including in case they do at some point.

     Reply(type=>string) - creates a new XDB object and populates the to/from
                           fields.  The type will be set in the <xdb/>.

Test functions
--------------

     DefinedTo() - returns 1 if the to attribute is defined in the <xdb/>,
                   0 otherwise.

     DefinedFrom() - returns 1 if the from attribute is defined in the <xdb/>,
                     0 otherwise.

     DefinedType() - returns 1 if the type attribute is defined in the <xdb/>,
                     0 otherwise.

AUTHOR
======

   By Ryan Eatmon in May of 2000 for http://jabber.org..

COPYRIGHT
=========

   This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


File: pm.info,  Node: Net/LDAP,  Next: Net/LDAP/BER,  Prev: Net/Jabber/XDB,  Up: Module List

Lightweight Directory Access Protocol
*************************************

NAME
====

   Net::LDAP - Lightweight Directory Access Protocol

SYNOPSIS
========

     use Net::LDAP;
     
     $ldap = Net::LDAP->new('ldap.bigfoot.com') or die "$@";
     
     $ldap->bind ;    # an anonymous bind
     
     $mesg = $ldap->search (  # perform a search
                            base   => "c=US",
                            filter => "(&(sn=Barr) (o=Texas Instruments))"
                           );
     
     $mesg->code && die $mesg->error;
     
     foreach $entry ($mesg->all_entries) { $entry->dump; }
     
     $ldap->unbind;   # take down session
     
     
     $ldap = Net::LDAP->new('ldap.umich.edu');
     
     $ldap->bind (   # bind to a directory with dn and password
                  dn       => 'cn=root, o=University of Michigan, c=us',
                  password => 'secret'
                 );
     
     $result = $ldap->add (
                   dn   => 'cn = Barbara Jensen, o=University of Michigan, c=us',
                   attr => [ 'cn'   => ['Barbara Jensen', 'Barbs Jensen'],
                    	 'sn    => 'Jensen',
                    	 'mail' => 'b.jensen@umich.edu',
                    	 'objectclass' => ['top', 'person',
                                               'organizationalPerson',
                                               'inetOrgPerson' ],
                           ]
                 );
     
     $result->code && warn "failed to add entry: ", $result->error ;

DESCRIPTION
===========

   Net::LDAP is a collection of modules that implements a LDAP services API
for Perl programs. The module may be used to search directories or perform
maintenance functions such as add, deleting or modify entries in an LDAP
directory.

   This document assumes that the reader has some knowledge of the LDAP
protocol.

CONSTRUCTOR
===========

new ( HOST [, OPTIONS ] )
     Creates a new Net::LDAP object and opens a connection to the named
     host.  OPTIONS is a list of key-value pairs, valid options are :-

    port
          Port to connect to on the remote server.

    timeout
          Timeout passed to `IO::Socket|IO::Socket' in this node when
          connecting the remote server.  (Default: 120)

    debug
          If passed a non-zero value then debug data will be sent to
          `STDERR'. The bits of this value are :-

               1   Show outgoing packets (using asn_hexdump).
               2   Show incoming packets (using asn_hexdump).
               4   Show outgoing packets (using asn_dump).
               8   Show incoming packets (using asn_dump).

    async
          Perform all operations asynchronously if passed a *true* value.

    onerror
          If set then Net::LDAP will check all responses for errors on all
          methods if the object is in synchronous mode. If an error is
          detected then the specified action will be taken. Valid values
          and their actions are.

         die
               Net::LDAP will croak with an appropriate message.

         warn
               Net::LDAP will warn with an appropriate message.

         undef
               Net::LDAP will warn with an appropriate message if -w is in
               effect.  The method that was called will return undef

         CODEREF
               The given coderef will be called in a scalar context with a
               single argument, the result message. The value returned
               will be the return value for the method that was called.

     Example

          $ldap = Net::LDAP->new('remote.host', async => 1);

METHODS
=======

   Each of the following methods take as arguments some number of fixed
parameters followed by options, these options are passed in a named
fashion, for example

     $mesg = $ldap->bind( "me", password => "mypasswd");

   The return value from these methods is an object derived from the
`Net::LDAP::Message|Net::LDAP::Message' in this node class. The methods of
this class allow you to examine the status of request.

abandon ( ID [, OPTIONS ] )
     Request server to abandon a request. The id to abandon may be passed
     as the first parameter or as part of the options list. The ID may be
     a number or a object which is a sub-class of
     `Net::LDAP::Message|Net::LDAP::Message' in this node, returned from a
     previous method call.

    id
          This option is here for *compatibility only*, and may be removed
          in future.  Previous releases did not take the ID argument which
          replaces this option.

    control
          See `' in this node below

    callback
          See `' in this node below

     Example

          $mesg = $ldap->search( @search_args );
          
          $ldap->abandon( $mesg ); # This could be written as $mesg->abandon

add ( DN [, OPTIONS ] )
     Add an entry to the directory. The *DN* argument can be either a
     `Net::LDAP::Entry|Net::LDAP::Entry' in this node object or a string.

    dn
          This option is here for *compatibility only*, and may be removed
          in future.  Previous releases did not take the *DN* argument
          which replaces this option.

    attrs
          This argument is a reference to a list of attribute-value pairs.
          Attributes with multiple values can be added as either multiple
          entries or the value could be a reference to a list of values.

          This argument is not used if *DN* is a
          `Net::LDAP::Entry|Net::LDAP::Entry' in this node object.

    control
          See `' in this node below

    callback
          See `' in this node below

     Example

          # $entry is an object of class Net::LDAP::Entry
          $mesg = $ldap->add( $entry );
          
          $mesg = $ldap->add( $DN,
            attrs => [
              name  => 'Graham Barr',
              attr  => 'value1',
              attr  => 'value2',
              multi => [qw(value1 value2)]
            ]
          );

bind ( [ DN [, OPTIONS ]] )
     Bind to the server. *DN* is the DN to bind as. An anonymous bind may
     be done by calling bind without any arguments.

    dn
          This option is here for *compatibility only*, and may be removed
          in future.  Previous releases did not take the *DN* argument
          which replaces this option.

    control
          See `' in this node below

    callback
          See `' in this node below

     Only one of the following should be given, if none are given then
     noauth is assumed.

    noauth
    anonymous
          Bind without any password, the value passed with this option is
          ignored. This is the default if no arguments are given.

    password
          Bind with the given password.

    kerberos41
          Bind using Kerberos V4.1 **not supported**.

    kerberos42
          Bind using Kerberos V4.2 **not supported**.

    sasl
          Bind using a SASL mechanism. The argument given should be a
          sub-class of `Authen::SASL|Authen::SASL' in this node.

     Example

          $ldap->bind; # Anonymous bind
          
          $ldap->bind( $DN, password => $password);
          
          # $sasl is an object of class Authen::SASL
          $ldap->bind( $DN, sasl => $sasl, version => 3);

compare ( DN, OPTIONS )
     Perform a comparison on the server.  *DN* is the DN which the
     comparison is to be performed. *DN* May be a string or a
     `Net::LDAP::Entry|Net::LDAP::Entry' in this node object.

    dn
          This option is here for *compatibility only*, and may be removed
          in future.  Previous releases did not take the *DN* argument
          which replaces this option.

    attr
          The name of the attribute to compare.

    value
          The value to compare with.

    control
          See `' in this node below.

    callback
          See `' in this node below.

     Example

          $ldap->compare( $DN,
            attr  => 'cn',
            value => 'Graham Barr'
          );

delete ( DN [, OPTIONS ] )
     Delete *DN* from the server. *DN* May be a string or a
     `Net::LDAP::Entry|Net::LDAP::Entry' in this node object.

    dn
          This option is here for *compatibility only*, and may be removed
          in future.  Previous releases did not take the *DN* argument
          which replaces this option.

    control
          See `' in this node below.

    callback
          See `' in this node below.

     Example

          $ldap->delete( $dn );

moddn ( DN, OPTIONS )
     Modify the DN for *DN* on the server. *DN* May be a string or a
     `Net::LDAP::Entry|Net::LDAP::Entry' in this node object.

    dn
          This option is here for *compatibility only*, and may be removed
          in future.  Previous releases did not take the *DN* argument
          which replaces this option.

    newrdn
          This value should be a new RDN to assign to *DN*.

    deleteoldrdn
          This value should be *true* if the existing RDN is to be deleted.

    newsuperior
          If given this value should be the DN of the new superior for
          *DN*.

    control
          See `' in this node below.

    callback
          See `' in this node below.

     Example

          $ldap->moddn( $dn, newrdn => 'cn=Graham Barr');

modify ( DN, OPTIONS )
     Modify the contents of *DN* on the server. *DN* May be a string or a
     `Net::LDAP::Entry|Net::LDAP::Entry' in this node object.

    dn
          This option is here for *compatibility only*, and may be removed
          in future.  Previous releases did not take the *DN* argument
          which replaces this option.

    add
          The add option should be a reference to a HASH. The values of the
          HASH are the attributes to add, and the values may be a string
          or a reference to a list of values.

    delete
          A reference to an ARRAY of attributes to delete or a reference
          to a HASH (as in add) if only specific values should be deleted.
          If the value for any attribute in the HASH is a reference to an
          empty ARRAY the all instances of the attribute will be deleted.

    replace
          The <replace> option takes a argument in the same form as add,
          but will cause any existing attributes with the same name to be
          replaced. If the value for any attribute in the HASH is a
          reference to an empty ARRAY the all instances of the attribute
          will be deleted.

    changes
          This is an alternative to add, delete and replace where the
          whole operation can be given in a single argument. The argument
          should be a reference to an ARRAY.

          Values in the ARRAY are used in pairs, the first is the operation
          add, delete or replace and the second is a reference to an ARRAY
          of attribute values.

          The attribute value list is also used in pairs. The first value
          in each pair is the attribute name and the second is a reference
          to a list of values.

          Use this form if you want to control the order in which the
          operations will be performed.

    control
          See `' in this node below.

    callback
          See `' in this node below.

     Example

          $ldap->modify( $dn, add => { sn => 'Barr' } );
          
          $ldap->modify( $dn, delete => [qw(faxNumber)]);
          
          $ldap->modify( $dn, delete => { 'telephoneNumber' => '911' });
          
          $ldap->modify( $dn, replace => { 'email' => 'gbarr@pobox.com' });
          
          $ldap->modify( $dn,
            changes => [
              add     => [ sn => 'Barr' ],              # Add sn=Barr
              delete  => [ faxNumber => []], 	       # Delete all fax numbers
              delete  => [ telephoneNumber => ['911']], # delete phone number 911
              replace => [ email => 'gbarr@pobox.com']  # change email address
            ]
          );

search ( OPTIONS )
     Request that a search be performed.  This can be used to read
     attributes from a single entry, from entries immediately below a
     particular entry, or a whole subtree of entries.

     The result is an object of class
     `Net::LDAP::Search|Net::LDAP::Search' in this node.

    base
          The DN that is the base object entry relative to which the
          search is to be performed.

    scope
          By default the search is performed on the whole tree below the
          specified base object. This may be chaned by specifying a scope
          parameter with one of the following values.

         base
               Search only the base object.

         one
               Search the entries immediately below the base object.

         sub
               Search the whole tree below the base object. This is the
               default.

    deref
          By default aliases are dereferenced to locate the base object
          for the search, but not when searching subordinates of the base
          object. This may be changed by specifying a deref parameter with
          one of the following values.

         never
               Do not dereference aliases in searching or in locating the
               base object of the search.

         search
               Dereference aliases in subordinates of the base object in
               searching, but not in locating the base object of the
               search.

         find
               Dereference aliases in locating the base object of the
               search, but not when searching subordinates of the base
               object. This is the default.

         always
               Dereference aliases both in searching and in locating the
               base object of the search.

    sizelimit
          A sizelimit that restricts the maximum number of entries to be
          returned as a result of the search. A value of 0, and the
          default, means that no restriction is requested.  Servers may
          enforce a maximum number of entries to return.

    timelimit
          A timelimit that restricts the maximum time (in seconds) allowed
          for a search. A value of 0, and the default, means that no
          timelimit will be requested.

    typesonly
          An indicator as to whether search results should contain both
          attribute types and values, or just attribute types.  Setting
          this parameter to a *true* value causes only attribute types (no
          values) to be returned.  Setting this field to a false causes
          both attribute types and values to be returned. The default is
          to return both attribute types and values.

    filter
          A filter that defines the conditions an entry in the directory
          must meet in order for it to be returned by the search. This may
          be a string or a `Net::LDAP::Filter|Net::LDAP::Filter' in this
          node object. See `Net::LDAP::Filter|Net::LDAP::Filter' in this
          node for a defintion of the filter format.

    attrs
          A reference to a list of attributes to be returned for each
          entry that matches the search filter.

          If not specified, then the server will return the attributes
          that are specified as accessible by default given your bind
          credentials.

          Certain additional attributes such as "createtimestamp" and other
          operational attributes may also be available for the asking:

               $ldap->search( ... , attrs => ['createtimestamp'] , ... );

          To retreive the default attributes and additional ones, use '*'.

               $ldap->search( ... , attrs => ['*', 'createtimestamp'] , ... );

    control
          See `' in this node below.

    callback
          See `' in this node below.

     Example

          $mesg = $ldap->search(
            base   => $base_dn,
            scope  => 'sub',
            filter => '(|(objectclass=rfc822mailgroup)(sn=jones))'
          );
          
          Net::LDAP::LDIF->new(\*STDOUT,"w")->write($mesg->entries);

unbind
     The unbind method does not take any parameters and will unbind you
     from the server. While some servers may allow you to re-bind or
     perform other operations after unbinding, the only portable operation
     is closing the connection. In the case that you wish to switch to
     another set of credentials while continuing to use the same
     connection, re-binding with another DN and password, without
     unbind-ing, will generally work.

     Example

          $ldap->unbind;

   The following methods are for convenience.

async
     Returns *true* if the LDAP operations are being performed
     asynchronously.

debug ( [ VALUE ] )
     If VALUE is given the debug bit-value will be set to VALUE and the
     previous value will be returned. If not given the bit-value will
     remain unchanged and will be returned.

sync ( [ MESG ] )
     Calling this method will synchronize the client with the server. It
     will not return until all requests have been completed, or id *MESG*
     is given it will return when *MESG* has been completed.

     Returns an error code defined in
     `Net::LDAP::Constant|Net::LDAP::Constant' in this node.

version
     Returns the version of the LDAP protocol that is being used.

CONTROLS
========

   Many of the methods described above accept a control option.  This
allows the user to pass controls to the server as described in LDAPv3. The
value to the control argument may be either a single control or a
reference to an array of controls.

   A control is a reference to a HASH and should contain the three
elements below. If any of the controls are blessed then the methoc to_asn
will be called which should return a reference to a HASH containing the
three elements described below.

type
     This element must be present and is the name of the type of control
     being requested.

critical
     critical is optional and should be a boolean value, if it is not
     specified then it is assumed to be false.

value
     If the control being requested requires a value then this element
     should hold the value for the server.

CALLBACKS
=========

   Most of the above commands accept a callback option. This option should
be a reference to a subroutine. This subroutine will be called for each
packet received from the server as a response to the request sent.

   When the subroutine is called the first argument will be the
`Net::LDAP::Message|Net::LDAP::Message' in this node object which was
returned from the method.

   If the request is a search then multiple packets can be received from
the server. Each entry is received as a separate packet. For each of these
the subroutine will be called with a `Net::LDAP::Entry|Net::LDAP::Entry'
in this node object as the second argument.

   During a search the server may also send a list of references. When such
a list is received then the subroutine will be called with a
`Net::LDAP::Reference|Net::LDAP::Reference' in this node object as the
second argument.

LDAP ERROR CODES
================

   Net::LDAP also exports constants for the error codes that can be
received from the server, see `Net::LDAP::Constant|Net::LDAP::Constant' in
this node.

SEE ALSO
========

   `Net::LDAP::Constant|Net::LDAP::Constant' in this node,
`Net::LDAP::Control|Net::LDAP::Control' in this node,
`Net::LDAP::Entry|Net::LDAP::Entry' in this node,
`Net::LDAP::Filter|Net::LDAP::Filter' in this node,
`Net::LDAP::Message|Net::LDAP::Message' in this node,
`Net::LDAP::Reference|Net::LDAP::Reference' in this node,
`Net::LDAP::Search|Net::LDAP::Search' in this node, `Other online
documentation|Net::LDAP::RFC' in this node

   The homepage for the perl-ldap modules can be found at
http://www.pobox.com/~gbarr/perl-ldap/.

ACKNOWLEDGEMENTS
================

   This document is based on a document originally written by Russell
Fulton <r.fulton@auckland.ac.nz>.

   Chris Ridd @isode.com for the many hours spent testing and contribution
of the ldap* command line utilities.

AUTHOR
======

   Graham Barr <gbarr@pobox.com>

   Please report any bugs, or post any suggestions, to the perl-ldap
mailing list <perl-ldap-dev@lists.sourceforge.net>

COPYRIGHT
=========

   Copyright (c) 1997-2000 Graham Barr. All rights reserved. This program
is free software; you can redistribute it and/or modify it under the same
terms as Perl itself.


File: pm.info,  Node: Net/LDAP/BER,  Next: Net/LDAP/Constant,  Prev: Net/LDAP,  Up: Module List

BER encoding for LDAP
*********************

NAME
====

   Net::LDAP::BER - BER encoding for LDAP

SYNOPSIS
========

     use Net::LDAP::BER;
     
     $ber = Net::LDAP::BER->new;
     
     $ber->encode( # A bind encode
       SEQUENCE => [
         INTEGER  => $mesg->mesg_id,
         REQ_BIND => [
           INTEGER     => $version,
           LDAPDN      => $dn || "",
           $auth_type  => $passwd
         ],
         OPTIONAL => [ BER => $ctrl ]
       ]
     );
     
     $ber->decode( # The decode in Net::LDAP::Message
       $self->result_tag => [
         ENUM     => \$code,
         STRING   => \$dn,
         STRING   => \$error,
         OPTIONAL => [
           LDAP_REFERRAL => [
             STRING => $referral = []
           ]
         ]
       ]
     );

DESCRIPTION
===========

   `Net::LDAP::BER' is a sub-class of *Note Convert/BER: Convert/BER, and
inherits all its methods from *Note Convert/BER: Convert/BER,. It defines
the following tags

REQ_BIND
     [APPLICATION 0] SEQUENCE

REQ_UNBIND
     [APPLICATION 2] NULL

REQ_SEARCH
     [APPLICATION 3] SEQUENCE

REQ_MODIFY
     [APPLICATION 6] SEQUENCE

REQ_ADD
     [APPLICATION 8] SEQUENCE

REQ_DELETE
     [APPLICATION 10] STRING

REQ_MODDN
     [APPLICATION 12] SEQUENCE

REQ_COMPARE
     [APPLICATION 15] SEQUENCE

REQ_ABANDON
     [APPLICATION 16] INTEGER

REQ_EXTEND
     [APPLICATION 17] SEQUENCE

RES_BIND
     [APPLICATION 1] SEQUENCE

RES_SEARCH_ENTRY
     [APPLICATION 4] SEQUENCE

RES_SEARCH_RESULT
     [APPLICATION 5] SEQUENCE

RES_SEARCH_REF
     [APPLICATION 19] SEQUENCE

RES_MODIFY
     [APPLICATION 7] SEQUENCE

RES_ADD
     [APPLICATION 9] SEQUENCE

RES_DELETE
     [APPLICATION 11] SEQUENCE

RES_MODDN
     [APPLICATION 13] SEQUENCE

RES_COMPARE
     [APPLICATION 15] SEQUENCE

RES_EXTEND
     [APPLICATION 24] SEQUENCE

AUTH_NONE
     [CONTEXT 0] STRING

AUTH_SIMPLE
     [CONTEXT 0] STRING

AUTH_KRBV41
     [CONTEXT 1] STRING

AUTH_KRBV42
     [CONTEXT 2] STRING

AUTH_SASL
     [CONTEXT 3] SEQUENCE

SASL_CREDENTIALS
     [CONTEXT 7] STRING

SASL_MECHANISM
     STRING

FILTER_AND
     [CONTEXT 0] SEQUENCE

FILTER_OR
     [CONTEXT 1] SEQUENCE

FILTER_NOT
     [CONTEXT 2] SEQUENCE

FILTER_EQ
     [CONTEXT 3] SEQUENCE

FILTER_SUBSTRS
     [CONTEXT 4] SEQUENCE

FILTER_GE
     [CONTEXT 5] SEQUENCE

FILTER_LE
     [CONTEXT 6] SEQUENCE

FILTER_PRESENT
     [CONTEXT 7] STRING

FILTER_APPROX
     [CONTEXT 8] SEQUENCE

SUBSTR_INITIAL
     [CONTEXT 0] STRING

SUBSTR_ANY
     [CONTEXT 1] STRING

SUBSTR_FINAL
     [CONTEXT 2] STRING

LDAPDN
     STRING

LDAPOID
     STRING

LDAP_CONTROLS
     [CONTEXT 0] SEQUENCE

LDAP_REFERRAL
     [CONTEXT 3] SEQUENCE

EXTEND_REQ_NAME
     [CONTEXT 0] STRING

EXTEND_REQ_VALUE
     [CONTEXT 1] STRING

MOD_SUPERIOR
     [CONTEXT 0] STRING

SEE ALSO
========

   *Note Net/LDAP: Net/LDAP,, *Note Convert/BER: Convert/BER,

ACKNOWLEDGEMENTS
================

   This document is based on a document originally written by Russell
Fulton <`r.fulton@auckland.ac.nz'>.

AUTHOR
======

   Graham Barr <`gbarr@pobox.com'>.

   Please report any bugs, or post any suggestions, to the perl-ldap
mailing list
``<perl-ldap@mail.med.cornell.edu>|mailto:perl-ldap@mail.med.cornell.edu'
in this node'.

COPYRIGHT
=========

   Copyright (c) 1997-2000 Graham Barr. All rights reserved. This program
is free software; you can redistribute it and/or modify it under the same
terms as Perl itself.


File: pm.info,  Node: Net/LDAP/Constant,  Next: Net/LDAP/Control,  Prev: Net/LDAP/BER,  Up: Module List

Constants for use with Net::LDAP
********************************

NAME
====

   Net::LDAP::Constant - Constants for use with Net::LDAP

SYNOPSIS
========

     use Net::LDAP qw(LDAP_SUCCESS LDAP_PROTOCOL_ERROR);

     # import all constants
     use Net::LDAP qw(:all);

DESCRIPTION
===========

   *Net::LDAP::Constant* exports constant subroutines for the following
LDAP error codes.

LDAP_SUCCESS
     Operation completed without error

LDAP_OPERATIONS_ERROR
     Server encountered an internal error

LDAP_PROTOCOL_ERROR
     Unrecognized version number or incorrect PDU structure

LDAP_TIMELIMIT_EXCEEDED
     The time limit on a search operation has been exceeded

LDAP_SIZELIMIT_EXCEEDED
     The maximum number of search results to return has been exceeded.

LDAP_COMPARE_FALSE
     This code is returned when a compare request completes and the
     attribute value given is not in the entry specified

LDAP_COMPARE_TRUE
     This code is returned when a compare request completes and the
     attribute value given is in the entry specified

LDAP_AUTH_METHOD_NOT_SUPPORTED
     Unrecognized SASL mechanism name

LDAP_STRONG_AUTH_REQUIRED
     The server requires authentication be performed with a SASL mechanism

LDAP_PARTIAL_RESULTS
     Returned to version 2 clients when a referral is returned. The
     response will contain a list of URL's for other servers.

LDAP_REFERRAL
     The server is referring the client to another server. The response
     will contain a list of URL's

LDAP_ADMIN_LIMIT_EXCEEDED
     The server has exceed the maximum number of entries to search while
     gathering a list of search result candidates

LDAP_UNAVAILABLE_CRITICAL_EXT
     A control or matching rule specified in the request is not supported
     by the server

LDAP_CONFIDENTIALITY_REQUIRED
     This result code is returned when confidentiality is required to
     perform a given operation

LDAP_SASL_BIND_IN_PROGRESS
     The server requires the client to send a new bind request, with the
     same SASL mechanism, to continue the authentication process

LDAP_NO_SUCH_ATTRIBUTE
     The request referenced an attribute that does not exist

LDAP_UNDEFINED_TYPE
     The request contains an undefined attribute type

LDAP_INAPPROPRIATE_MATCHING
     An extensible matching rule in the given filter does not apply to the
     specified attribute

LDAP_CONSTRAINT_VIOLATION
     The request contains a value which does not meet with certain
     constraints.  This result can be returned as a consequence of

        * The request was to add or modify a user password, and the
          password fails to meet the criteria the server is configured to
          check. This could be that the password is too short, or a
          recognizable word (e.g. it matches one of the attributes in the
          users entry) or it matches a previous password used by the same
          user.

        * The request is a bind request to a user account that has been
          locked

LDAP_TYPE_OR_VALUE_EXISTS
     The request attempted to add an attribute type or value that already
     exists

LDAP_INVALID_SYNTAX
     Some part of the request contained an invalid syntax. It could be a
     search with an invalid filter or a request to modify the schema and
     the given schema has a bad syntax.

LDAP_NO_SUCH_OBJECT
     The server cannot find an object specified in the request

LDAP_ALIAS_PROBLEM
     Server encountered a problem while attempting to dereference an alias

LDAP_INVALID_DN_SYNTAX
     The request contained an invalid DN

LDAP_IS_LEAF
     The specified entry is a leaf entry

LDAP_ALIAS_DEREF_PROBLEM
     Server encountered a problem while attempting to dereference an alias

LDAP_INAPPROPRIATE_AUTH
     The server requires the client which had attempted to bind
     anonymously or without supplying credentials to provide some form of
     credentials

LDAP_INVALID_CREDENTIALS
     The wrong password was supplied or the SASL credentials could not be
     processed

LDAP_INSUFFICIENT_ACCESS
     The client does not have sufficient access to perform the requested
     operation

LDAP_BUSY
     The server is too busy to perform requested operation

LDAP_UNAVAILABLE
     The server in unavailable to perform the request, or the server is
     shutting down

LDAP_UNWILLING_TO_PERFORM
     The server is unwilling to perform the requested operation

LDAP_LOOP_DETECT
     The server was unable to perform the request due to an internal loop
     detected

LDAP_SORT_CONTROL_MISSING
     The search contained a "virtual list view" control, but not a
     server-side sorting control, which is required when a "virtual list
     view" is given.

LDAP_INDEX_RANGE_ERROR
     The search contained a control for a "virtual list view" and the
     results exceeded the range specified by the requested offsets.

LDAP_NAMING_VIOLATION
     The request violates the structure of the DIT

LDAP_OBJECT_CLASS_VIOLATION
     The request specifies a change to an existing entry or the addition
     of a new entry that does not comply with the servers schema

LDAP_NOT_ALLOWED_ON_NONLEAF
     The requested operation is not allowed on an entry that has child
     entries

LDAP_NOT_ALLOWED_ON_RDN
     The requested operation ill affect the RDN of the entry

LDAP_ALREADY_EXISTS
     The client attempted to add an entry that already exists. This can
     occur as a result of

        * An add request was submitted with a DN that already exists

        * A modify DN requested was submitted, where the requested new DN
          already exists

        * The request is adding an attribute to the schema and an
          attribute with the given OID or name already exists

LDAP_NO_OBJECT_CLASS_MODS
     Request attempt to modify the object class of an entry that should
     not be modified

LDAP_RESULTS_TOO_LARGE
     The results of the request are to large

LDAP_AFFECTS_MULTIPLE_DSAS
     The requested operation needs to be performed on multiple servers
     where the requested operation is not permitted

LDAP_OTHER
     An unknown error has occurred

LDAP_SERVER_DOWN
     Net::LDAP cannot establish a connection or the connection has been
     lost

LDAP_LOCAL_ERROR
     An error occurred in Net::LDAP

LDAP_ENCODING_ERROR
     Net::LDAP encountered an error while encoding the request packet that
     would have been sent to the server

LDAP_DECODING_ERROR
     Net::LDAP encountered an error while decoding a response packet from
     the server.

LDAP_TIMEOUT
     Net::LDAP timeout while waiting for a response from the server

LDAP_AUTH_UNKNOWN
     The method of authentication requested in a bind request is unknown to
     the server

LDAP_FILTER_ERROR
     An error occurred while encoding the given search filter.

LDAP_USER_CANCELED
     The user canceled the operation

LDAP_PARAM_ERROR
     An invalid parameter was specified

LDAP_NO_MEMORY
     Out of memory error

LDAP_CONNECT_ERROR
     A connection to the server could not be established

LDAP_NOT_SUPPORTED
     An attempt has been made to use a feature not supported by Net::LDAP

LDAP_CONTROL_NOT_FOUND
     The controls required to perform the requested operation were not
     found.

LDAP_NO_RESULTS_RETURNED
     No results were returned from the server.

LDAP_MORE_RESULTS_TO_RETURN
     There are more results in the chain of results.

LDAP_CLIENT_LOOP
     A loop has been detected. For example when following referals.

LDAP_REFERRAL_LIMIT_EXCEEDED
     The referral hop limit has been exceeded.

SEE ALSO
========

   `Net::LDAP|Net::LDAP' in this node,
`Net::LDAP::Message|Net::LDAP::Message' in this node

AUTHOR
======

   Graham Barr <gbarr@pobox.com>

   Please report any bugs, or post any suggestions, to the perl-ldap
mailing list <perl-ldap-dev@lists.sourceforge.net>

COPYRIGHT
=========

   Copyright (c) 1998-2000 Graham Barr. All rights reserved. This program
is free software; you can redistribute it and/or modify it under the same
terms as Perl itself.


File: pm.info,  Node: Net/LDAP/Control,  Next: Net/LDAP/Control/Paged,  Prev: Net/LDAP/Constant,  Up: Module List

LDAPv3 control object base class
********************************

NAME
====

   Net::LDAP::Control - LDAPv3 control object base class

SYNOPSIS
========

     use Net::LDAP::Control;
     use Net::LDAP::Constant qw( LDAP_CONTROL_MATCHEDVALS );

     $ctrl = Net::LDAP::Control->new(
       type     => "1.2.3.4",
       value    => "help",
       critical => 0
     );

     $mesg = $ldap->search( @args, control => [ $ctrl ]);

     $ctrl = Net::LDAP::Control->new( type => LDAP_CONTROL_MATCHEDVALS );

DESCRIPTION
===========

   `Net::LDAP::Control' is a base-class for LDAPv3 control objects.

CONSTRUCTORS
============

new ARGS
     ARGS is a list of name/value pairs, valid arguments are.

    critical
          A booloean value, if TRUE and the control is unrecognized by the
          server or is inappropriate for the requested operation then the
          server will return an error and the operation will not be
          performed.

          If FALSE and the control is unrecognized by the server or is
          inappropriate for the requested operation then the server will
          ignore the control and perform the requested operation as if the
          control was not given.

          If absent, FALSE is assume.

    type
          A dotted-decimal representation of an OBJECT IDENTIFIER which
          uniquely identifies the control. This prevents conflicts between
          control names.

          This may be ommitted if the contructor is being called on a
          sub-class of Net::LDAP::Control which has registered to be
          associated with an OID.  If the contructor is being called on
          the Net::LDAP::Control package, then this argument must be
          given.  If the given OID has been registered by a package, then
          the returned object will be of the type registered to handle
          that OID.

    value
          Optional information associated with the control. It's format is
          specific to the particular control.

from_asn ASN
     ASN is a HASH reference, normally extracted from a PDU. It will
     contain a type element and optionally critical and value elements. On
     return ASN will be blessed into a package. If type is a registered
     OID, then ASN will be blessed into the registered package, if not
     then ASN will be blessed into Net::LDAP::Control.

     This constructor is used internally by Net::LDAP and assumes that HASH
     passed contains a valid control. It should be used with *caution*.

METHODS
=======

   In addition to the methods listed below, each of the named parameters
to new is also avaliable as a method. type will return the OID of the
control object. value and critical are set/get methods and will return the
current value for each attribute if called without arguments, but may also
be called with arguments to set new values.

error
     If there has been an error returns a description of the error,
     otherwise it will return undef

init
     init will be called as the last step in both contructors. What it
     does will depend on the sub-class. It must always return the object.

register OID
     register is provided for sub-class implementors. It should be called
     as a class method on a sub-class of Net::LDAP::Control with the OID
     that the class will handle. Net::LDAP::Control will remember this
     class and OID pair and use it in the following situations.

        * new is called as a class method on the Net::LDAP::Control
          package and OID is passed as the type. The returned object will
          be blessed into the package that registered the OID.

        * new is called as a class method on a registered package and the
          type is not specified. The type will be set to the OID
          registered by that package.

        * from_asn is called to construct an object from ASN. The returned
          object will be blessed into the package which was registered to
          handle the OID in the ASN.

to_asn
     Returns a structure suitable for passing to Convert::ASN1 for
     encoding. This method will be called by `Net::LDAP|Net::LDAP' in this
     node when the control is used.

     The base class implementation of this method will call the value
     method without arguments to allow a sub-class to encode it's value.
     Sub-classes should not need to override this method.

valid
     Returns true if the object is valid and can be encoded. The default
     implementation for this method is to return TRUE if there is no
     error, but sub-classes may override that.

SEE ALSO
========

   `Net::LDAP|Net::LDAP' in this node

AUTHOR
======

   Graham Barr <gbarr@pobox.com>

   Please report any bugs, or post any suggestions, to the perl-ldap
mailing list <perl-ldap-dev@lists.sourceforge.net>

COPYRIGHT
=========

   Copyright (c) 1999-2000 Graham Barr. All rights reserved. This program
is free software; you can redistribute it and/or modify it under the same
terms as Perl itself.


