This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: perlrpcgen/Fstream,  Next: pod/Win32,  Prev: overload,  Up: Module List

a class to encapsulate a filehandle as a stream;
************************************************

NAME
====

   Fstream - a class to encapsulate a filehandle as a stream;

SYNOPSIS
========

     use Fstream;

DESCRIPTION
===========

   Fstream wraps a filehandle and provides methods that make it easier to
write a lexer. Why doesn't Perl have ungetc?

Class Methods
-------------

new($filehandle, $name) Creates an Fstream object from $filehandle (a filehandle glob reference). $name is a string which is stored for debugging purposes and may be accessed with &name.
Object Methods
--------------

getc Returns the next character in the stream, or the empty string if the stream has been exhausted.
ungetc Pushes the last character read back onto the stream, where it will be returned on the next call to getc. You may only push one character back on the stream.
lineno Returns the line-number of the stream (based on the number of newlines seen).
name Returns the name that was given in the constructor.

File: pm.info,  Node: pod/Win32,  Next: pqedit,  Prev: perlrpcgen/Fstream,  Up: Module List

Interfaces to some Win32 API Functions
**************************************

NAME
====

   Win32 - Interfaces to some Win32 API Functions

DESCRIPTION
===========

   Perl on Win32 contains several functions to access Win32 APIs. Some are
included in Perl itself (on Win32) and some are only available after
explicitly requesting the Win32 module with:

     use Win32;

   The builtin functions are marked as [CORE] and the other ones as [EXT]
in the following alphabetical listing. The Win32 module is not part of the
Perl source distribution; it is distributed in the libwin32 bundle of
Win32::* modules on CPAN. The module is already preinstalled in binary
distributions like ActivePerl.

Alphabetical Listing of Win32 Functions
---------------------------------------

Win32::AbortSystemShutdown(MACHINE)
     [EXT] Aborts a system shutdown (started by the InitiateSystemShutdown
     function) on the specified MACHINE.

Win32::BuildNumber()
     [CORE] Returns the ActivePerl build number. This function is only
     available in the ActivePerl binary distribution.

Win32::CopyFile(FROM, TO, OVERWRITE)
     [CORE] The Win32::CopyFile() function copies an existing file to a new
     file. All file information like creation time and file attributes will
     be copied to the new file. However it will not copy the security
     information. If the destination file already exists it will only be
     overwritten when the OVERWRITE parameter is true. But even this will
     not overwrite a read-only file; you have to unlink() it first
     yourself.

Win32::DomainName()
     [CORE] Returns the name of the Microsoft Network domain that the
     owner of the current perl process is logged into.

Win32::ExpandEnvironmentStrings(STRING)
     [EXT] Takes STRING and replaces all referenced environment variable
     names with their defined values. References to environment variables
     take the form `%VariableName%'. Case is ignored when looking up the
     VariableName in the environment. If the variable is not found then the
     original `%VariableName%' text is retained.  Has the same effect as
     the following:

          $string =~ s/%([^%]*)%/$ENV{$1} || "%$1%"/eg

Win32::FormatMessage(ERRORCODE)
     [CORE] Converts the supplied Win32 error number (e.g. returned by
     Win32::GetLastError()) to a descriptive string.  Analogous to the
     perror() standard-C library function.  Note that $^E used in a string
     context has much the same effect.

          C:\> perl -e "$^E = 26; print $^E;"
          The specified disk or diskette cannot be accessed

Win32::FsType()
     [CORE] Returns the name of the filesystem of the currently active
     drive (like 'FAT' or 'NTFS'). In list context it returns three values:
     (FSTYPE, FLAGS, MAXCOMPLEN). FSTYPE is the filesystem type as before.
     FLAGS is a combination of values of the following table:

          0x00000001  supports case-sensitive filenames
          0x00000002  preserves the case of filenames
          0x00000004  supports Unicode in filenames
          0x00000008  preserves and enforces ACLs
          0x00000010  supports file-based compression
          0x00000020  supports disk quotas
          0x00000040  supports sparse files
          0x00000080  supports reparse points
          0x00000100  supports remote storage
          0x00008000  is a compressed volume (e.g. DoubleSpace)
          0x00010000  supports object identifiers
          0x00020000  supports the Encrypted File System (EFS)

     MAXCOMPLEN is the maximum length of a filename component (the part
     between two backslashes) on this file system.

Win32::FreeLibrary(HANDLE)
     [EXT] Unloads a previously loaded dynamic-link library. The HANDLE is
     no longer valid after this call. See
     `LoadLibrary|Win32::LoadLibrary(LIBNAME)' in this node for
     information on dynamically loading a library.

Win32::GetArchName()
     [EXT] Use of this function is deprecated. It is equivalent with
     $ENV{PROCESSOR_ARCHITECTURE}. This might not work on Win9X.

Win32::GetChipName()
     [EXT] Returns the processor type: 386, 486 or 586 for Intel
     processors, 21064 for the Alpha chip.

Win32::GetCwd()
     [CORE] Returns the current active drive and directory. This function
     does not return a UNC path, since the functionality required for such
     a feature is not available under Windows 95.

Win32::GetFullPathName(FILENAME)
     [CORE] GetFullPathName combines the FILENAME with the current drive
     and directory name and returns a fully qualified (aka, absolute) path
     name. In list context it returns two elements: (PATH, FILE) where
     PATH is the complete pathname component (including trailing backslash)
     and FILE is just the filename part.  Note that no attempt is made to
     convert 8.3 components in the supplied FILENAME to longnames or
     vice-versa.  Compare with Win32::GetShortPathName and
     Win32::GetLongPathName.

     This function has been added for Perl 5.6.

Win32::GetLastError()
     [CORE] Returns the last error value generated by a call to a Win32 API
     function.  Note that $^E used in a numeric context amounts to the
     same value.

Win32::GetLongPathName(PATHNAME)
     [CORE] Returns a representaion of PATHNAME composed of longname
     components (if any).  The result may not necessarily be longer than
     PATHNAME.  No attempt is made to convert PATHNAME to the absolute
     path.  Compare with Win32::GetShortPathName and
     Win32::GetFullPathName.

     This function has been added for Perl 5.6.

Win32::GetNextAvailDrive()
     [CORE] Returns a string in the form of "<d>:" where <d> is the first
     available drive letter.

Win32::GetOSVersion()
     [CORE] Returns the array (STRING, MAJOR, MINOR, BUILD, ID), where the
     elements are, respectively: An arbitrary descriptive string, the
     major version number of the operating system, the minor version
     number, the build number, and a digit indicating the actual operating
     system. For ID, the values are 0 for Win32s, 1 for Windows 9X and 2
     for Windows NT. In scalar context it returns just the ID.

Win32::GetShortPathName(PATHNAME)
     [CORE] Returns a representation of PATHNAME composed only of short
     (8.3) path components.  The result may not necessarily be shorter
     than PATHNAME.  Compare with Win32::GetFullPathName and
     Win32::GetLongPathName.

Win32::GetProcAddress(INSTANCE, PROCNAME)
     [EXT] Returns the address of a function inside a loaded library. The
     information about what you can do with this address has been lost in
     the mist of time. Use the Win32::API module instead of this deprecated
     function.

Win32::GetTickCount()
     [CORE] Returns the number of milliseconds elapsed since the last
     system boot. Resolution is limited to system timer ticks (about 10ms
     on WinNT and 55ms on Win9X).

Win32::InitiateSystemShutdown(MACHINE, MESSAGE, TIMEOUT, FORCECLOSE, REBOOT)
     [EXT] Shutsdown the specified MACHINE, notifying users with the
     supplied MESSAGE, within the specified TIMEOUT interval. Forces
     closing of all documents without prompting the user if FORCECLOSE is
     true, and reboots the machine if REBOOT is true. This function works
     only on WinNT.

Win32::IsWinNT()
     [CORE] Returns non zero if the Win32 subsystem is Windows NT.

Win32::IsWin95()
     [CORE] Returns non zero if the Win32 subsystem is Windows 95.

Win32::LoadLibrary(LIBNAME)
     [EXT] Loads a dynamic link library into memory and returns its module
     handle. This handle can be used with Win32::GetProcAddress and
     Win32::FreeLibrary. This function is deprecated. Use the Win32::API
     module instead.

Win32::LoginName()
     [CORE] Returns the username of the owner of the current perl process.

Win32::LookupAccountName(SYSTEM, ACCOUNT, DOMAIN, SID, SIDTYPE)
     [EXT] Looks up ACCOUNT on SYSTEM and returns the domain name the SID
     and the SID type.

Win32::LookupAccountSID(SYSTEM, SID, ACCOUNT, DOMAIN, SIDTYPE)
     [EXT] Looks up SID on SYSTEM and returns the account name, domain
     name, and the SID type.

Win32::MsgBox(MESSAGE [, FLAGS [, TITLE]])
     [EXT] Create a dialogbox containing MESSAGE. FLAGS specifies the
     required icon and buttons according to the following table:

          0 = OK
          1 = OK and Cancel
          2 = Abort, Retry, and Ignore
          3 = Yes, No and Cancel
          4 = Yes and No
          5 = Retry and Cancel

          MB_ICONSTOP          "X" in a red circle
          MB_ICONQUESTION      question mark in a bubble
          MB_ICONEXCLAMATION   exclamation mark in a yellow triangle
          MB_ICONINFORMATION   "i" in a bubble

     TITLE specifies an optional window title. The default is "Perl".

     The function returns the menu id of the selected push button:

          0  Error

          1  OK
          2  Cancel
          3  Abort
          4  Retry
          5  Ignore
          6  Yes
          7  No

Win32::NodeName()
     [CORE] Returns the Microsoft Network node-name of the current machine.

Win32::RegisterServer(LIBRARYNAME)
     [EXT] Loads the DLL LIBRARYNAME and calls the function
     DllRegisterServer.

Win32::SetCwd(NEWDIRECTORY)
     [CORE] Sets the current active drive and directory. This function
     does not work with UNC paths, since the functionality required to
     required for such a feature is not available under Windows 95.

Win32::SetLastError(ERROR)
     [CORE] Sets the value of the last error encountered to ERROR. This is
     that value that will be returned by the Win32::GetLastError()
     function. This functions has been added for Perl 5.6.

Win32::Sleep(TIME)
     [CORE] Pauses for TIME milliseconds. The timeslices are made available
     to other processes and threads.

Win32::Spawn(COMMAND, ARGS, PID)
     [CORE] Spawns a new process using the supplied COMMAND, passing in
     arguments in the string ARGS. The pid of the new process is stored in
     PID. This function is deprecated. Please use the Win32::Process module
     instead.

Win32::UnregisterServer(LIBRARYNAME)
     [EXT] Loads the DLL LIBRARYNAME and calls the function
     DllUnregisterServer.


File: pm.info,  Node: pqedit,  Next: private,  Prev: pod/Win32,  Up: Module List

Web-based database table editor.
********************************

NAME
====

   pqedit.cgi - Web-based database table editor.

SYNOPSIS
========

   'http://www.domain.edu/mod_perl/pqedit.cgi?server=sqlserver
&server_type=*oracle*
&database=mydb&table=tablename&username=user&password=pwd
&helppage=http://www.domain.edu/helpfile.html &labels=field1name;Field 1
Label,field2name;Field 2 Label
&subedit_tables=table1*%2C*table2&button_subedit=1
&web_body_bgcolor=html_bgcolor &web_textarea_columns=number_of_columns
&web_textarea_rows=number_of_columns
&begin_html_include=/subweb_directory/html_to_include.html
&middle_html_include=/subweb_directory/html_to_include.html
&end_html_include=/subweb_directory/html_to_include.html
&disable_lookup=nonlookup_table&no_schemacache=1
&label_match=label_match_string,label_match_string2,...
&*auto_field*=table,field,replacement;...
&*replace_field*=table,field,replacement;...
&*pq_*fieldname**=field_value&*pqsearch_*fieldname**=1
&*pk_value*=tab_delimited_list_of_primary_key_values &Overview=1
&single_window=ON &nondisplay=table,field;...  &readonly=table,field;...
&pqdebug=1'

     or

   <FORM METHOD="POST" ACTION="http://www.domain.edu/mod_perl/pqedit.cgi"
NAME="PQ Edit">     <INPUT TYPE="hidden" NAME="server" VALUE="sqlserver">
  <INPUT TYPE="hidden" NAME="server_type" VALUE="oracle">     <INPUT
TYPE="hidden" NAME="database" VALUE="mydb">     <INPUT TYPE="hidden"
NAME="table" VALUE="tablename">     <INPUT TYPE="hidden" NAME="username"
VALUE="user">     <INPUT TYPE="hidden" NAME="password" VALUE="pwd">
<INPUT TYPE="hidden" NAME="helppage"
VALUE='http://www.domain.edu/helpfile.html'>     <INPUT TYPE="hidden"
NAME="labels" VALUE='field1name;Field 1 Label,field2name;Field 2 Label'>
 <INPUT TYPE="hidden" NAME="subedit_tables" VALUE="table1*%2C*table2">
<INPUT TYPE="hidden" NAME="button_subedit" VALUE="1">     <INPUT
TYPE="hidden" NAME="web_body_bgcolor" VALUE="html_bgcolor">     <INPUT
TYPE="hidden" NAME="web_textarea_columns" VALUE="number_of_columns">
<INPUT TYPE="hidden" NAME="web_textarea_rows" VALUE="number_of_rows">
<INPUT TYPE="hidden" NAME="begin_html_include"
VALUE="/subweb_directory/html_to_include.html">     <INPUT TYPE="hidden"
NAME="middle_html_include" VALUE="/subweb_directory/html_to_include.html">
   <INPUT TYPE="hidden" NAME="end_html_include"
VALUE="/subweb_directory/html_to_include.html">     <INPUT TYPE="hidden"
NAME="disable_lookup" VALUE="nonlookup_table">     <INPUT TYPE="hidden"
NAME="label_match" VALUE="label_match_string,label_match_string2,...">
<INPUT TYPE="hidden" NAME="*replace_field*"
VALUE="table,field,replacement;...">     <INPUT TYPE="hidden"
NAME="no_schemacache" VALUE="1">     <INPUT TYPE="hidden"
NAME="*pq_*fieldname**" VALUE="field value">     <INPUT TYPE="hidden"
NAME="*pqsearch_*fieldname**" VALUE="1">     <INPUT TYPE="hidden"
NAME="*pk_value*" VALUE="tab_delimited_list_of_primary_key_values">
<INPUT TYPE="hidden" NAME="Overview" VALUE="1">     <INPUT TYPE="hidden"
NAME="single_window" VALUE="ON">     <INPUT TYPE="hidden"
NAME="nondisplay" VALUE="table,field;...">     <INPUT TYPE="hidden"
NAME="readonly" VALUE="table,field;...">     <INPUT TYPE="hidden"
NAME="pqdebug" VALUE="1"> </FORM>

   *All parameters are optional.*  pqedit.cgi may be run from a shell in
offline mode.  It will then prompt you for the parameters:

   (offline mode: enter name=value pairs on standard input).

ABSTRACT
========

   The pqedit.cgi perl script is a Perl CGI script designed to allow easy
editing of any Transact-SQL (Sybase or MS SQL server) or Oracle compliant
database table.  It is designed to provide a web, CGI form interface for
editing any arbitrary database table-sufficient information to provide a
reasonable form interface is acquired dynamically from the database server
itself.

   It runs on a web server as a Perl 5 CGI script that uses the CGI,
Apache::Sybase::DBlib, Sybase::DBlib, Win32::ODBC, RDBAL, RDBAL::Schema
modules.

INSTALLATION:
=============

   To install this package, just change to the directory in which this
file is found and type the following:

     perl Makefile.PL
     make
     make test
     make install

   And then copy pqedit.cgi to a place in your web directory tree that
allows CGI scripts to run (if your web server supports mod_perl, a
mod_perl location is preferred).  pqedit.cgi will be copied to your
'/usr/local/bin' directory also.

   The mssql_pqweb.sql or sybase_pqweb.sql DDL scripts may be used to
create the appropriate tables in the optional pqweb database.  See the
comments at the top of these files for their usage.

DESCRIPTION
===========

   PQ Edit uses the RDBAL::Schema module to query the database for
information about the tables and fields available.  Based on this
information, it tries construct a reasonable interface for editing any
table of interest.

   PQ Edit does not maintain a connection to the database-it reconnects to
the database server on each action.  PQ Edit passes the username and
password given to it to itself on each action so that it can reconnect to
the database server.

   PQEdit assumes that there are not any tabs in any of the fields being
displayed or edited (it will turn each tab into a space).

   PQEdit assumes that the names of the tables' fields do not have 15
underscores in a row as part of the name (Example:
'server.owner.table.my_______________field' is not allowed).

   If called with no CGI parameters, it will prompt the user for:

server
database
table
username
password
   or some or all of these may be passed as CGI GET or POST parameters.

PQEdit parameters
=================

server
------

   The name of the Transact-SQL database server (Sybase or MS SQL) to
connect to.

server_type=oracle
------------------

   This tells PQ Edit that it is an Oracle database which it is talking to.
This parameter is mandatory for the correct working of PQ Edit with an
Oracle database but should not be used for all Transact-SQL databases.

database
--------

   The name of the database on the database server that contains the
table(s) to edit.

table
-----

   The name of the database table to start editing.

username
--------

   The username to use to login to the database server.

password
--------

   The password to use to login to the database server.

helppage
--------

   The URL of an HTML page which contain bookmarks which correspond to the
names of the fields in the database.  If this parameter is given, then PQ
Edit will make the labels of the form's fields into clickable links
pointing to *htmlpage*#*fieldname*.  If a fieldname is part of a foreign
key tuple, then the bookmark which will be used will consist of the field
names seperated by ' and ' (Example: 'field1 and field2').

   The helppage value may also be retrieved from the optional pqweb
database.

labels
------

   This parameter may contain a list of comma seperated pairs of fields
and their overridden labels.  The field;label pair is seperated by a
semicolon.

   Example: labels=field1name;Field 1 Label,field2name;Field 2 Label

subedit_tables
--------------

   A comma seperated list of tables that should be also made available for
editing.  (NOTE: the HTML escaped form for comma is *%2C*. )

button_subedit
--------------

   When given a true value, 1, uses push buttons instead of radio buttons
for selecting (and switching to) another table for editing.

web_body_bgcolor
----------------

   An HTML background color, BGCOLOR, value for the displayed pages.

web_textarea_columns
--------------------

   The number of text columns to use for larger character fields.  Any
character field larger than this value uses a text area CGI field instead
of a text CGI field for editing.  The default is 61.

web_textarea_rows
-----------------

   The number of text rows to use for larger character fields.  The text
area field will only be as large as is necessary based on the size of the
character field-this value limits the maximum number of rows used.  The
default is 2.

begin_html_include
------------------

   A file which contains HTML to include near the beginning of the PQ Edit
form.  The specification of this file should be the absolute path relative
to the root of the web hierarchy.  Example: '/mydir/helpfile.html'.  This
file should not contain the <HTML>, <BODY>, </BODY>, or </HTML> tags.

middle_html_include
-------------------

   A file which contains HTML to include near the middle of the PQ Edit
form.  The specification of this file should be the absolute path relative
to the root of the web hierarchy.  Example: '/mydir/helpfile.html'.  This
file should not contain the <HTML>, <BODY>, </BODY>, or </HTML> tags.

end_html_include
----------------

   A file which contains HTML to include near the end of the PQ Edit form.
The specification of this file should be the absolute path relative to
the root of the web hierarchy.  Example: '/mydir/helpfile.html'.  This
file should not contain the <HTML>, <BODY>, </BODY>, or </HTML> tags.

disable_lookup
--------------

   A comma seperated list of tables that should *NOT* used as Lookup
Tables or to provide the values and labels for Pull Down Menus.  (NOTE:
the HTML escaped form for comma is *%2C*. )

label_match
-----------

   A comma seperated list of strings to use to match field names against
when lookup for the field to use as a label for lookup fields.  The
default strings (in the order used for matching is: 'description',
'comment', '_name', 'label', 'desc' (feedback welcomed on this default
list).

   So if the parent table used to create a lookup pulldown list has a
field such as 'mydescription' or 'foo_comment' PQ Edit will use the field
'mydescription'.

replace_field auto_field
------------------------

   A semicolan seperated list of table,field,SQL:replacement or
table,field,VALUE:replacement or table,field,replacement.

   *replace_field* always replaces a fields values whereas *auto_field*
only replaces values of fields which are left blank (NULL).
*replace_field* fields are shown as read-only fields on the PQ Edit form.

   Specifies values for fields for inserts or updates.  The replacement
portion is processed to replace variables in the list specified below as
well as all variables of type $pq_field.  If SQL: is specified, then the
replacement is used as a valid command to be executed on the database
server, with the resulting single value replacing that field's value for
the insert or update operation.  If SQL: not is specified, then the
replacement replaces that field's value for the insert or update operation.

   For example:

   pqedit.cgi?replace_field=*main_table*,*first_field*,SQL:*select
'$remote_address'*

   would execute: "select '*ip_address*'" on the database server and put
the first value returned into the *first_field* value for the insert or
update statement of table *main_table*.

   or

   pqedit.cgi?replace_field=main_table,first_field,VALUE:$remote_address
$remote_user $pq_another_field

   would put '*ip_address* username *another_field*' into the
*first_field* value for the insert or update statement of table
*main_table*.

   Replacement variables:

$pq_field
     $pq_field gives the current value (from the PQ Edit form) of some
     other table field from the same record.

$referer
     The URL of the page the browser was viewing prior to fetching your
     script. Not available for all browsers.

$remote_address
     The dotted IP address of the remote host.

$remote_ident
     The identity-checking information from the remote host. Only
     available if the remote host has the identd daemon turned on.

$remote_host
     Either the remote host name or IP address. if the former is
     unavailable.

$remote_user
     The name given by the remote user during password authorization.

$script_name
     The script name as a partial URL, for self-refering scripts.

$server_name
     The name of the WWW server the script is running under.

$server_admin
     The name of the administrator of the WWW server the script is running
     under.

$server_software
     The name and version of the server software.

$virtual_host
     When using the virtual host feature of some servers, the name of the
     virtual host the browser is accessing.

$server_port
     The communications port the server is using.

$user_agent
     The identity of the remote user's browser software, e.g.
     "Mozilla/1.1N (Macintosh; I; 68K)"

$user_name
     Attempts to obtain the remote user's name, using a variety of
     environment variables. This only works with older browsers such as
     Mosaic. Netscape does not reliably report the user name!

$datetime
     The current date and time as a standard string.

$unique_id
     The Apache web server generated unique ID.

pq_fieldname
------------

   Values for the fields are passed to PQ Edit in this format to provide
default values for the form's fields.  Example, assuming database field:
telephone_number is: pq_telephone_number='(314) 555-1111'.

pqsearch_fieldname
------------------

   Setting this to one as well as setting the corresponding
pq_*fieldname*, will allow setting the search criteria for the record(s)
to be displayed.  The 'Overview' option may be used with the
pq_*fieldname* and pqsearch_*fieldname* options.

Overview
--------

   Setting this to one (1) will display an Overview ('View Search Set')
window with the search parameters set by the pq_*fieldname* and
pqsearch_*fieldname* parameters.

single_window
-------------

   Value none or 'ON'.  Used to force disabling of multiple window frames.

readonly
--------

   A list of fields to display but not allow to be edited.

nondisplay
----------

   A list of fields to not display.

no_schemacache
--------------

   When given a true value, 1, causes PQ Edit to not use the cached copy
of the schema and to write out a new schema cache.  Note that this applies
for the whole PQ Edit session.

pqdebug
-------

   When given a true value, 1, causes PQ Edit to run in a debugging mode.

PQ Web Database Parameters
==========================

   An optional database may be used to store certain parameters used by
PQEdit.

   The parameters that may be stored in the optional pqweb database are:

helppage
          The URL of the helppage to use.

labels
          The overridden labels for table fields

web_body_bgcolor
          The web pages background color.

pqweb_server
------------

   The name of the database server which contains the pqweb database.

pqweb_database
--------------

   The name of the pqweb database.  This defaults to pqweb.

pqweb_username
--------------

   The username to use when connecting to the pqweb database.  This account
only needs 'select' permissions.

pqweb_password
--------------

   The password to use when connecting to the pqweb database.

pqweb_entry
-----------

   Which pqweb entry to use (the pqweb..pqweb.pq value).

PQ Edit Frames
==============

   When PQ Edit is in multiple window frame mode (single_window != 'ON'),
the names of the frames which it uses are in the form:

pqedittable for Editing windows
overviewtable for Overview windows
   If it is desired, a Frameset HTML window could be constructed prior to
invoking PQ Edit which would contain the PQ Edit frames as subframes.

AUTHOR INFORMATION
==================

   Brian H. Dunford-Shore   brian@ibc.wustl.edu

   Copyright 1998, Washington University School of Medicine, Institute for
Biomedical Computing.  All rights reserved.

   This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

   Address bug reports and comments to: www@ibc.wustl.edu

CREDITS
=======

   Thanks very much to:

   *David J. States* (states@ibc.wustl.edu)

   and

   *Fyodor Krasnov* (fyodor@bws.aha.ru)

     for suggestions and bug fixes.

BUGS
====

   You really mean 'extra' features ;).  None known.

TODO
====

   These are features that would be nice to have and might even happen
someday (especially if YOU write it).

More control of the 'Look and Feel' of the HTML page:
     (colors, fonts, etc.).

Other types of database servers:
     (PostgreSQL, mSQL, mySQL, etc.).  (Note: this depends on there being
     a version of RDBAL and RDBAL::Schema for the database in question).

SEE ALSO
========

   CGI - http://www.ibc.wustl.edu/perl5/other/CGI.html

   *Sybase::DBlib* - http://www.ibc.wustl.edu/perl5/other/sybperl.html

   *RDBAL* - http://www.ibc.wustl.edu/perl5/other/RDBAL.html

   *RDBAL::Schema* - http://www.ibc.wustl.edu/perl5/other/RDBAL/Schema.html


File: pm.info,  Node: private,  Next: protect,  Prev: pqedit,  Up: Module List

Add private data members to Perl classes
****************************************

NAME
====

     private - Add private data members to Perl classes

SYNOPSIS
========

     package GI::Joe;

     use private qw( _SexualPrefs _IsSpy );

     # see the protected man page for an example

DESCRIPTION
===========

*Private member.*
     Internal data or functionality.  An attribute or method only directly
     accessible to the methods of the same class and inaccessible from any
     other scope.  In Perl, notionally private attributes and members are
     conventionally given names beginning with an underscore.

     From *"Object Oriented Perl"* by Damian Conway

   private.pm adds a list of keys as private data members to the current
class.  See *Note Public: public, for more info.

   Private data members are those pieces of data which are expected to be
only accessed by methods of the class which owns them.  They are not
inherited by subclasses.

   private.pm serves a subset of the functionality of fields.pm.

     use private qw(_Foo);

   is almost exactly the same as:

     use fields qw(_Foo);

   with the exception that you can (if you REALLY want to) do something
like this:

     use private qw(Foo);

   Whereas one cannot do this with fields.pm. (Note: This is considered
unwise and private.pm will scream about it if you have Perl's warnings on.)

   Additionally, private.pm is a bit clearer in its intent and is not
necessarily implying use of pseudo-hashes.

EXAMPLES
========

   See `SYNOPSIS', *Note Protected: protected, for an example of use.

MUSINGS
=======

   I fully expect private.pm to eventually mutate into a real pragma
someday when a better formalized OO data system for Perl supplants the
current fledgling pseudo-hashes.

AUTHOR
======

   Michae G Schwern <schwern@pobox.com>

SEE ALSO
========

   *Note Public: public,, *Note Protected: protected,, *Note Fields:
fields,, *Note Base: base,, *Note Class/Fields: Class/Fields,


File: pm.info,  Node: protect,  Next: protected,  Prev: private,  Up: Module List

allows the declaration of protected subs
****************************************

NAME
====

     protect - allows the declaration of protected subs

SYNOPSIS
========

     package FooPackage;
     use protect;

     members qw ( Bar Baz );

     sub foo {
     	is private;
     	print "Only FooPackage can use me\n";
     }

     sub foz {
     	is member;
     	print "Only packages FooPackage, Bar, and Baz can use me.\n";
     }

     sub fail {
     	is public;
     	print "Anybody can use me!\n";
     }

DESCRIPTION
===========

     This module allows you to C<protect> your subs from outside callers, in a
     way similar to C++ or Java.  You can declare member subs, private subs, or
     public subs.
     The truth is, unfortunatly, that the subs aren't actually being declared,
     public, member, or private. What actually happens is a juicy bit of runtime
     checking, with perl's C<caller()> function to see where the subroutine call is
     coming from.

FUNCTION is
===========

     C<is> is allows you to declare set the subroutine as one of three modes.

MODES
=====

     The following are all modes that can be set by using the is function.

MODE private
          By setting your subroutine as C<private>, no-one can call it from outside
          the package that it was declared in.  Doing so will cause the program to
          die.

MODE member
          By setting the C<member> mode, only the current package and those
          packages that are declared as C<members> of the current package are
          allowed to call the subroutine.

MODE public
          By declaring C<public> you are actually doing nothing at all, but it looks
          nice to declare a function public, when every other sub is declared
          something or other.

FUNCTION members
================

     C<members> allows you to declare members of the current package family,
     and therefore use subroutines declared as member. members'ing is one way
     only. ie 'Just because you lent me your basketball, doesn't mean I'll lend
     you mine'.

FUNCTION nowarn
===============

     C<nowarn> allows you to have protect simply die without explaining why it
     did so.  This is in order to help restrict attacks where it is possible for
     people to see the runtime errors generated by the script.

BUGS
====

     C<private> and C<member> methods/functions can still be redefined without
     the private/member attribute.

     Both private and member methods/functions can be called by simply entering
     the package that they were declared in.

FIXES
=====

     C<protect> now exports a lot less into the namespace, thanks to the
     wonders of C<is>.

     C<members> and C<member> functions now work like they should.

AUTHOR
======

     James Duncan <jduncan@hawk.igs.net>

SEE ALSO
========

     perl(1), perlfunc(1)


File: pm.info,  Node: protected,  Next: ptkFAQ,  Prev: protect,  Up: Module List

"private" data fields which are inherited by child classes
**********************************************************

NAME
====

   protected - "private" data fields which are inherited by child classes

SYNOPSIS
========

     package Foo;
     use public      qw(foo bar );
     use private     qw(_private);
     use protected   qw(_pants spoon);
     
     sub squonk {
         my($self) = shift;
         $self->{_pants} = 'Infinite Trousers';
         $self->{spoon}  = 'What stirs me, stirs everything';
         ...
     }
     
     package Bar;
     # Inherits foo, bar, _pants and spoon
     use base qw(Foo);
     ...

DESCRIPTION
===========

*Protected member.*
     Restricted data or functionality.  An attribute or method only
     directly accessible to methods of the same class or of a subclass, but
     inaccessible from any other scope.

     From *"Object Oriented Perl"* by Damian Conway

   The `protected' module implements something like Protected data members
you might find in a language with a more traditional OO implementation
such as C++.

   Protected data members are similar to private ones with the notable
exception in that they are inherited by subclasses.  This is useful where
you have private information which would be useful for subclasses to know
as well.

   For example: A class which stores an object in a database might have a
protected member "_Changed" to keep track of changes to the object so it
does not have to waste time re-writing the entire thing to disk.
Subclasses of this obviously need a _Changed field as well, but it would
be breaking encapsilation if the author had to remember to "use fields
qw(_Changed)" (Assuming, of course, they're using fields and not just a
plain hash.  In which case forget this whole module.)

The Camel Behind The Curtain
----------------------------

   In reality, there is little difference between a "protected" variable
and a "public" on in Perl.  The only real difference is that the protected
module doesn't care what the field is called (ie. if it starts with an
underscore or not) whereas fields uses the name to determine if the
variable is public or private (ie. inherited or not).

AUTHOR
======

   Michael G Schwern <schwern@pobox.com>

SEE ALSO
========

   *Note Public: public,, *Note Private: private,, *Note Fields: fields,,
*Note Class/Fields: Class/Fields,, *Note Base: base,


File: pm.info,  Node: ptkFAQ,  Next: public,  Prev: protected,  Up: Module List

ptkFAQ
******

NAME
====

   ptkFAQ

AUTHOR
======

   Peter Prymmer pvhp@lns62.lns.cornell.edu


File: pm.info,  Node: public,  Next: re,  Prev: ptkFAQ,  Up: Module List

Add public data members to Perl classes
***************************************

NAME
====

     public - Add public data members to Perl classes

SYNOPSIS
========

     package GI::Joe;

     use public qw( Name Rank Serial_Number );

     # see the protected man page for an example of use

DESCRIPTION
===========

*Public member.*
     Externally visible data or functionality.  An attribute or method that
     is directly accessable from scopes outside the class.  In Perl, most
     members are, by their standard semantics, public.  By convention,
     attributes of Perl classes are regarded as private, as are methods
     whose names begin with an underscore.

     From *"Object Oriented Perl"* by Damian Conway

   public.pm adds a list of keys as public data members to the current
class.  This is useful when using pseudo-hashes as objects, or for simply
imposing a bit more structure on your Perl objects than is normally
expected.  It allows you to use the methods provided in Class::Fields.

   Public data members are those pieces of data which are expected to be
regularly accessed by methods, functions and programs outside the class
which owns them.  They are also inherited by any subclasses.

   public.pm serves a subset of the functionality of fields.pm.

     use public qw(Foo);

   is almost exactly the same as:

     use fields qw(Foo);

   with the exception that you can (if you REALLY want to) do something
like this:

     use public qw(_Foo);

   Whereas one cannot do this with fields.pm. (Note: This is considered
unwise and public.pm will scream about it if you have Perl's warnings on.)

   Additionally, public.pm is a bit clearer in its intent and is not
necessarily implying use of pseudo-hashes.

EXAMPLE
=======

   See `SYNOPSIS', *Note Protected: protected, for an example of use.

MUSINGS
=======

   I fully expect public.pm to eventually mutate into a real pragma
someday when a better formalized OO data system for Perl supplants the
current fledgling pseudo-hashes.

AUTHOR
======

   Michae G Schwern <schwern@pobox.com>

SEE ALSO
========

   *Note Private: private,, *Note Protected: protected,, *Note Fields:
fields,, *Note Base: base,, *Note Class/Fields: Class/Fields,


File: pm.info,  Node: re,  Next: rlib,  Prev: public,  Up: Module List

Perl pragma to alter regular expression behaviour
*************************************************

NAME
====

   re - Perl pragma to alter regular expression behaviour

SYNOPSIS
========

     use re 'taint';
     ($x) = ($^X =~ /^(.*)$/s);     # $x is tainted here

     $pat = '(?{ $foo = 1 })';
     use re 'eval';
     /foo${pat}bar/;		   # won't fail (when not under -T switch)

     {
     	no re 'taint';		   # the default
     	($x) = ($^X =~ /^(.*)$/s); # $x is not tainted here

     no re 'eval';		   # the default
     /foo${pat}bar/;		   # disallowed (with or without -T switch)
         }

     use re 'debug';		   # NOT lexically scoped (as others are)
     /^(.*)$/s;			   # output debugging info during
     				   #     compile and run time

     use re 'debugcolor';	   # same as 'debug', but with colored output
     ...

   (We use $^X in these examples because it's tainted by default.)

DESCRIPTION
===========

   When `use re 'taint'' is in effect, and a tainted string is the target
of a regex, the regex memories (or values returned by the m// operator in
list context) are tainted.  This feature is useful when regex operations
on tainted data aren't meant to extract safe substrings, but to perform
other transformations.

   When `use re 'eval'' is in effect, a regex is allowed to contain `(?{
... })' zero-width assertions even if regular expression contains variable
interpolation.  That is normally disallowed, since it is a potential
security risk.  Note that this pragma is ignored when the regular
expression is obtained from tainted data, i.e.  evaluation is always
disallowed with tainted regular expresssions.  See `(?{ code })', *Note
Perlre: (perl.info)perlre,.

   For the purpose of this pragma, interpolation of precompiled regular
expressions (i.e., the result of `qr//') is not considered variable
interpolation.  Thus:

     /foo${pat}bar/

   *is* allowed if $pat is a precompiled regular expression, even if $pat
contains `(?{ ... })' assertions.

   When `use re 'debug'' is in effect, perl emits debugging messages when
compiling and using regular expressions.  The output is the same as that
obtained by running a `-DDEBUGGING'-enabled perl interpreter with the
*-Dr* switch. It may be quite voluminous depending on the complexity of
the match.  Using `debugcolor' instead of debug enables a form of output
that can be used to get a colorful display on terminals that understand
termcap color sequences.  Set `$ENV{PERL_RE_TC}' to a comma-separated list
of `termcap' properties to use for highlighting strings on/off, pre-point
part on/off.  See `"Debugging regular expressions"', *Note Perldebug:
(perl.info)perldebug, for additional info.

   The directive `use re 'debug'' is *not lexically scoped*, as the other
directives are.  It has both compile-time and run-time effects.

   See `Pragmatic Modules', *Note Perlmodlib: (perl.info)perlmodlib,.


File: pm.info,  Node: rlib,  Next: savevars,  Prev: re,  Up: Module List

manipulate @INC at compile time with relative paths
***************************************************

NAME
====

   rlib - manipulate @INC at compile time with relative paths

SYNOPSIS
========

     use rlib LIST;

     no rlib LIST;

DESCRIPTION
===========

   rlib works in the same way as lib, except that all paths in LIST are
treated as relative paths.

   If rlib is used from the main package then the paths in LIST are
assumed to be relative to where the current script $0 is located. This is
done by using the FindBin package.

   If rlib is used from within any package other tha main then the paths
in LIST are assumed to be relative to the root of the library where the
file for that package was found.

   If LIST is empty then `"../lib","lib"' is assumed.

SEE ALSO
========

   lib - module which adds paths to @INC

   FindBin - module for locating script bin directory

AUTHOR
======

   Graham Barr <gbarr@pobox.com>


File: pm.info,  Node: savevars,  Next: sigtrap,  Prev: rlib,  Up: Module List

Perl pragma to auto-load and save global variables
**************************************************

NAME
====

   savevars - Perl pragma to auto-load and save global variables

SYNOPSIS
========

     use savevars qw($frob @mung %seen);

DESCRIPTION
===========

   This module will, like `use vars', predeclare the variables in the
list. In addition, the listed variables are retrieved from a per-script
configuration file and the values are stored on program end. The filename
of the configuration file is "$ENV{HOME}/.${progname}rc", where progname
is the name of the current script.

   The values are stored using the Data::Dumper module, which is already
installed with perl5.005 and better.

FUNCTIONS
=========

cfgfile
-------

   Return the pathname of the current configuration file.

writecfg
--------

   Write the variables to the configuration file. This method is called at
END.

dont_write_cfgfile
------------------

   If this function is called, then the configuration file will not be
written at END.

CAVEATS
=======

   cfgfile() uses the $< variable to determine the current home directory.
This might not be what you want if using setuid scripts.

BUGS
====

   Because getpwuid() is used, this module will not work very well on
Windows. Configuration files will be stored in the current drive root
directory or, if the `$HOME' environment variable exists, in the `$HOME'
directory.

AUTHOR
======

   Slaven Rezic <eserte@cs.tu-berlin.de>

   Copyright (c) 1998,1999,2000 Slaven Rezic. All rights reserved. This
package is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

SEE ALSO
========

   *Note Vars: vars,.


File: pm.info,  Node: sigtrap,  Next: strict,  Prev: savevars,  Up: Module List

Perl pragma to enable simple signal handling
********************************************

NAME
====

   sigtrap - Perl pragma to enable simple signal handling

SYNOPSIS
========

     use sigtrap;
     use sigtrap qw(stack-trace old-interface-signals);	# equivalent
     use sigtrap qw(BUS SEGV PIPE ABRT);
     use sigtrap qw(die INT QUIT);
     use sigtrap qw(die normal-signals);
     use sigtrap qw(die untrapped normal-signals);
     use sigtrap qw(die untrapped normal-signals
     		    stack-trace any error-signals);
     use sigtrap 'handler' => \&my_handler, 'normal-signals';
     use sigtrap qw(handler my_handler normal-signals
     	    	    stack-trace error-signals);

DESCRIPTION
===========

   The sigtrap pragma is a simple interface to installing signal handlers.
You can have it install one of two handlers supplied by sigtrap itself
(one which provides a Perl stack trace and one which simply `die()'s), or
alternately you can supply your own handler for it to install.  It can be
told only to install a handler for signals which are either untrapped or
ignored.  It has a couple of lists of signals to trap, plus you can supply
your own list of signals.

   The arguments passed to the use statement which invokes sigtrap are
processed in order.  When a signal name or the name of one of sigtrap's
signal lists is encountered a handler is immediately installed, when an
option is encountered it affects subsequently installed handlers.

OPTIONS
=======

SIGNAL HANDLERS
---------------

   These options affect which handler will be used for subsequently
installed signals.

*stack-trace*
     The handler used for subsequently installed signals outputs a Perl
     stack trace to STDERR and then tries to dump core.  This is the
     default signal handler.

die
     The handler used for subsequently installed signals calls die
     (actually croak) with a message indicating which signal was caught.

handler *your-handler*
     *your-handler* will be used as the handler for subsequently installed
     signals.  *your-handler* can be any value which is valid as an
     assignment to an element of %SIG.

SIGNAL LISTS
------------

   sigtrap has a few built-in lists of signals to trap.  They are:

*normal-signals*
     These are the signals which a program might normally expect to
     encounter and which by default cause it to terminate.  They are HUP,
     INT, PIPE and TERM.

*error-signals*
     These signals usually indicate a serious problem with the Perl
     interpreter or with your script.  They are ABRT, BUS, EMT, FPE, ILL,
     QUIT, SEGV, SYS and TRAP.

*old-interface-signals*
     These are the signals which were trapped by default by the old
     sigtrap interface, they are ABRT, BUS, EMT, FPE, ILL, PIPE, QUIT,
     SEGV, SYS, TERM, and TRAP.  If no signals or signals lists are passed
     to sigtrap, this list is used.

   For each of these three lists, the collection of signals set to be
trapped is checked before trapping; if your architecture does not
implement a particular signal, it will not be trapped but rather silently
ignored.

OTHER
-----

untrapped
     This token tells sigtrap to install handlers only for subsequently
     listed signals which aren't already trapped or ignored.

any
     This token tells sigtrap to install handlers for all subsequently
     listed signals.  This is the default behavior.

signal
     Any argument which looks like a signal name (that is,
     `/^[A-Z][A-Z0-9]*$/') indicates that sigtrap should install a handler
     for that name.

number
     Require that at least version number of sigtrap is being used.

EXAMPLES
========

   Provide a stack trace for the old-interface-signals:

     use sigtrap;

   Ditto:

     use sigtrap qw(stack-trace old-interface-signals);

   Provide a stack trace on the 4 listed signals only:

     use sigtrap qw(BUS SEGV PIPE ABRT);

   Die on INT or QUIT:

     use sigtrap qw(die INT QUIT);

   Die on HUP, INT, PIPE or TERM:

     use sigtrap qw(die normal-signals);

   Die on HUP, INT, PIPE or TERM, except don't change the behavior for
signals which are already trapped or ignored:

     use sigtrap qw(die untrapped normal-signals);

   Die on receipt one of an of the *normal-signals* which is currently
untrapped, provide a stack trace on receipt of any of the *error-signals*:

     use sigtrap qw(die untrapped normal-signals
     		    stack-trace any error-signals);

   Install my_handler() as the handler for the *normal-signals*:

     use sigtrap 'handler', \&my_handler, 'normal-signals';

   Install my_handler() as the handler for the normal-signals, provide a
Perl stack trace on receipt of one of the error-signals:

     use sigtrap qw(handler my_handler normal-signals
     	    	    stack-trace error-signals);


File: pm.info,  Node: strict,  Next: subs,  Prev: sigtrap,  Up: Module List

Perl pragma to restrict unsafe constructs
*****************************************

NAME
====

   strict - Perl pragma to restrict unsafe constructs

SYNOPSIS
========

     use strict;

     use strict "vars";
     use strict "refs";
     use strict "subs";

     use strict;
     no strict "vars";

DESCRIPTION
===========

   If no import list is supplied, all possible restrictions are assumed.
(This is the safest mode to operate in, but is sometimes too strict for
casual programming.)  Currently, there are three possible things to be
strict about:  "subs", "vars", and "refs".

`strict refs'
     This generates a runtime error if you use symbolic references (see
     *Note Perlref: (perl.info)perlref,).

          use strict 'refs';
          $ref = \$foo;
          print $$ref;	# ok
          $ref = "foo";
          print $$ref;	# runtime error; normally ok
          $file = "STDOUT";
          print $file "Hi!";	# error; note: no comma after $file

`strict vars'
     This generates a compile-time error if you access a variable that
     wasn't declared via "our" or `use vars', localized via my(), or
     wasn't fully qualified.  Because this is to avoid variable suicide
     problems and subtle dynamic scoping issues, a merely local() variable
     isn't good enough.  See `my', *Note Perlfunc: (perl.info)perlfunc, and
     `local', *Note Perlfunc: (perl.info)perlfunc,.

          use strict 'vars';
          $X::foo = 1;	 # ok, fully qualified
          my $foo = 10;	 # ok, my() var
          local $foo = 9;	 # blows up

          package Cinna;
          our $bar;			# Declares $bar in current package
          $bar = 'HgS';		# ok, global declared via pragma

     The local() generated a compile-time error because you just touched a
     global name without fully qualifying it.

     Because of their special use by sort(), the variables $a and $b are
     exempted from this check.

`strict subs'
     This disables the poetry optimization, generating a compile-time
     error if you try to use a bareword identifier that's not a
     subroutine, unless it appears in curly braces or on the left hand
     side of the "=>" symbol.

          use strict 'subs';
          $SIG{PIPE} = Plumber;   	# blows up
          $SIG{PIPE} = "Plumber"; 	# just fine: bareword in curlies always ok
          $SIG{PIPE} = \&Plumber; 	# preferred form

   See `Pragmatic Modules', *Note Perlmodlib: (perl.info)perlmodlib,.


