This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Net/Server/Fork,  Next: Net/Server/INET,  Prev: Net/Server,  Up: Module List

Net::Server personality
***********************

NAME
====

   Net::Server::Fork - Net::Server personality

SYNOPSIS
========

     use Net::Server::Fork;
     @ISA = qw(Net::Server::Fork);

     sub process_request {
        #...code...
     }

     Net::Server::Fork->run();

DESCRIPTION
===========

   Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.

   This personality binds to one or more ports and then waits for a client
connection.  When a connection is received, the server forks a child.  The
child handles the request and then closes.

ARGUMENTS
=========

   There are no additional arguments beyond the Net::Server base class.

CONFIGURATION FILE
==================

   See *Note Net/Server: Net/Server,.

PROCESS FLOW
============

   Process flow follows Net::Server until the post_accept phase.  At this
point a child is forked.  The parent is immediately able to wait for
another request.  The child handles the request and then exits.

HOOKS
=====

   There are no additional hooks in Net::Server::Fork.

TO DO
=====

   See *Note Net/Server: Net/Server,

FILES
=====

     The following files are installed as part of this
     distribution.

     Net/Server.pm
     Net/Server/Fork.pm
     Net/Server/INET.pm
     Net/Server/MultiType.pm
     Net/Server/PreFork.pm
     Net/Server/Single.pm

AUTHOR
======

   Paul T. Seamons paul@seamons.com

SEE ALSO
========

   Please see also *Note Net/Server/Fork: Net/Server/Fork,, *Note
Net/Server/INET: Net/Server/INET,, *Note Net/Server/PreFork:
Net/Server/PreFork,, *Note Net/Server/MultiType: Net/Server/MultiType,,
*Note Net/Server/Single: Net/Server/Single,


File: pm.info,  Node: Net/Server/INET,  Next: Net/Server/MultiType,  Prev: Net/Server/Fork,  Up: Module List

Net::Server personality
***********************

NAME
====

   Net::Server::INET - Net::Server personality

SYNOPSIS
========

     use Net::Server::INET;
     @ISA = qw(Net::Server::INET);

     sub process_request {
        #...code...
     }

     Net::Server::INET->run();

DESCRIPTION
===========

   Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.

   This personality is intended for use with inetd.  It offers no methods
beyond the Net::Server base class.  This module operates by overriding the
pre_bind, bind, accept, and post_accept methods to let all socket
processing to be done by inetd.

CONFIGURATION FILE
==================

   See *Note Net/Server: Net/Server,.

PROCESS FLOW
============

   See *Note Net/Server: Net/Server,

HOOKS
=====

   There are no additional hooks in Net::Server::INET.

TO DO
=====

   See *Note Net/Server: Net/Server,

FILES
=====

     The following files are installed as part of this
     distribution.

     Net/Server.pm
     Net/Server/Fork.pm
     Net/Server/INET.pm
     Net/Server/MultiType.pm
     Net/Server/PreFork.pm
     Net/Server/Single.pm

AUTHOR
======

   Paul T. Seamons paul@seamons.com

SEE ALSO
========

   Please see also *Note Net/Server/Fork: Net/Server/Fork,, *Note
Net/Server/INET: Net/Server/INET,, *Note Net/Server/PreFork:
Net/Server/PreFork,, *Note Net/Server/MultiType: Net/Server/MultiType,,
*Note Net/Server/Single: Net/Server/Single,


File: pm.info,  Node: Net/Server/MultiType,  Next: Net/Server/PreFork,  Prev: Net/Server/INET,  Up: Module List

Net::Server personality
***********************

NAME
====

   Net::Server::MultiType - Net::Server personality

SYNOPSIS
========

     use Net::Server::MultiType;
     @ISA = qw(Net::Server::MultiType);

     sub process_request {
        #...code...
     }

     my @types = qw(PreFork Fork Single);

     Net::Server::MultiType->run(server_type=>\@types);

DESCRIPTION
===========

   Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.

   This personality is intended to allow for easy use of multiple
Net::Server personalities.  Given a list of server types,
Net::Server::MultiType will require one at a time until it finds one that
is installed on the system.  It then adds that package to its @ISA, thus
inheriting the methods of that personality.

ARGUMENTS
=========

   In addition to the command line arguments of the Net::Server base
class, Net::Server::MultiType contains one other configurable parameter.

     Key               Value            Default
     server_type       'server_type'    'Single'

server_type
     May be called many times to build up an array or possible
     server_types.  At execution, Net::Server::MultiType will find the
     first available one and then inherit the methods of that personality

CONFIGURATION FILE
==================

   `Net::Server::PreFork' allows for the use of a configuration file to
read in server parameters.  The format of this conf file is simple key
value pairs.  Comments and white space are ignored.

     #-------------- file test.conf --------------

     ### multi type info
     ### try PreFork first, then go to Single
     server_type PreFork
     server_type Single

     ### server information
     min_servers   20
     max_servers   80
     spare_servers 10

     max_requests  1000

     ### user and group to become
     user        somebody
     group       everybody

     ### logging ?
     log_file    /var/log/server.log
     log_level   3
     pid_file    /tmp/server.pid

     ### access control
     allow       .+\.(net|com)
     allow       domain\.com
     deny        a.+

     ### background the process?
     background  1

     ### ports to bind
     host        127.0.0.1
     port        localhost:20204
     port        20205

     ### reverse lookups ?
     # reverse_lookups on
     
     #-------------- file test.conf --------------

PROCESS FLOW
============

   See *Note Net/Server: Net/Server,

HOOKS
=====

   There are no additional hooks in Net::Server::MultiType.

TO DO
=====

   See *Note Net/Server: Net/Server,

FILES
=====

     The following files are installed as part of this
     distribution.

     Net/Server.pm
     Net/Server/Fork.pm
     Net/Server/INET.pm
     Net/Server/MultiType.pm
     Net/Server/PreFork.pm
     Net/Server/Single.pm

AUTHOR
======

   Paul T. Seamons paul@seamons.com

SEE ALSO
========

   Please see also *Note Net/Server/Fork: Net/Server/Fork,, *Note
Net/Server/INET: Net/Server/INET,, *Note Net/Server/PreFork:
Net/Server/PreFork,, *Note Net/Server/MultiType: Net/Server/MultiType,,
*Note Net/Server/Single: Net/Server/Single,


File: pm.info,  Node: Net/Server/PreFork,  Next: Net/Server/Single,  Prev: Net/Server/MultiType,  Up: Module List

Net::Server personality
***********************

NAME
====

   Net::Server::PreFork - Net::Server personality

SYNOPSIS
========

     use Net::Server::PreFork;
     @ISA = qw(Net::Server::PreFork);

     sub process_request {
        #...code...
     }

     Net::Server::PreFork->run();

DESCRIPTION
===========

   Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.

   This personality binds to one or more ports and then forks min_servers
child process.  The server will make sure that at any given time there are
spare_servers available to receive a client request, up to max_servers.
Each of these children will process up to max_requests client connections.
This type is good for a heavily hit site, and should scale well for most
applications.  (Multi port accept is accomplished using flock to serialize
the children).

SAMPLE CODE
===========

   Please see the sample listed in Net::Server.

COMMAND LINE ARGUMENTS
======================

   In addition to the command line arguments of the Net::Server base
class, Net::Server::PreFork contains several other configurable parameters.

     Key               Value            Default
     min_servers       \d+              5
     spare_servers     \d+              1
     max_servers       \d+              10
     max_requests      \d+              1000

     lock_file         "filename"       POSIX::tmpnam

     check_for_dead    \d+              30
     check_for_waiting \d+              20

min_servers
     The minimum number of servers to keep running.

spare_servers
     The minimum number of servers to have waiting for requests.

max_servers
     The maximum number of child servers to start.

max_requests
     The number of client connections to receive before a child terminates.

lock_file
     Filename to use in multi-port accept in order to flock serialize the
     accept sequece between the children.  This will default to a
     generated temporary filename.  This file will be removed when the
     server closes.

check_for_dead
     Seconds to wait before checking to see if a child died without
     letting the parent know.

check_for_waiting
     Seconds to wait before checking to see if there are too many waiting
     child processes.  Extra processes are killed.  A time period is used
     rather than min_spare_servers and max_spare_server parameters to
     avoid constant forking and killing when client requests are coming in
     close to the spare server thresholds.

CONFIGURATION FILE
==================

   `Net::Server::PreFork' allows for the use of a configuration file to
read in server parameters.  The format of this conf file is simple key
value pairs.  Comments and white space are ignored.

     #-------------- file test.conf --------------

     ### server information
     min_servers   20
     max_servers   80
     spare_servers 10

     max_requests  1000

     ### user and group to become
     user        somebody
     group       everybody

     ### logging ?
     log_file    /var/log/server.log
     log_level   3
     pid_file    /tmp/server.pid

     ### access control
     allow       .+\.(net|com)
     allow       domain\.com
     deny        a.+

     ### background the process?
     background  1

     ### ports to bind
     host        127.0.0.1
     port        localhost:20204
     port        20205

     ### reverse lookups ?
     # reverse_lookups on
     
     #-------------- file test.conf --------------

PROCESS FLOW
============

   Process flow follows Net::Server until the loop phase.  At this point
min_servers are forked and wait for connections.  When a child accepts a
connection, finishs processing a client, or exits, it relays that
information to the parent, which keeps track and makes sure there are
enough children to fulfill min_servers, spare_servers, and max_servers.

HOOKS
=====

   There are two additional hooks in the PreFork server.

`$self->child_init_hook()'
     This hook takes place immeditately after the child process forks from
     the parent and before the child begins accepting connections.  It is
     intended for any addiotional chrooting or other security measures.
     It is suggested that all perl modules be used by this point, so that
     the most shared memory possible is used.

`$self->child_finish_hook()'
     This hook takes place immediately before the child tells the parent
     that it is exiting.  It is intended for saving out logged information
     or other general cleanup.

TO DO
=====

   See *Note Net/Server: Net/Server,

FILES
=====

     The following files are installed as part of this
     distribution.

     Net/Server.pm
     Net/Server/Fork.pm
     Net/Server/INET.pm
     Net/Server/MultiType.pm
     Net/Server/PreFork.pm
     Net/Server/Single.pm

AUTHOR
======

   Paul T. Seamons paul@seamons.com

SEE ALSO
========

   Please see also *Note Net/Server/Fork: Net/Server/Fork,, *Note
Net/Server/INET: Net/Server/INET,, *Note Net/Server/PreFork:
Net/Server/PreFork,, *Note Net/Server/MultiType: Net/Server/MultiType,,
*Note Net/Server/Single: Net/Server/Single,


File: pm.info,  Node: Net/Server/Single,  Next: Net/Spooler,  Prev: Net/Server/PreFork,  Up: Module List

Net::Server personality
***********************

NAME
====

   Net::Server::Single - Net::Server personality

SYNOPSIS
========

     use Net::Server::MultiType;
     @ISA = qw(Net::Server::MultiType);

     sub process_request {
        #...code...
     }

     my @types = qw(PreFork Single Fork);

     Net::Server::MultiType->run(server_type=>\@types);

DESCRIPTION
===========

   This module offers no functionality beyond the Net::Server base class.
This modules only purpose is to provide parallelism for the MultiType
personality.

   See *Note Net/Server: Net/Server,


File: pm.info,  Node: Net/Spooler,  Next: Net/Subnet/Count,  Prev: Net/Server/Single,  Up: Module List

A Perl extension for writing spooling daemons
*********************************************

NAME
====

   Net::Spooler - A Perl extension for writing spooling daemons

SYNOPSIS
========

     # Create a subclass of Net::Spooler
     use Net::Spooler;
     package MySpooler;
     @MySpooler::ISA = qw(Net::Spooler);

     # Inherit everything, except a single method:
     sub ProcessFile {
       my $self = shift; my $file = shift;

     # Try to process the file here
     ...

     # Raise an exception, if something went wrong:
     die "Failed: $!" unless Something();

     # Return to indicate sucess.
       }

     # Create and run the spooler
     package main;
     my $spooler = Net::Spooler->new(
         'spool-dir' => '/var/myspooler'
     );
     $spooler->Bind();

DESCRIPTION
===========

   This package contains a spooling daemon, in other words a process, that
accepts files from an outside source (currently a Unix or TCP/IP socket),
stores them in a spooling directory and processes them.

   The package is implemented as an abstract base class: It is not usefull
in itself, but you can get your spooling daemon easily by deriving a
concrete subclass from `Net::Spooler'. In the best case you can inherit
everything and overwrite just a single method, the *ProcessFile* method,
which attempts to process a single file from the spooling directory.

   `Net::Spooler' is in turn derived from the `Net::Daemon' package, thus
it borrows class design, in particular methods and attributes, from
`Net::Daemon'. See *Note Net/Daemon: Net/Daemon, for details on this
superclass.

   However, there are a few additions to `Net::Daemon':

Attributes
----------

   Like in `Net::Daemon', attributes can be set via the command line, in
the config file or as constructor arguments (order descending from most
important). And remember, that you can use the `Net::Daemon' attributes
too! See *Note Net/Daemon: Net/Daemon,.

admin (B<-admin=<email>)
     The administrators email address. From time to time it may happen,
     that the admin receives an email in case of problems.

expiretime (*-expiretime=<time>*)
     If processing a file fails repeatedly, the file may finally expire.
     This means that the file will be removed from the spool directory and
     a message is sent to the administrator.

     The default value are 432000 seconds (5 days). A value of 0 means
     that expiration never happens.

     Example: Expire after 3 days.

          --expiretime=259200

maxsixe (*-maxsize=<maxsize>*)
     By default the maximum size of a file is restricted to 100000 bytes
     and larger files will be rejected. This option is changing the size,
     a value of 0 means disabling the limitation.

     Example: Disable max size

          --maxsize=0

processtimeout (*-processtimeout=<timeout>*)
     If processing a single file may result in an endless loop, or simply
     run too long, then you may specify a timeout. The daemon will raise a
     signal after the given amount of seconds and stop processing the
     file, as if the method `ProcessFile' raised an exception.

     The default value is 0 seconds which means that no timeout is used.

     Example: Use a timeout of 30 seconds.

          --processtimeout=30

*loop-timeout* (*-loop-timeout=<time>*)
     If processing a file failed, the spooler will reprocess the file
     later by forking a child process after the given amount of seconds,
     by default 300 seconds (5 minutes). This child process will run
     through all scheduled file

*spool-dir* (*-spool-dir=<dir>*)
     If the daemon accepts files, they are stored in the *spool directory*.
     There's no default, you must set this attribute.

     Example: Use `/var/myspooler' as a spool directory.

          --spool-dir=/var/myspooler

tmpfiles
     This attribute is for internal use only. It contains an hash ref, the
     keys being temporary file names to be removed later.

Methods
-------

   As already said, the `Net::Spooler' package inherits from `Net::Daemon'.
All methods of the superclass are still valid in `Net::Spooler', in
particular access control and the like. See *Note Net/Daemon: Net/Daemon,
for details.

Processing a file
          $self->ProcessFile($file)

     (Instance method) Called for processing a single file. This is
     typically the only method you have to overwrite.

     The method raises an exception in case of errors. If an exception is
     raised, the scheduler will later retry to process the file until it
     expires. See the *queuetime* and expiretime attributes above.

     If processing a file exceeds the processtimeout (see above), then the
     scheduler will cancel processing the method and continue as if it
     raised an exception. (This timeout can be disabled by setting it to 0,
     the default value.)

     If the method returns without raising an exception, then the scheduler
     assumes that the file was processed successfully and remove it from
     the spool directory.

Choosing file names
          my $sfile = $self->SequenceFile();
          my $seq = $self->Sequence($sfile);
          my $dfile = $self->DataFile($seq);
          my $cfile = $self->ControlFile($seq);

     (Instance methods) If the daemon receives a new file, it has to
     choose a name for it. These names are constructed as follows:

     First of all, a so-called sequence number is generated by calling the
     method Sequence. By default these are the numbers 1, 2, 3, ...  in 8
     hex digits (00000001, 00000002, 00000003, ...). The last generated
     sequence number is always stored in the sequence file (by default
     `$spool-dir/.sequence', set by calling the *SequenceFile* method).

     Two files are generated for processing the file: The *data file* is
     the unmodified file, as received by the client. The *control file*
     contains information used internally by `Net::Spooler', for example
     the time and date of spooling this file. By default the names
     `$spool-dir/$seq.dat' and `$spool-dir/$seq.ctl' are used, generated
     by calling the methods DataFile and *ControlFile*. Temporary file
     names are derived by adding the suffix `.tmp'.

     Typically you rarely need to overwrite these methods.

Accepting a file from the client
          $self->ReadFile($socket, $fh, $file, $control);

     (Instance method) This method is actually reading the file $file from
     the socket $socket. The file is already opened and the method must use
     the file handle $fh for writing into $file. (The file name is passed
     for creating error messages only.)

     The method may store arbitrary data in the hash ref $control: This
     hash ref is stored in the control file later.

     The default implementation is accepting a raw file on the socket. You
     should overwrite the method, if you are accepting structured data,
     for example 4 bytes of file size and then the raw file. However, if
     you do overwrite this method, you should consider the *maxsize*
     attribute. (See above.)

     A Perl exception is raised in case of problems.

Creating the control file
          $self->ControlFile($fh, $file, $control);

     (Instance method) Creates the control file $file by writing the hash
     ref $control into the open file handle $fh. (The file name $file is
     passed for use in error messages only.)

     The default implementation is using the Data::Dumper module for
     serialization of $control and then writing the dumped hash ref into
     $fh.

     A Perl exception is raised in case of problems; nothing is returned
     otherwise.

Reading the control file
          my $ctrl = $self->ReadControlFile($file);

     (Instance method) This method reads a control file, as created by the
     *ControlFile* method and creates an instance of
     *Net::Spooler::Control*.

     The default implementation does a simple require (in a Safe
     compartment for security reasons, see the *Note Safe: Safe, package
     for details) for loading the hash ref from the file. The hash ref is
     then blessed into the package corresponding to $self: The package
     name of $self is taken by appending the string *::Control*.

     The method returns nothing, a Perl exception is thrown in case of
     trouble.

AUTHOR AND COPYRIGHT
====================

   This package is

     Copyright (C) 1999		Jochen Wiedmann
                                   Am Eisteich 9
     			        72555 Metzingen
     				Germany

     E-Mail: joe@ispsoft.de

     All rights reserved.

   You may distribute under the terms of either the GNU General Public
License or the Artistic License, as specified in the Perl README file.

SEE ALSO
========

     L<Net::Daemon(3)>


File: pm.info,  Node: Net/Subnet/Count,  Next: Net/Syslog,  Prev: Net/Spooler,  Up: Module List

Count hosts in named subnets
****************************

NAME
====

   Net::Subnet::Count - Count hosts in named subnets

SYNOPSIS
========

     use Net::Subnet::Count;
     use IP::Address;

     my $counter = new Net::Subnet::Count;

     $counter->add('subnet-00', new IP::Address("10.0.0.0/24"));
     $counter->add('other', @array_of_ip_addresses);
     $counter->add('other', @another_array_of_ip_addresses);

     $counter->cache(10);

     $counter->count(new IP::Address("10.0.3.17"));
     $counter->count(@array_of_ip_addresses);

     $counter->valcount(new IP::Address("10.0.3.17"), 23);
     @array_of_ipaddr_and_values = (new IP::Address("10.0.3.17"), 23,
     				new IP::Address("101.0.23.107"), 2);
     $counter->valcount(@array_of_ipaddr_and_values);

     my $r_count = $counter->result;

     foreach my $subnet (keys %{$r_count}) {
         print "Subnet $subnet had ", $r_count->{$subnet}, " visits.\n";
     }

DESCRIPTION
===========

   This module implements a symplistic way to match individual IP
Addresses to subnets. It can be used to, among other things, help analyze
HTTPD logs.

   The following methods are implemented.

`->new'
     Creates a new counter. This method can be called passing as argument a
     hash where the keys are the name of the subnet group and the values
     are references to arrays of `IP::Address' objects referencing each
     specific subnet. This is probably ok for static initializations.

`->add'
     Adds a subnet group. The first parameter is the name of the group
     being added. If it's a new name, a new entry will be created. Else the
     given subnets are added to the existing ones, like in the example
     above.

`->count'
     Verifies if the `IP::Address'es are contained in any of the given
     subnets. If this is the case, the corresponding totals are updated.

`->valcount'
     The same as `->count' but the argument is an array consisting of
     `IP::Address'es and value pairs.

`->result'
     Returns a reference to a hash containing the respective totals for
     each subnet group. The key to the hash is the subnet name given with
     `->add', the value is how many `IP::Address' objects have been found
     to match that subnet group.

`->cache'
     Since in usual applications `IP::Addresses' from the same subnet will
     tend to be grouped in clusters like in the case of HTTPD logs some
     caching is attempted to speed things up. The caching consists in
     storing the last few entries matched in an LRU list which is checked
     before going through all the stored subnets.

     This can improve response times if tuned sensibly, however consider
     that every miss will cause every entry in the cache to be checked
     twice, one in the cache and one in the normal process so it's
     important to tune the cache.

     The default cache size is 5, which can be changed by calling the
     `->cache' method as in the example. The old value of the cache size
     is returned.

AUTHOR
======

   Luis E. Munoz <lem@cantv.net>. Alvaro Carvajal <alvaro@cantv.net>
contributed the valcount method.

SEE ALSO
========

   perl(1), IP::Address(1).


File: pm.info,  Node: Net/Syslog,  Next: Net/TCP,  Prev: Net/Subnet/Count,  Up: Module List

Perl extension for sending syslog messages directly to a remote syslogd.
************************************************************************

NAME
====

   Net::Syslog - Perl extension for sending syslog messages directly to a
remote syslogd.

SYNOPSIS
========

     use Net::Syslog;
     my $s=new Net::Syslog(Facility=>'local4',Priority=>'debug');
     $s->send('see this in syslog',Priority=>'info');

DESCRIPTION
===========

   Net::Syslog implements the intra-host syslog forwarding protocol.  It
is not intended to replace the Sys::Syslog or Unix::Syslog modules, but
instead to provide a method of using syslog when a local syslogd is
unavailable or when you don't want to write syslog messages to the local
syslog.

   The new call sets up default values, any of which can be overridden in
the send call.  Keys (listed with default values) are:

     Name		<calling script name>
     Facility 	local5
     Priority 	err
     SyslogPort    	514
     SyslogHost    	127.0.0.1

   Valid Facilities are: 	kern, user, mail, daemon, auth, syslog,
lpr, news, uucp, cron, 	authpriv, ftp, local0, local1, local2, local3,
local4, local5, local6

   Valid Priorities are: 	emerg, alert, crit, err, warning, notice,
info, debug

AUTHOR
======

   Les Howard, les@lesandchris.com

SEE ALSO
========

   syslog(3), Sys::Syslog(3), syslogd(8), Unix::Syslog(3), IO::Socket,
perl(1)


File: pm.info,  Node: Net/TCP,  Next: Net/TCP/Server,  Prev: Net/Syslog,  Up: Module List

TCP sockets interface module
****************************

NAME
====

   Net::TCP - TCP sockets interface module

SYNOPSIS
========

     use Net::Gen;		# optional
     use Net::Inet;		# optional
     use Net::TCP;

DESCRIPTION
===========

   The `Net::TCP' module provides services for TCP communications over
sockets.  It is layered atop the `Net::Inet' and `Net::Gen' modules, which
are part of the same distribution.

Public Methods
--------------

   The following methods are provided by the `Net::TCP' module itself,
rather than just being inherited from `Net::Inet' or `Net::Gen'.

new
     Usage:

          $obj = new Net::TCP;
          $obj = new Net::TCP $host, $service;
          $obj = new Net::TCP \%parameters;
          $obj = new Net::TCP $host, $service, \%parameters;
          $obj = 'Net::TCP'->new();
          $obj = 'Net::TCP'->new($host, $service);
          $obj = 'Net::TCP'->new(\%parameters);
          $obj = 'Net::TCP'->new($host, $service, \%parameters);

     Returns a newly-initialised object of the given class.  If called for
     a derived class, no validation of the supplied parameters will be
     performed.  (This is so that the derived class can add the parameter
     validation it needs to the object before allowing the validation.)
     Otherwise, it will cause the parameters to be validated by calling
     its init method, which `Net::TCP' inherits from `Net::Inet'.  In
     particular, this means that if both a host and a service are given,
     then an object will only be returned if a connect() call was
     successful (or is still in progress, if the object is non-blocking).

     The examples above show the indirect object syntax which many prefer,
     as well as the guaranteed-to-be-safe static method call.  There are
     occasional problems with the indirect object syntax, which tend to be
     rather obscure when encountered.  See





















     <URL:http://www.rosat.mpe-garching.mpg.de/mailing-lists/perl-porters/1998-01/msg01674.html>
     for details.

Protected Methods
-----------------

   none.

Known Socket Options
--------------------

   These are the socket options known to the `Net::TCP' module itself:


     `TCP_NODELAY' `TCP_MAXSEG' `TCP_RPTR2RXT'

Known Object Parameters
-----------------------

   There are no object parameters registered by the `Net::TCP' module
itself.

TIESCALAR
---------

   Tieing of scalars to a TCP handle is supported by inheritance from the
TIESCALAR method of `Net::Gen'.  That method only succeeds if a call to a
new method results in an object for which the isconnected method returns
true, which is why it is mentioned in connection with this module.

   Example:

     tie $x,Net::TCP,0,'finger' or die;
     $x = "-s\015\012";
     print $y while defined($y = $x);
     untie $x;

   This is an expensive re-implementation of finger -s on many machines.

   Each assignment to the tied scalar is really a call to the put method
(via the STORE method), and each read from the tied scalar is really a
call to the getline method (via the FETCH method).

Exports
-------

default
     none

exportable
     `TCPOPT_EOL' `TCPOPT_MAXSEG' `TCPOPT_NOP' `TCPOPT_WINDOW'
     `TCP_MAXSEG' `TCP_MAXWIN' `TCP_MAX_WINSHIFT' `TCP_MSS' `TCP_NODELAY'
     `TCP_RPTR2RXT' `TH_ACK' `TH_FIN' `TH_PUSH' `TH_RST' `TH_SYN' `TH_URG'

tags
     The following *:tags* are available for grouping related exportable
     items:

    :sockopts
          `TCP_NODELAY' `TCP_MAXSEG' `TCP_RPTR2RXT'

    :tcpoptions
          `TCPOPT_EOL' `TCPOPT_MAXSEG' `TCPOPT_NOP' `TCPOPT_WINDOW'

    :protocolvalues
          `TCP_MAXWIN' `TCP_MAX_WINSHIFT' `TCP_MSS' `TH_ACK' `TH_FIN'
          `TH_PUSH' `TH_RST' `TH_SYN' `TH_URG'

    :ALL
          All of the above exportable items.

THREADING STATUS
================

   This module has been tested with threaded perls, and should be as
thread-safe as perl itself.  (As of 5.005_03 and 5.005_57, that's not all
that safe just yet.)

SEE ALSO
========

   Net::Inet(3), Net::Gen(3), Net::TCP::Server(3)

AUTHOR
======

   Spider Boardman <spider@Orb.Nashua.NH.US>


File: pm.info,  Node: Net/TCP/Server,  Next: Net/TFTP,  Prev: Net/TCP,  Up: Module List

TCP sockets interface module for listeners and servers
******************************************************

NAME
====

   Net::TCP::Server - TCP sockets interface module for listeners and
servers

SYNOPSIS
========

     use Net::Gen;		# optional
     use Net::Inet;		# optional
     use Net::TCP;		# optional
     use Net::TCP::Server;

DESCRIPTION
===========

   The `Net::TCP::Server' module provides services for TCP communications
over sockets.  It is layered atop the `Net::TCP', `Net::Inet', and
`Net::Gen' modules, which are part of the same distribution.

Public Methods
--------------

   The following methods are provided by the `Net::TCP::Server' module
itself, rather than just being inherited from `Net::TCP', `Net::Inet', or
`Net::Gen'.

new
     Usage:

          $obj = new Net::TCP::Server;
          $obj = new Net::TCP::Server $service;
          $obj = new Net::TCP::Server $service, \%parameters;
          $obj = new Net::TCP::Server $lcladdr, $service, \%parameters;
          $obj = 'Net::TCP::Server'->new();
          $obj = 'Net::TCP::Server'->new($service);
          $obj = 'Net::TCP::Server'->new($service, \%parameters);
          $obj = 'Net::TCP::Server'->new($lcladdr, $service, \%parameters);

     Returns a newly-initialised object of the given class.  This is much
     like the regular new method of the other modules in this
     distribution, except that it makes it easier to specify just a
     service name or port number, and it automatically does a setsockopt()
     call to set `SO_REUSEADDR' to make the bind() more likely to succeed.
     The `SO_REUSEADDR' is really done in a base class, but it's enabled
     by defaulting the reuseaddr object parameter to 1 in this constructor.

     The examples above show the indirect object syntax which many prefer,
     as well as the guaranteed-to-be-safe static method call.  There are
     occasional problems with the indirect object syntax, which tend to be
     rather obscure when encountered.  See





















     <URL:http://www.rosat.mpe-garching.mpg.de/mailing-lists/perl-porters/1998-01/msg01674.html>
     for details.

     Simple example for server setup:

          $lh = 'Net::TCP::Server'->new(7788) or die;
          while ($sh = $lh->accept) {
          	defined($pid=fork) or die "fork: $!\n";
          	if ($pid) {		# parent doesn't need client fh
          	    $sh->stopio;
          	    next;
          	}
          	# child doesn't need listener fh
          	$lh->stopio;
          	# do per-connection stuff here
          	exit;
          }

     Note that signal-handling for the child processes is not included in
     this example.  See `"Internet TCP Clients and Servers"', *Note
     Perlipc: (perl.info)perlipc, for related examples which manage
     subprocesses.  However, on many operating systems, a simple
     `$SIG{CHLD} = 'IGNORE';' will prevent the server process from
     collecting `zombie' subprocesses.

Protected Methods
-----------------

   none.

Known Socket Options
--------------------

   There are no socket options specific to the `Net::TCP::Server' module.

Known Object Parameters
-----------------------

   There are no object parameters registered by the `Net::TCP::Server'
module itself.

Exports
-------

default
     none

exportable
     none

tags
     none

THREADING STATUS
================

   This module has been tested with threaded perls, and should be as
thread-safe as perl itself.  (As of 5.005_03 and 5.005_57, that's not all
that safe just yet.)

SEE ALSO
========

   Net::TCP(3), Net::Inet(3), Net::Gen(3)

AUTHOR
======

   Spider Boardman <spider@Orb.Nashua.NH.US>


File: pm.info,  Node: Net/TFTP,  Next: Net/Telnet,  Prev: Net/TCP/Server,  Up: Module List

TFTP Client class
*****************

NAME
====

   Net::TFTP - TFTP Client class

SYNOPSIS
========

     use Net::TFTP;
     
     $tftp = Net::TFTP->new("some.host.name", BlockSize => 1024);
     
     $tftp->ascii;
     
     $tftp->get("remotefile", "localfile");
     
     $tftp->get("remotefile", \*STDOUT);
     
     $fh = $tftp->get("remotefile");
     
     $tftp->binary;
     
     $tftp->put("localfile", "remotefile");
     
     $tftp->put(\*STDOUT, "remotefile");
     
     $fh = $tftp->put("remotefile");
     
     $err = $tftp->error
     
     $tftp->quit;

DESCRIPTION
===========

   `Net::TFTP' is a class implementing a simple *Trivial File Transfer
Protocol* client in Perl as described in RFC1350. `Net::TFTP' also
supports the TFTP Option Extension (as described in RFC2347), with the
following options

     RFC2348 Blocksize Option

CONSTRUCTOR
===========

new ( [ HOST ] [, OPTIONS ])
     Create a new Net::TFTP object where HOST is the default host to
     connect to and OPTIONS are the default transfer options. Valid
     options are

          Option     Description                                           Default
          ------     -----------                                           -------
          Timeout    Timeout in seconds before retry	                     5
          Retries    Maximum number of retries				     5
          Port	    Port to send data to                                    69
          Mode	    Mode to transfer data in, "octet" or "netascii"     "netascii"
          BlockSize  Negotiate size of blocks to use in the transfer        512

METHODS
=======

get ( REMOTE_FILE [, LOCAL ] [, OPTIONS ])
     Get REMOTE_FILE from the server. OPTIONS can be any that are accepted
     by new plus the following

          Host    Override default host

     If the LOCAL option is missing the get will return a filehandle. This
     filehandle must be read ASAP as the server will otherwise timeout.

     If the LOCAL option is given then it can be a file name or a
     reference.  If it is a reference it is assumed to be a reference that
     is valid as a filehandle. get will return *true* if the transfer is
     sucessful and undef otherwise.

     Valid filehandles are

        * A sub-class of IO::Handle

        * A tied filehandle

        * A GLOB reference (eg `\*STDOUT')

put ( [ LOCAL, ] REMOTE_FILE [, OPTIONS])
     Put a file to the server as REMOTE_FILE. OPTIONS can be any that are
     accepted by new plus the following

          Host    Override default host

     If the LOCAL option is missing the put will return a filehandle. This
     filehandle must be written to ASAP as the server will otherwise
     timeout.

     If the LOCAL option is given then it can be a file name or a
     reference.  If it is a reference it is assumed to be a valid
     filehandle as descibed above.  put will return *true* if the transfer
     is sucessful and undef otherwise.

error
     If there was an error then this method will return an error string.

host ( [ HOST ] )
timeout ( [ TIMEOUT ] )
port ( [ PORT ] )
mode ( [ MODE ] )
retries ( [ VALUE ] )
block_size ( [ VALUE ] )
debug ( [ VALUE ] )
     Set or get the values for the various options. If an argument is
     passed then a new value is set for that option and the previous value
     returned.  If no value is passed then the current value is returned.

ascii
netascii
     Set the transfer mode to `"netascii"'

binary
octet
     Set the transfer mode to `"octet"'

AUTHOR
======

   Graham Barr <gbarr@pobox.com>

COPYRIGHT
=========

   Copyright (c) 1998 Graham Barr. All rights reserved.  This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.


File: pm.info,  Node: Net/Telnet,  Next: Net/Telnet/Cisco,  Prev: Net/TFTP,  Up: Module List

interact with TELNET port or other TCP ports
********************************************

NAME
====

   Net::Telnet - interact with TELNET port or other TCP ports

SYNOPSIS
========

   `use Net::Telnet ();'

   see METHODS section below

DESCRIPTION
===========

   Net::Telnet allows you to make client connections to a TCP port and do
network I/O, especially to a port using the TELNET protocol.  Simple I/O
methods such as print, get, and getline are provided.  More sophisticated
interactive features are provided because connecting to a TELNET port
ultimately means communicating with a program designed for human
interaction.  These interactive features include the ability to specify a
time-out and to wait for patterns to appear in the input stream, such as
the prompt from a shell.

   Other reasons to use this module than strictly with a TELNET port are:

   * You're not familiar with sockets and you want a simple way to make
     client connections to TCP services.

   * You want to be able to specify your own time-out while connecting,
     reading, or writing.

   * You're communicating with an interactive program at the other end of
     some socket or pipe and you want to wait for certain patterns to
     appear.

   Here's an example that prints who's logged-on to the remote host
sparky.  In addition to a username and password, you must also know the
user's shell prompt, which for this example is `bash$'

     use Net::Telnet ();
     $t = new Net::Telnet (Timeout => 10,
                           Prompt => '/bash\$ $/');
     $t->open("sparky");
     $t->login($username, $passwd);
     @lines = $t->cmd("/usr/bin/who");
     print @lines;

   More examples are in the EXAMPLES section below.

   Usage questions should be directed to the Usenet newsgroup
comp.lang.perl.modules.

   Contact me, Jay Rogers <jay@rgrs.com>, if you find any bugs or have
suggestions for improvement.

What To Know Before Using
-------------------------

   * All output is flushed while all input is buffered.  Each object
     contains its own input buffer.

   * The output record separator for print() and `cmd()' is set to `"\n"'
     by default, so that you don't have to append all your commands with a
     newline.  See `output_record_separator()' to change the behavior.

   * The methods login() and `cmd()' use the prompt setting in the object
     to determine when a login or remote command is complete.  The method
     will fail with a time-out if you don't set the prompt correctly.

   * Use a combination of print() and `waitfor()' as an alternative to
     login() or `cmd()' when they don't do what you want.

   * Errors such as timing-out are handled according to the errmode
     action.  The default action is to print an error message to standard
     error and have the program die.  See `errmode()' for more information.

   * To avoid unexpected backslash interpretation, always use single quotes
     instead of double quotes to construct a match operator argument for
     `prompt()' and `waitfor()' (e.g. `'/bash\$ $/'').  If you're
     constructing a DOS like file path, you'll need to use four backslashes
     to represent one (e.g. `'/c:\\\\users\\\\bill>$/i'').

     Of course don't forget about regexp metacharacters like ., [, or `$'.
     You'll only need a single backslash to quote them.  The anchor
     metacharacters ^ and `$' refer to positions in the input buffer.

   * In the input stream, each sequence of *carriage return* and *line
     feed* (i.e. `"\015\012"' or CR LF) is converted to `"\n"'.  In the
     output stream, each occurrence of `"\n"' is converted to a sequence
     of CR LF.  See binmode() to change the behavior.  TCP protocols
     typically use the ASCII sequence, carriage return and line feed to
     designate a newline.

   * Timing-out while making a connection is disabled for machines that
     don't support the `alarm()' function.  Most notably these include
     Win32 machines.

     More universal support for connection time-outs will be in a later
     release.

   * You'll need to be running at least Perl version 5.002 to use this
     module.  This module does not require any libraries that don't already
     come with a standard Perl distribution.

     If you have the IO:: libraries installed (they come standard with
     perl5.004 and later) then IO::Socket::INET is used as a base class,
     otherwise FileHandle is used.

   * Contact me, Jay Rogers <jay@rgrs.com>, if you find any bugs or have
     suggestions for improvement.

Debugging
---------

   The typical bug causes a time-out error because you've made incorrect
assumptions about what the remote side actually sends.  The easiest way to
reconcile what the remote side sends with your expectations is to use
`input_log()' or `dump_log()'.

   `dump_log()' allows you to see the data being sent from the remote side
before any translation is done, while `input_log()' shows you the results
after translation.  The translation includes converting end of line
characters and stripping and responding to TELNET protocol commands.

Style of Named Parameters
-------------------------

   Two different styles of named parameters are supported.  This document
only shows the IO:: style:

     Net::Telnet->new(Timeout => 20);

   however the dash-option style is also allowed:

     Net::Telnet->new(-timeout => 20);

Connecting to a Remote Win32 Machine
------------------------------------

   By default, Windows machines don't come with a TELNET service.
However, third party TELNET servers can be acquired to provide access to a
DOS shell.  As is all too familiar, many of these servers are of inferior
quality.

   One particularly nasty problem is a server that sends ANSI terminal
escape sequences despite being told not to.  These escape sequences make
your job of parsing the data much more difficult.  You can sometimes avoid
this with a server that prompts you for *console mode*.  Choose no to
console mode.

METHODS
=======

   In the calling sequences below, square brackets [] represent optional
parameters.

new - create a new Net::Telnet object
          $obj = Net::Telnet->new([Binmode    => $mode,]
                                  [Cmd_remove_mode => $mode,]
                                  [Dump_Log   => $filename,]
                                  [Errmode    => $errmode,]
                                  [Fhopen     => $filehandle,]
                                  [Host       => $host,]
                                  [Input_log  => $file,]
                                  [Input_record_separator => $char,]
                                  [Option_log => $file,]
                                  [Output_log => $file,]
                                  [Output_record_separator => $char,]
                                  [Port       => $port,]
                                  [Prompt     => $matchop,]
                                  [Telnetmode => $mode,]
                                  [Timeout    => $secs,]);

     This is the constructor for Net::Telnet objects.  A new object is
     returned on success, the *$errmode* action is performed on failure -
     see `errmode()'.  The arguments are short-cuts to methods of the same
     name.

     If the $host argument is given then the object is opened by
     connecting to TCP $port on $host.  Also see open().  The new object
     returned is given the following defaults in the absence of
     corresponding named arguments:


          The default Host is `"localhost"'


          The default Port is 23


          The default Prompt is `'/[\$%#>] $/''


          The default Timeout is 10


          The default *Errmode* is `"die"'


          The default *Output_record_separator* is `"\n"'


          The default *Input_record_separator* is `"\n"'


          The default *Binmode* is 0, which means do newline translation


          The default *Cmd_remove_mode* is `"auto"'.

binmode - toggle newline translation
          $mode = $obj->binmode;

          $prev = $obj->binmode($mode);

     This method controls whether or not sequences of carriage returns and
     line feeds (CR LF or more specifically `"\015\012"') are translated.
     By default they are translated (i.e. binmode is 0).

     If no argument is given, the current mode is returned.

     If $mode is 1 then binmode is *on* and newline translation is not
     done.

     If $mode is 0 then binmode is *off* and newline translation is done.
     In the input stream, each sequence of CR LF is converted to `"\n"'
     and in the output stream, each occurrence of `"\n"' is converted to a
     sequence of CR LF.

     Note that input is always buffered.  Changing binmode doesn't effect
     what's already been read into the buffer.  Output is not buffered and
     changing binmode will have an immediate effect.

break - send TELNET break character
          $ok = $obj->break;

     This method sends the TELNET break character.  This character is
     provided because it's a signal outside the USASCII character set which
     is currently given local meaning within many systems.  It's intended
     to indicate that the Break Key or the Attention Key was hit.

buffer - scalar reference to object's input buffer
          $ref = $obj->buffer;

     This method returns a scalar reference to the input buffer for $obj.
     Data in the input buffer is data that has been read from the remote
     side but has yet to be read by the user.  Modifications to the input
     buffer are returned by a subsequent read.

buffer_empty - discard all data in object's input buffer
          $obj->buffer_empty;

     This method removes all data in the input buffer for $obj.

close - close object
          $ok = $obj->close;

     This method closes the socket, file, or pipe associated with the
     object.

cmd - issue command and retrieve output
          $ok = $obj->cmd($string);
          $ok = $obj->cmd(String   => $string,
                          [Output  => $ref,]
                          [Prompt  => $match,]
                          [Timeout => $secs,]
                          [Cmd_remove_mode => $mode,]);

          @output = $obj->cmd($string);
          @output = $obj->cmd(String   => $string,
                              [Output  => $ref,]
                              [Prompt  => $match,]
                              [Timeout => $secs,]
                              [Cmd_remove_mode => $mode,]);

     This method sends the command $string, and reads the characters sent
     back by the command up until and including the matching prompt.  It's
     assumed that the program to which you're sending is some kind of
     command prompting interpreter such as a shell.

     In a scalar context the characters read are discarded and a boolean is
     returned indicating the success or failure of sending the command
     string and reading the prompt.  Note that in order to return on error,
     `errmode()' must not be set to `"die"'.

     In an array context, just the output generated by the command is
     returned, one line per element.  In other words, all the characters in
     between the echoed back command string and the prompt are returned.
     If the command happens to return no output, an array containing one
     element, the null string is returned.  This is so the array will
     indicate true in a boolean context.

     Many command interpreters echo back the command sent.  In most
     situations, this method removes the first line returned from the
     remote side (i.e. the echoed back command).  See `cmd_remove_mode()'
     for more control over this feature.

     Use `dump_log()' to debug when this method keeps timing-out and you
     don't think it should.

     Consider using a combination of print() and `waitfor()' as an
     alternative to this method when it doesn't do what you want, e.g. the
     command you run prompts for input.

     Optional named arguments are provided to override the current settings
     of prompt, timeout, and cmd_remove_mode.

     The Output named argument provides an alternative method of receiving
     command output.  If you pass a scalar reference, all the output (even
     if it contains multiple lines) is returned in the referenced scalar.
     If you pass an array or hash reference, the lines of output are
     returned in the referenced array or hash.

cmd_remove_mode - toggle removal of echoed commands
          $mode = $obj->cmd_remove_mode;

          $prev = $obj->cmd_remove_mode($mode);

     This method controls how to deal with echoed back commands in the
     output returned by cmd().  Typically, when you send a command to the
     remote side, the first line of output returned is the command echoed
     back.  Use this mode to remove the first line of output normally
     returned by cmd().

     If no argument is given, the current mode is returned.

     If $mode is 0 then the command output returned from cmd() has no
     lines removed.  If $mode is a positive integer, then the first $mode
     lines of command output are stripped.

     By default, $mode is set to `"auto"'.  Auto means that whether or not
     the first line of command output is stripped, depends on whether or
     not the remote side offered to echo.  By default, Net::Telnet always
     accepts an offer to echo by the remote side.  You can change the
     default to reject such an offer using `option_accept()'.

dump_log - log all I/O in dump format
          $fh = $obj->dump_log;

          $fh = $obj->dump_log($fh);

          $fh = $obj->dump_log($filename);

     This method starts or stops dump format logging of all the object's
     input and output.  The dump format shows the blocks read and written
     in a hexadecimal and printable character format.  This method is
     useful when debugging, however you might want to first try
     `input_log()' as it's more readable.

     If no argument is given, the current log filehandle is returned.  A
     null string indicates logging is off.

     To stop logging, use a null string as an argument.

     If an open filehandle is given, it is used for logging and returned.
     Otherwise, the argument is assumed to be the name of a file, the file
     is opened and a filehandle to it is returned.

eof - end of file indicator
          $eof = $obj->eof;

     This method indicates if end of file has been read.  Because the input
     is buffered this isn't the same thing as $obj has closed.  In other
     words $obj can be closed but there still can be stuff in the buffer
     to be read.  Under this condition you can still read but you won't be
     able to write.

errmode -  define action to be performed on error
          $mode = $obj->errmode;

          $prev = $obj->errmode($mode);

     This method gets or sets the action used when errors are encountered
     using the object.  The first calling sequence returns the current
     error mode.  The second calling sequence sets it to $mode and returns
     the previous mode.  Valid values for $mode are `"die"' (the default),
     `"return"', a *coderef*, or an *arrayref*.

     When mode is `"die"' and an error is encountered using the object,
     then an error message is printed to standard error and the program
     dies.

     When mode is `"return"' then the method generating the error places
     an error message in the object and returns the undefined value in a
     scalar context and a null list in list context.  The error message may
     be obtained using `errmsg()'.

     When mode is a *coderef*, then when an error is encountered *coderef*
     is called with the error message as its first argument.  Using this
     mode you may have your own subroutine handle errors.  If *coderef*
     itself returns then the method generating the error returns undefined
     or a null list depending on context.

     When mode is an *arrayref*, the first element of the array must be a
     *coderef*.  Any elements that follow are the arguments to *coderef*.
     When an error is encountered, the *coderef* is called with its
     arguments.  Using this mode you may have your own subroutine handle
     errors.  If the *coderef* itself returns then the method generating
     the error returns undefined or a null list depending on context.

errmsg - most recent error message
          $msg = $obj->errmsg;

          $prev = $obj->errmsg(@msgs);

     The first calling sequence returns the error message associated with
     the object.  The null string is returned if no error has been
     encountered yet.  The second calling sequence sets the error message
     for the object to the concatenation of *@msgs* and returns the
     previous error message.  Normally, error messages are set internally
     by a method when an error is encountered.

error - perform the error mode action
          $obj->error(@msgs);

     This method concatenates *@msgs* into a string and places it in the
     object as the error message.  Also see `errmsg()'.  It then performs
     the error mode.  Also see `errmode()'.

     If the error mode doesn't cause the program to die then the undefined
     value or a null list is returned depending on context.

     This method is primarily used by this class or a sub-class to perform
     the user requested action when an error is encountered.

fhopen - use already open filehandle for I/O
          $ok = $obj->fhopen($fh);

     This method associates the open filehandle $fh with $obj for further
     I/O.  Filehandle $fh must already be opened.

     Suppose you want to use the features of this module to do I/O to
     something other than a TCP port, for example STDIN or a filehandle
     opened to read from a process.  Instead of opening the object for I/O
     to a TCP port by using open() or new(), call this method instead.

get - read block of data
          $data = $obj->get([Timeout => $secs,]);

     This method reads a block of data from the object and returns it along
     with any buffered data.  If no buffered data is available to return,
     it will wait for data to read using the timeout specified in the
     object.  You can override that timeout using *$secs*.  Also see
     `timeout()'.  If buffered data is available to return, it also checks
     for a block of data that can be immediately read.

     On eof an undefined value is returned.  On time-out or other errors
     the error mode action is performed.

     An undefined value is returned for both eof and time-out when errmode
     is not set to `"die"'.  Use eof() and `timed_out()' to distinguish.

getline - read next line
          $line = $obj->getline([Timeout => $secs,]);

     This method reads and returns the next line of data from the object.
     You can use `input_record_separator()' to change the notion of what
     separates a line.  The default is `"\n"'.

     If a line isn't immediately available, this method blocks waiting for
     a line or the time-out.  You can override the object's timeout for
     this method using *$secs*.  Also see `timeout()'.

     On eof an undefined value is returned.  On time-out or other errors
     the error mode action is performed.

     An undefined value is returned for both eof and time-out when errmode
     is not set to `"die"'.  Use eof() and `timed_out()' to distinguish.

getlines - read next lines
          @lines = $obj->getlines([Timeout => $secs,]);

     This method reads and returns the next available lines of data from
     the object.  You can use `input_record_separator()' to change the
     notion of what separates a line.  The default is `"\n"'.

     If a line isn't immediately available, this method blocks waiting for
     one or more lines, or time-out.  You can override the object's timeout
     for this method using *$secs*.  Also see `timeout()'.

     On eof a null array is returned.  On time-out or other errors, the
     error mode action is performed.

     A null array is returned for both eof and time-out when errmode is
     not set to `"die"'.  Use eof() and `timed_out()' to distinguish.

host - name of remote host
          $host = $obj->host;

          $prev = $obj->host($host);

     This method designates the remote host.  With no argument this method
     returns the current host name set in the object.  With an argument it
     sets the current host name to $host and returns the previous host
     name.  You may indicate the remote host using either a hostname or an
     IP address.

input_log - log all input
          $fh = $obj->input_log;

          $fh = $obj->input_log($fh);

          $fh = $obj->input_log($filename);

     This method starts or stops logging of input.  This is useful when
     debugging.  Also see `dump_log()'.  Because most command interpreters
     echo back commands received, its likely all your output will also be
     in this log.  Note that input logging occurs after newline
     translation.  See binmode() for details on newline translation.

     If no argument is given, the log filehandle is returned.  A null
     string indicates logging is off.

     To stop logging, use a null string as an argument.

     If an open filehandle is given, it is used for logging and returned.
     Otherwise, the argument is assumed to be the name of a file, the file
     is opened for logging and a filehandle to it is returned.

input_record_separator - input line delimiter
          $rs = $obj->input_record_separator;

          $prev = $obj->input_record_separator($rs);

     This method designates the line delimiter for input.  It's used with
     `getline()', `getlines()', and `cmd()' to determine lines in the
     input.

     With no argument this method returns the current input record
     separator set in the object.  With an argument it sets the input
     record separator to *$rs* and returns the previous value.

lastline - last line read
          $line = $obj->lastline;

          $prev = $obj->lastline($line);

     This method saves the last line read from the object.  This may be a
     useful error message when the remote side abnormally closes the
     connection.  Typically the remote side will print an error message
     before closing.

     With no argument this method returns the last line read from the
     object.  With an argument it sets the last line read to *$line* and
     returns the previous value.  Normally, only internal methods set the
     last line.

login - perform standard login
          $ok = $obj->login($username, $password);

          $ok = $obj->login(Name     => $username,
                            Password => $password,
                            [Prompt  => $match,]
                            [Timeout => $secs,]);

     This method performs a standard login by waiting for a login prompt
     and responding with $username, then waiting for the password prompt
     and responding with $password, and then waiting for the command
     interpreter prompt.  If any of those prompts sent by the remote side
     don't match what's expected, this method will time-out - unless
     timeout is turned off.

     Login prompts must match either of the case insensitive patterns:

          /login[: ]*$/i
          /username[: ]*$/i

     Password prompts must match the case insensitive pattern:

          /password[: ]*$/i

     The command interpreter prompt must match the current setting of
     prompt.

     Use `dump_log()' to debug when this method keeps timing-out and you
     don't think it should.

     Consider using a combination of print() and `waitfor()' as an
     alternative to this method when it doesn't do what you want, e.g. the
     remote host doesn't send a username prompt.

     Optional named arguments are provided to override the current settings
     of prompt and timeout.

max_buffer_length - maximum size of input buffer
          $len = $obj->max_buffer_length;

          $prev = $obj->max_buffer_length($len);

     This method designates the maximum size of the input buffer.  An error
     is generated when a read causes the buffer to exceed this limit.  The
     default value is 1,048,576 bytes (1MB).  The input buffer can grow
     much larger than the block size when you continuously read using
     `getline()' or `waitfor()' and the data stream contains no newlines
     or matching waitfor patterns.

     With no argument this method returns the current maximum buffer length
     set in the object.  With an argument it sets the maximum buffer length
     to *$len* and returns the previous value.

open - connect to port on remote host
          $ok = $obj->open($host);

          $ok = $obj->open([Host    => $host,]
                           [Port    => $port,]
                           [Timeout => $secs,]);

     This method opens a TCP connection to $port on $host.  If either
     argument is missing then the current value of `host()' or `port()' is
     used.  An optional named argument is provided to override the current
     setting of timeout.

     On time-out or other connection errors, the error mode action is
     performed.

     Time-outs don't work for this method on machines that don't implement
     SIGALRM - most notably Win32 machines.  For those machines, an error
     is returned when the system reaches its own time-out while trying to
     connect.

     A side effect of this method is to reset the alarm interval associated
     with SIGALRM.

option_accept - indicate willingness to accept a TELNET option
          $fh = $obj->option_accept([Do   => $telopt,]
                                    [Dont => $telopt,]
                                    [Will => $telopt,]
                                    [Wont => $telopt,]);

     This method is used to indicate whether to accept or reject an offer
     to enable a TELNET option made by the remote side.  If you're using
     Do or *Will* to indicate a willingness to enable, then a notification
     callback must have already been defined by a prior call to
     `option_callback()'.  See `option_callback()' for details on
     receiving enable/disable notification of a TELNET option.

     You can give multiple Do, *Dont*, *Will*, or *Wont* arguments for
     different TELNET options in the same call to this method.

     The following example describes the meaning of the named arguments.  A
     TELNET option, such as `TELOPT_ECHO' used below, is an integer
     constant that you can import from Net::Telnet.  See the source in file
     Telnet.pm for the complete list.


          Do => `TELOPT_ECHO'


               we'll accept an offer to enable the echo option on the
               local side


          *Dont* => `TELOPT_ECHO'


               we'll reject an offer to enable the echo option on the
               local side


          *Will* => `TELOPT_ECHO'


               we'll accept an offer to enable the echo option on the
               remote side


          *Wont* => `TELOPT_ECHO'


               we'll reject an offer to enable the echo option on the
               remote side


     Use `option_send()' to send a request to the remote side to enable or
     disable a particular TELNET option.

option_callback - define the option negotiation callback
          $coderef = $obj->option_callback;

          $prev = $obj->option_callback($coderef);

     This method defines the callback subroutine that's called when a
     TELNET option is enabled or disabled.  Once defined, the
     option_callback may not be undefined.  However, calling this method
     with a different *$coderef* changes it.

     Here are the circumstances that invoke *$coderef*:


          An option becomes enabled because the remote side requested an
          enable and `option_accept()' had been used to arrange that it be
          accepted.


          The remote side arbitrarily decides to disable an option that is
          currently enabled.  Note that Net::Telnet always accepts a
          request to disable from the remote side.


          `option_send()' was used to send a request to enable or disable
          an option and the response from the remote side has just been
          received.  Note, that if a request to enable is rejected then
          *$coderef* is still invoked even though the option didn't change.


     Here are the arguments passed to *&$coderef*:

          &$coderef($obj, $option, $is_remote,
                    $is_enabled, $was_enabled, $buf_position);


          1.  $obj is the Net::Telnet object


          2.  $option is the TELNET option.  Net::Telnet exports constants
          for the various TELNET options which just equate to an integer.


          3.  *$is_remote* is a boolean indicating for which side the
          option applies.


          4.  *$is_enabled* is a boolean indicating the option is enabled
          or disabled


          5.  *$was_enabled* is a boolean indicating the option was
          previously enabled or disabled


          6.  *$buf_position* is an integer indicating the position in the
          object's input buffer where the option takes effect.  See
          `buffer()' to access the object's input buffer.

option_log - log all TELNET options sent or received
          $fh = $obj->option_log;

          $fh = $obj->option_log($fh);

          $fh = $obj->option_log($filename);

     This method starts or stops logging of all TELNET options being sent
     or received.  This is useful for debugging when you send options via
     `option_send()' or you arrange to accept option requests from the
     remote side via `option_accept()'.  Also see `dump_log()'.

     If no argument is given, the log filehandle is returned.  A null
     string indicates logging is off.

     To stop logging, use a null string as an argument.

     If an open filehandle is given, it is used for logging and returned.
     Otherwise, the argument is assumed to be the name of a file, the file
     is opened for logging and a filehandle to it is returned.

option_send - send TELNET option negotiation request
          $ok = $obj->option_send([Do    => $telopt,]
                                  [Dont  => $telopt,]
                                  [Will  => $telopt,]
                                  [Wont  => $telopt,]
                                  [Async => $boolean,]);

     This method is not yet implemented.  Look for it in a future version.

option_state - get current state of a TELNET option
          $hashref = $obj->option_state($telopt);

     This method returns a hashref containing a copy of the current state
     of TELNET option *$telopt*.

     Here are the values returned in the hash:


          $hashref->{remote_enabled}


               boolean that indicates if the option is enabled on the
               remote side.


          $hashref->{remote_enable_ok}


               boolean that indicates if it's ok to accept an offer to
               enable this option on the remote side.


          $hashref->{remote_state}


               string used to hold the internal state of option
               negotiation for this option on the remote side.


          $hashref->{local_enabled}


               boolean that indicates if the option is enabled on the
               local side.


          $hashref->{local_enable_ok}


               boolean that indicates if it's ok to accept an offer to
               enable this option on the local side.


          $hashref->{local_state}


               string used to hold the internal state of option
               negotiation for this option on the local side.

output_field_separator - field separator for print
          $ofs = $obj->output_field_separator;

          $prev = $obj->output_field_separator($ofs);

     This method designates the output field separator for print().
     Ordinarily the print method simply prints out the comma separated
     fields you specify.  Set this to specify what's printed between
     fields.

     With no argument this method returns the current output field
     separator set in the object.  With an argument it sets the output
     field separator to *$ofs* and returns the previous value.

output_log - log all output
          $fh = $obj->output_log;

          $fh = $obj->output_log($fh);

          $fh = $obj->output_log($filename);

     This method starts or stops logging of output.  This is useful when
     debugging.  Also see `dump_log()'.  Because most command interpreters
     echo back commands received, its likely all your output would also be
     in an input log.  See `input_log()'.  Note that output logging occurs
     before newline translation.  See binmode() for details on newline
     translation.

     If no argument is given, the log filehandle is returned.  A null
     string indicates logging is off.

     To stop logging, use a null string as an argument.

     If an open filehandle is given, it is used for logging and returned.
     Otherwise, the argument is assumed to be the name of a file, the file
     is opened for logging and a filehandle to it is returned.

output_record_separator - output line delimiter
          $ors = $obj->output_record_separator;

          $prev = $obj->output_record_separator($ors);

     This method designates the output record separator for print().
     Ordinarily the print operator simply prints out the comma separated
     fields you specify, with no trailing newline or record separator
     assumed.  Set this variable to specify what's printed at the end of
     the print.

     Note: the output record separator is set to `"\n"' by default, so
     there's no need to append all your commands with a newline.

     With no argument this method returns the current output record
     separator set in the object.  With an argument it sets the output
     record separator to *$ors* and returns the previous value.

port - remote port
          $port = $obj->port;

          $prev = $obj->port($port);

     This method designates the remote TCP port.  With no argument this
     method returns the current port number.  With an argument it sets the
     current port number to $port and returns the previous port.  If $port
     is a service name, then first it's converted to a port number using
     the perl function `getservbyname()'.

print - write to object
          $ok = $obj->print(@list);

     This method prints a string or a comma-separated list of strings to
     the opened object and returns non-zero if all data was successfully
     written.

     By default, the `output_record_separator()' is set to `"\n"' in order
     to have your commands automatically end with a newline.  In most cases
     your output is being read by a command interpreter which won't accept
     a command until newline is read.  This is similar to someone typing a
     command and hitting the return key.

     On failure, it's possible that some data was written.  If you choose
     to try and recover from a print timing-out, use `print_length()' to
     determine how much was written before time-out occurred.

print_length - number of bytes written by print
          $num = $obj->print_length;

     This returns the number of bytes successfully written by the most
     recent print().

prompt - pattern to match a prompt
          $matchop = $obj->prompt;

          $prev = $obj->prompt($matchop);

     This method sets the pattern used to find a prompt in the input
     stream.  It must be a string representing a valid perl pattern match
     operator.  The methods login() and `cmd()' try to read until matching
     the prompt.  They will fail with a time-out error if the pattern
     you've chosen doesn't match what the remote side sends.

     With no argument this method returns the prompt set in the object.
     With an argument it sets the prompt to *$matchop* and returns the
     previous value.

     The default prompt is `'/[\$%#>] $/''

     Always use single quotes, instead of double quotes, to construct
     *$matchop* (e.g. `'/bash\$ $/'').  If you're constructing a DOS like
     file path, you'll need to use four backslashes to represent one (e.g.
     `'/c:\\\\users\\\\bill>$/i'').

     Of course don't forget about regexp metacharacters like ., [, or `$'.
     You'll only need a single backslash to quote them.  The anchor
     metacharacters ^ and `$' refer to positions in the input buffer.

telnetmode - turn off/on telnet command interpretation
          $mode = $obj->telnetmode;

          $prev = $obj->telnetmode($mode);

     This method controls whether or not TELNET commands in the data stream
     are recognized and handled.  The TELNET protocol uses certain
     character sequences sent in the data stream to control the session.
     If the port you're connecting to isn't using the TELNET protocol, then
     you should turn this mode off.  The default is *on*.

     If no argument is given, the current mode is returned.

     If $mode is 0 then telnet mode is off.  If $mode is 1 then telnet
     mode is on.

timed_out - time-out indicator
          $boolean = $obj->timed_out;

          $prev = $obj->timed_out($boolean);

     This method indicates if a previous read or write method timed-out.

     With no argument this method returns true if a previous method
     timed-out.  With an argument it sets the indicator.  Normally, only
     internal methods set this indicator.

timeout - I/O time-out interval
          $secs = $obj->timeout;

          $prev = $obj->timeout($secs);

     This method sets the timeout interval that's used when performing I/O
     or connecting to a port.  When a method doesn't complete within the
     timeout interval then it's an error and the error mode action is
     performed.

     The timeout may be expressed as a relative or absolute value.  If
     *$secs* is greater than or equal to the time the program was started,
     as determined by $^T, then it's the absolute time when time-out
     occurs.  Also see the perl function `time()'.  A relative time-out
     happens *$secs* from when the I/O method begins.

     If *$secs* is 0 then time-out occurs if the data cannot be
     immediately read or written.  Use the undefined value to turn off
     timing-out.

     With no argument this method returns the timeout set in the object.
     With an argument it sets the timeout to *$secs* and returns the
     previous value.

waitfor - wait for pattern in the input
          $ok = $obj->waitfor($matchop);
          $ok = $obj->waitfor([Match   => $matchop,]
                              [String  => $string,]
                              [Timeout => $secs,]);

          ($prematch, $match) = $obj->waitfor($matchop);
          ($prematch, $match) = $obj->waitfor([Match   => $matchop,]
                                              [String  => $string,]
                                              [Timeout => $secs,]);

     This method reads until a pattern match or string is found in the
     input stream.  All the characters before and including the match are
     removed from the input stream.  On time-out, eof, or other errors the
     error mode action is performed.

     In an array context the characters before the match and the matched
     characters are returned in *$prematch* and *$match*.

     You can specify more than one pattern or string by simply providing
     multiple Match and/or String named arguments.  A *$matchop* must be a
     string representing a valid Perl pattern match operator.  The $string
     is just a substring to find in the input stream.

     Use `dump_log()' to debug when this method keeps timing-out and you
     don't think it should.

     An optional named argument is provided to override the current setting
     of timeout.

     To avoid unexpected backslash interpretation, always use single quotes
     instead of double quotes to construct a match operator argument for
     `prompt()' and `waitfor()' (e.g. `'/bash\$ $/'').  If you're
     constructing a DOS like file path, you'll need to use four backslashes
     to represent one (e.g. `'/c:\\\\users\\\\bill>$/i'').

     Of course don't forget about regexp metacharacters like ., [, or `$'.
     You'll only need a single backslash to quote them.  The anchor
     metacharacters ^ and `$' refer to positions in the input buffer.

SEE ALSO
========

RFC 854
     TELNET Protocol Specification

     ftp://ftp.isi.edu/in-notes/rfc854.txt

RFC 1143
     Q Method of Implementing TELNET Option Negotiation

     ftp://ftp.isi.edu/in-notes/rfc1143.txt

TELNET Option Assignments
     ftp://ftp.isi.edu/in-notes/iana/assignments/telnet-options

EXAMPLES
========

   This example gets the current weather forecast for Brainerd, Minnesota.

     my ($forecast, $t);

     use Net::Telnet ();
     $t = new Net::Telnet;
     $t->open("rainmaker.wunderground.com");

     ## Wait for first prompt and "hit return".
     $t->waitfor('/continue:.*$/');
     $t->print("");

     ## Wait for second prompt and respond with city code.
     $t->waitfor('/city code.*$/');
     $t->print("BRD");

     ## Read and print the first page of forecast.
     ($forecast) = $t->waitfor('/[ \t]+press return to continue/i');
     print $forecast;

     exit;

   This example checks a POP server to see if you have mail.

     my ($hostname, $line, $passwd, $pop, $username);

     $hostname = "your_destination_host_here";
     $username = "your_username_here";
     $passwd = "your_password_here";

     use Net::Telnet ();
     $pop = new Net::Telnet (Telnetmode => 0);
     $pop->open(Host => $hostname,
                Port => 110);

     ## Read connection message.
     $line = $pop->getline;
     die $line unless $line =~ /^\+OK/;

     ## Send user name.
     $pop->print("user $username");
     $line = $pop->getline;
     die $line unless $line =~ /^\+OK/;

     ## Send password.
     $pop->print("pass $passwd");
     $line = $pop->getline;
     die $line unless $line =~ /^\+OK/;

     ## Request status of messages.
     $pop->print("list");
     $line = $pop->getline;
     print $line;

     exit;

   Here's an example you can use to down load a file of any type.  The
file is read from the remote host's standard output using cat.  To prevent
any output processing, the remote host's standard output is put in raw
mode using the Bourne shell.  The Bourne shell is used because some
shells, notably tcsh, prevent changing tty modes.  Upon completion, FTP
style statistics are printed to stderr.

     my ($block, $filename, $host, $hostname, $k_per_sec, $line,
         $num_read, $passwd, $prevblock, $prompt, $size, $size_bsd,
         $size_sysv, $start_time, $total_time, $username);

     $hostname = "your_destination_host_here";
     $username = "your_username_here";
     $passwd = "your_password_here";
     $filename = "your_download_file_here";

     ## Connect and login.
     use Net::Telnet ();
     $host = new Net::Telnet (Timeout => 30,
                              Prompt => '/[%#>] $/');
     $host->open($hostname);
     $host->login($username, $passwd);

     ## Make sure prompt won't match anything in send data.
     $prompt = '_funkyPrompt_';
     $host->prompt("/$prompt\$/");
     $host->cmd("set prompt = '$prompt'");

     ## Get size of file.
     ($line) = $host->cmd("/bin/ls -l $filename");
     ($size_bsd, $size_sysv) = (split ' ', $line)[3,4];
     if ($size_sysv =~ /^\d+$/) {
         $size = $size_sysv;
     }
     elsif ($size_bsd =~ /^\d+$/) {
         $size = $size_bsd;
     }
     else {
         die "$filename: no such file on $hostname";
     }

     ## Start sending the file.
     binmode STDOUT;
     $host->binmode(1);
     $host->print("/bin/sh -c 'stty raw; cat $filename'");
     $host->getline;    # discard echoed back line

     ## Read file a block at a time.
     $num_read = 0;
     $prevblock = '';
     $start_time = time;
     while (($block = $host->get) and ($block !~ /$prompt$/o)) {
         if (length $block >= length $prompt) {
             print $prevblock;
             $num_read += length $prevblock;
             $prevblock = $block;
         }
         else {
             $prevblock .= $block;
         }

     }
     $host->close;

     ## Print last block without trailing prompt.
     $prevblock .= $block;
     $prevblock =~ s/$prompt$//;
     print $prevblock;
     $num_read += length $prevblock;
     die "error: expected size $size, received size $num_read\n"
         unless $num_read == $size;

     ## Print totals.
     $total_time = (time - $start_time) || 1;
     $k_per_sec = ($size / 1024) / $total_time;
     $k_per_sec = sprintf "%3.1f", $k_per_sec;
     warn("$num_read bytes received in $total_time seconds ",
          "($k_per_sec Kbytes/s)\n");

     exit;

AUTHOR
======

   Jay Rogers <jay@rgrs.com>

COPYRIGHT
=========

   Copyright 1997, 2000 by Jay Rogers.  All rights reserved.  This program
is free software; you can redistribute it and/or modify it under the same
terms as Perl itself.


