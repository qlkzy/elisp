This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Tk/Derived,  Next: Tk/Dial,  Prev: Tk/DateEntry,  Up: Module List

Base class for widgets derived from others
******************************************

NAME
====

   Tk::Derived - Base class for widgets derived from others

SYNOPSIS
========

     package Tk::Whatever;
     require Tk::Something;
     require Tk::Derived;

     @ISA = qw(Tk::Derived Tk::Something);

     sub Populate
     {
      my ($cw,$args) = @_;
      ...
      $cw->SUPER::Populate($args);
      $cw->ConfigSpecs(...);
      ...
     }

DESCRIPTION
===========

   Tk::Derived is used with perl5's multiple inheritance to override some
methods normally inherited from Tk::Widget.

   Tk::Derived should precede any Tk widgets in the class's @ISA.

   Tk::Derived's main purpose is to apply wrappers to configure and cget
methods of widgets to allow the derived widget to add to or modify
behaviour of the configure options supported by the base widget.

   The derived class should normally override the Populate method provided
by Tk::Derived and call ConfigSpecs to declare configure options.

   The public methods provided by Tk::Derived are as follows:

->ConfigSpecs(-key => [*kind*, name, Class, default], ...)
SEE ALSO
========

   `Tk::ConfigSpecs|Tk::ConfigSpecs' in this node `Tk::mega|Tk::mega' in
this node


File: pm.info,  Node: Tk/Dial,  Next: Tk/Dialog,  Prev: Tk/Derived,  Up: Module List

an alternative to the scale widget
**********************************

NAME
====

   Dial - an alternative to the scale widget

SYNOPSIS
========

     use Tk::Dial;

     $dial = $top->Dial(-margin =>  20,
     		    -radius =>  48,
     		    -min    =>	 0,
     		    -max    => 100,
     		    -value  =>   0,
     		    -format => '%d');

     margin - blank space to leave around dial
     radius - radius of dial
     min, max - range of possible values
     value  - current value
     format - printf-style format for displaying format

   Values shown above are defaults.

DESCRIPTION
===========

   A dial looks like a speedometer: a 3/4 circle with a needle indicating
the current value.  Below the graphical dial is an entry that displays the
current value, and which can be used to enter a value by hand.

   The needle is moved by pressing button 1 in the canvas and dragging. The
needle will follow the mouse, even if the mouse leaves the canvas, which
allows for high precision. Alternatively, the user can enter a value in
the entry space and press Return to set the value; the needle will be set
accordingly.

TO DO
=====

     Configure
     Tick marks
     Step size

AUTHORS
=======

   Roy Johnson, rjohnson@shell.com

   Based on a similar widget in XV, a program by John Bradley,
bradley@cis.upenn.edu

HISTORY    August 1995: Released for critique by pTk mailing list
=================================================================


File: pm.info,  Node: Tk/Dialog,  Next: Tk/DialogBox,  Prev: Tk/Dial,  Up: Module List

Create modal dialog and wait for a response.
********************************************

NAME
====

   Tk::Dialog - Create modal dialog and wait for a response.

SYNOPSIS
========

       *$dialog* = *$parent*->*Dialog*(*-option* => value, ... );

DESCRIPTION
===========

   This procedure is part of the Tk script library - its arguments
describe a dialog box.  After creating a dialog box, *Dialog* waits for
the user to select one of the buttons either by clicking on the button
with the mouse or by typing return to invoke the default button (if any).
Then it returns the text string of the selected button.

   While waiting for the user to respond, *Dialog* sets a local grab.
This prevents the user from interacting with the application in any way
except to invoke the dialog box.  See Show() method.

   The following option/value pairs are supported:

*-title*
     Text to appear in the window manager's title bar for the dialog.

*-text*
     Message to appear in the top portion of the dialog box.

*-bitmap*
     If non-empty, specifies a bitmap to display in the top portion of the
     dialog, to the left of the text.  If this is an empty string then no
     bitmap is displayed in the dialog.

*-default_button*
     Text label string of the button that displays the default ring.

*-buttons*
     A reference to a list of button label strings.  Each string specifies
     text to display in a button, in order from left to right.

METHODS
=======

`$answer = $dialog->*Show*(?-global?);'
     This method displays the dialog, waits for the user's response, and
     stores the text string of the selected button in `$answer'.  If
     *-global* is specified a global (rather than local) grab is performed.

EXAMPLE
=======

   *$dialog* = *$mw*->*Dialog*(-text => 'Save File?', -bitmap =>
'question', -title => 'Save File Dialog', -default_button => 'Yes',
-buttons => [qw/Yes No Cancel/);

KEYWORDS
========

   bitmap, dialog, modal, messageBox


File: pm.info,  Node: Tk/DialogBox,  Next: Tk/DirTree,  Prev: Tk/Dialog,  Up: Module List

create and manipulate a dialog screen.
**************************************

NAME
====

   Tk::DialogBox - create and manipulate a dialog screen.

SYNOPSIS
========

     use Tk::DialogBox
     ...
     $d = $top->DialogBox(-title => "Title", -buttons => ["OK", "Cancel"]);
     $w = $d->add(Widget, args);
     ...
     $button = $d->Show;

DESCRIPTION
===========

   *DialogBox* is very similar to *Dialog* except that it allows any
widget in the top frame. *DialogBox* creates two frames--"top" and
"bottom". The bottom frame shows all the specified buttons, lined up from
left to right. The top frame acts as a container for all other widgets
that can be added with the *add()* method. The non-standard options
recognized by *DialogBox* are as follows:

*-title*
     Specify the title of the dialog box. If this is not set, then the
     name of the program is used.

*-buttons*
     The buttons to display in the bottom frame. This is a reference to an
     array of strings containing the text to put on each button. There is
     no default value for this. If you do not specify any buttons, no
     buttons will be displayed.

*-default_button*
     Specifies the default button that is considered invoked when user
     presses <Return> on the dialog box. This button is highlighted. If no
     default button is specified, then the first element of the array
     whose reference is passed to the *-buttons* option is used as the
     default.

METHODS
=======

   *DialogBox* supports only two methods as of now:

add(widget, options)
     Add the widget indicated by widget. *Widget* can be the name of any
     Tk widget (standard or contributed). Options are the options that the
     widget accepts. The widget is advertized as a subwidget of
     *DialogBox*.

*Show(**grab*)
     Display the dialog box, until user invokes one of the buttons in the
     bottom frame. If the grab type is specified in *grab*, then Show uses
     that grab; otherwise it uses a local grab. Returns the name of the
     button invoked.

BUGS
====

   There is no way of removing a widget once it has been added to the top
frame.

   There is no control over the appearance of the buttons in the bottom
frame nor is there any way to control the placement of the two frames with
respect to each other e.g. widgets to the left, buttons to the right
instead of widgets on the top and buttons on the bottom always.

AUTHOR
======

   *Rajappa Iyer* rsi@earthling.net

   This code is distributed under the same terms as Perl.


File: pm.info,  Node: Tk/DirTree,  Next: Tk/DockFrame,  Prev: Tk/DialogBox,  Up: Module List

Create and manipulate DirTree widgets
*************************************

NAME
====

   Tk::DirTree - Create and manipulate DirTree widgets

SYNOPSIS
========

       *use Tk::DirTree;*

       *$dirtree* = *$parent*->*DirTree*(?options?);

SUPER-CLASS
===========

   The *DirTree* class is derived from the `Tree|Tk::Tree' in this node
class and inherits all the methods, options and subwidgets of its
super-class.

STANDARD OPTIONS
================

   Tree supports all the standard options of a Tree widget.  See *Note
Tk/options: Tk/options, for details on the standard options.

WIDGET-SPECIFIC OPTIONS
=======================

Name:		*browseCmd*
Class:		*BrowseCmd*
Switch:		*-browsecmd*
     Specifies a `callback|Tk::callbacks' in this node to call whenever
     the user browses on a directory (usually by single-clicking on the
     name of the directory). The callback is called with one argument, the
     complete pathname of the directory.

Name:		command
Class:		Command
Switch:		*-command*
     Specifies the `callback|Tk::callbacks' in this node to be called when
     the user activates on a directory (usually by double-clicking on the
     name of the directory). The callback is called with one argument, the
     complete pathname of the directory.

Name:		*dircmd*
Class:		*DirCmd*
Switch:		*-dircmd*
     Specifies the `callback|Tk::callbacks' in this node to be called when
     a directory listing is needed for a particular directory. If this
     option is not specified, by default the DirTree widget will attempt
     to read the directory as a Unix directory. On special occasions, the
     application programmer may want to supply a special method for
     reading directories: for example, when he needs to list remote
     directories. In this case, the *-dircmd* option can be used. The
     specified callback accepts two arguments: the first is the name of
     the directory to be listed; the second is a Boolean value indicating
     whether hidden sub-directories should be listed. This callback
     returns a list of names of the sub-directories of this directory. For
     example:

          sub read_dir {
              my( $dir, $showhidden ) = @_;
              return( qw/DOS NORTON WINDOWS/ ) if $dir eq "C:\\";
              return();
          }

Name:		*showHidden*
Class:		*ShowHidden*
Switch:		*-showhidden*
     Specifies whether hidden directories should be shown. By default, a
     directory name starting with a period "." is considered as a hidden
     directory. This rule can be overridden by supplying an alternative
     *-dircmd* option.

Name:		directory
Class:		Directory
Switch:		*-directory*
Alias:		*-value*
     Specifies the name of the current directory to be displayed in the
     DirTree widget.

DESCRIPTION
===========

   The *DirTree* constructor method creates a new window (given by the
$dirtree argument) and makes it into a DirTree widget.  Additional options,
described above, may be specified on the command line or in the option
database to configure aspects of the DirTree such as its cursor and
relief.  The DirTree widget displays a list view of a directory, its
previous directories and its sub-directories. The user can choose one of
the directories displayed in the list or change to another directory.

WIDGET METHODS
==============

   The *DirTree* method creates a widget object.  This object supports the
configure and cget methods described in *Note Tk/options: Tk/options,
which can be used to enquire and modify the options described above.  The
widget also inherits all the methods provided by the generic
`Tk::Widget|Tk::Widget' in this node class.

   The following additional methods are available for DirTree widgets:

*$dirtree*->chdir(dir)
     Change the current directory to dir.

BINDINGS
========

   The mouse and keyboard bindings of the DirTree widget are the same as
the bindings of the `Tree|Tk::Tree' in this node widget.

KEYWORDS
========

   directory, tree, tix

SEE ALSO
========

   `Tk::Tree|Tk::Tree' in this node `Tk::HList|Tk::HList' in this node

AUTHOR
======

   Perl/TK version by Chris Dean <ctdean@cogit.com>.  Original Tcl/Tix
version by Ioi Kim Lam.


File: pm.info,  Node: Tk/DockFrame,  Next: Tk/DragDrop/Common,  Prev: Tk/DirTree,  Up: Module List

A multicolumn list widget with sortable & sizeable columns
**********************************************************

NAME
====

   Tk::DockFrame - A multicolumn list widget with sortable & sizeable
columns

SYNOPSIS
========

     use Tk::DockFrame;

     $DockPort = $parent->DockPort();

     $DockPort->pack();

     $DockFrame = $parent->DockFrame
        (
         '-dock' => $DockPort,
         '-trimcount' => 1,
         '-sensitivity' => 10,
         '-decorate' => 0,
         '-trimgap' => 2
        );

     $DockFrame->Widget (...)->pack();

     ...

     Tk::MainLoop;

DESCRIPTION
===========

   The two public classes in this module combine to implement a dockable
widget subsystem.

   Objects of class DockFrame are simple frames which can be made to
"float" free as Toplevel widgets or packed as Frames. Dockframes can have
any number of direct children but the favored use is to pack a single
Frame based child widget and add widgets to that using any geometry
manager.

   DockPorts are simple frame widgets which must be managed by the packer.
They normally have no width or height and are thus rendered invisible.
DockFrame children of the same parentage, when dragged over them, will be
converted from "floating" Toplevels into Frame widgets rendered within the
DockPort, resizing it accordingly.

IMPORTANT UPDATE
     The DockFrames are now managed WITHIN the DockPorts, therefore any
     geometry manager can be used with all the widgets described here

STANDARD OPTIONS
================

DockFrame
     *-background -borderwidth -relief -bg -width -height*

DockPort
     none

   See Tk for details of the standard options.

WIDGET-SPECIFIC OPTIONS
=======================

Name:	*dock*
Class:	*Dock*
Switch:	*-dock*
     Used to "dock" a DockFrame to a DockPort. The parameter passed must be
     a reference to a DockPort and nothing else. If a DockPort is not
     specified in this manner on creation, then the DockFrame will
     initially "float" free.

Name:	*trimcount*
Class:	*TrimCount*
Switch:	*-trimcount*
     Specifies the number of button trim drag 'handles'. Specifying 0 will
     prevent attachment/detachment of the DockFrame.

Name:	*sensitivity*
Class:	*Sensitivity*
Switch:	*-sensitivity*
     The DockFrame will "dock" when it gets within the specified number of
     pixels of the DockPort.

Name:	*decorate*
Class:	*Decorate*
Switch:	*-decorate*
     Boolean value indicating whether or not to instruct the window
     manager to add decoration (titlebar, etc) to the undocked DockFrame.
     It is important to note here that, due to the nature of the event
     handling, dragging the DockFrame by the titlebar will not cause it to
     dock.

Name:	*trimgap*
Class:	*Trimgap*
Switch:	*-trimgap*
     This option specifies the number of pixels to leave between the
     "handles" and the first child widget

WIDGET METHODS
==============

*$DockFrame*->*dock* (*$DockPort*)
     Immediately docks the DockFrame to the specified DockPort

*$DockFrame*->*undock*()
     Immediately undocks the DockFrame

BINDINGS
========

[1]
     Pressing and holding the left mouse button on a DockFrame trim
     element allows movement of that DockFrame. If the DockFrame is
     "dragged" over a DockPort, it will "dock" and dragging will cease
     until the "handle" is released and then selected again.

AUTHORS
=======

   Damion K. Wilson, dwilson@ibl.bm, http://pwp.ibl.bm/~dkw

COPYRIGHT
=========

   Copyright (c) 1999 Damion K. Wilson.

   All rights reserved.

   This program is free software, you may redistribute it and/or modify it
under the same terms as Perl itself.

HISTORY
=======

*October 1, 1999*: Written to replace experimental Tk::DockingGroup with no legacy support

File: pm.info,  Node: Tk/DragDrop/Common,  Next: Tk/DragDrop/SunConst,  Prev: Tk/DockFrame,  Up: Module List

private class used by Drag&Drop
*******************************

NAME
====

   Tk::DragDrop::Common - private class used by Drag&Drop

DESCRIPTION
===========

   This class provides methods to automate the the loading and declaring
of Drop and Site 'types'.


File: pm.info,  Node: Tk/DragDrop/SunConst,  Next: Tk/DropSite,  Prev: Tk/DragDrop/Common,  Up: Module List

Constants for Sun's Drag&Drop protocol
**************************************

NAME
====

   Tk::DragDrop::SunConst - Constants for Sun's Drag&Drop protocol

DESCRIPTION
===========

   This module defines symbolic name subs for the numeric constants that
make up Sun's Drag&Drop protocol. They are in this module with Exporter as
they are shared between the two halves (Dropper and Receiver) of the
protocol.


File: pm.info,  Node: Tk/DropSite,  Next: Tk/Entry,  Prev: Tk/DragDrop/SunConst,  Up: Module List

Receive side of Drag & Drop abstraction
***************************************

NAME
====

   Tk::DropSite - Receive side of Drag & Drop abstraction

     use Tk::DropSite qw(...);
     $widget->DropSite(-entercommand => ...,
                       -dropcommand  => ...,
                       -motioncommand  => ...,
                       -dropcommand  => ...,
                      );

DESCRIPTION
===========

   `DropSite' creates an object which represents a site on which things
may be "Dropped".

   A DropSite provides the following methods:

   =over 4

$site->Enter($token,$event)
$site->Leave($token,$event)
$site->Motion($token,$event)
$site->Drop($token,$event)

File: pm.info,  Node: Tk/Entry,  Next: Tk/Error,  Prev: Tk/DropSite,  Up: Module List

Create and manipulate Entry widgets
***********************************

NAME
====

   Tk::Entry - Create and manipulate Entry widgets

       $entry = *$parent*->Entry(?options?);

STANDARD OPTIONS
================

   *-background*	*-highlightbackground*	*-insertontime*	*-selectforeground*
*-borderwidth*	*-highlightcolor*	*-insertwidth*	*-takefocus*
*-cursor*	*-highlightthickness*	-justify	*-textvariable*
*-exportselection*	*-insertbackground*	*-relief*	*-xscrollcommand*
*-font*	*-insertborderwidth*	*-selectbackground*
*-foreground*	*-insertofftime*	*-selectborderwidth*

WIDGET-SPECIFIC OPTIONS
=======================

Name:	*invalidCommand*
Class:	*InvalidCommand*
Switch:	*-invalidcommand*
Alias:	*-invcmd*
     Specifies a script to eval when *validateCommand* returns 0.  Setting
     it to <undef> disables this feature (the default).  The best use of
     this option is to set it to *bell*.  See *Validation* below for more
     information.

Name:	show
Class:	Show
Switch:	*-show*
     If this option is specified, then the true contents of the entry are
     not displayed in the window.  Instead, each character in the entry's
     value will be displayed as the first character in the value of this
     option, such as "*".  This is useful, for example, if the entry is to
     be used to enter a password.  If characters in the entry are selected
     and copied elsewhere, the information copied will be what is
     displayed, not the true contents of the entry.

Name:	state
Class:	State
Switch:	*-state*
     Specifies one of two states for the entry:  normal or disabled.  If
     the entry is disabled then the value may not be changed using widget
     methods and no insertion cursor will be displayed, even if the input
     focus is in the widget.

Name:	validate
Class:	*Validate*
Switch:	*-validate*
     Specifies the mode in which validation should operate: none, focus,
     focusin, focusout, key, or all.  It defaults to none.  When you want
     validation, you must explicitly state which mode you wish to use.
     See *Validation* below for more.

Name:	*validateCommand*
Class:	*ValidateCommand*
Switch:	*-validatecommand*
Alias:	*-vcmd*
     Specifies a script to eval when you want to validate the input into
     the entry widget.  Setting it to undef disables this feature (the
     default).  This command must return a valid boolean value.  If it
     returns 0 (or the valid boolean equivalent) then it means you reject
     the new edition and it will not occur and the *invalidCommand* will
     be evaluated if it is set. If it returns 1, then the new edition
     occurs.  See *Validation* below for more information.

Name:	width
Class:	Width
Switch:	*-width*
     Specifies an integer value indicating the desired width of the entry
     window, in average-size characters of the widget's font.  If the
     value is less than or equal to zero, the widget picks a size just
     large enough to hold its current text.

DESCRIPTION
===========

   The Entry method creates a new window (given by the $entry argument)
and makes it into an entry widget.  Additional options, described above,
may be specified on the command line or in the option database to
configure aspects of the entry such as its colors, font, and relief.  The
entry command returns its $entry argument.  At the time this command is
invoked, there must not exist a window named $entry, but $entry's parent
must exist.

   An entry is a widget that displays a one-line text string and allows
that string to be edited using methods described below, which are
typically bound to keystrokes and mouse actions.  When first created, an
entry's string is empty.  A portion of the entry may be selected as
described below.  If an entry is exporting its selection (see the
*exportSelection* option), then it will observe the standard X11 protocols
for handling the selection;  entry selections are available as type STRING.
Entries also observe the standard Tk rules for dealing with the input
focus.  When an entry has the input focus it displays an *insertion
cursor* to indicate where new characters will be inserted.

   Entries are capable of displaying strings that are too long to fit
entirely within the widget's window.  In this case, only a portion of the
string will be displayed;  methods described below may be used to change
the view in the window.  Entries use the standard *xScrollCommand*
mechanism for interacting with scrollbars (see the description of the
*-xscrollcommand* option for details).  They also support scanning, as
described below.

VALIDATION
==========

   Validation of entry widgets is derived from part of the patch written by
jhobbs@cs.uoregon.edu.  This works by setting the *validateCommand* option
to a callback which will be evaluated according to the validate option as
follows:

none
     Default.  This means no validation will occur.

focus
     *validateCommand* will be called when the entry receives or loses
     focus.

focusin
     *validateCommand* will be called when the entry receives focus.

focusout
     *validateCommand* will be called when the entry loses focus.

key
     *validateCommand* will be called when the entry is edited.

all
     *validateCommand* will be called for all above conditions.

   The *validateCommand* and *invalidCommand* are called with the following
arguments:

   * The proposed value of the entry.  If you are configuring the entry
     widget to have a new textvariable, this will be the value of that
     textvariable.

   * The characters to be added (or deleted). This will be undef if
     validation is due to focus, explcit call to validate or if change is
     due to `-textvariable' changing.

   * The current value of entry i.e. before the proposed change.

   * index of char string to be added/deleted, if any. -1 otherwise

   * type of action. 1 == INSERT, 0 == DELETE, -1 if it's a forced
     validation or textvariable validation

   In general, the *textVariable* and *validateCommand* can be dangerous
to mix. If you try set the *textVariable* to something that the
*validateCommand* will not accept it will be set back to the value of the
entry widget.  Using the *textVariable* for read-only purposes will never
cause problems.

   The *validateCommand* will turn itself off by setting validate to none
when an error occurs, for example when the *validateCommand* or
*invalidCommand* encounters an error in its script while evaluating, or
*validateCommand* does not return a valid boolean value.

   With the perl/Tk version validate option is supposed to be "suspended"
while executing the *validateCommand* or the *invalidCommand*.  This is
experimental but in theory either callback can "correct" the value of the
widget, and override the proposed change. (*validateCommand* should still
return false to inhibit the change from happening when it returns.)

WIDGET METHODS
==============

   The Entry method creates a widget object.  This object supports the
configure and cget methods described in *Note Tk/options: Tk/options,
which can be used to enquire and modify the options described above.  The
widget also inherits all the methods provided by the generic
`Tk::Widget|Tk::Widget' in this node class.

   Many of the additional methods for entries take one or more indices as
arguments.  An index specifies a particular character in the entry's
string, in any of the following ways:

number
     Specifies the character as a numerical index, where 0 corresponds to
     the first character in the string.

anchor
     Indicates the anchor point for the selection, which is set with the
     *selectionFrom* and *selectionAdjust* methods.

end
     Indicates the character just after the last one in the entry's string.
     This is equivalent to specifying a numerical index equal to the length
     of the entry's string.

insert
     Indicates the character adjacent to and immediately following the
     insertion cursor.

sel.first
     Indicates the first character in the selection.  It is an error to
     use this form if the selection isn't in the entry window.

sel.last
     Indicates the character just after the last one in the selection.  It
     is an error to use this form if the selection isn't in the entry
     window.

*@*number
     In this form, number is treated as an x-coordinate in the entry's
     window;  the character spanning that x-coordinate is used.  For
     example, "*@0*" indicates the left-most character in the window.

   Abbreviations may be used for any of the forms above, e.g. "e" or
"*sel.f*".  In general, out-of-range indices are automatically rounded to
the nearest legal value.

   The following additional methods are available for entry widgets:

$entry->*bbox*(index)
     Returns a list of four numbers describing the bounding box of the
     character given by index.  The first two elements of the list give
     the x and y coordinates of the upper-left corner of the screen area
     covered by the character (in pixels relative to the widget) and the
     last two elements give the width and height of the character, in
     pixels.  The bounding box may refer to a region outside the visible
     area of the window.

$entry->delete(*first, *?last?)
     Returns the current value of the configuration option given by option.
     Option may have any of the values accepted by the entry command.

$entry->configure(?option?, ?*value, option, value, ...*?)
     Query or modify the configuration options of the widget.  If no
     option is specified, returns a list describing all of the available
     options for $entry (see `Tk::configure' in this node for information
     on the format of this list).  If option is specified with no value,
     then the command returns a list describing the one named option (this
     list will be identical to the corresponding sublist of the value
     returned if no option is specified).  If one or more *option-value*
     pairs are specified, then the command modifies the given widget
     option(s) to have the given value(s);  in this case the command
     returns an empty string.  Option may have any of the values accepted
     by the entry command.

$entry->delete(*first, *?last?)
     Delete one or more elements of the entry.  First is the index of the
     first character to delete, and last is the index of the character
     just after the last one to delete.  If last isn't specified it
     defaults to first+1, i.e. a single character is deleted.  This method
     returns an empty string.

$entry->get
     Returns the entry's string.

$entry->*icursor*(index)
     Arrange for the insertion cursor to be displayed just before the
     character given by index.  Returns an empty string.

$entry->index(index)
     Returns the numerical index corresponding to index.

$entry->insert(*index, string*)
     Insert the characters of string just before the character indicated
     by index.  Returns an empty string.

$entry->scan(*option, args*)
$entry->scanOption(args)
     This method is used to implement scanning on entries.  It has two
     forms, depending on Option:

    $entry->*scanMark*(x)
          Records x and the current view in the entry widget;  used in
          conjunction with later *scanDragto* methods.  Typically this
          method is associated with a mouse button press in the widget.  It
          returns an empty string.

    $entry->*scanDragto*(x)
          This method computes the difference between its x argument and
          the x argument to the last *scanMark* method for the widget.  It
          then adjusts the view left or right by 10 times the difference
          in x-coordinates.  This method is typically associated with
          mouse motion events in the widget, to produce the effect of
          dragging the entry at high speed through the widget.  The return
          value is an empty string.

$entry->selection(*option, arg*)
$entry->selectionOption(*arg*)
     This method is used to adjust the selection within an entry.  It has
     several forms, depending on Option:

    $entry->*selectionAdjust*(index)
          Locate the end of the selection nearest to the character given by
          index, and adjust that end of the selection to be at index (i.e
          including but not going beyond index).  The other end of the
          selection is made the anchor point for future *selectionTo*
          methods.  If the selection isn't currently in the entry, then a
          new selection is created to include the characters between index
          and the most recent selection anchor point, inclusive.  Returns
          an empty string.

    $entry->*selectionClear*
          Clear the selection if it is currently in this widget.  If the
          selection isn't in this widget then the method has no effect.
          Returns an empty string.

    $entry->*selectionFrom*(index)
          Set the selection anchor point to just before the character
          given by index.  Doesn't change the selection.  Returns an empty
          string.

    $entry->*selectionPresent*
          Returns 1 if there is are characters selected in the entry, 0 if
          nothing is selected.

    $entry->*selectionRange*(*start, *end)
          Sets the selection to include the characters starting with the
          one indexed by start and ending with the one just before end.
          If end refers to the same character as start or an earlier one,
          then the entry's selection is cleared.

    $entry->*selectionTo*(index)
          If index is before the anchor point, set the selection to the
          characters from index up to but not including the anchor point.
          If index is the same as the anchor point, do nothing.  If index
          is after the anchor point, set the selection to the characters
          from the anchor point up to but not including index.  The anchor
          point is determined by the most recent *selectionFrom* or
          *selectionAdjust* method in this widget.  If the selection isn't
          in this widget then a new selection is created using the most
          recent anchor point specified for the widget.  Returns an empty
          string.

$entry->validate
     This command is used to force an evaluation of the *validateCommand*
     independent of the conditions specified by the validate option.  It
     returns 0 or 1.

$entry->*xview*(args)
     This command is used to query and change the horizontal position of
     the text in the widget's window.  It can take any of the following
     forms:

    $entry->*xview*
          Returns a list containing two elements.  Each element is a real
          fraction between 0 and 1;  together they describe the horizontal
          span that is visible in the window.  For example, if the first
          element is .2 and the second element is .7, 20% of the entry's
          text is off-screen to the left, the middle 50% is visible in the
          window, and 30% of the text is off-screen to the right.  These
          are the same values passed to scrollbars via the
          *-xscrollcommand* option.

    $entry->*xview*(index)
          Adjusts the view in the window so that the character given by
          index is displayed at the left edge of the window.

    $entry->*xviewMoveto*(*fraction*)
          Adjusts the view in the window so that the character *fraction*
          of the way through the text appears at the left edge of the
          window.  *Fraction* must be a fraction between 0 and 1.

    $entry->*xviewScroll*(*number, what*)
          This method shifts the view in the window left or right
          according to number and *what*.  Number must be an integer.
          What must be either *units* or *pages* or an abbreviation of one
          of these.  If *what* is *units*, the view adjusts left or right
          by number average-width characters on the display;  if it is
          *pages* then the view adjusts by number screenfuls.  If number
          is negative then characters farther to the left become visible;
          if it is positive then characters farther to the right become
          visible.

DEFAULT BINDINGS
================

   Tk automatically creates class bindings for entries that give them the
following default behavior.  In the descriptions below, "word" refers to a
contiguous group of letters, digits, or "_" characters, or any single
character other than these.

[1]
     Clicking mouse button 1 positions the insertion cursor just before
     the character underneath the mouse cursor, sets the input focus to
     this widget, and clears any selection in the widget.  Dragging with
     mouse button 1 strokes out a selection between the insertion cursor
     and the character under the mouse.

[2]
     Double-clicking with mouse button 1 selects the word under the mouse
     and positions the insertion cursor at the beginning of the word.
     Dragging after a double click will stroke out a selection consisting
     of whole words.

[3]
     Triple-clicking with mouse button 1 selects all of the text in the
     entry and positions the insertion cursor before the first character.

[4]
     The ends of the selection can be adjusted by dragging with mouse
     button 1 while the Shift key is down;  this will adjust the end of
     the selection that was nearest to the mouse cursor when button 1 was
     pressed.  If the button is double-clicked before dragging then the
     selection will be adjusted in units of whole words.

[5]
     Clicking mouse button 1 with the Control key down will position the
     insertion cursor in the entry without affecting the selection.

[6]
     If any normal printing characters are typed in an entry, they are
     inserted at the point of the insertion cursor.

[7]
     The view in the entry can be adjusted by dragging with mouse button 2.
     If mouse button 2 is clicked without moving the mouse, the selection
     is copied into the entry at the position of the mouse cursor.

[8]
     If the mouse is dragged out of the entry on the left or right sides
     while button 1 is pressed, the entry will automatically scroll to
     make more text visible (if there is more text off-screen on the side
     where the mouse left the window).

[9]
     The Left and Right keys move the insertion cursor one character to the
     left or right;  they also clear any selection in the entry and set
     the selection anchor.  If Left or Right is typed with the Shift key
     down, then the insertion cursor moves and the selection is extended
     to include the new character.  Control-Left and Control-Right move
     the insertion cursor by words, and Control-Shift-Left and
     Control-Shift-Right move the insertion cursor by words and also
     extend the selection.  Control-b and Control-f behave the same as
     Left and Right, respectively.  Meta-b and Meta-f behave the same as
     Control-Left and Control-Right, respectively.

[10]
     The Home key, or Control-a, will move the insertion cursor to the
     beginning of the entry and clear any selection in the entry.
     Shift-Home moves the insertion cursor to the beginning of the entry
     and also extends the selection to that point.

[11]
     The End key, or Control-e, will move the insertion cursor to the end
     of the entry and clear any selection in the entry.  Shift-End moves
     the cursor to the end and extends the selection to that point.

[12]
     The Select key and Control-Space set the selection anchor to the
     position of the insertion cursor.  They don't affect the current
     selection.  Shift-Select and Control-Shift-Space adjust the selection
     to the current position of the insertion cursor, selecting from the
     anchor to the insertion cursor if there was not any selection
     previously.

[13]
     Control-/ selects all the text in the entry.

[14]
     Control-\ clears any selection in the entry.

[15]
     The F16 key (labelled Copy on many Sun workstations) or Meta-w copies
     the selection in the widget to the clipboard, if there is a selection.

[16]
     The F20 key (labelled Cut on many Sun workstations) or Control-w
     copies the selection in the widget to the clipboard and deletes the
     selection.  If there is no selection in the widget then these keys
     have no effect.

[17]
     The F18 key (labelled Paste on many Sun workstations) or Control-y
     inserts the contents of the clipboard at the position of the
     insertion cursor.

[18]
     The Delete key deletes the selection, if there is one in the entry.
     If there is no selection, it deletes the character to the right of
     the insertion cursor.

[19]
     The BackSpace key and Control-h delete the selection, if there is one
     in the entry.  If there is no selection, it deletes the character to
     the left of the insertion cursor.

[20]
     Control-d deletes the character to the right of the insertion cursor.

[21]
     Meta-d deletes the word to the right of the insertion cursor.

[22]
     Control-k deletes all the characters to the right of the insertion
     cursor.

[23]
     Control-t reverses the order of the two characters to the right of
     the insertion cursor.

     If the entry is disabled using the *-state* option, then the entry's
     view can still be adjusted and text in the entry can still be
     selected, but no insertion cursor will be displayed and no text
     modifications will take place.

     The behavior of entries can be changed by defining new bindings for
     individual widgets or by redefining the class bindings.

KEYWORDS
========

   entry, widget


File: pm.info,  Node: Tk/Error,  Next: Tk/EvenTk,  Prev: Tk/Entry,  Up: Module List

Method invoked to process background errors
*******************************************

NAME
====

   Tk::Error - Method invoked to process background errors

   Customization:

     require Tk::ErrorDialog;

   or

     sub Tk::Error
     {
       my ($widget,$error,@locations) = @_;
       ...

     }

DESCRIPTION
===========

   The *Tk::Error* method is invoked by perl/Tk when a background error
occurs. Two possible implementations are provided in the distribution and
individual applications or users can (re)define a *Tk::Error* method (e.g.
as a perl sub) if they wish to handle background errors in some other
manner.

   A background error is one that occurs in a command that didn't
originate with the application.  For example, if an error occurs while
executing a `callback|Tk::callbacks' in this node specified with a
`bind|Tk::bind' in this node or a `after|Tk::after' in this node command,
then it is a background error.  For a non-background error, the error can
simply be returned up through nested subroutines until it reaches the
top-level code in the application; then the application can report the
error in whatever way it wishes.  When a background error occurs, the
unwinding ends in the Tk library and there is no obvious way for Tk to
report the error.

   When Tk detects a background error, it saves information about the
error and invokes the *Tk::Error* method later when Tk is idle.

   *Tk::Error* is invoked by perl/Tk as if by the perl code:

       *$mainwindow*->*Tk::Error*(*"error message"*, *location ...*);

   *$mainwindow* is the *MainWindow* associated with widget which detected
the error, *"error message"* is a string describing the error that has
been detected, location is a list of one or more "locations" which
describe the call sequence at the point the error was detected.

   The locations are a typically a mixture of perl location reports giving
script name and line number, and simple strings describing locations in
core Tk or perl/Tk C code.

   Tk will ignore any result returned by the *Tk::Error* method.  If
another error occurs within the *Tk::Error* method (for example if it
calls die) then Tk reports this error itself by writing a message to
stderr (this is to avoid infinite loops due to any bugs in *Tk::Error*).

   If several background errors accumulate before *Tk::Error* is invoked
to process them, *Tk::Error* will be invoked once for each error, in the
order they occurred.  However, if *Tk::Error* calls *Tk->break*, then any
remaining errors are skipped without calling *Tk::Error*.

   The Tk module includes a default *Tk::Error* subroutine that simply
reports the error on stderr.

   An alternate definition is provided via :

       `require Tk::ErrorDialog;'

   that posts a dialog box containing the error message and offers the
user a chance to see a stack trace showing where the error occurred.

BUGS
====

   If after or *fileevent* are not invoked as methods of a widget then
perl/Tk is unable to provide a *$mainwindow* argument.  To support such
code from earlier versions of perl/Tk perl/Tk therefore calls *Tk::Error*
with string 'Tk' instead: *Tk->Tk::Error\(...\)*.  In this case the
*Tk::Error* in *Tk::ErrorDialog* and similar implementations cannot
"popup" a window as they don't know which display to use.  A mechanism to
supply the *MainWindow* in applications which only have one (a very common
case) should be provided.

SEE ALSO
========

   `Tk::bind|Tk::bind' in this node `Tk::after|Tk::after' in this node
`Tk::fileevent|Tk::fileevent' in this node

KEYWORDS
========

   background error, reporting


File: pm.info,  Node: Tk/EvenTk,  Next: Tk/Eventloop,  Prev: Tk/Error,  Up: Module List

ToolKit for Events
******************

NAME
====

   Tk::Event - ToolKit for Events

SYNOPSIS    use Tk::Event;
==========================

     Tk::Event->fileevent(\*FH, 'readable' => callback);

     Tk::Event->lineavail(\*FH, callback);

     use Tk::Event::Signal qw(INT);

     $SIG{'INT'} = callback;

     use Tk::Event::process;

     Tk::Event->proc($pid, callback);

     QueueEvent(callback [, position])

DESCRIPTION
===========

   That is better than nothing but still hard to use. Most scripts want
higher level result (a line, a "block" of data etc.)

   So it has occured to me that we could use new-ish TIEHANDLE thus:

   my $obj = tie SOMEHANDLE,Tk::Event::IO;

   while (<SOMEHANDLE>)  {  }

   Then the READLINE routine registers a callback and looks something like:

   sub READLINE  {   my $obj = shift;   Event->io(*$obj,'readable',sub {
sysread(*$obj,${*$obj},1,length(${*$obj}) });   my $pos;   while (($pos =
index(${*$obj},$/) < 0)    {     DoOneEvent();    }
Event->io(*$obj,'readable',"); # unregister   $pos += length($/);   my
$result = substr(${*$obj},0,$pos);   substr(${*$obj},0,$pos) = ";   return
$result;  }

   This is using the scalar part of the glob representing the _inner_ IO
as a buffer in which to accumulate chars.



File: pm.info,  Node: Tk/Eventloop,  Next: Tk/FcyEntry,  Prev: Tk/EvenTk,  Up: Module List

ToolKit for Events
******************

NAME
====

   Tk::Event - ToolKit for Events

     Tk::Event->fileevent(\*FH, 'readable' => callback);

     Tk::Event->lineavail(\*FH, callback);

     use Tk::Event::Signal qw(INT);

     $SIG{'INT'} = callback;

     use Tk::Event::process;

     Tk::Event->proc($pid, callback);

     QueueEvent(callback [, position])

DESCRIPTION
===========

   That is better than nothing but still hard to use. Most scripts want
higher level result (a line, a "block" of data etc.)

   So it has occured to me that we could use new-ish TIEHANDLE thus:

   my $obj = tie SOMEHANDLE,Tk::Event::IO;

   while (<SOMEHANDLE>)  {  }

   Then the READLINE routine registers a callback and looks something like:

   sub READLINE  {   my $obj = shift;   Event->io(*$obj,'readable',sub {
sysread(*$obj,${*$obj},1,length(${*$obj}) });   my $pos;   while (($pos =
index(${*$obj},$/) < 0)    {     DoOneEvent();    }
Event->io(*$obj,'readable',"); # unregister   $pos += length($/);   my
$result = substr(${*$obj},0,$pos);   substr(${*$obj},0,$pos) = ";   return
$result;  }

   This is using the scalar part of the glob representing the _inner_ IO
as a buffer in which to accumulate chars.



File: pm.info,  Node: Tk/FcyEntry,  Next: Tk/FileDialog,  Prev: Tk/Eventloop,  Up: Module List

Entry that reflects its state in the background color
*****************************************************

NAME
====

   Tk::FcyEntry - Entry that reflects its state in the background color

SYNOPSIS
========

     use Tk;
     use Tk::FcyEntry;	# replaces the standard Entry widget
     ...
     $fcye = $w->Entry( ... everything as usual ... );
     ...

DESCRIPTION
===========

   *FcyEntry* is like a normal `Entry|Tk::Entry' in this node widget
except:

   * default background color is 'white'

   * if the state of the widget is disabled the background color is set to
     be the same as the normal background and the foreground used is the
     same as the disabledForeground of a button. (xxx: still not true,
     values hardcoded)

BUGS
====

   background configuration honoured after next state change.

SEE ALSO
========

   `Tk|Tk' in this node `Tk::Entry|Tk::Entry' in this node

KEYWORDS
========

   entry, widget, editcolor

AUTHOR
======

   Achim Bohnet <`ach@mpe.mpg.de'>

   Copyright (c) 1997-1998 Achim Bohnet. All rights reserved.  This
program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.


File: pm.info,  Node: Tk/FileDialog,  Next: Tk/FileEntry,  Prev: Tk/FcyEntry,  Up: Module List

A highly configurable File Dialog widget for Perl/Tk.
*****************************************************

NAME
====

   Tk::FileDialog - A highly configurable File Dialog widget for Perl/Tk.

DESCRIPTION
===========

   The widget is composed of a number of sub-widgets, namely, a listbox
for files and (optionally) directories, an entry for filename, an
(optional) entry for pathname, an entry for a filter pattern, a 'ShowAll'
checkbox (for enabling display of .* files and directories), and three
buttons, namely OK, Rescan, and Cancel.  Note that the labels for all
subwidgets (including the text for the buttons and Checkbox) are
configurable for foreign language support.

SYNOPSIS
========

Usage Description
-----------------

   To use FileDialog, simply create your FileDialog objects during
initialization (or at least before a Show).  When you wish to display the
FileDialog, invoke the 'Show' method on the FileDialog object;  The method
will return either a file name, a path name, or undef.  undef is returned
only if the user pressed the Cancel button.

Example Code
------------

   The following code creates a FileDialog and calls it.  Note that
perl5.002gamma is required.


          #!/usr/local/bin/perl -w

          use Tk;
          use Tk::FileDialog;
          use strict;

          my($main) = MainWindow->new;
          my($Horiz) = 1;
          my($fname);

          my($LoadDialog) = $main->FileDialog(-Title =>'This is my title',
          				    -Create => 0);

          $LoadDialog->configure(-FPat => '*pl',
          		       -ShowAll => 'NO');

          $main->Entry(-textvariable => \$fname)
          	->pack(-expand => 1,
          	       -fill => 'x');

          $main->Button(-text => 'Kick me!',
          	      -command => sub {
          		  $fname = $LoadDialog->Show(-Horiz => $Horiz);
          		  if (!defined($fname)) {
          		      $fname = "Fine,Cancel, but no Chdir anymore!!!";
          		      $LoadDialog->configure(-Chdir =>'NO');
          		  }
          	      })
          	->pack(-expand => 1,
          	       -fill => 'x');

          $main->Checkbutton(-text => 'Horizontal',
          		   -variable => \$Horiz)
          	->pack(-expand => 1,
          	       -fill => 'x');

          $main->Button(-text => 'Exit',
          	      -command => sub {
          		  $main->destroy;
          	      })
          	->pack(-expand => 1,
          	       -fill => 'x');

          MainLoop;

          print "Exit Stage right!\n";

          exit;

METHODS
=======


     The following non-standard method may be used with a FileDialog object


Show
----

   Displays the file dialog box for the user to operate.  Additional
configuration items may be passed in at Show-time In other words, this
code snippet:

     $fd->Show(-Title => 'Ooooh, Preeeeeety!');

   is the same as this code snippet:

     $fd->configure(-Title => 'Ooooh, Preeeeeety!');
     $fd->Show;

CONFIGURATION
=============

   Any of the following configuration items may be set via the configure
(or Show) method, or retrieved via the cget method.

Flags
-----

   Flags may be configured with either 1,'true', or 'yes' for 1, or 0,
'false', or 'no' for 0. Any portion of 'true', 'yes', 'false', or 'no' may
be used, and case does not matter.


-Chdir
------


     Enable the user to change directories. The default is 1. If disabled,
     the directory list box will not be shown.

-Create
-------


     Enable the user to specify a file that does not exist. If not
     enabled, and the user specifies a non-existent file, a dialog box
     will be shown informing the user of the error (This Dialog Box is
     configurable via the EDlg* switches, below).

     default: 1

-ShowAll
--------


     Determines whether hidden files (.*) are displayed in the File and
     Directory Listboxes.  The default is 0. The Show All Checkbox
     reflects the setting of this switch.

-DisableShowAll
---------------


     Disables the ability of the user to change the status of the ShowAll
     flag. The default is 0 (the user is by default allowed to change the
     status).

-Grab
-----


     Enables the File Dialog to do an application Grab when displayed. The
     default is 1.

-Horiz
------


     True sets the File List box to be to the right of the Directory List
     Box. If 0, the File List box will be below the Directory List box.
     The default is 1.

-SelDir
-------


     If True, enables selection of a directory rather than a file, and
     disables the actions of the File List Box. The default is 0.

Special
-------


-FPat
-----


     Sets the default file selection pattern. The default is '*'. Only
     files matching this pattern will be displayed in the File List Box.

-Geometry
---------


     Sets the geometry of the File Dialog. Setting the size is a dangerous
     thing to do.  If not configured, or set to ", the File Dialog will be
     centered.

-SelHook
--------


     SelHook is configured with a reference to a routine that will be
     called when a file is chosen. The file is called with a sole
     parameter of the full path and file name of the file chosen. If the
     Create flag is disabled (and the user is not allowed to specify new
     files), the file will be known to exist at the time that SelHook is
     called. Note that SelHook will also be called with directories if the
     SelDir Flag is enabled, and that the FileDialog box will still be
     displayed. The FileDialog box should not be destroyed from within the
     SelHook routine, although it may generally be configured.

     SelHook routines return 0 to reject the selection and allow the user
     to reselect, and any other value to accept the selection. If a
     SelHook routine returns non-zero, the FileDialog will immediately be
     withdrawn, and the file will be returned to the caller.

     There may be only one SelHook routine active at any time. Configuring
     the SelHook routine replaces any existing SelHook routine.
     Configuring the SelHook routine with 0 removes the SelHook routine.
     The default SelHook routine is undef.

Strings
-------

   The following two switches may be used to set default variables, and to
get final values after the Show method has returned (but has not been
explicitly destroyed by the caller)


     *-File*  The file selected, or the default file. The default is ".

     *-Path*  The path of the selected file, or the initial path. The
     default is $ENV{'HOME'}.

Labels and Captions
-------------------

   For support of internationalization, the text on any of the subwidgets
may be changed.


     -Title  The Title of the dialog box. The default is 'Select File:'.

     *-DirLBCaption*  The Caption above the Directory List Box. The
     default is 'Directories'.

     *-FileLBCaption*  The Caption above the File List Box. The default is
     'Files'.

     *-FileEntryLabel*  The label to the left of the File Entry. The
     Default is 'Filename:'.

     *-PathEntryLabel*  The label to the left of the Path Entry. The
     default is 'Pathname:'.

     *-FltEntryLabel*  The label to the left of the Filter entry. The
     default is 'Filter:'.

     *-ShowAllLabel*  The text of the Show All Checkbutton. The default is
     'Show All'.

Button Text
-----------

   For support of internationalization, the text on the three buttons may
be changed.


     *-OKButtonLabel*  The text for the OK button. The default is 'OK'.

     *-RescanButtonLabel*  The text for the Rescan button. The default is
     'Rescan'.

     *-CancelButtonLabel*  The text for the Cancel button. The default is
     'Cancel'.

Error Dialog Switches
---------------------

   If the Create switch is set to 0, and the user specifies a file that
does not exist, a dialog box will be displayed informing the user of the
error. These switches allow some configuration of that dialog box.


-EDlgTitle
----------


     The title of the Error Dialog Box. The default is 'File does not
     exist!'.

-EDlgText
---------


     The message of the Error Dialog Box. The variables $path, $file, and
     $filename (the full path and filename of the selected file) are
     available. The default is *"You must specify an existing
     file.\n(\$filename not found)"*

Author
======

   *Brent B. Powers, Merrill Lynch (B2Pi)*

   powers@ml.com

   This code may be distributed under the same conditions as Perl itself.


