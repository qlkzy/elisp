This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: WWW/Search/HotFiles,  Next: WWW/Search/Infoseek,  Prev: WWW/Search/HotBot,  Up: Module List

class for searching ZDnet HotFiles
**********************************

NAME
====

   WWW::Search::HotFiles - class for searching ZDnet HotFiles

SYNOPSIS
========

   require WWW::Search; $search = new WWW::Search('HotFiles');

DESCRIPTION
===========

   Class for searching ZDnet HotFiles (shareware, freeware) via Lycos.
`http://www.hotfiles.lycos.com'.

   If you use the raw method for this backend you will need to include a
"<p>" at end of your print statement, example:      print $result->raw(),
"<p>\n";

   This is so that each result returned will have a HTML break since the
HTML is being extracted from tables, and, there is no <p> or <br> trailing
returned HITS to properly format the results. No BIG deal really.

   Print optioins: Using score will return nice star images for rating
purposes at end of each description line for each HIT if desired.

   Using index_date will return the files date.

   Raw returns description, star rating image, date, downloads, OS version.

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

USAGE EXAMPLE
=============

     One of several print samples for this backend (this is a WebSearch
     example):

     print <<END;

     <FONT SIZE=2><B>$count. <a href="$prefix$_">$result->{'title'}</A></B><BR>
     $result->{'description'}
     $result->{'index_date'} $result->{'score'}<P></SMALL></FONT>

     END

SEE ALSO
========

   To make new back-ends, see *Note WWW/Search: WWW/Search,.

AUTHOR
======

   Maintained by Jim Smyser <jsmyser@bigfoot.com>

TESTING
=======

   HotFiles.pm adheres to the WWW::Search test mechanism.  See $TEST_CASES
below.

COPYRIGHT
=========

   The original parts from John Heidemann are subject to following
copyright notice:

   Copyright (c) 1996-1998 University of Southern California.  All rights
reserved.

   Redistribution and use in source and binary forms are permitted
provided that the above copyright notice and this paragraph are duplicated
in all such forms and that any documentation, advertising materials, and
other materials related to such distribution and use acknowledge that the
software was developed by the University of Southern California,
Information Sciences Institute.  The name of the University may not be
used to endorse or promote products derived from this software without
specific prior written permission.

   THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


File: pm.info,  Node: WWW/Search/Infoseek,  Next: WWW/Search/Infoseek/Companies,  Prev: WWW/Search/HotFiles,  Up: Module List

class for searching Infoseek
****************************

NAME
====

   WWW::Search::Infoseek - class for searching Infoseek

SYNOPSIS
========

     use WWW::Search;
     my $oSearch = new WWW::Search('Infoseek');
     my $sQuery = WWW::Search::escape_query("+sushi restaurant +Columbus Ohio");
     $oSearch->native_query($sQuery);
     while (my $oResult = $oSearch->next_result())
       { print $oResult->url, "\n"; }

DESCRIPTION
===========

   This class is a Infoseek specialization of WWW::Search.  It handles
making and interpreting Infoseek searches `http://www.infoseek.com'.

   This class exports no public interface; all interaction should be done
through *Note WWW/Search: WWW/Search, objects.

SEE ALSO
========

     L<WWW::Search::Infoseek::Companies>
     L<WWW::Search::Infoseek::Web>
     L<WWW::Search::Infoseek::News>

   To make new back-ends, see *Note WWW/Search: WWW/Search,.

BUGS
====

   Please tell the author if you find any!

TESTING
=======

   This module adheres to the `WWW::Search' test suite mechanism.

   See `WWW::Search::Infoseek::Web' for test cases for the default usage.

AUTHOR
======

   `WWW::Search::Infoseek' is maintained by Martin Thurn
(MartinThurn@iname.com).

LEGALESE
========

   THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

VERSION HISTORY
===============

   If it is not listed here, then it was not a meaningful nor released
revision.

2.06, 1999-12-10
----------------

   handle infoseek.com's slight output format change

2.05, 1999-10-05
----------------

   BUGFIX: parser for ::Companies and ::News; now uses hash_to_cgi_string()

2.04, 1999-09-29
----------------

   BUGFIX: handle descriptions with embedded \n; ignore "company profile"
URLs during Web search

2.02, 1999-09-28
----------------

   BUGFIX: was going to the "previous" page instead of the "next" page!

2.01, 1999-07-13
----------------

1.18, 1999-07-09
----------------

   BUGFIX for not seeing all the URLs on a page, and fetching the first
page of results over and over(!).

1.16, 1999-06-30
----------------

   Now strips HTML tags from titles and descriptions.

1.14, 1999-06-29
----------------

   Companies and News searches now work!

1.13, 1999-06-28
----------------

   www.infoseek.com changed their output format ever so slightly.
Companies and News searches return URLs, but titles and descriptions are
unreliable.

1.12, 1999-05-21
----------------

   www.infoseek.com changed their output format.

1.11, 1999-04-27
----------------

   Fixed BUG in parsing of News search results.  Added version method.

1.08, 1999-02-09
----------------

   Fixed BUG in parsing of Companies search results.  Thanks to Jim Smyser
(jsmyser@bigfoot.com) for pointing it out.

1.7, 1998-10-05
---------------

   www.infoseek.com changed their output format.  Thanks to Andreas
Borchert (borchert@mathematik.uni-ulm.de) for patches.

1.6, 1998-09-18
---------------

   Fixed BUG where (apparently) no titles were retrieved.

1.5
---

   www.infoseek.com changed their output format ever-so-slightly.

1.3
---

   First publicly-released version.


File: pm.info,  Node: WWW/Search/Infoseek/Companies,  Next: WWW/Search/Infoseek/Email,  Prev: WWW/Search/Infoseek,  Up: Module List

class for Infoseek Companies searching
**************************************

NAME
====

   WWW::Search::Infoseek::Companies - class for Infoseek Companies
searching

SYNOPSIS
========

     use WWW::Search;
     my $oSearch = new WWW::Search('Infoseek::Companies');
     my $sQuery = WWW::Search::escape_query("+sushi restaurant +Columbus Ohio");
     $oSearch->native_query($sQuery);
     while (my $oResult = $oSearch->next_result())
       { print $oResult->url, "\n"; }

DESCRIPTION
===========

   This class implements the Infoseek Companies search (specializing
Infoseek and WWW::Search).  It handles making and interpreting Infoseek
Companies searches `http://www.infoseek.com'.

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

TESTING
=======

   This module adheres to the WWW::Search test mechanism.  See $TEST_CASES
below.

AUTHOR
======

   `WWW::Search::Infoseek::Companies' was written by Martin Thurn
<MartinThurn@iname.com> based on AltaVista::Web by John Heidemann,
<johnh@isi.edu>.

COPYRIGHT
=========

   Copyright (c) 1996 University of Southern California.  All rights
reserved.

   Redistribution and use in source and binary forms are permitted
provided that the above copyright notice and this paragraph are duplicated
in all such forms and that any documentation, advertising materials, and
other materials related to such distribution and use acknowledge that the
software was developed by the University of Southern California,
Information Sciences Institute.  The name of the University may not be
used to endorse or promote products derived from this software without
specific prior written permission.

   THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


File: pm.info,  Node: WWW/Search/Infoseek/Email,  Next: WWW/Search/Infoseek/News,  Prev: WWW/Search/Infoseek/Companies,  Up: Module List

class for searching for e-mail at Infoseek
******************************************

NAME
====

   WWW::Search::Infoseek::Email - class for searching for e-mail at
Infoseek

SYNOPSIS
========

     require WWW::Search;
     $search = new WWW::Search('Infoseek::Email');

DESCRIPTION
===========

   Back-end for Infoseek search engine .

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

OPTIONS
=======

operator Ex. operator=>'AND' Values AND or OR (defaults to OR).
     If you want to use directly the native '+' and '-' operators than use
     the OR operator.

SEE ALSO
========

   To make new back-ends, see *Note WWW/Search: WWW/Search,.

AUTHOR
======

   Cesare Feroldi de Rosa, <C.Feroldi@IT.net> 1996.  (Derived from
AltaVista.pm.)

COPYRIGHT
=========

   Copyright (c) 1996 University of Southern California.  All rights
reserved.

   Redistribution and use in source and binary forms are permitted
provided that the above copyright notice and this paragraph are duplicated
in all such forms and that any documentation, advertising materials, and
other materials related to such distribution and use acknowledge that the
software was developed by the University of Southern California,
Information Sciences Institute.  The name of the University may not be
used to endorse or promote products derived from this software without
specific prior written permission.

   THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


File: pm.info,  Node: WWW/Search/Infoseek/News,  Next: WWW/Search/Infoseek/Web,  Prev: WWW/Search/Infoseek/Email,  Up: Module List

class for Infoseek News searching
*********************************

NAME
====

   WWW::Search::Infoseek::News - class for Infoseek News searching

SYNOPSIS
========

     require WWW::Search;
     $search = new WWW::Search('Infoseek::News');
     my $sQuery = WWW::Search::escape_query("plane crash airline disaster");
     $oSearch->native_query($sQuery);
     while (my $oResult = $oSearch->next_result())
       { print $oResult->url, "\n"; }

DESCRIPTION
===========

   This class implements the Infoseek News search (specializing Infoseek
and WWW::Search).  It handles making and interpreting Infoseek News
searches `http://www.infoseek.com'.

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

TESTING
=======

   This module adheres to the `WWW::Search' test suite mechanism.  See the
value of $TEST_CASES below.

AUTHOR
======

   `WWW::Search::Infoseek::News' was written by Martin Thurn
<MartinThurn@iname.com>


File: pm.info,  Node: WWW/Search/Infoseek/Web,  Next: WWW/Search/Livelink,  Prev: WWW/Search/Infoseek/News,  Up: Module List

class for Infoseek Web searching
********************************

NAME
====

   WWW::Search::Infoseek::Web - class for Infoseek Web searching

SYNOPSIS
========

     use WWW::Search;
     my $oSearch = new WWW::Search('Infoseek::Web');
     my $sQuery = WWW::Search::escape_query("+sushi restaurant +Columbus Ohio");
     $oSearch->native_query($sQuery);
     while (my $oResult = $oSearch->next_result())
       { print $oResult->url, "\n"; }

DESCRIPTION
===========

   This class implements the Infoseek Web search (specializing Infoseek
and WWW::Search).  It handles making and interpreting Infoseek Web searches
`http://www.infoseek.com'.

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

TESTING
=======

   This module adheres to the WWW::Search test mechanism.  See $TEST_CASES
below.

AUTHOR
======

   `WWW::Search::Infoseek::Web' was written by Martin Thurn
<MartinThurn@iname.com>


File: pm.info,  Node: WWW/Search/Livelink,  Next: WWW/Search/MSIndexServer,  Prev: WWW/Search/Infoseek/Web,  Up: Module List

class for searching Open Text Livelink Intranet search engine
*************************************************************

NAME
====

   WWW::Search::Livelink  -  class for searching Open Text Livelink
Intranet search engine

SYNOPSIS
========

     require WWW::Search;
     $search = new WWW::Search('Livelink');

DESCRIPTION
===========

   This class is an Open Text Livelink Intranet specialization of
WWW::Search.  It queries and interprets searches based on Livelink
Intranet, which is available at `http://www.opentext.com'

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

OPTIONS
=======

   This search supports sytandard WWW::Search arguments

search_url
     The Livelink Intranet URL to search.  This usually looks like
     `http://somehost/otcgi/llscgi60.exe'

search_args
     The arguments used for the search engine, separate them by &.

SEE ALSO
========

   To make new back-ends, see *Note WWW/Search: WWW/Search,,

AUTHOR
======

   `WWW::Search::Livelink' is written by Paul Lindner, <lindner@itu.int>,
Nicholas Sapirie <sapirie@unicc.org>

COPYRIGHT
=========

   Copyright (c) 1998 by the United Nations Administrative Committee on
Coordination (ACC)

   All rights reserved.


File: pm.info,  Node: WWW/Search/MSIndexServer,  Next: WWW/Search/MetaCrawler,  Prev: WWW/Search/Livelink,  Up: Module List

class for searching MSIndexServer search engine
***********************************************

NAME
====

   WWW::Search::MSIndexServer - class for searching MSIndexServer search
engine

SYNOPSIS
========

     require WWW::Search;
     $search = new WWW::Search('MSIndexServer');

DESCRIPTION
===========

   This class is a MSIndexServer specialization of WWW::Search.  It
queries and interprets searches based on MSIndexServer, which is available
at `http://www.microsoft.com/'

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

OPTIONS
=======

   This search supports standard WWW::Search arguments

search_url
     The MSIndexServer URL to search.  This usually looks like
     `http://somehost/scripts/queryhit.idq'

search_args
     The arguments used for the search engine, separate them by &.

search_method
     POST or GET

search_debug
     Turn debugging on or off

search_how
     Possible values match_any, match_all, match_phrase

SEE ALSO
========

   To make new back-ends, see *Note WWW/Search: WWW/Search,,

AUTHOR
======

   `WWW::Search::MSIndexServer' is written by Paul Lindner,
<lindner@itu.int>, Nicholas Sapirie <sapirie@unicc.org>

COPYRIGHT
=========

   Copyright (c) 1998 by the United Nations Administrative Committee on
Coordination (ACC)

   All rights reserved.


File: pm.info,  Node: WWW/Search/MetaCrawler,  Next: WWW/Search/Metapedia,  Prev: WWW/Search/MSIndexServer,  Up: Module List

class for searching http://mc3.go2net.com!
******************************************

NAME
====

   WWW::Search::MetaCrawler - class for searching http://mc3.go2net.com!

SYNOPSIS
========

     require WWW::Search;
     $search = new WWW::Search('MetaCrawler');

DESCRIPTION
===========

   Class specialization of WWW::Search for searching
`http://mc3.go2net.com'.  MetaCrawler.com can return up to 1000 hits.

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

SEE ALSO
========

   To make new back-ends, see *Note WWW/Search: WWW/Search,, or the
specialized AltaVista searches described in options.

HOW DOES IT WORK?
=================

   `native_setup_search' is called before we do anything.  It initializes
our private variables (which all begin with underscores) and sets up a URL
to the first results page in `{_next_url}'.

   `native_retrieve_some' is called (from `WWW::Search::retrieve_some')
whenever more hits are needed.  It calls the LWP library to fetch the page
specified by `{_next_url}'.  It parses this page, appending any search
hits it finds to `{cache}'.  If it finds a "next" button in the text, it
sets `{_next_url}' to point to the page for the next set of results,
otherwise it sets it to undef to indicate we're done.

AUTHOR
======

   `WWW::Search::MetaCrawler' is written and maintained by Jim Smyser -
<jsmyser@bigfoot.com>.

COPYRIGHT
=========

   Copyright (c) 1996-1998 University of Southern California.  All rights
reserved.

   Redistribution and use in source and binary forms are permitted
provided that the above copyright notice and this paragraph are duplicated
in all such forms and that any documentation, advertising materials, and
other materials related to such distribution and use acknowledge that the
software was developed by the University of Southern California,
Information Sciences Institute.  The name of the University may not be
used to endorse or promote products derived from this software without
specific prior written permission.

   THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


File: pm.info,  Node: WWW/Search/Metapedia,  Next: WWW/Search/Monster,  Prev: WWW/Search/MetaCrawler,  Up: Module List

class for searching online Encyclopedias
****************************************

NAME
====

   WWW::Search::Metapedia - class for searching online Encyclopedias

SYNOPSIS
========

     require WWW::Search;
     $search = new WWW::Search('Metapedia');

DESCRIPTION
===========

   `http://www.savvysearch.com'.

   Silly class I made to sponge off a Encyclopedia meta search engine.
Searches multi online Encyclopedias.

   Covers:

   Encylopedia Britannica - paid subscription service Encarta Knowledge
Adventure Infoplease

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

SEE ALSO
========

   To make new back-ends, see *Note WWW/Search: WWW/Search,.

HOW DOES IT WORK?
=================

   `native_setup_search' is called before we do anything.  It initializes
our private variables (which all begin with underscores) and sets up a URL
to the first results page in `{_next_url}'.

   `native_retrieve_some' is called (from `WWW::Search::retrieve_some')
whenever more hits are needed.  It calls the LWP library to fetch the page
specified by `{_next_url}'.  It parses this page, appending any search
hits it finds to `{cache}'.  If it finds a "next" button in the text, it
sets `{_next_url}' to point to the page for the next set of results,
otherwise it sets it to undef to indicate we're done.

AUTHOR
======

   Jim Smyser <jsmyser@bigfoot.com>

COPYRIGHT
=========

   Copyright (c) 1996-1998 University of Southern California.  All rights
reserved.

   Redistribution and use in source and binary forms are permitted
provided that the above copyright notice and this paragraph are duplicated
in all such forms and that any documentation, advertising materials, and
other materials related to such distribution and use acknowledge that the
software was developed by the University of Southern California,
Information Sciences Institute.  The name of the University may not be
used to endorse or promote products derived from this software without
specific prior written permission.

   THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


File: pm.info,  Node: WWW/Search/Monster,  Next: WWW/Search/NetFind,  Prev: WWW/Search/Metapedia,  Up: Module List

class for searching Monster
***************************

NAME
====

   WWW::Search::Monster - class for searching Monster

SYNOPSIS
========

     use WWW::Search;
     my $oSearch = new WWW::Search('Monster');
     my $sQuery = WWW::Search::escape_query("unix and (c++ or java)");
     $oSearch->native_query($sQuery,
     			{'st' => 'CA',
     			 'tm' => '14d'});
     while (my $res = $oSearch->next_result()) {
         print $res->company . "\t" . $res->title . "\t" . $res->change_date
     	 . "\t" . $res->location . "\t" . $res->url . "\n";
     }

DESCRIPTION
===========

   This class is a Monster specialization of WWW::Search.  It handles
making and interpreting Monster searches at `http://www.monster.com'.
Monster supports Boolean logic with "and"s "or"s. See
`http://jobsearch.monster.com/jobsearch_tips.asp' for a full description
of the query language.

   The returned WWW::SearchResult objects contain url, title, *company*,
location and change_date fields.

OPTIONS
=======

   The following search options can be activated by sending a hash as the
second argument to native_query().

Restrict by Date
----------------

   The default is to return jobs posted in last 30 days.  An example below
changes the default to 14 days:

{'tm' => '14d'}
Restrict by Location
--------------------

   No restriction by default.

{'st' => $state}
     Only jobs in state $state. To select multiple states separate them
     with a "+", e.g. {'st' => 'NY+NJ+CT'}

{'lid' => $location_id}
     Only jobs in $location_id. To find out what $location_id you need
     please look at the source of `http://jobsearch.monster.com'. Note
     that $location_id does not mean the area telephone code.

Restrict by Job Category
------------------------

   Use {'fn' => $cat_id}  to select one or more job categories you want.
For multiple selection use a '+' sign, e.g. {'fn' => '1+2'}.  Possible
categories are:

   * 1	Accounting/Finance

   * 2	Administrative/Clerical

   * 12	Creative Arts/Media

   * 3	Education/Training

   * 4	Engineering/Architect/Design

   * 5	Human Resources

   * 6	Information Technology

   * 45	Insurance

   * 7	Legal/Law Enforcement/Security

   * 47	Manufacturing/Production

   * 8	Marketing/Advertising

   * 9	Medical/Healthcare

   * 11	Other

   * 44	Retail

   * 10	Sales/Sales Management

   * 46	Science/Bio-Pharmaceutical

   * 13	Travel/Hospitality/Restaurant

AUTHOR
======

   `WWW::Search::HeadHunter' is written and maintained by Alexander
Tkatchev (Alexander.Tkatchev@cern.ch).

LEGALESE
========

   THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


File: pm.info,  Node: WWW/Search/NetFind,  Next: WWW/Search/Nomade,  Prev: WWW/Search/Monster,  Up: Module List

class for searching NetFind  Originally based on Google.pm. NetFind is the same as AOL search.
**********************************************************************************************

NAME
====

   WWW::Search::NetFind - class for searching NetFind Originally based on
Google.pm. NetFind is the same as AOL search.

SYNOPSIS
========

   use WWW::Search; my $Search = new WWW::Search('NetFind'); # cAsE matters
my $Query = WWW::Search::escape_query("search engine consultant");
$Search->native_query($Query); while (my $Result = $Search->next_result())
{ print $Result->url, "\n"; }

DESCRIPTION
===========

   This class is a NetFind (AOL) specialization of WWW::Search.  It
handles making and interpreting NetFind searches.  `http://search.aol.com'.

   NetFinds returns 100 Hits per page.

   This class exports no public interface; all interaction should be done
through *Note WWW/Search: WWW/Search, objects.

AOL SEARCH
==========

   Please note that searching at search.aol.com produces results from both
the Open Source Directory and the licensed Inktomi search engine. Results
from Open Source Directory are presented first followed by results from
Inktomi.

   If there are no results from the Open Source Directory, then results
are presented from Inktomi alone. Those results that start with "MATCHING
SITES" are from the Open Source Directory and those that start with
"MATCHING WEB PAGES" are from the Inktomi engine.

   If you are interested in results only from Inktomi, then force the
search to use the web.adp query like so:

     $search->native_query(WWW::Search::escape_query($query),{search_url=>'http://netfind.aol.com/web.adp'});

   If you are interested in results only from the Open Source Directory,
refer to the OpenDirectory.pm module.

SEE ALSO
========

   To make new back-ends, see *Note WWW/Search: WWW/Search,.

HOW DOES IT WORK?
=================

   `native_setup_search' is called (from `WWW::Search::setup_search')
before we do anything.  It initializes our private variables (which all
begin with underscore) and sets up a URL to the first results page in
`{_next_url}'.

   `native_retrieve_some' is called (from `WWW::Search::retrieve_some')
whenever more hits are needed.  It calls `WWW::Search::http_request' to
fetch the page specified by `{_next_url}'.  It then parses this page,
appending any search hits it finds to `{cache}'.  If it finds a "next"
button in the text, it sets `{_next_url}' to point to the page for the next
set of results, otherwise it sets it to undef to indicate we"re done.

TESTING
=======

   This module adheres to the `WWW::Search' test suite mechanism.

AUTHOR
======

   This backend is maintained and supported by Gil Vidals.
<gil@positiongeek.com>

LEGALESE
========

   THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

BUGS
====

   Since this is a new Backend there are undoubtly one. Report any ASAP.

VERSION HISTORY 1.8 Changed the root search from netfind.aol.com to search.aol.com because netfind.aol.com seemed very unresponsive and the searches timed out frequently. Also changed to the new format using $self->hash_to_cgi_string($self->{_options});
=============================================================================================================================================================================================================================================================

   1.5 Formatting change 10/08/99

   0.7 First release  09/19/99


File: pm.info,  Node: WWW/Search/Nomade,  Next: WWW/Search/Null,  Prev: WWW/Search/NetFind,  Up: Module List

class for searching Nomade
**************************

NAME
====

   WWW::Search::Nomade - class for searching Nomade

SYNOPSIS
========

     require WWW::Search;
     $search = new WWW::Search('Nomade');

DESCRIPTION
===========

   This class is an Nomade specialization of WWW::Search.  It handles
making and interpreting Nomade searches `http://www.Nomade.fr', a french
search engine.

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

USAGE EXAMPLE
=============

     use WWW::Search;

     my $oSearch = new WWW::Search('Nomade');
     $oSearch->maximum_to_retrieve(100);

     #$oSearch ->{_debug}=1;

     my $sQuery = WWW::Search::escape_query("cgi");
     $oSearch->gui_query($sQuery);

     while (my $oResult = $oSearch->next_result())
     {
           print $oResult->url,"\t",$oResult->title,"\n";
     }

AUTHOR
======

   `WWW::Search::Nomade' is written by Alain BARBET,
alian@alianwebserver.com


File: pm.info,  Node: WWW/Search/Null,  Next: WWW/Search/PLweb,  Prev: WWW/Search/Nomade,  Up: Module List

class for searching any web site
********************************

NAME
====

   WWW::Search::NULL - class for searching any web site

SYNOPSIS
========

     require WWW::Search;
     $search = new WWW::Search('Null');

DESCRIPTION
===========

   This class is a specialization of WWW::Search that only returns an
error message.

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

   This modules is really a hack for systems that want to include indices
that have no corresponding WWW::Search module (like UNIONS)

AUTHOR
======

   `WWW::Search::Null' is written by Paul Lindner, <lindner@itu.int>

COPYRIGHT
=========

   Copyright (c) 1998 by the United Nations Administrative Committee on
Coordination (ACC)

   All rights reserved.


File: pm.info,  Node: WWW/Search/PLweb,  Next: WWW/Search/SFgate,  Prev: WWW/Search/Null,  Up: Module List

class for searching PLS PLweb search engine
*******************************************

NAME
====

   WWW::Search::PLweb - class for searching PLS PLweb search engine

SYNOPSIS
========

     require WWW::Search;
     $search = new WWW::Search('PLweb');

DESCRIPTION
===========

   This class is a PLweb specialization of WWW::Search.  It queries and
interprets searches based on PLweb, by PLS `http://www.pls.com/'.

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

   This software assumes that you're using the default output format for a
PLweb search.  It should look like this:

     VAL DOCUMENT DB SIZE
     ------------------------------------------------------------------
     388 Document1 foo 1122 ...

OPTIONS
=======

   This search supports standard WWW::Search arguments

search_url
     The PLweb URL to search.  On unix this usually looks like
     http://somehost/cgi-bin/iopcode.pl

search_args
     The arguments used for the search engine, separate them by &.

SEE ALSO
========

   To make new back-ends, see *Note WWW/Search: WWW/Search,,

AUTHOR
======

   `WWW::Search::PLweb' is written by Paul Lindner, <lindner@itu.int>

BUGS
====

   Things not supported: $result->raw()

COPYRIGHT
=========

   Copyright (c) 1997, 98 by the United Nations Administrative Committee
on Coordination (ACC)

   All rights reserved.


File: pm.info,  Node: WWW/Search/SFgate,  Next: WWW/Search/Search97,  Prev: WWW/Search/PLweb,  Up: Module List

class for searching SFgate/Wais search engine
*********************************************

NAME
====

   WWW::Search::SFgate - class for searching SFgate/Wais search engine

SYNOPSIS
========

     require WWW::Search;
     $search = new WWW::Search('SFgate');

DESCRIPTION
===========

   This class is a SFgate specialization of WWW::Search.  It queries and
interprets searches based on SFgate, which is available at
`http://ls6-www.informatik.uni-dortmund.de/SFgate/welcome.html'

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

   This object rewrites URLs to use the preformatted, verbose output
format of SFgate.  This allows it to get the 'score' and 'size'
information easily.  The url portions it rewrites are 'verbose=1' and
'listenv=pre'.

OPTIONS
=======

   This search supports standard WWW::Search arguments

search_url
     The SFgate URL to search.  This usually looks like
     `http://somehost/cgi-bin/SFgate'

search_args
     The arguments used for the search engine, separate them by &.

SEE ALSO
========

   To make new back-ends, see *Note WWW/Search: WWW/Search,,

AUTHOR
======

   `WWW::Search::SFgate' is written by Paul Lindner, <lindner@itu.int>

BUGS
====

   Things not supported: $result->raw()

COPYRIGHT
=========

   Copyright (c) 1997,98 by the United Nations Administrative Committee on
Coordination (ACC)

   All rights reserved.


File: pm.info,  Node: WWW/Search/Search97,  Next: WWW/Search/Simple,  Prev: WWW/Search/SFgate,  Up: Module List

class for searching Verity Search97 search engine
*************************************************

NAME
====

   WWW::Search::Search97  -  class for searching Verity Search97 search
engine

SYNOPSIS
========

     require WWW::Search;
     $search = new WWW::Search('Search97');

DESCRIPTION
===========

   This class is a Verity Search97 specialization of WWW::Search.  It
queries and interprets searches based on Verity Search97, which is
available at `http://www.verity.com'

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

OPTIONS
=======

   This search supports sytandard WWW::Search arguments

search_url
     The Search97 URL to search.  This usually looks like
     `http://somehost/Search97cgi/s97_cgi.exe'

search_args
     The arguments used for the search engine, separate them by &.

SEE ALSO
========

   To make new back-ends, see *Note WWW/Search: WWW/Search,,

AUTHOR
======

   `WWW::Search::Search97' is written by Paul Lindner, <lindner@itu.int>,
Nicholas Sapirie <sapirie@unicc.org>

COPYRIGHT
=========

   Copyright (c) 1998 by the United Nations Administrative Committee on
Coordination (ACC)

   All rights reserved.


File: pm.info,  Node: WWW/Search/Simple,  Next: WWW/Search/Test,  Prev: WWW/Search/Search97,  Up: Module List

class for searching any web site
********************************

NAME
====

   WWW::Search::Simple - class for searching any web site

SYNOPSIS
========

     require WWW::Search;
     $search = new WWW::Search('Simple');

DESCRIPTION
===========

   This class is a specialization of WWW::Search for simple web based
search indices.  It extracts all links from a given page.

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

   Note that this module will probably get a lot of false hits.

AUTHOR
======

   `WWW::Search::Simple' is written by Paul Lindner, <lindner@itu.int>

COPYRIGHT
=========

   Copyright (c) 1997,98 by the United Nations Administrative Committee on
Coordination (ACC)

   All rights reserved.


File: pm.info,  Node: WWW/Search/Test,  Next: WWW/Search/Translator,  Prev: WWW/Search/Simple,  Up: Module List

utilities to aid in testing WWW::Search backends
************************************************

NAME
====

   Test - utilities to aid in testing WWW::Search backends

SYNOPSIS
========

     $oTest = new WWW::Search::Test('HotBot,Yahoo,Excite');
     $oTest->test('HotBot', 'Kingpin', 'one', $sQuery, $TEST_RANGE, 1, 10);

DESCRIPTION
===========

   See file test.pl in the WWW-Search-HotBot distribution for a detailed
"real-world" example.

METHODS AND FUNCTIONS
=====================

new
---

   Create a new WWW::Search::Test object.  All arguments are strings,
names of backends that this object will be able to test.  If no arguments
are given, will be able to test all backends.

mode
----

   Set / get the test mode of this object.  If an argument is given, sets
the mode to that value.  Returns the current (or newly set) value.

   There are three test modes available.  They are:

     $MODE_INTERNAL: parse URLs out of saved pages (as a sanity check or regression test);
     $MODE_EXTERNAL: send the query to the search engine "live", parse the results, and compare them to the previously saved results;
     and
     $MODE_UPDATE: send the query to the search engine "live", parse the results, and save them for future testing.

relevant_test
-------------

   Given the name of a backend, returns true if this Test object is able
to test that backend.

eval_test
---------

   Given the name of a backend, grabs the $TEST_CASES variable from that
backend and evaluates it.

test
----

   Run test(s) for a backend.  Arguments are, in order: name of a backend
to test (string, required); name of backend maintainer (string, if undef
$backend::MAINTAINER will be used); filename for results
storage/comparison (string, required); query to be sent to backend
(string, required); test method (required, one of the following).

   Several test methods are possible:

     $TEST_EXACTLY: list of URLs must match exactly (line for line, in order);
     $TEST_BY_COUNTING: test passes if number of resulting URLs is equal;
     $TEST_GREATER_THAN: test passes if we get more than N result URLs;
     and
     $TEST_RANGE: like $TEST_GREATER_THAN but constrained on both ends.

no_test
-------

   Prints a message stating that this backend does not have a test suite.
Takes two arguments, the backend name and the name of the maintainer.

not_working
-----------

   Prints a message stating that this backend is known to be broken.
Takes two arguments, the backend name and the name of the maintainer.

not_working_with_tests
----------------------

   Prints a message stating that this backend is known to be broken even
though it has a test suite.  Takes two arguments, the backend name and the
name of the maintainer.

not_working_and_abandoned
-------------------------

   Prints a message stating that this backend is known to be broken and is
not being actively maintained.  Takes two arguments, the backend name and
the name of the maintainer.

wc_l (private, not a method)
----------------------------

   Given a filename, count the number of lines of text contained within
the file.  (I.e. simulate running UNIX command `wc -l' on a file)

diff (private, not a method)
----------------------------

   Given two files, returns TRUE if contents are line-by-line different,
or FALSE if contents are line-by-line same.  (I.e. like the UNIX command
diff, but just reports true or false)


File: pm.info,  Node: WWW/Search/Translator,  Next: WWW/Search/Verity,  Prev: WWW/Search/Test,  Up: Module List

class for Translating languages
*******************************

NAME
====

   WWW::Search::Translator - class for Translating languages

SYNOPSIS
========

     use WWW::Search;
     %opts = (
     lp => param(en_de),
     );
      $query = "a whole bunch of english text to be translated to german";
      my $search = new WWW::Search('Translator');
      $search->native_query(WWW::Search::escape_query($query),\%opts);
     while (my $result = $search->next_result())
       {
       $p = $result->raw;
       print "$p";
       }

DESCRIPTION
===========

   This is a simple no thrills class enabling users to translate text
through AV Translations `http://babel.altavista.com'.  This translating
via this method seems much faster than thru browser interface. Makes a
neat addition to any web page.  Translated text is returned thru
$result->raw, there is no url's or title $results like typical WWW::Search
results, just a stream of text that was translated from the query text
entered.

   SEE TRANSLATION OPTIONS and TIPS.

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

TRANSLATION OPTIONS
===================

   Pass either of the below listed value options along with the query.
There is only one $result returnd by this backend: raw.  Thus, translated
text will be returnd via $result->raw

   <option value="en_fr" >English to French</option> <option value="en_de"
>English to German</option> <option value="en_it" >English to
Italian</option> <option value="en_pt" >English to Portuguese</option>
<option value="en_es" >English to Spanish</option> <option value="fr_en"
>French to English</option> <option value="de_en" >German to
English</option> <option value="it_en" >Italian to English</option>
<option value="pt_en" >Portuguese to English</option> <option
value="es_en" >Spanish to English</option> <option value="de_fr" >German
to French</option> <option value="fr_de" >French to German</option>
<option value="ru_en" >Russian to English</option>

TIPS
====

   I would use textarea for both user input and printing $result->url
into. This way users can scroll the returned text and have large area to
type/paste text for input.

CHANGES
=======

   VERSION 1.02

   Got time to go back and look at what was needed to parse multi lines of
the text area. Everything looks OK now and this backend will parse single
and multi lines of translated text.

AUTHOR
======

   `WWW::Search::Translator' is written and maintained by Jim Smyser -
<jsmyser@bigfoot.com>.

COPYRIGHT
=========

   WWW::Search Copyright (c) 1996-1998 University of Southern California.
All rights reserved.

   THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


File: pm.info,  Node: WWW/Search/Verity,  Next: WWW/Search/VoilaFr,  Prev: WWW/Search/Translator,  Up: Module List

class for searching Verity
**************************

NAME
====

   WWW::Search::Verity - class for searching Verity

SYNOPSIS
========

     require WWW::Search;
     $search = new WWW::Search('Verity');

DESCRIPTION
===========

   Not documented.


File: pm.info,  Node: WWW/Search/VoilaFr,  Next: WWW/Search/WebCrawler,  Prev: WWW/Search/Verity,  Up: Module List

class for searching voila.fr
****************************

NAME
====

   WWW::Search::VoilaFr - class for searching voila.fr

SYNOPSIS
========

     require WWW::Search;
     $search = new WWW::Search('VoilaFr');

DESCRIPTION
===========

   This class is a specialization of WWW::Search for voila.fr.  A french
search engine.  All searchs are based on and ONLY on gui_query function.

   This class exports no public interface; all interaction should be done
through WWW::Search objects.

USAGE EXAMPLE
=============

     use WWW::Search;

     my $oSearch = new WWW::Search('VoilaFr');
     $oSearch->maximum_to_retrieve(100);

     #$oSearch ->{_debug}=1;

     my $sQuery = WWW::Search::escape_query("bretagne");
     $oSearch->gui_query($sQuery);

     while (my $oResult = $oSearch->next_result())
     {
           print $oResult->url,"\t",$oResult->title,"\n";
     }

AUTHOR
======

   `WWW::Search::VoilaFr' is written by Mikou, mikou@spip.viewline.net


File: pm.info,  Node: WWW/Search/WebCrawler,  Next: WWW/Search/Yahoo/Classifieds/Employment,  Prev: WWW/Search/VoilaFr,  Up: Module List

class for searching WebCrawler
******************************

NAME
====

   WWW::Search::WebCrawler - class for searching WebCrawler

SYNOPSIS
========

     use WWW::Search;
     my $oSearch = new WWW::Search('WebCrawler');
     my $sQuery = WWW::Search::escape_query("+sushi restaurant +Columbus Ohio");
     $oSearch->native_query($sQuery);
     while (my $oResult = $oSearch->next_result())
       print $oResult->url, "\n";

DESCRIPTION
===========

   This class is a WebCrawler specialization of WWW::Search.  It handles
making and interpreting WebCrawler searches `http://www.WebCrawler.com'.

   This class exports no public interface; all interaction should be done
through *Note WWW/Search: WWW/Search, objects.

SEE ALSO
========

   To make new back-ends, see *Note WWW/Search: WWW/Search,.

HOW DOES IT WORK?
=================

   `native_setup_search' is called (from `WWW::Search::setup_search')
before we do anything.  It initializes our private variables (which all
begin with underscore) and sets up a URL to the first results page in
`{_next_url}'.

   `native_retrieve_some' is called (from `WWW::Search::retrieve_some')
whenever more hits are needed.  It calls `WWW::Search::http_request' to
fetch the page specified by `{_next_url}'.  It then parses this page,
appending any search hits it finds to `{cache}'.  If it finds a "next"
button in the text, it sets `{_next_url}' to point to the page for the next
set of results, otherwise it sets it to undef to indicate we"re done.

BUGS
====

   Please tell the author if you find any!

TESTING
=======

   This module adheres to the `WWW::Search' test suite mechanism.  See
$TEST_CASES below.

AUTHOR
======

   As of 1998-03-16, `WWW::Search::WebCrawler' is maintained by Martin
Thurn (MartinThurn@iname.com).

   `WWW::Search::WebCrawler' was originally written by Martin Thurn based
on `WWW::Search::HotBot'.

LEGALESE
========

   THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

VERSION HISTORY
===============

   If it's not listed here, then it wasn't a meaningful or released
version.

2.02, 1999-10-05
----------------

   now uses hash_to_cgi_string()

2.01, 1999-07-13
----------------

1.13, 1999-03-29
----------------

   Remove extraneous HTML from description (thanks to Jim Smyser
jsmyser@bigfoot.com)

1.11, 1998-10-09
----------------

   Now uses split_lines function

1.9
---

   1998-08-20: New format of www.webcrawler.com output.

1.7
---

   \n changed to \012 for MacPerl compatibility

1.5
---

   1998-05-29: New format of www.webcrawler.com output.

1.3
---

   First publicly-released version.


File: pm.info,  Node: WWW/Search/Yahoo/Classifieds/Employment,  Next: WWW/Search/YahooNews,  Prev: WWW/Search/WebCrawler,  Up: Module List

class for searching employment classifieds on Yahoo!
****************************************************

NAME
====

   WWW::Search::Yahoo::Classifieds::Employment - class for searching
employment classifieds on Yahoo!

SYNOPSIS
========

     use WWW::Search;
     my $oSearch = new WWW::Search('Yahoo::Classifieds::Employment');
     my $sQuery = WWW::Search::escape_query("unix c++ java");
     $oSearch->native_query($sQuery,
     			{'g' => 14,
     			 'cr' => 'California'});
     while (my $res = $oSearch->next_result()) {
         my $true_url = $oSearch->getMoreInfo($res->url);
         print $res->company . "\t" . $res->title . "\t" . $res->change_date
     	 . "\t" . $res->location . "\t" . $true_url . "\n";
     }

DESCRIPTION
===========

   This class is a YC specialization of WWW::Search.  It handles making
and interpreting YC searches at `http://careers.yahoo.com'

   The returned WWW::SearchResult objects contain url, title, *company*,
location and change_date fields.

   The returned url is the one found in the Yahoo! own database. However,
it quite often appears in other databases where this url was originally
taken from.  To retrieve this "true" url use the function *getMoreInfo* as
written in the above example.

OPTIONS
=======

   The following search options can be activated by sending a hash as the
second argument to native_query().

Format / Treatment of Query Terms
---------------------------------

   The default is to match ALL keywords in your query.  To match ANY
keywords use

{'za' => 'or'}
Restrict by Date
----------------

   The default is to return all ads in the Yahoo ! job database.  To
change it use

{'g' => $number} - displays jobs posted in last $number days
Restrict by Company Name
------------------------

{'cpo' => $pattern}
     Display jobs where company name matches $pattern.

Restrict by Job Title
---------------------

{'cpj' => $pattern}
     Display jobs where job title matches $pattern.

Restrict by Job Category
------------------------

   No preference by default. To select jobs from a specific job category
use the following option:

{'ce_f' => $job_category}
   Category can be one of the following:

   * "Administrative"

   * "Consulting"

   * "Creative"

   * "Education"

   * "Engineer"

   * "Finance"

   * "General Management"

   * "Health Care"

   * "Human Resources"

   * "Internships"

   * "Information Systems"

   * "Legal"

   * "Marketing"

   * "Operations"

   * "Sales"

   * "Scientific"

   * "Service"

   * "Training"

   * "Work at Home"

   * "Other / Not Specified"

Restrict by Industry
--------------------

   No restriction by default. The following option is used to select jobs
from a specific industry:

{'ce_i' => $desired_industry}
   Possible industries include:

   * "Advertising and Public Relations"

   * "Aerospace and Defense"

   * "Agriculture"

   * "Computer Hardware"

   * "Computer Software"

   * "Construction"

   * "Consumer Electronics"

   * "Consumer Products (Apperal, Household Products)"

   * "Education"

   * "Energy and Utilities"

   * "Entertainment and Sports (Media and Sports)"

   * "Financial Services (Brokerage, Real Estate, Banking)"

   * "Health Care (Pharmaceuticals, Biotech, Devices)"

   * "Heavy Manufacturing (Steel, Autos, Industrial) "

   * "Hospitality (Hotels, Casinos, Food Service, Travel) "

   * "Internet and New Media "

   * "Journalism and Publishing "

   * "Law"

   * "Light Manufacturing (Furniture, Office)"

   * "Non-Profit and Government "

   * "Professional Services (Consulting, Accounting) "

   * "Raw Materials "

   * "Retail and Wholesale (Food/Drug Stores, Retailers) "

   * "Telecommunications "

   * "Transportation (Airlines, Delivery, Trucking) "

   * "Other / Not Specified"

Restrict by Location
--------------------

   No preference by default. The following option restrict your search to
a desired location:

{'cr' => $desired_location}
   Location can be one of the following:

   * "Alabama"                   Alabama

   * "Alaska"                    Alaska

   * "Arizona"                   Arizona

   * "Phoenix"                   AZ - Phoenix

   * "Arkansas"                  Arkansas

   * "California"                California

   * "Los Angeles"               CA - Los Angeles

   * "Sacramento"                CA - Sacramento

   * "San Diego"                 CA - San Diego

   * "San Francisco Bay Area"    CA - San Francisco

   * "Colorado"                  Colorado

   * "Denver"                    CO - Denver

   * "Connecticut"               Connecticut

   * "Hartford"                  CT - Hartford

   * "Delaware"                  Delaware

   * "Florida"                   Florida

   * "Miami"                     FL - Miami

   * "Orlando"                   FL - Orlando

   * "Tampa Bay"                 FL - Tampa Bay

   * "West Palm Beach"           FL - West Palm Beach

   * "Georgia"                   Georgia

   * "Atlanta"                   GA - Atlanta

   * "Hawaii"                    Hawaii

   * "Idaho"                     Idaho

   * "Illinois"                  Illinois

   * "Chicago"                   IL - Chicago

   * "Indiana"                   Indiana

   * "Indianapolis"              IN - Indianapolis

   * "Iowa"                      Iowa

   * "Kansas"                    Kansas

   * "Kentucky"                  Kentucky

   * "Louisville"                KY - Louisville

   * "Louisiana"                 Louisiana

   * "New Orleans"               LA - New Orleans

   * "Maine"                     Maine

   * "Maryland"                  Maryland

   * "Baltimore"                 MD - Baltimore

   * "Massachusetts"             Massachusetts

   * "Boston"                    MA - Boston

   * "Michigan"                  Michigan

   * "Detroit"                   MI - Detroit

   * "Grand Rapids"              MI - Grand Rapids

   * "Minnesota"                 Minnesota

   * "Twin Cities"               MN - Minneapolis

   * "Mississippi"               Mississippi

   * "Missouri"                  Missouri

   * "Kansas City"               MO - Kansas City

   * "Saint Louis"               MO - St. Louis

   * "Montana"                   Montana

   * "Nebraska"                  Nebraska

   * "Nevada"                    Nevada

   * "Las Vegas"                 NV - Las Vegas

   * "New Hampshire"             New Hampshire

   * "New Jersey"                New Jersey

   * "New Mexico"                New Mexico

   * "Albuquerque"               NM - Albuquerque

   * "New York"                  New York

   * "New York City"             NY - New York City

   * "Buffalo"                   NY - Buffalo

   * "North Carolina"            North Carolina

   * "Charlotte"                 NC - Charlotte

   * "Greensboro"                NC - Greensboro

   * "Raleigh/Durham"            NC - Raleigh/Durham

   * "North Dakota"              North Dakota

   * "Ohio"                      Ohio

   * "Cincinnati"                OH - Cincinnati

   * "Cleveland"                 OH - Cleveland

   * "Columbus"                  OH - Columbus

   * "Oklahoma"                  Oklahoma

   * "Oklahoma City"             OK - Oklahoma City

   * "Oregon"                    Oregon

   * "Portland"                  OR - Portland

   * "Pennsylvania"              Pennsylvania

   * "Harrisburg"                PA - Harrisburg

   * "Philadelphia"              PA - Philadelphia

   * "Pittsburgh"                PA - Pittsburgh

   * "Wilkes Barre"              PA - Wilkes Barre

   * "Rhode Island"              Rhode Island

   * "Providence"                RI - Providence

   * "South Carolina"            South Carolina

   * "Greenville"                SC - Greenville

   * "South Dakota"              South Dakota

   * "Tennessee"                 Tennessee

   * "Memphis"                   TN - Memphis

   * "Nashville"                 TN - Nashville

   * "Texas"                     Texas

   * "Austin"                    TX - Austin

   * "Dallas/Fort Worth"         TX - Dallas/Fort Worth

   * "Houston"                   TX - Houston

   * "San Antonio"               TX - San Antonio

   * "Utah"                      Utah

   * "Salt Lake City"            UT - Salt Lake City

   * "Vermont"                   Vermont

   * "Virginia"                  Virginia

   * "Norfolk"                   VA - Norfolk

   * "Washington"                Washington

   * "Seattle"                   WA - Seattle

   * "Washington DC"             Washington D.C.

   * "West Virginia"             West Virginia

   * "Wisconsin"                 Wisconsin

   * "Milwaukee"                 WI - Milwaukee

   * "Wyoming"                   Wyoming

AUTHOR
======

   `WWW::Search::YC' is originally written by Alexander Tkatchev
(Alexander.Tkatchev@cern.ch).

VERSION HISTORY
===============

   1.02 - patches from Rick Myers (rik@sumthin.nu) that fixes important
changes in Yahoo! Classifieds search engine. Plus some fixes of my own...

   1.01 - original release

LEGALESE
========

   THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


