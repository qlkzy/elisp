This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Tk/MListbox,  Next: Tk/MainWindow,  Prev: Tk/LockDisplay,  Up: Module List

Multicolumn Listbox.
********************

NAME
====

   Tk::MListbox - Multicolumn Listbox.

SYNOPSIS
========

     use Tk::MListbox;
     $ml = $parent->MListbox (<options>);

DESCRIPTION
===========

   Tk::MListbox is a multicolumn Listbox widget with builtin capabilites
for sorting, resizing and repositioning of the columns.

   Sorting is done by clicking on one of the column headings in the
widget. The first click will sort the data with the selected column as
key, a new click will reverse the sort order.

   The columns may be resized by dragging a separator line which is drawn
between each column.

   A column's position in the widget might be changed by dragging it's
heading left or right.

   Tk::MListbox is used in a way similar to the standard Listbox, but in
stead of scalar values MListbox operates on lists of data. In addition to
methods for accessing the data in the MListbox, the widget offer methods
for manipulation of the individual columns.

AUTHOR
======

   Hans Jorgen Helgesen, hans_helgesen@hotmail.com (from March 2000:
hans.helgesen@novit.no)

SEE ALSO
========

   *Note Tk/Listbox: Tk/Listbox,

STANDARD OPTIONS
================

   *-background* *-foreground* *-relief* *-takefocus*
*-borderwidth*	*-heigh* *-selectbackground*	*-cursor*
*-highlightbackground* *-selectborderwidth* *-xscrollcommand*
*-exportselection* *-highlightcolor* *-selectforeground* *-yscrollcommand*
*-font* *-highlightthickness* *-setgrid*

   See *Note Tk/options: Tk/options, for details of the standard options.

REQUIREMENTS
============

   Tk::MListbox requires Tk::Pane.  (and basic Perl/Tk of course....)

WIDGET SPECIFIC OPTIONS
=======================

-columns => list
     Defines the columns in the widget. Each element in the list describes
     a column. See the COLUMNS section below.

-configurecommand => callback
     The -configurecommand callback will be called whenever the layout of
     the widget has changed due to user interaction. That is, the user
     changes the width of a column by dragging the separator, or moves a
     column by dragging the column header.

     This option is useful if the application wants to store the widget
     layout for later retrieval. The widget layout can be obtained by the
     callback by calling the method columnPackInfo().

-moveable => boolean
     A value of 1 indicates that it is okay for the user to move the
     columns by dragging the column headers. 0 disables this function.

     Default: 1

-resizeable => boolean
     A value of 1 indicates that it is okay for the user to resize the
     columns by dragging the column separators. 0 disables this function.

     Default: 1

     Note that you can also specify -resizeable on a column by column
     basis. See the COLUMNS section below.

-selectmode => string
     Should be "single", "browse", "multiple", or "extended".

     Default is "browse". See *Note Tk/Listbox: Tk/Listbox,.

-separatorcolor => string
     Specifies the color of the separator lines (the vertical lines that
     separates the columns).

     Default: *black*

     Note that you can also specify -separatorcolor on a column by column
     basis. See the COLUMNS section below.

-separatorwidth => integer
     Specifies the width in pixels of the separator lines (the vertical
     lines that separates the columns).

     Default: 1

     Note that you can also specify -separatorwidth on a column by column
     basis. See the COLUMNS section below.

-sortable => boolean
     A value of 1 indicates that it is okay for the user to sort the data
     by clicking column headings. 0 disables this function.

     Default: 1

     Note that you can also specify -sortable on a column by column basis.
     See COLUMNS below.

COLUMNS
=======

   The MListbox widget is a collection of *MLColumn* widgets.  Each
MLColumn contains a Listbox, a heading and the separator bar.  The columns
are created and maintained through the -columns option or the column
methods of the widget. The columns are indexed from 0 and up. Initially,
column 0 is the leftmost column of the widget. The column indices *are not
changed* when the columns are moved or hidden. The only ways to change the
column indices are to call columnInsert(), columnDelete() or
configure(-column).

   Each column has its own set of options which might be passed to
MListbox::configure(-columns), MListbox::insert(),
MListbox::columnConfigure() or MLColumn::configure().

   The following code snippets are all equal:

   1.  $ml=$mw->MListbox(-columns=>[[-text=>'Heading1',
              -sortable=>0],
[-text=>'Heading2']]);

   2.  $ml=$mw->MListbox;     $ml->columnInsert(0,-text=>'Heading1',
-sortable=>0);     $ml->columnInsert(0,-text=>'Heading2');

   3.  $ml=$mw->MListbox;     $c=$ml->columnInsert(0,-text=>'Heading1');
 $ml->columnInsert(0,-text=>'Heading2');     $c->configure(-sortable=>0);

   4.  $ml=$mw->MListbox;     $ml->columnInsert(0,-text=>'Heading1');
$ml->columnInsert(0,-text=>'Heading2');
$ml->columnConfigure(0,-sortable=>0);

   (See the columnConfigure() method below for details on column options).

   All column methods expects one or two column indices as arguments.  The
column indices might be an integer (between 0 and the number of columns
minus one), 'end' for the last column, or a reference to the MLColumn
widget (obtained by calling MListbox->columnGet() or by storing the return
value from MListbox->columnInsert()).

WIDGET METHODS
==============

$ml->bindColumns(sequence,callback)
     Adds the binding to all column headers in the widget. See the section
     BINDING EVENTS TO MLISTBOX below.

$ml->bindRows(sequence,callback)
     Adds the binding to all listboxes in the widget. See the section
     BINDING EVENTS TO MLISTBOX below.

$ml->bindSeparators(sequence,callback)
     Adds the binding to all separators in the widget. See the section
     BINDING EVENTS TO MLISTBOX below.

COLUMN METHODS
--------------

   (Methods for accessing and manipulating individual columns in the
MListbox widget)

$ml->columnConfigure(index,option=>value...)
     Set option values for a specific column.  Equal to
     $ml->columnGet(index)->configure(...).

     The following column options are supported:


          -comparecommand => callback

          Specifies a callback to use when sorting the MListbox with this
          column as key. The callback will be called with two scalar
          arguments, each a value from this particular column. The
          callback should return an integer less than, equal to, or
          greater than 0, depending on how the tow arguments are ordered.
          If for example the column should be sorted by numerical value:

               -comparecommand => sub { $_[0] <=> $_[1]}

          The default is to sort the columns alphabetically.


          -text => string

          Specifies the text to be used in the heading button of the
          column.


          -resizeable => boolean

          A value of 1 indicates that it is okay for the user to resize
          this column by dragging the separator. 0 disables this function.

          Default: 1


          -separatorcolor => string

          Specifies the color of the separator line, default is *black*.


          -separatorwidth => integer

          Specifies the width of the separator line in pixels. Default is
          1.


          -sortable => boolean

          A value of 1 indicates that it is okay for the user to sort the
          data by clicking this column's heading. 0 disables this function.

          Default: 1

$ml->columnDelete(first,last)
     If last is omitted, deletes column first. If last is specified,
     deletes all columns from first to last, inclusive.

     All previous column indices greater than last (or first if last is
     omitted) are decremented by the number of columns deleted.

$ml->columnGet(first,last)
     If last is not specified, returns the MLColumn widget specified by
     first.  If both first and last are specified, returns an array
     containing all columns from first to last.

$ml->columnHide(first,last)
     If last is omitted, hides column first. If last is specified, hides
     all columns from first to last, inclusive.

     Hiding a column is equal to calling $ml->columnGet(index)->packForget.
     The column is not deleted, all data are still available, and the
     column indices remain the same.

     See also the columnShow() method below.

$ml->columnIndex(index)
     Returns an integer index for the column specifed by index.

$ml->columnInsert(index,option=>value...)
     Creates a new column in the MListbox widget. The column will get the
     index specified by index. If index is 'end', the new column's index
     will be one more than the previous highest column index.

     If column index exists, the new column will be placed to the left of
     this column. All previous column indices equal to or greater than
     index will be incremented by one.

     Returns the newly created MLColumn widget.

     (See the columnConfigure() method above for details on column
     options).

$ml->columnPack(array)
     Repacks all columns in the MListbox widget according to the
     specification in array. Each element in array is a string on the
     format *index:width*. index is a column index, width defines the
     columns width in pixels (may be omitted). The columns are packed left
     to right in the order specified by by array.  Columns not specified
     in array will be hidden.

     This method is most useful if used together with the columnPackInfo()
     method.

$ml->columnPackInfo
     Returns an array describing the current layout of the MListbox
     widget. Each element of the array is a string on the format
     *index:width* (see columnPack() above). Only indices of columns that
     are currently shown (not hidden) will be returned. The first element
     in the returned array represents the leftmost column.

     This method may be used in conjunction with columnPack() to save and
     restore the column configuration.

$ml->columnShow(index,option=>value)
     Shows a hidden column (see the columnHide() method above).  The
     column to show is specified by index.

     By default, the column is pack'ed at the rigthmost end of the
     MListbox widget. This might be overridden by specifying one of the
     following options:


          -after => index

          Place the column after (to the right of) the column specified by
          index.


          -before => index

          Place the column before (to the left of) the column specified by
          index.

ROW METHODS
-----------

   (Methods for accessing and manipulating rows of data)

   Many of the methods for MListbox take one or more indices as arguments.
See *Note Tk/Listbox: Tk/Listbox, for a description of row indices.

$ml->delete(first,last)
     Deletes one or more row elements of the MListbox. First and last are
     indices specifying the first and last elements in the range to
     delete. If last isn't specified it defaults to first, i.e. a single
     element is deleted.

$ml->get(first,last)
     If last is omitted, returns the content of the MListbox row indicated
     by first. If last is specified, the command returns a list whose
     elements are all of the listbox rows between first and last.

     The returned elements are all array references. The referenced arrays
     contains one element for each column of the MListbox.

$ml->getRow(index)
     In scalar context, returns the value of column 0 in the MListbox row
     specified by index. In list context, returns the content of all
     columns in the row as an array.

     This method is provided for convenience, since retrieving a single
     row with the get() method might produce some ugly code.

     The following two code snippets are equal:

          1. @row=$ml->getRow(0);

          2. @row=@{($ml->get(0))[0]};

$ml->sort(*descending*, *columnindex*...)
     Sorts the content of the MListbox. If *descending* is a *true* value,
     the sort order will be descending. The default is ascending sort.

     If *columnindex* is specified, the sort will be done with the
     specified column as key. You can specify as many *columnindex*
     arguments as you wish. Sorting is done on the first column, then on
     the second, etc...

     The default is to sort the data on all columns of the listbox, with
     column 0 as the first sort key, column 1 as the second, etc.

OTHER LISTBOX METHODS
=====================

   Most other Tk::Listbox methods works for the MListbox widget.  This
includes the methods activate, cget, curselection, index, nearest, see,
selectionXXX, size, xview, yview.

   See *Note Tk/Listbox: Tk/Listbox,.

ADVERTISED SUBWIDGETS
=====================

pane
     All MListbox columns are packed inside a Tk::Pane (this is done to
     enable horizontal scrolling).

   Apart from "pane", the MListbox widget has no subwidgets, except for
the variable number of MLColumns, which obviously cannot be advertised.
The MLColumn widgets might be obtained by calling the columnGet() or
columnInsert() methods.

   The MLColumn widget (which represents a single column in the MListbox)
advertises the following subwidgets:

listbox
     The individual Listbox. Note that this is not the standard
     Tk::Listbox, but a derived version (CListbox). Several of the
     widget's methods will not work as expected.

separator
     The column separator line. This is a Canvas.

heading
     The column heading. This is a "HButton" (a Button with an additional
     -pixelwidth option).

frame
     A Frame which contains the "listbox" and the "heading" subwidgets
     (but not the "separator").

   Example: If you want to change the background color of the heading of
column 4:

     $ml->columnGet(4)->Subwidget("heading")
         ->configure(-background=>'blue');

BINDING EVENTS TO MLISTBOX
==========================

   Calling $ml->bind(...) probably makes little sense, since the call does
not specify whether the binding should apply to the listbox, the header
button or the separator line between each column.

   In stead of the ordinary bind, the following methods should be used:

$ml->bind(sequence,callback)
     Synonym for $ml->bindRows(sequence,callback).

$ml->bindRows(sequence,callback)
     Synonym for $ml->bindSubwidgets('listbox',sequence,callback)

$ml->bindColumns(sequence,callback)
     Synonym for $ml->bindSubwidgets('heading',sequence,callback)

$ml->bindSeparators(sequence,callback)
     Synonym for $ml->bindSubwidgets('separator',sequence,callback)

$ml->bindSubwidgets(*subwidget*,sequence,callback)
     Adds the binding specified by sequence and callback to all subwidgets
     of the given type (should be 'listbox', 'heading' or 'separator').

     The binding is stored in the widget, and if you create a new column
     by calling $ml->columnInsert(), all bindings created by
     $ml->bindSubwidgets() are automatically copied to the new column.

     The callback is called with the MListbox widget as first argument, and
     the index of the column where the event occured as the second
     argument.

     NOTE that $ml->bindSubwidgets() does not support all of Tk's callback
     formats.  The following are supported:

          \&subname
          sub { code }
          [ \&subname, arguments...]
          [ sub { code }, arguments...]

     If sequence is undefined, then the return value is a list whose
     elements are all the sequences for which there exist bindings for
     *subwidget*.

     If sequence is specified without callback, then the callback currently
     bound to sequence is returned, or an empty string is returned if
     there is no binding for sequence.

     If sequence is specified, and callback is an empty string, then the
     current binding for sequence is destroyed, leaving sequence unbound.
     An empty string is returned.

     An empty string is returned in all other cases.


File: pm.info,  Node: Tk/MainWindow,  Next: Tk/Menu,  Prev: Tk/MListbox,  Up: Module List

Root widget of a widget tree
****************************

NAME
====

   Tk::MainWindow - Root widget of a widget tree

SYNOPSIS
========

     use Tk;

     my $mw = MainWindow->new( ... options ... );

     my $this = $mw->ThisWidget -> pack ;
     my $that = $mw->ThatWidget;
     ...

     MainLoop;

DESCRIPTION
===========

   Perl/Tk applications (which have windows associated with them) create
one or more *MainWindow*s which act as the containers and parents of the
other widgets.

   *Tk::MainWindow* is a special kind of `Toplevel|Tk::Toplevel' in this
node widget. It is the root of a widget tree. Therefore `$mw->Parent'
returns undef.

   The default title of a MainWindow is the basename of the script
(actually the Class name used for options lookup, i.e. with basename with
inital caps) or 'Ptk' as the fallback value.  If more than one MainWindow
is created or several instances of the script are running at the same time
the string `" #n"' is appended where the number n is set to get a unique
value.

   Unlike the standard Tcl/Tk's wish, perl/Tk allows you to create several
MainWindows.  When the last *MainWindow* is destroyed the Tk eventloop
exits (the eventloop is entered with the call of MainLoop). Various
resources (bindings, fonts, images, colors) are maintained or cached for
each MainWindow, so each MainWindow consumes more resources than a
Toplevel. However multiple MainWindows can make sense when the user can
destroy them independently.

METHODS
=======

   You can apply all methods that a `Toplevel|Tk::Toplevel' in this node
widget accepts.

   The method *$w*->*MainWindow* applied to any widget will return the
*MainWindow* to which the widget belongs (the  MainWindow belongs to
itself).

MISSING
=======

   Documentation is incomplete.  Here are some missing items that should
be explained in more detail:

   * The new mechanism for MainWindows is slightly different to other
     widgets.

   * There no explanation about what resources are bound to a MainWindow
     (e.g., ClassInit done per MainWindow)

   * Passing of command line options to override or augment arguments of
     the new method (see *Note Tk/CmdLine: Tk/CmdLine,).

SEE ALSO
========

   `Tk::Toplevel|Tk::Toplevel' in this node `Tk::CmdLine|Tk::CmdLine' in
this node


File: pm.info,  Node: Tk/Menu,  Next: Tk/MenuHash,  Prev: Tk/MainWindow,  Up: Module List

Create and manipulate Menu widgets
**********************************

NAME
====

   Tk::Menu - Create and manipulate Menu widgets

       *$menu* = *$parent*->Menu(?options?);

STANDARD OPTIONS
================

   *-activebackground*	*-background*	*-disabledforeground*	*-relief*
*-activeborderwidth*	*-borderwidth*	*-font*	*-takefocus*
*-activeforeground*	*-cursor*	*-foreground*

   See *Note Tk/options: Tk/options, for details of the standard options.

WIDGET-SPECIFIC OPTIONS
=======================

Name:	*postCommand*
Class:	Command
Switch:	*-postcommand*
     If this option is specified then it provides a
     `callback|Tk::callbacks' in this node to execute each time the menu
     is posted.  The callback is invoked by the post method before posting
     the menu. Note that in 8.0 on Macintosh and Windows, all commands in
     a menu systems are executed before any are posted. This is due to the
     limitations in the individual platforms' menu managers.

Name:	*selectColor*
Class:	Background
Switch:	*-selectcolor*
     For menu entries that are check buttons or radio buttons, this option
     specifies the color to display in the indicator when the check button
     or radio button is selected.

Name:	*tearOff*
Class:	*TearOff*
Switch:	*-tearoff*
     This option must have a proper boolean value, which specifies whether
     or not the menu should include a tear-off entry at the top.  If so,
     it will exist as entry 0 of the menu and the other entries will
     number starting at 1.  The default menu bindings arrange for the menu
     to be torn off when the tear-off entry is invoked.

Name:	*tearOffCommand*
Class:	*TearOffCommand*
Switch:	*-tearoffcommand*
     If this option has a non-empty value, then it specifies a `Tk
     callback|Tk::callbacks', *Note Perl: (perl.info)perl, to invoke
     whenever the menu is torn off.  The actual command will consist of
     the value of this option, followed by a space, followed by the name
     of the menu window, followed by a space, followed by the name of the
     name of the torn off menu window.  For example, if the option's is
     "*a b*" and menu *.x.y* is torn off to create a new menu
     *.x.tearoff1*, then the command "*a b .x.y .x.tearoff1*" will be
     invoked.

Name:	title
Class:	Title
Switch:	*-title*
     The string will be used to title the window created when this menu is
     torn off. If the title is NULL, then the window will have the title
     of the menubutton or the text of the cascade item from which this menu
     was invoked.

Name:	type
Class:	Type
Switch:	*-type*
     This option can be one of *menubar*, *tearoff*, or normal, and is set
     when the menu is created. While the string returned by the
     configuration database will change if this option is changed, this
     does not affect the menu widget's behavior. This is used by the
     cloning mechanism and is not normally set outside of the Tk library.

DESCRIPTION
===========

   The Menu method creates a new top-level window (given by the $widget
argument) and makes it into a menu widget.  Additional options, described
above, may be specified on the command line or in the option database to
configure aspects of the menu such as its colors and font.  The menu
command returns its $widget argument.  At the time this command is invoked,
there must not exist a window named $widget, but $widget's parent must
exist.

   A menu is a widget that displays a collection of one-line entries
arranged in one or more columns.  There exist several different types of
entries, each with different properties.  Entries of different types may be
combined in a single menu.  Menu entries are not the same as entry
widgets.  In fact, menu entries are not even distinct widgets; the entire
menu is one widget.

   Menu entries are displayed with up to three separate fields.  The main
field is a label in the form of a text string, a bitmap, or an image,
controlled by the *-label*, *-bitmap*, and *-image* options for the entry.
If the  *-accelerator* option is specified for an entry then a second
textual field is displayed to the right of the label.  The accelerator
typically describes a keystroke sequence that may be typed in the
application to cause the same result as invoking the menu entry.  The
third field is an *indicator*.  The indicator is present only for
checkbutton or radiobutton entries.  It indicates whether the entry is
selected or not, and is displayed to the left of the entry's string.

   In normal use, an entry becomes active (displays itself differently)
whenever the mouse pointer is over the entry.  If a mouse button is
released over the entry then the entry is invoked.  The effect of
invocation is different for each type of entry; these effects are
described below in the sections on individual entries.

   Entries may be disabled, which causes their labels and accelerators to
be displayed with dimmer colors.  The default menu bindings will not allow
a disabled entry to be activated or invoked.  Disabled entries may be
re-enabled, at which point it becomes possible to activate and invoke them
again.

   Whenever a menu's active entry is changed, a <<MenuSelect>> virtual
event is sent to the menu. The active item can then be queried from the
menu, and an action can be taken, such as setting context-sensitive help
text for the entry.

COMMAND ENTRIES
---------------

   The most common kind of menu entry is a command entry, which behaves
much like a button widget.  When a command entry is invoked, a callback is
executed.  The callback is specified with the *-command* option.

SEPARATOR ENTRIES
-----------------

   A separator is an entry that is displayed as a horizontal dividing
line.  A separator may not be activated or invoked, and it has no behavior
other than its display appearance.

CHECKBUTTON ENTRIES
-------------------

   A checkbutton menu entry behaves much like a checkbutton widget.  When
it is invoked it toggles back and forth between the selected and
deselected states.  When the entry is selected, a particular value is
stored in a particular global variable (as determined by the *-onvalue*
and *-variable* options for the entry);  when the entry is deselected
another value (determined by the *-offvalue* option) is stored in the
global variable.  An indicator box is displayed to the left of the label
in a checkbutton entry.  If the entry is selected then the indicator's
center is displayed in the color given by the *-selectcolor* option for
the entry; otherwise the indicator's center is displayed in the background
color for the menu.  If a *-command* option is specified for a checkbutton
entry, then its value is evaluated each time the entry is invoked;  this
happens after toggling the entry's selected state.

RADIOBUTTON ENTRIES
-------------------

   A radiobutton menu entry behaves much like a radiobutton widget.
Radiobutton entries are organized in groups of which only one entry may be
selected at a time.  Whenever a particular entry becomes selected it
stores a particular value into a particular global variable (as determined
by the *-value* and *-variable* options for the entry).  This action
causes any previously-selected entry in the same group to deselect itself.
Once an entry has become selected, any change to the entry's associated
variable will cause the entry to deselect itself.  Grouping of radiobutton
entries is determined by their associated variables:  if two entries have
the same associated variable then they are in the same group.  An
indicator diamond is displayed to the left of the label in each
radiobutton entry.  If the entry is selected then the indicator's center
is displayed in the color given by the *-selectcolor* option for the entry;
otherwise the indicator's center is displayed in the background color for
the menu.  If a *-command* option is specified for a radiobutton entry,
then its value is evaluated each time the entry is invoked;  this happens
after selecting the entry.

CASCADE ENTRIES
---------------

   A cascade entry is one with an associated menu (determined by the
*-menu* option).  Cascade entries allow the construction of cascading
menus.  The *postcascade* method can be used to post and unpost the
associated menu just next to of the cascade entry.  The associated menu
must be a child of the menu containing the cascade entry (this is needed
in order for menu traversal to work correctly).

   A cascade entry posts its associated menu by invoking

   *$menu*->post(*x,y*)

   where menu is the path name of the associated menu, and x and y are the
root-window coordinates of the upper-right corner of the cascade entry.
On Unix, the lower-level menu is unposted by executing

   *$menu*->*unpost*

   where menu is the name of the associated menu.  On other platforms, the
platform's native code takes care of unposting the menu.

   If a *-command* option is specified for a cascade entry then it is
evaluated whenever the entry is invoked. This is not supported on Windows.

TEAR-OFF ENTRIES
----------------

   A tear-off entry appears at the top of the menu if enabled with the
*tearOff* option.  It is not like other menu entries in that it cannot be
created with the add method and cannot be deleted with the delete method.
When a tear-off entry is created it appears as a dashed line at the top of
the menu.  Under the default bindings, invoking the tear-off entry causes
a torn-off copy to be made of the menu and all of its submenus.

MENUBARS
--------

   Any menu can be set as a menubar for a toplevel window (see the
`Toplevel|Tk::Toplevel' in this node constructor for syntax). On the
Macintosh, whenever the toplevel is in front, this menu's cascade items
will appear in the menubar across the top of the main monitor. On Windows
and Unix, this menu's items will be displayed in a menubar accross the top
of the window. These menus will behave according to the interface
guidelines of their platforms. For every menu set as a menubar, a clone
menu is made. See `"CLONES"' in this node for more information.

SPECIAL MENUS IN MENUBARS
-------------------------

   Certain menus in a menubar will be treated specially.  On the Macintosh,
access to the special Apple and Help menus is provided. On Windows, access
to the Windows System menu in each window is provided. On X Windows, a
special right-justified help menu is provided. In all cases, these menus
must be created with the command name of the menubar menu concatenated
with the special name. So for a menubar named .menubar, on the Macintosh,
the special menus would be .menubar.apple and .menubar.help; on Windows,
the special menu would be .menubar.system; on X Windows, the help menu
would be .menubar.help.

   When Tk sees an Apple menu on the Macintosh, that menu's contents make
up the first items of the Apple menu on the screen whenever the window
containing the menubar is in front. The menu is the first one that the
user sees and has a title which is an Apple logo.  After all of the
Tk-defined items, the menu will have a separator, followed by all of the
items in the user's Apple Menu Items folder.  Since the System uses a
different menu definition procedure for the Apple menu than Tk uses for
its menus, and the system APIs do not fully support everything Tk tries to
do, the menu item will only have its text displayed. No font attributes,
images, bitmaps, or colors will be displayed. In addition, a menu with a
tearoff item will have the tearoff item displayed as "(TearOff)".

   When Tk see a Help menu on the Macintosh, the menu's contents are
appended to the standard help menu on the right of the user's menubar
whenever the user's menubar is in front. The first items in the menu are
provided by Apple. Similar to the Apple Menu, cusomization in this menu is
limited to what the system provides.

   When Tk sees a System menu on Windows, its items are appended to the
system menu that the menubar is attached to. This menu has an icon
representing a spacebar, and can be invoked with the mouse or by typing
Alt+Spacebar.  Due to limitations in the Windows API, any font changes,
colors, images, bitmaps, or tearoff images will not appear in the system
menu.

   When Tk see a Help menu on X Windows, the menu is moved to be last in
the menubar and is right justified.

SEPARATORS IN MENUBARS
----------------------

   Separator entries are not displayed in menubars.  The last separator
entry causes remaining entries to be right justified.

CLONES
------

   When a menu is set as a menubar for a toplevel window, or when a menu
is torn off, a clone of the menu is made. This clone is a menu widget in
its own right, but it is a child of the original. Changes in the
configuration of the original are reflected in the clone. Additionally,
any cascades that are pointed to are also cloned so that menu traversal
will work right. Clones are destroyed when either the tearoff or menubar
goes away, or when the original menu is destroyed.

WIDGET METHODS
--------------

   The Menu method creates a widget object.  This object supports the
configure and cget methods described in *Note Tk/options: Tk/options,
which can be used to enquire and modify the options described above.  The
widget also inherits all the methods provided by the generic
`Tk::Widget|Tk::Widget' in this node class, and the `Tk::Wm|Tk::Wm' in
this node class.

   Many of the methods for a menu take as one argument an indicator of
which entry of the menu to operate on.  These indicators are called
indexes and may be specified in any of the following forms:

number
     Specifies the entry numerically, where 0 corresponds to the top-most
     entry of the menu, 1 to the entry below it, and so on.

active
     Indicates the entry that is currently active.  If no entry is active
     then this form is equivalent to none.  This form may not be
     abbreviated.

end
     Indicates the bottommost entry in the menu.  If there are no entries
     in the menu then this form is equivalent to none.  This form may not
     be abbreviated.

last
     Same as end.

none
     Indicates "no entry at all";  this is used most commonly with the
     activate option to deactivate all the entries in the menu.  In most
     cases the specification of none causes nothing to happen in the
     method.  This form may not be abbreviated.

*@*number
     In this form, number is treated as a y-coordinate in the menu's
     window;  the entry closest to that y-coordinate is used.  For
     example, "*@0*" indicates the top-most entry in the window.

pattern
     If the index doesn't satisfy one of the above forms then this form is
     used.  Pattern is pattern-matched against the label of each entry in
     the menu, in order from the top down, until a matching entry is found.
     (In perl/Tk the matching is under review, but exact match should
     work.)

   The following methods are possible for menu widgets:

*$menu*->activate(index)
     Change the state of the entry indicated by index to active and
     redisplay it using its active colors.  Any previously-active entry is
     deactivated.  If index is specified as none, or if the specified
     entry is disabled, then the menu ends up with no active entry.
     Returns an empty string.

*$menu*->add(*type, *?*option, value, option, value, ...*?)
     Add a new entry to the bottom of the menu.  The new entry's type is
     given by type and must be one of *cascade*, *checkbutton*, command,
     *radiobutton*, or separator, or a unique abbreviation of one of the
     above.  If additional arguments are present, they specify any of the
     following options:

    *-activebackground* => value
          Specifies a background color to use for displaying this entry
          when it is active.  If this option is specified as an empty
          string (the default), then the *activeBackground* option for the
          overall menu is used.  If the $Tk::strictMotif variable has been
          set to request strict Motif compliance, then this option is
          ignored and the *-background* option is used in its place.  This
          option is not available for separator or tear-off entries.

    *-activeforeground* => value
          Specifies a foreground color to use for displaying this entry
          when it is active.  If this option is specified as an empty
          string (the default), then the *activeForeground* option for the
          overall menu is used.  This option is not available for
          separator or tear-off entries.

    *-accelerator* => value
          Specifies a string to display at the right side of the menu
          entry.  Normally describes an accelerator keystroke sequence
          that may be typed to invoke the same function as the menu entry.
          This option is not available for separator or tear-off entries.

    *-background* => value
          Specifies a background color to use for displaying this entry
          when it is in the normal state (neither active nor disabled).
          If this option is specified as an empty string (the default),
          then the background option for the overall menu is used.  This
          option is not available for separator or tear-off entries.

    *-bitmap* => value
          Specifies a bitmap to display in the menu instead of a textual
          label, in any of the forms accepted by *Tk_GetBitmap*.  This
          option overrides the *-label* option but may be reset to an
          empty string to enable a textual label to be displayed.  If a
          *-image* option has been specified, it overrides *-bitmap*.
          This option is not available for separator or tear-off entries.

    *-columnbreak* => value
          When this option is zero, the appears below the previous entry.
          When this option is one, the menu appears at the top of a new
          column in the menu.

    *-command* => value
          For command, checkbutton, and radiobutton entries, specifies a
          callback to execute when the menu entry is invoked.  For cascade
          entries, specifies a callback to execute when the entry is
          activated (i.e. just before its submenu is posted).  Not
          available for separator or tear-off entries.

    *-font* => value
          Specifies the font to use when drawing the label or accelerator
          string in this entry.  If this option is specified as an empty
          string (the default) then the font option for the overall menu
          is used.  This option is not available for separator or tear-off
          entries.

    *-foreground* => value
          Specifies a foreground color to use for displaying this entry
          when it is in the normal state (neither active nor disabled).
          If this option is specified as an empty string (the default),
          then the *foreground* option for the overall menu is used.  This
          option is not available for separator or tear-off entries.

    *-hidemargin* => value
          Specifies whether the standard margins should be drawn for this
          menu entry. This is useful when creating palette with images in
          them, i.e., color palettes, pattern palettes, etc. 1 indicates
          that the margin for the entry is hidden; 0 means that the margin
          is used.

    *-image* => value
          Specifies an image to display in the menu instead of a text
          string or bitmap The image must have been created by some
          previous invocation of *image create*.  This option overrides
          the *-label* and *-bitmap* options but may be reset to an empty
          string to enable a textual or bitmap label to be displayed.
          This option is not available for separator or tear-off entries.

    *-indicatoron* => value
          Available only for checkbutton and radiobutton entries.  Value
          is a boolean that determines whether or not the indicator should
          be displayed.

    *-label* => value
          Specifies a string to display as an identifying label in the menu
          entry.  Not available for separator or tear-off entries.

    *-menu* => value
          Available only for cascade entries.  Specifies the path name of
          the submenu associated with this entry.  The submenu must be a
          child of the menu.

    *-offvalue* => value
          Available only for checkbutton entries.  Specifies the value to
          store in the entry's associated variable when the entry is
          deselected.

    *-onvalue* => value
          Available only for checkbutton entries.  Specifies the value to
          store in the entry's associated variable when the entry is
          selected.

    *-selectcolor* => value
          Available only for checkbutton and radiobutton entries.
          Specifies the color to display in the indicator when the entry is
          selected.  If the value is an empty string (the default) then
          the *selectColor* option for the menu determines the indicator
          color.

    *-selectimage* => value
          Available only for checkbutton and radiobutton entries.
          Specifies an image to display in the entry (in place of the
          *-image* option) when it is selected.  Value is the name of an
          image, which must have been created by some previous invocation
          of *image create*.  This option is ignored unless the *-image*
          option has been specified.

    *-state* => value
          Specifies one of three states for the entry:  normal, active, or
          disabled.  In normal state the entry is displayed using the
          *foreground* option for the menu and the background option from
          the entry or the menu.  The active state is typically used when
          the pointer is over the entry.  In active state the entry is
          displayed using the *activeForeground* option for the menu along
          with the *activebackground* option from the entry.  Disabled
          state means that the entry should be insensitive:  the default
          bindings will refuse to activate or invoke the entry.  In this
          state the entry is displayed according to the
          *disabledForeground* option for the menu and the background
          option from the entry.  This option is not available for
          separator entries.

    *-underline* => value
          Specifies the integer index of a character to underline in the
          entry.  This option is also queried by the default bindings and
          used to implement keyboard traversal.  0 corresponds to the
          first character of the text displayed in the entry, 1 to the
          next character, and so on.  If a bitmap or image is displayed in
          the entry then this option is ignored.  This option is not
          available for separator or tear-off entries.

    *-value* => value
          Available only for radiobutton entries.  Specifies the value to
          store in the entry's associated variable when the entry is
          selected.  If an empty string is specified, then the *-label*
          option for the entry as the value to store in the variable.

    *-variable* => value
          Available only for checkbutton and radiobutton entries.
          Specifies the name of a global value to set when the entry is
          selected.  For checkbutton entries the variable is also set when
          the entry is deselected.  For radiobutton entries, changing the
          variable causes the currently-selected entry to deselect itself.

     The add method returns an empty string.

*$menu*->clone(*$parent* ?, *cloneType?*)
     Makes a clone of the current menu as a child of *$parent*. This clone
     is a menu in its own right, but any changes to the clone are
     propogated to the original menu and vice versa. *cloneType* can be
     normal, *menubar*, or *tearoff*. Should not normally be called
     outside of the Tk library. See `"CLONES"' in this node for more
     information.

*$menu*->delete(*index1*?, *index2*?)
     Delete all of the menu entries between *index1* and *index2*
     inclusive.  If *index2* is omitted then it defaults to *index1*.
     Attempts to delete a tear-off menu entry are ignored (instead, you
     should change the *tearOff* option to remove the tear-off entry).

*$menu*->*entrycget*(*index, option*)
     Returns the current value of a configuration option for the entry
     given by index.  Option may have any of the values accepted by the add
     method.

*$menu*->*entryconfigure*(index ?,options?)
     This method is similar to the configure method, except that it
     applies to the options for an individual entry, whereas configure
     applies to the options for the menu as a whole.  Options may have any
     of the values accepted by the add method.  If options are specified,
     options are modified as indicated in the method call and the method
     returns an empty string.  If no options are specified, returns a list
     describing the current options for entry index (see *Note Tk/options:
     Tk/options, for information on the format of this list).

*$menu*->index(index)
     Returns the numerical index corresponding to index, or none if index
     was specified as none.

*$menu*->insert(*index, type*?, *-option*=>value, ...?)
     Same as the add method except that it inserts the new entry just
     before the entry given by index, instead of appending to the end of
     the menu.  The type, *-option*, and value arguments have the same
     interpretation as for the add widget method.  It is not possible to
     insert new menu entries before the tear-off entry, if the menu has
     one.

*$menu*->*invoke*(index)
     Invoke the action of the menu entry.  See the sections on the
     individual entries above for details on what happens.  If the menu
     entry is disabled then nothing happens.  If the entry has a callback
     associated with it then the result of that callback is returned as
     the result of the *invoke* widget method.  Otherwise the result is an
     empty string.  Note:  invoking a menu entry does not automatically
     unpost the menu;  the default bindings normally take care of this
     before invoking the *invoke* method.

*$menu*->post(*x, y*)
     Arrange for the menu to be displayed on the screen at the root-window
     coordinates given by x and y.  These coordinates are adjusted if
     necessary to guarantee that the entire menu is visible on the screen.
     This method normally returns an empty string.  If the *postCommand*
     option has been specified, then its value is executed before posting
     the menu and the result of that callback is returned as the result of
     the post widget method.  If an error returns while executing the
     method, then the error is returned without posting the menu.

*$menu*->*postcascade*(index)
     Posts the submenu associated with the cascade entry given by index,
     and unposts any previously posted submenu.  If index doesn't
     correspond to a cascade entry, or if *$menu* isn't posted, the method
     has no effect except to unpost any currently posted submenu.

*$menu*->type(index)
     Returns the type of the menu entry given by index.  This is the type
     argument passed to the add widget method when the entry was created,
     such as command or separator, or *tearoff* for a tear-off entry.

*$menu*->*unpost*
     Unmap the window so that it is no longer displayed.  If a lower-level
     cascaded menu is posted, unpost that menu.  Returns an empty string.
     This method does not work on Windows and the Macintosh, as those
     platforms have their own way of unposting menus.

*$menu*->*yposition*(index)
     Returns a decimal string giving the y-coordinate within the menu
     window of the topmost pixel in the entry specified by index.

MENU CONFIGURATIONS
===================

   The default bindings support four different ways of using menus:

*Pulldown Menus in Menubar*
     This is the most command case. You create a menu widget that will
     become the menu bar. You then add cascade entries to this menu,
     specifying the pull down menus you wish to use in your menu bar. You
     then create all of the pulldowns. Once you have done this, specify
     the menu using the *-menu* option of the toplevel's method. See the
     toplevel manual entry for details.

*Pulldown Menus in Menu Buttons*
     This is the compatable way to do menu bars.  You create one menubutton
     widget for each top-level menu, and typically you arrange a series of
     menubuttons in a row in a menubar window.  You also create the
     top-level menus and any cascaded submenus, and tie them together with
     *-menu* options in menubuttons and cascade menu entries.  The
     top-level menu must be a child of the menubutton, and each submenu
     must be a child of the menu that refers to it.  Once you have done
     this, the default bindings will allow users to traverse and invoke
     the tree of menus via its menubutton;  see the *menubutton*
     documentation for details.

Popup Menus
     Popup menus typically post in response to a mouse button press or
     keystroke.  You create the popup menus and any cascaded submenus,
     then you call the *Post* method at the appropriate time to post the
     top-level menu.

     *$menu*->*Post*($x,*$y*?,$entry?)

     $x and *$y* are the root window coordinates at which the *$menu* will
     be displayed. If $entry is specified then that entry is centred on
     that point, otherwise the top-left corner of the *$menu* is placed at
     that point.

     Menu also inherits methods from *Note Tk/Wm: Tk/Wm, and so the method
     Popup can be used to position menu relative to other windows, the
     mouse cursor or the screen.

*Option Menus*
     An option menu consists of a menubutton with an associated menu that
     allows you to select one of several values.  The current value is
     displayed in the menubutton and is also stored in a global variable.
     Use the *Note Tk/Optionmenu: Tk/Optionmenu, class to create option
     menubuttons and their menus.

*Torn-off Menus*
     You create a torn-off menu by invoking the tear-off entry at the top
     of an existing menu.  The default bindings will create a new menu
     that is a copy of the original menu and leave it permanently posted
     as a top-level window.  The torn-off menu behaves just the same as
     the original menu.

DEFAULT BINDINGS
================

   Tk automatically creates class bindings for menus that give them the
following default behavior:

[1]
     When the mouse enters a menu, the entry underneath the mouse cursor
     activates;  as the mouse moves around the menu, the active entry
     changes to track the mouse.

[2]
     When the mouse leaves a menu all of the entries in the menu
     deactivate, except in the special case where the mouse moves from a
     menu to a cascaded submenu.

[3]
     When a button is released over a menu, the active entry (if any) is
     invoked.  The menu also unposts unless it is a torn-off menu.

[4]
     The Space and Return keys invoke the active entry and unpost the menu.

[5]
     If any of the entries in a menu have letters underlined with with
     *-underline* option, then pressing one of the underlined letters (or
     its upper-case or lower-case equivalent) invokes that entry and
     unposts the menu.

[6]
     The Escape key aborts a menu selection in progress without invoking
     any entry.  It also unposts the menu unless it is a torn-off menu.

[7]
     The Up and Down keys activate the next higher or lower entry in the
     menu.  When one end of the menu is reached, the active entry wraps
     around to the other end.

[8]
     The Left key moves to the next menu to the left.  If the current menu
     is a cascaded submenu, then the submenu is unposted and the current
     menu entry becomes the cascade entry in the parent.  If the current
     menu is a top-level menu posted from a menubutton, then the current
     menubutton is unposted and the next menubutton to the left is posted.
     Otherwise the key has no effect.  The left-right order of menubuttons
     is determined by their stacking order:  Tk assumes that the lowest
     menubutton (which by default is the first one created) is on the left.

[9]
     The Right key moves to the next menu to the right.  If the current
     entry is a cascade entry, then the submenu is posted and the  current
     menu entry becomes the first entry in the submenu.  Otherwise, if the
     current menu was posted from a menubutton, then the current
     menubutton is unposted and the next menubutton to the right is posted.

     Disabled menu entries are non-responsive:  they don't activate and
     they ignore mouse button presses and releases.

     The behavior of menus can be changed by defining new bindings for
     individual widgets or by redefining the class bindings.

BUGS
====

   At present it isn't possible to use the option database to specify
values for the options to individual entries.

SEE ALSO
========

   `Tk::callbacks|Tk::callbacks' in this node

KEYWORDS
========

   menu, widget


