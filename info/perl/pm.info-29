This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Apache/Session/Lock/Semaphore,  Next: Apache/Session/MySQL,  Prev: Apache/Session/Lock/Null,  Up: Module List

Provides mutual exclusion through sempahores
********************************************

NAME
====

   Apache::Session::Lock::Semaphore - Provides mutual exclusion through
sempahores

SYNOPSIS
========

     use Apache::Session::Lock::Semaphore;
     
     my $locker = new Apache::Session::Lock::Semaphore;
     
     $locker->acquire_read_lock($ref);
     $locker->acquire_write_lock($ref);
     $locker->release_read_lock($ref);
     $locker->release_write_lock($ref);
     $locker->release_all_locks($ref);

DESCRIPTION
===========

   Apache::Session::Lock::Sempahore fulfills the locking interface of
Apache::Session.  Mutual exclusion is achieved through system semaphores
and the IPC::Semaphore module.

CONFIGURATION
=============

   The module must know how many semaphores to use, and what semaphore key
to use.  The number of semaphores has an impact on performance.  More
semaphores meansless lock contention.  You should use the maximum number
of sempahores that your platform will allow.  On stock NetBSD, OpenBSD,
and Solaris systems, this is probably 16.  On Linux 2.2, this is 32.  This
module tries to guess the number based on your operating system, but it is
safer to configure it yourself.

   To set the number of semaphores, you need to pass an argument in the
usual Apache::Session style.  The name of the argument is NSems, and the
value is an integer power of 2.  For example:

     tie %s, 'Apache::Session::Blah', $id, {NSems => 16};

   You may also need to configure the semaphore key that this package
uses.  By default, it uses key 31818.  You can change this using the
argument SemaphoreKey:

     tie %s, 'Apache::Session::Blah', $id, {NSems => 16, SemaphoreKey => 42};

PROBLEMS
========

   There are a few problems that people frequently encounter when using
this package.

   If you get an invalid argument message, that usually means that the
system is unhappy with the number of semaphores that you requested.  Try
decreasing the number of semaphores.  The semaphore blocks that this
package creates are persistent until the system is rebooted, so if you
request 8 sempahores one time and 16 sempahores the next, it won't work.
Use the system commands ipcs and ipcrm to inspect and remove unwanted
semphore blocks.

AUTHOR
======

   This module was written by Jeffrey William Baker <jwbaker@acm.org>.

SEE ALSO
========

   *Note Apache/Session: Apache/Session,


File: pm.info,  Node: Apache/Session/MySQL,  Next: Apache/Session/Oracle,  Prev: Apache/Session/Lock/Semaphore,  Up: Module List

An implementation of Apache::Session
************************************

NAME
====

   Apache::Session::MySQL - An implementation of Apache::Session

SYNOPSIS
========

     use Apache::Session::MySQL;
     
     #if you want Apache::Session to open new DB handles:
     
     tie %hash, 'Apache::Session::MySQL', $id, {
        DataSource => 'dbi:mysql:sessions',
        UserName   => $db_user,
        Password   => $db_pass,
        LockDataSource => 'dbi:mysql:sessions',
        LockUserName   => $db_user,
        LockPassword   => $db_pass
     };

     #or, if your handles are already opened:

     tie %hash, 'Apache::Session::MySQL', $id, {
        Handle     => $dbh,
        LockHandle => $dbh
     };

DESCRIPTION
===========

   This module is an implementation of Apache::Session.  It uses the MySQL
backing store and the MySQL locking scheme.  See the example, and the
documentation for Apache::Session::Store::MySQL and
Apache::Session::Lock::MySQL for more details.

AUTHOR
======

   This module was written by Jeffrey William Baker <jwbaker@acm.org>.

SEE ALSO
========

   *Note Apache/Session/File: Apache/Session/File,, *Note
Apache/Session/Flex: Apache/Session/Flex,, *Note Apache/Session/DB_File:
Apache/Session/DB_File,, *Note Apache/Session/Postgres:
Apache/Session/Postgres,, *Note Apache/Session: Apache/Session,


File: pm.info,  Node: Apache/Session/Oracle,  Next: Apache/Session/Postgres,  Prev: Apache/Session/MySQL,  Up: Module List

An implementation of Apache::Session
************************************

NAME
====

   Apache::Session::Oracle - An implementation of Apache::Session

SYNOPSIS
========

     use Apache::Session::Oracle;
     
     #if you want Apache::Session to open new DB handles:
     
     tie %hash, 'Apache::Session::Oracle', $id, {
        DataSource => 'dbi:Oracle:sessions',
        UserName   => $db_user,
        Password   => $db_pass,
        Commit     => 1
     };

     #or, if your handles are already opened:

     tie %hash, 'Apache::Session::Oracle', $id, {
        Handle => $dbh,
        Commit => 1
     };

DESCRIPTION
===========

   This module is an implementation of Apache::Session.  It uses the Oracle
backing store and no locking.  See the example, and the documentation for
Apache::Session::Store::Oracle for more details.

USAGE
=====

   The special Apache::Session argument for this module is Commit.  You
MUST provide the Commit argument, which instructs this module to either
commit the transaction when it is finished, or to simply do nothing.  This
feature is provided so that this module will not have adverse interactions
with your local transaction policy, nor your local database handle caching
policy.  The argument is mandatory in order to make you think about this
problem.

   This module also respects the LongReadLen argument, which specifies the
maximum size of the session object.  If not specified, the default maximum
is 8 KB.

AUTHOR
======

   This module was written by Jeffrey William Baker <jwbaker@acm.org>.

SEE ALSO
========

   *Note Apache/Session/File: Apache/Session/File,, *Note
Apache/Session/Flex: Apache/Session/Flex,, *Note Apache/Session/DB_File:
Apache/Session/DB_File,, *Note Apache/Session/Postgres:
Apache/Session/Postgres,, *Note Apache/Session: Apache/Session,


File: pm.info,  Node: Apache/Session/Postgres,  Next: Apache/Session/Serialize/Base64,  Prev: Apache/Session/Oracle,  Up: Module List

An implementation of Apache::Session
************************************

NAME
====

   Apache::Session::Postgres - An implementation of Apache::Session

SYNOPSIS
========

     use Apache::Session::Postgres;
     
     #if you want Apache::Session to open new DB handles:
     
     tie %hash, 'Apache::Session::Postgres', $id, {
        DataSource => 'dbi:Pg:dbname=sessions',
        UserName   => $db_user,
        Password   => $db_pass,
        Commit     => 1
     };

     #or, if your handles are already opened:

     tie %hash, 'Apache::Session::Postgres', $id, {
        Handle => $dbh,
        Commit => 1
     };

DESCRIPTION
===========

   This module is an implementation of Apache::Session.  It uses the
Postgres backing store and no locking.  See the example, and the
documentation for Apache::Session::Store::Postgres for more details.

USAGE
=====

   The special Apache::Session argument for this module is Commit.  You
MUST provide the Commit argument, which instructs this module to either
commit the transaction when it is finished, or to simply do nothing.  This
feature is provided so that this module will not have adverse interactions
with your local transaction policy, nor your local database handle caching
policy.  The argument is mandatory in order to make you think about this
problem.

AUTHOR
======

   This module was written by Jeffrey William Baker <jwbaker@acm.org>.

SEE ALSO
========

   *Note Apache/Session/File: Apache/Session/File,, *Note
Apache/Session/Flex: Apache/Session/Flex,, *Note Apache/Session/DB_File:
Apache/Session/DB_File,, *Note Apache/Session/Postgres:
Apache/Session/Postgres,, *Note Apache/Session: Apache/Session,


File: pm.info,  Node: Apache/Session/Serialize/Base64,  Next: Apache/Session/Serialize/Storable,  Prev: Apache/Session/Postgres,  Up: Module List

Use Storable and MIME::Base64 to zip up persistent data
*******************************************************

NAME
====

   Apache::Session::Serialize::Base64 - Use Storable and MIME::Base64 to
zip up persistent data

SYNOPSIS
========

     use Apache::Session::Serialize::Base64;
     
     $zipped = Apache::Session::Serialize::Base64::serialize($ref);
     $ref = Apache::Session::Serialize::Base64::unserialize($zipped);

DESCRIPTION
===========

   This module fulfills the serialization interface of Apache::Session.
It serializes the data in the session object by use of Storable's
`nfreeze()' and `thaw()' functions, and MIME::Base64's `encode_bas64' and
`decode_base64'.  The serialized data is ASCII text, suitable for storage
in backing stores that don't handle binary data gracefully, such as
Postgres.

AUTHOR
======

   This module was written by Jeffrey William Baker <jwbaker@acm.org>.

SEE ALSO
========

   *Note Apache/Session/Serialize/Storable:
Apache/Session/Serialize/Storable,, *Note Apache/Session: Apache/Session,


File: pm.info,  Node: Apache/Session/Serialize/Storable,  Next: Apache/Session/Serialize/Sybase,  Prev: Apache/Session/Serialize/Base64,  Up: Module List

Use Storable to zip up persistent data
**************************************

NAME
====

   Apache::Session::Serialize::Storable - Use Storable to zip up
persistent data

SYNOPSIS
========

     use Apache::Session::Serialize::Storable;
     
     $zipped = Apache::Session::Serialize::Storable::serialize($ref);
     $ref = Apache::Session::Serialize::Storable::unserialize($zipped);

DESCRIPTION
===========

   This module fulfills the serialization interface of Apache::Session.
It serializes the data in the session object by use of Storable's
`nfreeze()' and `thaw()' functions.  The result is a binary object ready
for storage.

AUTHOR
======

   This module was written by Jeffrey William Baker <jwbaker@acm.org>.

SEE ALSO
========

   *Note Apache/Session/Serialize/Base64:
Apache/Session/Serialize/Base64,, *Note Apache/Session: Apache/Session,


File: pm.info,  Node: Apache/Session/Serialize/Sybase,  Next: Apache/Session/Serialize/UUEncode,  Prev: Apache/Session/Serialize/Storable,  Up: Module List

Use Storable to zip up persistent data and unpack/pack to put into Sybase-compatible image field
************************************************************************************************

NAME
====

   Apache::Session::Serialize::Sybase - Use Storable to zip up persistent
data and unpack/pack to put into Sybase-compatible image field

SYNOPSIS
========

     use Apache::Session::Serialize::Sybase;
     
     $zipped = Apache::Session::Serialize::Sybase::serialize($ref);
     $ref = Apache::Session::Serialize::Sybase::unserialize($zipped);

DESCRIPTION
===========

   This module fulfills the serialization interface of Apache::Session by
taking the data from Apache::Session::Serialize::Storable and modifying it
to work with Sybase IMAGE fields. Note that you do not need to quote these
values before inserting into the database, and that if you are using
DBI::Sybase, you cannot use the data in a placeholder. If you use
Apache::Session::Sybase as your session class, this will all get taken
care of.

AUTHOR
======

   Apache::Session::Serialize::Storable was written by Jeffrey William
Baker <jwbaker@acm.org>; the Sybase-specific data manipulation was written
by Mark Landry <mdlandry@lincoln.midcoast.com> for use in an earlier
version of Apache::Session::DBI::Sybase and placed here by Chris Winters
<chris@cwinters.com>.

SEE ALSO
========

   *Note Apache/Session/Serialize/Storable:
Apache/Session/Serialize/Storable,, *Note Apache/Session/Sybase:
Apache/Session/Sybase,


File: pm.info,  Node: Apache/Session/Serialize/UUEncode,  Next: Apache/Session/Store/DB_File,  Prev: Apache/Session/Serialize/Sybase,  Up: Module List

Use Storable and pack() to zip up persistent data
*************************************************

NAME
====

   Apache::Session::Serialize::UUEncode - Use Storable and pack() to zip
up persistent data

SYNOPSIS
========

     use Apache::Session::Serialize::UUEncode;
     
     $zipped = Apache::Session::Serialize::UUEncode::serialize($ref);
     $ref = Apache::Session::Serialize::UUEncode::unserialize($zipped);

DESCRIPTION
===========

   This module fulfills the serialization interface of Apache::Session. It
serializes the data in the session object by use of Storable's `nfreeze()'
and `thaw()' functions, and Perl's pack() and `unpack()'.  The serialized
data is ASCII text, suitable for storage in backing stores that don't
handle binary data gracefully, such as Postgres.

AUTHOR
======

   This module was written by Jeffrey William Baker <jwbaker@acm.org>.

SEE ALSO
========

   *Note Apache/Session/Serialize/Storable:
Apache/Session/Serialize/Storable,, *Note Apache/Session/Serialize/Base64:
Apache/Session/Serialize/Base64,, *Note Apache/Session: Apache/Session,


File: pm.info,  Node: Apache/Session/Store/DB_File,  Next: Apache/Session/Store/File,  Prev: Apache/Session/Serialize/UUEncode,  Up: Module List

Use DB_File to store persistent objects
***************************************

NAME
====

   Apache::Session::Store::DB_File - Use DB_File to store persistent
objects

SYNOPSIS
========

     use Apache::Session::Store::DB_File;
     
     my $store = new Apache::Session::Store::DB_File;
     
     $store->insert($ref);
     $store->update($ref);
     $store->materialize($ref);
     $store->remove($ref);

DESCRIPTION
===========

   This module fulfills the storage interface of Apache::Session.  The
serialized objects are stored in a Berkeley DB file using the DB_File Perl
module.  If DB_File works on your platform, this module should also work.

OPTIONS
=======

   This module requires one argument in the usual Apache::Session style.
The name of the option is FileName, and the value is the full path of the
database file to be used as the backing store.  If the database file does
not exist, it will be created.  Example:

     tie %s, 'Apache::Session::DB_File', undef,
        {FileName => '/tmp/sessions'};

AUTHOR
======

   This module was written by Jeffrey William Baker <jwbaker@acm.org>.

SEE ALSO
========

   *Note Apache/Session: Apache/Session,, *Note DB_File: DB_File,


File: pm.info,  Node: Apache/Session/Store/File,  Next: Apache/Session/Store/MySQL,  Prev: Apache/Session/Store/DB_File,  Up: Module List

Store persistent data on the filesystem
***************************************

NAME
====

   Apache::Session::Store::File - Store persistent data on the filesystem

SYNOPSIS
========

     use Apache::Session::Store::File;
     
     my $store = new Apache::Session::Store::File;
     
     $store->insert($ref);
     $store->update($ref);
     $store->materialize($ref);
     $store->remove($ref);

DESCRIPTION
===========

   This module fulfills the storage interface of Apache::Session.  The
serialized objects are stored in files on your filesystem.

OPTIONS
=======

   This module requires one argument in the usual Apache::Session style.
The name of the option is Directory, and the value is the full path of the
directory where you wish to place the files.  Example

     tie %s, 'Apache::Session::File', undef,
        {Directory => '/tmp/sessions'};

NOTES
=====

   All session objects are stored in the same directory.  Some
filesystems, such as Linux's ext2fs, have O(n) performance where n is the
number of files in a directory.  Other filesystems, like Sun's UFS, and
Linux's reiserfs, do not have this problem.  You should consider your
filesystem's performance before using this module to store many objects.

AUTHOR
======

   This module was written by Jeffrey William Baker <jwbaker@acm.org>.

SEE ALSO
========

   *Note Apache/Session: Apache/Session,


File: pm.info,  Node: Apache/Session/Store/MySQL,  Next: Apache/Session/Store/Oracle,  Prev: Apache/Session/Store/File,  Up: Module List

Store persistent data in a MySQL database
*****************************************

NAME
====

   Apache::Session::Store::MySQL - Store persistent data in a MySQL
database

SYNOPSIS
========

     use Apache::Session::Store::MySQL;
     
     my $store = new Apache::Session::Store::MySQL;
     
     $store->insert($ref);
     $store->update($ref);
     $store->materialize($ref);
     $store->remove($ref);

DESCRIPTION
===========

   Apache::Session::Store::MySQL fulfills the storage interface of
Apache::Session.  Session data is stored in a MySQL database.

SCHEMA
======

   To use this module, you will need at least these columns in a table
called 'sessions':

     id char(32)     # or however long your session IDs are.
     a_session text

   To create this schema, you can execute this command using the mysql
program:

     CREATE TABLE sessions (
        id char(32) not null primary key,
        a_session text
     );

   If you use some other command, ensure that there is a unique index on
the table's id column.

CONFIGURATION
=============

   The module must know what datasource, username, and password to use when
connecting to the database.  These values can be set using the options hash
(see Apache::Session documentation).  The options are:

DataSource
UserName
Password
   Example:

     tie %hash, 'Apache::Session::MySQL', $id, {
         DataSource => 'dbi:mysql:database',
         UserName   => 'database_user',
         Password   => 'K00l'
     };

   Instead, you may pass in an already-opened DBI handle to your database.

     tie %hash, 'Apache::Session::MySQL', $id, {
         Handle => $dbh
     };

AUTHOR
======

   This modules was written by Jeffrey William Baker <jwbaker@acm.org>

SEE ALSO
========

   *Note Apache/Session: Apache/Session,


File: pm.info,  Node: Apache/Session/Store/Oracle,  Next: Apache/Session/Store/Postgres,  Prev: Apache/Session/Store/MySQL,  Up: Module List

Store persistent data in a Oracle database
******************************************

NAME
====

   Apache::Session::Store::Oracle - Store persistent data in a Oracle
database

SYNOPSIS
========

     use Apache::Session::Store::Oracle;
     
     my $store = new Apache::Session::Store::Oracle;
     
     $store->insert($ref);
     $store->update($ref);
     $store->materialize($ref);
     $store->remove($ref);

DESCRIPTION
===========

   Apache::Session::Store::Oracle fulfills the storage interface of
Apache::Session. Session data is stored in a Oracle database.

SCHEMA
======

   To use this module, you will need at least these columns in a table
called 'sessions':

     id varchar2(32)     # or however long your session IDs are.
     a_session long

   To create this schema, you can execute this command using the sqlplus
program:

     CREATE TABLE sessions (
        id varchar2(32) not null primary key,
        a_session long
     );

   If you use some other command, ensure that there is a unique index on
the table's id column.

CONFIGURATION
=============

   The module must know what datasource, username, and password to use when
connecting to the database.  These values can be set using the options hash
(see Apache::Session documentation).  The options are DataSource, UserName,
and Password.

   Example:

     tie %hash, 'Apache::Session::Oracle', $id, {
         DataSource => 'dbi:Oracle:database',
         UserName   => 'database_user',
         Password   => 'K00l'
     };

   Instead, you may pass in an already-opened DBI handle to your database.

     tie %hash, 'Apache::Session::Oracle', $id, {
         Handle => $dbh
     };

   The last option is LongReadLen, which specifies the maximum size of the
session object.  If not supplied, the default maximum size is 8 KB.

AUTHOR
======

   This modules was written by Jeffrey William Baker <jwbaker@acm.org>

   A fix for the commit policy was contributed by Michael Schout
<mschout@gkg.net>

SEE ALSO
========

   *Note Apache/Session: Apache/Session,, `Apache::Session::Store::DBI' in
this node


File: pm.info,  Node: Apache/Session/Store/Postgres,  Next: Apache/Session/Store/Sybase,  Prev: Apache/Session/Store/Oracle,  Up: Module List

Store persistent data in a Postgres database
********************************************

NAME
====

   Apache::Session::Store::Postgres - Store persistent data in a Postgres
database

SYNOPSIS
========

     use Apache::Session::Store::Postgres;
     
     my $store = new Apache::Session::Store::Postgres;
     
     $store->insert($ref);
     $store->update($ref);
     $store->materialize($ref);
     $store->remove($ref);

DESCRIPTION
===========

   Apache::Session::Store::Postgres fulfills the storage interface of
Apache::Session. Session data is stored in a Postgres database.

SCHEMA
======

   To use this module, you will need at least these columns in a table
called 'sessions':

     id char(32)     # or however long your session IDs are.
     a_session text  # This has an ~8 KB limit :(

   To create this schema, you can execute this command using the psql
program:

     CREATE TABLE sessions (
        id char(32) not null primary key,
        a_session text
     );

   If you use some other command, ensure that there is a unique index on
the table's id column.

CONFIGURATION
=============

   The module must know what datasource, username, and password to use when
connecting to the database.  These values can be set using the options hash
(see Apache::Session documentation).  The options are:

DataSource
UserName
Password
   Example:

     tie %hash, 'Apache::Session::Postgres', $id, {
         DataSource => 'dbi:Pg:dbname=database',
         UserName   => 'database_user',
         Password   => 'K00l'
     };

   Instead, you may pass in an already-opened DBI handle to your database.

     tie %hash, 'Apache::Session::Postgres', $id, {
         Handle => $dbh
     };

AUTHOR
======

   This modules was written by Jeffrey William Baker <jwbaker@acm.org>

   A fix for the commit policy was contributed by Michael Schout
<mschout@gkg.net>

SEE ALSO
========

   *Note Apache/Session: Apache/Session,, `Apache::Session::Store::DBI' in
this node


File: pm.info,  Node: Apache/Session/Store/Sybase,  Next: Apache/Session/Sybase,  Prev: Apache/Session/Store/Postgres,  Up: Module List

Store persistent data in a Sybase database
******************************************

NAME
====

   Apache::Session::Store::Sybase - Store persistent data in a Sybase
database

SYNOPSIS
========

     use Apache::Session::Store::Sybase;
     
     my $store = new Apache::Session::Store::MySQL;
     
     $store->insert( $ref );
     $store->update( $ref );
     $store->materialize( $ref );
     $store->remove( $ref );

DESCRIPTION
===========

   Apache::Session::Store::Sybase fulfills the storage interface of
Apache::Session.  Session data is stored in a Sybase database.

SCHEMA
======

   To use this module, you will need at least these columns in a table
called 'sessions':

     id        CHAR(32)     # or however long your session IDs are.
     a_session IMAGE

   To create this schema, you can execute this command using the isql or
sqsh programs:

     CREATE TABLE sessions (
        id         CHAR(32) not null primary key,
        a_session  IMAGE
     )
     go

   If you use some other command, ensure that there is a unique index on
the id column of the table

CONFIGURATION
=============

   The module must know what datasource, username, and password to use when
connecting to the database.  These values can be set using the options hash
(see Apache::Session documentation).  The options are:

DataSource
UserName
Password
   Example:

     tie %hash, 'Apache::Session::Sybase', $id, {
         DataSource => 'dbi:Sybase:database=db;server=server',
         UserName   => 'database_user',
         Password   => 'K00l',
         Commit     => 1,
     };

   Instead, you may pass in an already-opened DBI handle to your database.

     tie %hash, 'Apache::Session::Sybase', $id, {
         Handle => $dbh
     };

   Additional arguments you can pass to the backing store are:

Commit - whether we should commit any changes; if you pass in an already-open database handle that has AutoCommit set to a true value, you do not need to set this. If you let Apache::Session::Store::Sybase create your database, handle, you must set this to a true value, otherwise, your changes will not be saved
textsize - the value we should pass to the 'set textsize ' command that sets the max size of the IMAGE field. Default is 32K (at least in Sybase ASE 11.9.2).
AUTHOR
======

   This module was based on *Note Apache/Session/Store/Oracle:
Apache/Session/Store/Oracle, which was written by Jeffrey William Baker
<jwbaker@acm.org>; it was modified by Chris Winters <chris@cwinters.com>
to work with Apache::Session 1.5+ with changes from earlier version of
Apache::Session::DBI::Sybase from Mark Landry
<mdlandry@lincoln.midcoast.com>.

SEE ALSO
========

   *Note Apache/Session: Apache/Session,


File: pm.info,  Node: Apache/Session/Sybase,  Next: Apache/Session/Win32,  Prev: Apache/Session/Store/Sybase,  Up: Module List

An implementation of Apache::Session
************************************

NAME
====

   Apache::Session::Sybase - An implementation of Apache::Session

SYNOPSIS
========

     use Apache::Session::Sybase;
     
     # if you want Apache::Session to open new DB handles:

     tie %hash, 'Apache::Session::Sybase', $id, {
        DataSource => 'dbi:Sybase:database=sessions;server=SYBASE',
        UserName   => $db_user,
        Password   => $db_pass,
        Commit     => 1,
     };

     # or, if your handle is already opened:

     tie %hash, 'Apache::Session::Sybase', $id, {
        Handle     => $dbh,
        Commit     => 0,
     };

DESCRIPTION
===========

   This module is an implementation of Apache::Session.  It uses the
Sybase backing store and the Null locking scheme.  See the example, and
the documentation for Apache::Session::Store::Sybase (also for the
parameters that get passed to the backing store along with the schema
necessary to save the sessions) and Apache::Session::Lock::Null for more
details.

AUTHOR
======

   This module was based on *Note Apache/Session/MySQL:
Apache/Session/MySQL, which was written by Jeffrey William Baker
<jwbaker@acm.org>; it was modified by Chris Winters <chris@cwinters.com>.

SEE ALSO
========

   *Note Apache/Session: Apache/Session,


File: pm.info,  Node: Apache/Session/Win32,  Next: Apache/SetWWWTheme,  Prev: Apache/Session/Sybase,  Up: Module List

Store client sessions in a global hash
**************************************

NAME
====

   Apache::Session::Win32 - Store client sessions in a global hash

SYNOPSIS
========

   use Apache::Session::Win32

DESCRIPTION
===========

   This is a Win32 storage subclass for Apache::Session.  Client state is
stored in a global hash.  Since Win32 Apache is multithreaded instead of
multiprocess, this actually works and is extremely quick.  Try `perldoc
Session' for more info.

INSTALLATION
============

   Follow the installation instructions from Apache::Session.

Environment
-----------

   Apache::Session::Win32 does not define any environment variables beyond
those defined by Apache::Session.

USAGE
=====

   This package complies with the API defined by Apache::Session.  For
details, please see that package's documentation.

   This package installs an entry on the Apache::Status menu which will
let you monitor sessions in real-time.

AUTHORS
=======

   Jeffrey Baker <jeff@godzilla.tamu.edu>, author and maintainer.

   Redistribute under the Perl Artistic License.


File: pm.info,  Node: Apache/SetWWWTheme,  Next: Apache/ShowRequest,  Prev: Apache/Session/Win32,  Up: Module List

Standard theme generation, including sidebars and navigation bars
*****************************************************************

NAME
====

   Apache::SetWWWTheme - Standard theme generation, including sidebars and
navigation bars

SYNOPSIS
========

   Within the httpd.conf or other apache configuration file:

   <Location /some/subtree>  SetHandler perl-script  PerlHandler
Apache::SetWWWTheme  PerlSetVar CONFIG_FILE /WWWroot/configfile
</Location>

REQUIREMENTS
============

   This module requires the Apache server, available from
http://www.apache.org; the Apache mod_perl module, which is available from
http://perl.apache.org, and the *module HTML::WWWTheme*, by Chad Hogan
(version 1.06 or greater) which may be found at CPAN.

DESCRIPTION
===========

   The SetWWWTheme module provides a server-based look-and-feel
configuration for an entire webtree. This module allows the server to
introduce a common navigation side-bar. It also provides mechanisms to
control the background color and background picture for a web page.

   This is implemented in a layered fashion. The module first reads the
server directives. This sets defaults, and decides what users may have
control over. Server directives may only be set by the webmasters.
Following these, the module reads local directives. These directives are
specified in a file, and will affect all files in that same directory, as
well as subdirectories underneath it. They are set at the user-level, and
so they are subject to the constraints imposed by the server directives.
Finally, the module parses the individual HTML files. Within a file, an
HTML authour may override the settings given in the local directives.
Again, these are subject to the constraints of the server directives.

   Please note that you are not required to change anything in your pages.
Your unmodified HTML will work just fine with this module. You are
required to make changes only if you wish to take advantage of the
features offered.

Server-level configuration
     At the server level, the webmaster has full access to all directives.
     These tags are specified in a file that is set in the httpd.conf
     file. If a webmaster would like his/her subtree to use the module, a
     <LOCATION> tag is used to activate the module. A PerlSetVar is used
     to tell the module the name of the configuration file. Here is an
     example:

          <Location />
          SetHandler perl-script
          PerlHandler Apache::SetWWWTheme
          PerlSetVar CONFIG_FILE /WWW/ServerConfig
          </Location>

     This example will use the module for the entire document tree. The
     CONFIG_FILE variable is used by the module to look for the file that
     controls the defaults for the entire site. Please note that
     CONFIG_FILE takes the full path to the file name on the file-system -
     do not list this file relative to the document root.

     The creation of printable versions of pages has been greatly
     simplified.  No longer is any configuration required - the page is
     automatically generated using a GET method.  Adding "?printable" to a
     URI will cause the page to be displayed in a printable manner, for
     example.

     The server-level configuration is primarily to set defaults. It is
     also to set restrictions on the configurability of the rest of the
     site. The server-level configuration decides whether or not
     individual authours will be permitted to, for example, change the
     background colour and background image of their web pages.

     Once again, the server configuration may make use of all of the
     following directives. The server then decides which of these the
     users may override.

     Local configuration

     Any authour may create a text file containing directives. The name of
     this file is set by the server directive @LOCALCONFIGFILE, with a
     default of LookAndFeelConfig. This file will affect all HTML files
     within that directory, as well as any subdirectories.  These
     directives are subject to the restrictions placed by the server-level
     configuration. This file is intended to be used to set common
     settings for a tree. For example, one may wish to set the background
     colour for an entire tree to white. Then a @BGCOLOR=#FFFFFF;
     directive in the local config file.  file will set this. Directives
     that are explicitly set override the server settings (if allowed).
     Otherwise, the server's settings persist.

     Individual file configuration

     This is the final level of configuration. Any authour may embed
     directives within a comment tag in an HTML file, as long as this tag
     appears before the <BODY> tag. Directives that are explicitly set
     override the local configuration and/or server settings (if allowed).
     Otherwise, the local settings and the server settings persist.

Module directives
     Directives consist of a series of tags within a text file, or within
     an html comment block before the <BODY> tag. Valid directive tags are
     always terminated with a semicolon. For tags that accept lists as
     values, elements are separated by commas.  Semicolons may be escaped
     within a tag.  Any semicolon preceded by a backslash will be
     considered text, and will not terminate the directive.  The final
     text will have the escaped semicolon replaced with a bare semicolon.

          @DIRECTIVE=Some string of text\; semicolons are escaped.;

     The above directive would set a value of "Some string of text;
     semicolons are escaped."

@ALINK
     HTML and local configuration subject to server configuration This tag
     is used to set the HTML BODY setting "alink". This is the active link
     color. It is subject to the setting of the @ALLOWBODYMOD tag. If
     @ALLOWBODYMOD is set to a non-zero value, @ALINK will set this
     attribute in the page. Here is an example:

          @ALINK=#FF00FF;

@ALLOWBODYMOD
     Server configuration only This tag is used to allow or disallow users
     from changing BODY elements. These include "alink", "vlink", "link",
     "text", "bgcolor", and "background" items using the directives
     @ALINK, @VLINK, @LINK,  @TEXT, @BGCOLOR and @BGPICTURE respectively.
     If it is set to a non-zero value, the user's directives will be read
     and used. Otherwise, user settings will be ignored, and only the
     server configuration values will be used in creating the <BODY> tag
     for the page. Here is an example:

          @ALLOWBODYMOD=1;

@ALLOWBGCOLOR `Deprecated' in this node
     Server configuration only This tag is used to allow or disallow users
     from changing the background colours of their pages. By default it is
     set to 0, meaning that users are not allowed to change their
     background colours. If it is not set to a non-zero value, only the
     server's @BGCOLOR directives will be used. This directive is
     deprecated. Administrators should use  @ALLOWBODYMOD instead. Here is
     an example:

          @ALLOWBGCOLOR=0;

@ALLOWBGPICTURE `Deprecated' in this node
     Server configuration only This tag is used to allow or disallow users
     from changing the background picture of their pages. By default it is
     set to 0, meaning that users are not allowed to change their
     background colours. If it is not set to a non-zero value, only the
     server's @BGPICTURE directives will be used. This directive is
     deprecated. Administrators should use  @ALLOWBODYMOD instead Here is
     an example:

          @ALLOWBGPICTURE=0;

@ALLOWNOSIDEBAR `Deprecated' in this node
     Server configuration only. *Use @ALLOWSIDEBARTOGGLE instead*.  This
     tag is used to allow or disallow users from turning on/off the left
     sidebar.  By default, it is set to 0, meaning that users are not
     allowed to toggle the sidebar.  If is not set to a true value (1 is
     recommended), only the server's @NOSIDEBAR directives will be used.
     Here is an example:

          @ALLOWNOSIDEBAR=0;

@ALLOWSIDEBARTOGGLE
     Server configuration only This tag is used to allow or disallow users
     from turning on/off the left sidebar. By default it is set to 0,
     meaning that users are not allowed to toggle the sidebar. If it is
     not set to a true value (1 is recommended), only the server's
     @NOSIDEBAR directives will be used. Here is an example:

          @ALLOWSIDEBARTOGGLE=0;

          =item @ALLOWSIDEBARMOD

     Server configuration only This tag is set to allow users to modify the
     characteristics of the sidebar. If this flag is set to anything
     non-zero, users may change the title at the top of the sidebar with
     the @SIDEBARTOP directive, the menu title above the menulinks with
     @SIDEBARMENUTITLE, the menu links with the @SIDEBARMENULINKS.  Users
     are also allowed to change the title of the "More links" section to
     something else.  They may also then switch the sidebar search box on
     or off with @SIDEBARSEARCHBOX. Here is an example:

          @ALLOWSIDEBARMOD=0;

@BGCOLOR
     HTML and local configuration subject to server configuration This tag
     may be used to set the background colour of a page (or a group of
     pages, in the case of local and server configuration). @BGCOLOR is
     subject to the server directive @ALLOWBGCOLOR. If @ALLOWBGCOLOR is not
     set to a non-zero value by server directives, the @BGCOLOR directive
     will have no effect whatsoever when used in local and HTML
     configuration. @BGCOLOR will always work when used in a server
     configuration. Here is an example:

     @BGCOLOR=#FFFFCC;

@BGPICTURE
     HTML and local configuration subject to server configuration This tag
     may be used to set the background image of a page (or a group of
     pages, in the case of a local and server configuration. @BGPICTURE is
     subject to the server directive @ALLOWBGPICTURE. If @ALLOWBGPICTURE
     is not set to a non-zero value by server directives, the @BGPICTURE
     directive will have no effect whatsoever when used in local and HTML
     configuration. @BGPICTURE will always work when used in a server
     configuration. Here is an example:

          @BGPICTURE=/images/paperbackground.gif;

@BLANKGIF
     Server configuration only This tag is used to specify the location of
     the blank.gif image file.  This image is a 1x1 transparent gif that
     is used to space the tables properly. This should be set to the path
     of the image file with respect to the server's document root. So, if
     the apache document root is /WWW and the file is
     /WWW/images/blank.gif then the proper use of this tag would be:

          @BLANKGIF=/images/blank.gif;

@BOTTOMBAR
     Valid in HTML, local configuration, and server configuration.  This
     tag is used to toggle a navigation bar at the bottom of the page.
     This bottom navigation bar contains the links defined with the
     @TOPBOTTOMLINKS directive.  If @BOTTOMBAR is set to something
     non-zero, it will appear in the document.

          @BOTTOMBAR=1;

@INFO
     Valid in HTML, local configuration, and server configuration This tag
     is used to customize the "More links" section in the left sidebar. To
     use this tag, supply a comma-separated list of valid HTML links
     terminated with a semi-colon. The links supplied will appear in the
     "More Links" section. Here is an example:

          @INFO=<A HREF="http://www.sun.com">Sun</a>,
          <A HREF="http://www.slashdot.org">Slashdot</a>;

@LINK
     Valid in HTML, local configuration, and server configuration This tag
     is used to set the HTML BODY setting "link". This is the normal link
     color. It is subject to the setting of the @ALLOWBODYMOD tag. If
     @ALLOWBODYMOD is set to a non-zero value, @LINK will set this
     attribute in the page. Here is an example:

          @LINK=#FFFFFF;

@LOCALCONFIGFILE
     Valid only in server configuration.  This directive tells the module
     what file to look for when it looks for local configuration files.
     The default is LookAndFeelConfig.  It may be set to any valid
     filename.

          @LOCALCONFIGFILE=LOOKANDFEEL;

@MORELINKSTITLE
     Valid in HTML, local configuration, and server configuration, subject
     to the server's configuration (@ALLOWSIDEBARMOD must be on in the
     server's configuration in order for local and HTML directives to be
     obeyed).

@NAVBAR
     Valid in HTML, local configuration, and server configuration This tag
     gives the switch setting for the top and bottom navigation bars. The
     top and bottom navigation bars are also known as the
     "previous/up/next" bars. If this is set to 0, the top and bottom bars
     are not shown. If this is set to a non-zero value (1 is recommended)
     then the bars will be shown. If this switch is non-zero, it is
     recommended that the @NEXTLINK, @UPLINK, and @LASTLINK directives be
     set. Here is an example:

          @NAVBAR=0;

@NEXTLINK, @LASTLINK, @UPLINK
     Valid in HTML, local configuration, and server configuration These
     tags control the behaviour of the top navigation bar. These tags
     should be set in conjunction with the @NAVBAR directive. They should
     contain valid text and linking information. Here is an example:

          @NEXTLINK=<A HREF="/pages/page3.html">Page 3</a>;
          @UPLINK=<A HREF="/pages/toc.html">Table of contents</a>;
          @LASTLINK=<A HREF="/pages/page1.html">Page 1</a>;

@NOSIDEBAR
     HTML and local configuration subject to server configuration This tag
     may be used to turn off the left sidebar by setting it to a non-zero
     value. This tag is subject to the server directive  @ALLOWNOSIDEBAR.
     If the server configuration has not set the  @ALLOWNOSIDEBAR to a
     non-zero value, the @NOSIDEBAR directive will have no effect
     whatsoever. Here is an example:

          @NOSIDEBAR=1;

@SIDEBARCOLOR
     HTML and local configuration subject to server configuration This tag
     is used to set the color of the sidebar. Local and HTML configuration
     is subject to the server directive @ALLOWSIDEBARMOD. Here is an
     example:

          @SIDEBARCOLOR=#CCCCCC;

@SIDEBARWIDTH
     HTML and local configuration subject to server configuration.  This
     tag is used to set the width of the sidebar in pixels.  Local and
     HTML configuration is subject to the server directive
     @ALLOWSIDEBARMOD.

          @SIDEBARWIDTH=150;

@SEARCHTEMPLATE
     HTML and local configuration subject to server configuration This tag
     is used to set the searchbox template.  It should be a fully-contained
     HTML chunk that interfaces to the apropriate cgi binary (or whatever
     you want).

          @SEARCHTEMPLATE=
          <B>Search JAC</B><BR><HR>
          <DIV align="center">
          <form method="POST" action="/cgi-bin/isearch">
          <input name="SEARCH_TYPE" type=hidden  value="ADVANCED">
          <input name="HTTP_PATH" type=hidden value="/WWW">
          <input name="DATABASE" type=hidden value="webindex">
          <input name="FIELD_1" type=hidden value="FULLTEXT">
          <input name="WEIGHT_1" type=hidden value= "1">
          <input name="ELEMENT_SET" type=hidden value="TITLE">
          <input name="MAXHITS" type=hidden value="50">
          <input name="ISEARCH_TERM" size="14" border="0">
          </form>
          </DIV>
          <H6><a href="http://www.yoursite.edu/search.html">More searching....</a></h6>;

     Don't forget to terminate the template with a semicolon!

@SIDEBARMENULINKS
     HTML and local configuration subject to server configuration This tag
     is used to set the main menulinks. It is effective in local and HTML
     configuration if and only if the server configuration has set
     @ALLOWSIDEBARMOD. It takes a comma-separated list of links, terminated
     by a semicolon. Here is an example:

          @SIDEBARMENULINKS=<A HREF="/WWW/stuff">Some Directory</A>,
          <A HREF="/WWW/morestuff">Another Directory</A>;

@SIDEBARMENUTITLE
     HTML and local configuration subject to server configuration This tag
     is used to set the title above the menulinks. It is effective in
     local and HTML configuration if and only if the server configuration
     has set @ALLOWSIDEBARMOD to a non-zero value. Here is an example of
     its use:

          @SIDEBARMENUTITLE=My Divisions;

@SIDEBARSEARCHBOX
     HTML and local configuration subject to server configuration This tag
     is a switch that determines whether or not the sidebar will contain
     the search box. If it is set to a non-zero value, the search box will
     appear on the sidebar. It is effective in local and HTML
     configuration if and only if the server configuration has set
     @ALLOWSIDEBARMOD to a non-zero value. Here is an example of its use:

          @SIDEBARSEARCHBOX=0;

@SIDEBARTOP
     HTML and local configuration subject to server configuration This tag
     is used to set the title at the top of the sidebar. It is effective
     in local and HTML configuration if and only if the server
     configuration has set @ALLOWSIDEBARMOD to a non-zero value. Here is an
     example of its use:

          @SIDEBARTOP=<A HREF="/">Joint Astronomy Centre</a>;

@TEXT
     HTML and local configuration subject to server configuration This tag
     is used to set the HTML BODY setting "text". This is the normal text
     color. It is subject to the setting of the @ALLOWBODYMOD tag. If
     @ALLOWBODYMOD is set to a non-zero value, @TEXT will set this
     attribute in the page. Here is an example:

          @TEXT=#000000;

@TOPBAR
     This tag is valid in HTML, local, and server configuration.  It is
     used to toggle the existence of a top navigation bar that contains
     the links specified in the @TOPBOTTOMLINKS directive.  It is similar
     to the @BOTTOMBAR directive, except it works at the top of the page.
     Setting @TOPBAR to a non-zero value will turn this navigation tool on
     in the final produced document.

          @TOPBAR=1;

@TOPBOTTOMLINKS
     This is valid in HTML, local, and server configuration.  It is a
     comma-separated list of navigation links that will be place in the
     top and bottom bars as toggled by the @TOPBAR and @BOTTOMBAR
     directives.

          @TOPBOTTOMLINKS=<A HREF="/">JAC</a>, <A HREF="/JCMT">JCMT</a>;

@VLINK
     This tag is used to set the HTML BODY setting "vlink". This is the
     visited-link color. It is subject to the setting of the @ALLOWBODYMOD
     tag. If @ALLOWBODYMOD is set to a non-zero value, @VLINK will set this
     attribute in the page. Here is an example:

          @VLINK=#FF00FF;

SEE ALSO
========

   *Note HTML/WWWTheme: HTML/WWWTheme,

AUTHOR
======

   Copyright (C) 2000 Chad Hogan (chogan@uvastro.phys.uvic.ca).  Copyright
(C) 2000 Joint Astronomy Centre

   All rights reserved.  Apache::SetWWWTheme is free software; you can
redistribute it and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation; either version 2 or
(at your option) any later version.

   Apache::SetWWWTheme is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
Public License for more details.

   You should have received a copy of the GNU General Public License along
with Apache::SetWWWTheme; see the file gpl.txt.  If not, write to the Free
Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.


File: pm.info,  Node: Apache/ShowRequest,  Next: Apache/SimpleReplace,  Prev: Apache/SetWWWTheme,  Up: Module List

Show phases and module participation
************************************

NAME
====

   Apache::ShowRequest - Show phases and module participation

SYNOPSIS
========

     <Location /show>
      SetHandler perl-script
      PerlHandler Apache::ShowRequest
     </Location>

DESCRIPTION
===========

   This module will run a request using the given PATH_INFO as the uri.
Each request phase will be run in order, along with each module handler.
The module response code will be printed or undef if the module does not
participate in the given phase.  Apache::ShowRequest stops running module
handlers for the given phase just as Apache would.  For example, if any
returns a code other than OK or *DECLINED*.  Or, phases which only allow
one module to return OK, e.g. URI translate.  The content response phase
is not run, but possible modules are listed as defined.

AUTHOR
======

   Doug MacEachern

SEE ALSO
========

   Apache::Module(3), Apache(3), mod_perl(3)


File: pm.info,  Node: Apache/SimpleReplace,  Next: Apache/SizeLimit,  Prev: Apache/ShowRequest,  Up: Module List

a simple template framework
***************************

NAME
====

   Apache::SimpleReplace - a simple template framework

SYNOPSIS
========

   httpd.conf:

     <Location /someplace>
        SetHandler perl-script
        PerlHandler Apache::SimpleReplace

     PerlSetVar  TEMPLATE "/templates/format1.html"
     PerlSetVar  REPLACE "the content goes here"
      </Location>

   Apache::SimpleReplace is Filter aware, meaning that it can be used
within an Apache::Filter framework without modification.  Just include the
directive

   PerlSetVar Filter On

   and modify the PerlHandler directive accordingly.  As of version 0.06,
Apache::SimpleReplace requires Apache::Filter 1.013 or better - users of
Apache::Filter 1.011 or less should use version 0.05.

DESCRIPTION
===========

   Apache::SimpleReplace provides a simple way to insert content within an
established template for uniform content delivery.  While the end result
is similar to Apache::Sandwich, Apache::SimpleReplace offers several
advantages.

     o It does not use separate header and footer files, easing the
       pain of maintaining syntactically correct HTML in seperate files.

     o It is Apache::Filter aware, thus it can both accept content from
       other content handlers as well as pass its changes on to others
       later in the chain.

EXAMPLE
=======

   /usr/local/apache/templates/format1.html:

     <html>
         <head><title>your template</title></head>
                 <title>your template</title>
         <body bgcolor="#778899">
                 some headers, banners, whatever...
                 <p>
     the content goes here
                 </p>
                 <p>some footers, modification dates, whatever...
         </body>
     </html>

     httpd.conf:

     <Location /someplace>
        SetHandler perl-script
        PerlHandler Apache::SimpleReplace Apache::SSI

     PerlSetVar  TEMPLATE "templates/format1.html"
     PerlSetVar  REPLACE "the content goes here"
     PerlSetVar  Filter On
       </Location>

   Now, a request to http://localhost/someplace/foo.html will insert the
contents of foo.html in place of "the content goes here" in the
format1.html template and pass those results to Apache::SSI The result is
a nice and tidy way to control any custom headers, footers, background
colors, or images in a single html file.

NOTES
=====

   As of 0.02, TEMPLATE is no longer relative to the ServerRoot.

   REPLACE defaults to "|", though it may be any character or string you
like - metacharacters are disabled in the search, so sorry, no regex for
now...

   Verbose debugging is enabled by setting $Apache::SimpleReplace::DEBUG=1
or greater.  To turn off all debug information, set your apache LogLevel
directive above info level.

   This is alpha software, and as such has not been tested on multiple
platforms or environments.  It requires PERL_LOG_API=1, PERL_FILE_API=1,
and maybe other hooks to function properly.

FEATURES/BUGS
=============

   If Apache::SimpleReplace finds more than one match for REPLACE in the
template, it will insert the request for the first occurrence only.  All
other replacement strings will just be stripped from the template.

   Currently, Apache::SimpleReplace will return DECLINED if the
content-type of the request is not 'text/html'.

SEE ALSO
========

   perl(1), mod_perl(3), Apache(3), Apache::Filter(3)

AUTHOR
======

   Geoffrey Young <geoff@cpan.org>

COPYRIGHT
=========

   Copyright (c) 2000, Geoffrey Young.  All rights reserved.

   This module is free software.  It may be used, redistributed and/or
modified under the same terms as Perl itself.


