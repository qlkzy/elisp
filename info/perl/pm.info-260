This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Net/LDAP/Control/Paged,  Next: Net/LDAP/Control/Sort,  Prev: Net/LDAP/Control,  Up: Module List

LDAPv3 Paged results control object
***********************************

NAME
====

   Net::LDAP::Control::Paged - LDAPv3 Paged results control object

SYNOPSIS
========

     use Net::LDAP;
     use Net::LDAP::Control::Paged;
     use Net::LDAP::Constant qw( LDAP_CONTROL_PAGED );

     $ldap = Net::LDAP->new( "ldap.mydomain.eg" );

     $page = Net::LDAP::Control::Paged->new( size => 100 );

     @args = ( base     => "cn=subnets,cn=sites,cn=configuration,$BASE_DN",
     	   scope    => "subtree",
     	   filter   => "(objectClass=subnet)",
     	   callback => \&process_entry, # Call this sub for each entry
     	   control  => [ $page ],
     );

     my $cookie;
     while(1) {
       # Perform search
       my $mesg = $ldap->search( @args );

     # Only continue on LDAP_SUCCESS
     $mesg->code and last;

     # Get cookie from paged control
     my($resp)  = $mesg->control( LDAP_CONTROL_PAGED ) or last;
     $cookie    = $resp->cookie or last;

     # Set cookie in paged control
     $page->cookie($cookie);
      }

     if ($cookie) {
       # We had an abnormal exit, so let the server know we do not want any more
       $page->cookie($cookie);
       $page->size(0);
       $ldap->search( @args );
     }

DESCRIPTION
===========

   `Net::LDAP::Control::Paged' provides an interface for the creation and
manipulatrion of objects that represent the `pagedResultsControl' as
described by RFC-2696.

CONSTRUCTOR ARGUMENTS
=====================

   In addition to the constructor arguments described in
`Net::LDAP::Control|Net::LDAP::Control' in this node the following are
provided.

cookie
     The value to use as the cookie. This is not normally set when an
     object is created, but is set from the cookie value returned bu the
     server. This associates a search with a previous search, so the
     server knows to return the page of entries following the entries it
     returned the previous time.

size
     The page size that is required. This is the maximum number of entries
     that the server will return to the search request.

METHODS
=======

   As with `Net::LDAP::Control|Net::LDAP::Control' in this node each
constructor argument described above is also avaliable as a method on the
object which will return the current value for the attribute if called
without an argument, and set a new value for the attribute if called with
an argument.

SEE ALSO
========

   `Net::LDAP|Net::LDAP' in this node,
`Net::LDAP::Control|Net::LDAP::Control' in this node,
http://info.internet.isi.edu/in-notes/rfc/files/rfc2696.txt

AUTHOR
======

   Graham Barr <gbarr@pobox.com>

   Please report any bugs, or post any suggestions, to the perl-ldap
mailing list <perl-ldap-dev@lists.sourceforge.net>

COPYRIGHT
=========

   Copyright (c) 2000 Graham Barr. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.


File: pm.info,  Node: Net/LDAP/Control/Sort,  Next: Net/LDAP/Control/SortResult,  Prev: Net/LDAP/Control/Paged,  Up: Module List

Server Side Sort (SSS) control object
*************************************

NAME
====

   Net::LDAP::Control::Sort - Server Side Sort (SSS) control object

SYNOPSIS
========

     use Net::LDAP::Control::Sort;
     use Net::LDAP::Constant qw(LDAP_CONTROL_SORTRESULT);

     $sort = Net::LDAP::Control::Sort->new(
       order => "cn -phone"
     );

     $mesg = $ldap->search( @args, control => [ $sort ]);

     ($resp) = $mesg->control( LDAP_CONTROL_SORTRESULT );

     print "Results are sorted\n" if $resp and !$resp->result;

DESCRIPTION
===========

   `Net::LDAP::Control::Sort' is a sub-class of
`Net::LDAP::Control|Net::LDAP::Control' in this node.  It provides a class
for manipulating the LDAP Server Side Sort (SSS) request control
`1.2.840.113556.1.4.473' as defined in RFC-2891

   If the server supports sorting, then the response from a search
operation will include a sort result control. This control is handled by
`Net::LDAP::Control::SortResult|Net::LDAP::Control::SortResult' in this
node.

CONSTRUCTOR ARGUMENTS
=====================

order
     A string which defines how entries may be sorted. It consists of
     multiple directives, spearated by whitespace. Each directive
     describes how to sort entries using a single attribute. If two
     entries have identical attributes, then the next directive in the
     list is used.

     Each directive specifies a sorting order as follows

          -attributeType:orderingRule

     The leading - is optional, and if present indicates that the sorting
     order should be reversed. `attributeType' is the attribute name to
     sort by. `orderingRule' is optional and indicates the rule to use for
     the sort and should be valid for the given `attributeType'.

     Any one attributeType should only appear once in the sorting list.

     Examples

          "cn"         sort by cn using the default ordering rule for the cn attribute
          "-cn"        sort by cn using the reverse of the default ordering rule
          "age cn"     sort by age first, then by cn using the default ordering rules
          "cn:1.2.3.4" sort by cn using the ordering rule defined as 1.2.3.4

METHODS
=======

   As with `Net::LDAP::Control|Net::LDAP::Control' in this node each
constructor argument described above is also avaliable as a method on the
object which will return the current value for the attribute if called
without an argument, and set a new value for the attribute if called with
an argument.

SEE ALSO
========

   `Net::LDAP|Net::LDAP' in this node,
`Net::LDAP::Control::SortResult|Net::LDAP::Control::SortResult' in this
node, `Net::LDAP::Control|Net::LDAP::Control' in this node,
http://info.internet.isi.edu/in-notes/rfc/files/rfc2891.txt

AUTHOR
======

   Graham Barr <gbarr@pobox.com>

   Please report any bugs, or post any suggestions, to the perl-ldap
mailing list <perl-ldap-dev@lists.sourceforge.net>

COPYRIGHT
=========

   Copyright (c) 1999-2000 Graham Barr. All rights reserved. This program
is free software; you can redistribute it and/or modify it under the same
terms as Perl itself.


File: pm.info,  Node: Net/LDAP/Control/SortResult,  Next: Net/LDAP/Control/VLV,  Prev: Net/LDAP/Control/Sort,  Up: Module List

Server Side Sort (SSS) result control object
********************************************

NAME
====

   Net::LDAP::Control::SortResult - Server Side Sort (SSS) result control
object

SYNOPSIS
========

     use Net::LDAP::Control::Sort;
     use Net::LDAP::Constant qw(LDAP_CONTROL_SORTRESULT);
     use Net::LDAP::Util qw(ldap_error_name);

     $sort = Net::LDAP::Control::Sort->new(
       order => "cn -age"
     );

     $mesg = $ldap->search( @args, control => [ $sort ]);

     ($resp) = $mesg->control( LDAP_CONTROL_SORTRESULT );

     if ($resp) {
       if ($resp->result) {
         my $attr = $resp->attr;
         print "Problem sorting, ",ldap_error_name($resp->result);
         print " ($attr)" if $attr;
         print "\n";
       }
       else {
         print "Results are sorted\n";
       }
     }
     else {
       print "Server does not support sorting\n";
     }

DESCRIPTION
===========

   `Net::LDAP::Control::SortResult' is a sub-class of
`Net::LDAP::Control|Net::LDAP::Control' in this node.  It provides a class
for manipulating the LDAP sort request control `1.2.840.113556.1.4.474' as
defined in RFC-2891

   A sort result control will be returned by the server in response to a
search with a Server Side Sort control. If a sort result control is not
returned then the user may assume that the server does not support sorting
and the results are not sorted.

CONSTRUCTOR ARGUMENTS
=====================

attr
     If result indicates that there was a problem with sorting and that
     problem was due to one of the attributes specified in the sort
     control. attr is set to the name of the attribute causing the problem.

result
     This is the result code that describes if the sort operation was
     sucessful. If will be one of the result codes describes below.

METHODS
=======

   As with `Net::LDAP::Control|Net::LDAP::Control' in this node each
constructor argument described above is also avaliable as a method on the
object which will return the current value for the attribute if called
without an argument, and set a new value for the attribute if called with
an argument.

RESULT CODES
============

   Possible results from a sort request are listed below. See
`Net::LDAP::Constant|Net::LDAP::Constant' in this node for a definition of
each.

LDAP_SUCCESS
LDAP_OPERATIONS_ERROR
LDAP_TIMELIMIT_EXCEEDED
LDAP_STRONG_AUTH_REQUIRED
LDAP_ADMIN_LIMIT_EXCEEDED
LDAP_NO_SUCH_ATTRIBUTE
LDAP_INAPPROPRIATE_MATCHING
LDAP_INSUFFICIENT_ACCESS
LDAP_BUSY
LDAP_UNWILLING_TO_PERFORM
LDAP_OTHER
SEE ALSO
========

   `Net::LDAP|Net::LDAP' in this node,
`Net::LDAP::Control::Sort|Net::LDAP::Control::Sort' in this node,
`Net::LDAP::Control|Net::LDAP::Control' in this node,
http://info.internet.isi.edu/in-notes/rfc/files/rfc2891.txt

AUTHOR
======

   Graham Barr <gbarr@pobox.com>

   Please report any bugs, or post any suggestions, to the perl-ldap
mailing list <perl-ldap-dev@lists.sourceforge.net>

COPYRIGHT
=========

   Copyright (c) 1999-2000 Graham Barr. All rights reserved. This program
is free software; you can redistribute it and/or modify it under the same
terms as Perl itself.


File: pm.info,  Node: Net/LDAP/Control/VLV,  Next: Net/LDAP/Control/VLVResponse,  Prev: Net/LDAP/Control/SortResult,  Up: Module List

LDAPv3 Virtual List View control object
***************************************

NAME
====

   Net::LDAP::Control::VLV - LDAPv3 Virtual List View control object

SYNOPSIS
========

     use Net::LDAP;
     use Net::LDAP::Control::VLV;
     use Net::LDAP::Constant qw( LDAP_CONTROL_VLVRESPONSE );

     $ldap = Net::LDAP->new( "ldap.mydomain.eg" );

     # Get the first 20 entries
     $vlv  = Net::LDAP::Control::VLV->new(
     	   before  => 0,	# No entries from before target entry
     	   after   => 19,	# 19 entries after target entry
     	   content => 0,	# List size unknown
     	   offset  => 1,	# Target entry is the first
     	 );
     $sort = Net::LDAP::Control::Sort->new( sort => 'cn' );

     @args = ( base     => "o=Ace Industry, c=us",
     	   scope    => "subtree",
     	   filter   => "(objectClass=inetOrgPerson)",
     	   callback => \&process_entry, # Call this sub for each entry
     	   control  => [ $vlv, $sort ],
     );

     $mesg = $ldap->search( @args );

     # Get VLV response control
     ($resp)  = $mesg->control( LDAP_CONTROL_VLVRESPONSE ) or die;
     $vlv->response( $resp );

     # Set the control to get the last 20 entries
     $vlv->end;

     $mesg = $ldap->search( @args );

     # Get VLV response control
     ($resp)  = $mesg->control( LDAP_CONTROL_VLVRESPONSE ) or die;
     $vlv->response( $resp );

     # Now get the previous page
     $vlv->scroll_page( -1 );

     $mesg = $ldap->search( @args );

     # Get VLV response control
     ($resp)  = $mesg->control( LDAP_CONTROL_VLVRESPONSE ) or die;
     $vlv->response( $resp );

     # Now page with first entry starting with "B" in the middle
     $vlv->before(9);	# Change page to show 9 before
     $vlv->after(10);	# Change page to show 10 after
     $vlv->assert("B");	# assert "B"
     
     $mesg = $ldap->search( @args );

DESCRIPTION
===========

   `Net::LDAP::Control::VLV' provides an interface for the creation and
manipulation of objects that represent the Virtual List View as described
by draft-ietf-ldapext-ldapv3-vlv-03.txt.

   When using a Virtual List View control in a search, it must be
accompanied by a sort control. See
`Net::LDAP::Control::Sort|Net::LDAP::Control::Sort' in this node

CONSTRUCTOR ARGUMENTS
=====================

   In addition to the constructor arguments described in
`Net::LDAP::Control|Net::LDAP::Control' in this node the following are
provided.

after
     Set the number of entries the server should return from the list after
     the target entry.

assert
     Set the assertion value user to locate the target entry. This value
     should be a legal value to compare with the first attribute in the
     sort control that is passed with the VLV control. The target entry is
     the first entry in the list which is greater than or equal the assert
     value.

before
     Set the number of entries the server should return from the list
     before the target entry.

content
     Set the number of entries in the list. On the first search this value
     should be set to zero. On subsequent searches it should be set to the
     length of the list, as returned by the server in the VLVResponse
     control.

context
     Set the context identifier.  On the first search this value should be
     set to zero. On subsequent searches it should be set to the context
     value returned by the server in the VLVResponse control.

offset
     Set the offset of the target entry.

METHODS
-------

   As with `Net::LDAP::Control|Net::LDAP::Control' in this node each
constructor argument described above is also avaliable as a method on the
object which will return the current value for the attribute if called
without an argument, and set a new value for the attribute if called with
an argument.

   The offset and assert attributes are mutually exclusive. Setting one or
the other will cause previous values set by the other to be forgotten. The
content attribute is also associated with the offset attribute, so setting
assert will cause any content value to be forgotten.

end
     Set the target entry to the end of the list. This method will change
     the before and after attributes so that the target entry is the last
     in the page.

response VLV_RESPONSE
     Set the attributes in the control as per VLV_RESPONSE. VLV_RESPONSE
     should be a control of type
     `Net::LDAP::Control::VLVResponse|Net::LDAP::Control::VLVResponse' in
     this node returned from the server. response will populate the
     context, offset and content attibutes of the control with the values
     from VLV_RESPONSE. Because this sets the offset attribute, any
     previous setting of the assert attribute will be forgotten.

scroll NUM
     Move the target entry by NUM entries. A positive NUM will move the
     target entry towards the end of the list and a negative NUM will move
     the target entry towards the start of the list. Returns the index of
     the new target entry, or undef if the current target is identified by
     an assertion.

     scroll may change the before and after attributes if the scroll value
     would cause the page to go off either end of the list. But the page
     size will be maintained.

scroll_page NUM
     Scroll by NUM pages. This method simple calculates the current page
     size and calls scroll with `NUM * $page_size'

start
     Set the target entry to the start of the list. This method will
     change the before and after attributes to the the target entry is the
     first entry in the page.

SEE ALSO
========

   `Net::LDAP|Net::LDAP' in this node,
`Net::LDAP::Control|Net::LDAP::Control' in this node,
`Net::LDAP::Control::Sort|Net::LDAP::Control::Sort' in this node,
`Net::LDAP::Control::VLVResponse|Net::LDAP::Control::VLVResponse' in this
node

AUTHOR
======

   Graham Barr <gbarr@pobox.com>

   Please report any bugs, or post any suggestions, to the perl-ldap
mailing list <perl-ldap-dev@lists.sourceforge.net>

COPYRIGHT
=========

   Copyright (c) 2000 Graham Barr. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.


File: pm.info,  Node: Net/LDAP/Control/VLVResponse,  Next: Net/LDAP/DSML,  Prev: Net/LDAP/Control/VLV,  Up: Module List

LDAPv3 Virtual List View server response
****************************************

NAME
====

   Net::LDAP::Control::VLVResponse - LDAPv3 Virtual List View server
response

SYNOPSIS
========

   See `Net::LDAP::Control::VLV|Net::LDAP::Control::VLV' in this node

DESCRIPTION
===========

   `Net::LDAP::Control::VLVResponse' is a sub-class of
`Net::LDAP::Control|Net::LDAP::Control' in this node.  It provides a class
for manipulating the LDAP Virtual List View Response control

   If the server supports Virtual List Views, then the response from a
search operation will include a VLVResponse control.

CONSTRUCTOR ARGUMENTS
=====================

   In addition to the constructor arguments described in
`Net::LDAP::Control|Net::LDAP::Control' in this node the following are
provided.

content
     An estimate of the number of entries in the complete list. This value
     should be used in any subsequent Virtual List View control using the
     same list.

context
     An arbitary value which is used to associate subsequent requests with
     the request which this control is a response for. This value should
     be copied by the client into the Virtual List View control for any
     subsequent search that uses the same list.

result
     A result code indicating the result of the Virtual List View request.
     This may be any of the codes listed below.

target
     The list offset of the target entry.

METHODS
=======

   As with `Net::LDAP::Control|Net::LDAP::Control' in this node each
constructor argument described above is also avaliable as a method on the
object which will return the current value for the attribute if called
without an argument, and set a new value for the attribute if called with
an argument.

RESULT CODES
============

   Possible results from a sort request are listed below. See
`Net::LDAP::Constant|Net::LDAP::Constant' in this node for a definition of
each.

LDAP_SUCCESS
LDAP_OPERATIONS_ERROR
LDAP_TIMELIMIT_EXCEEDED
LDAP_ADMIN_LIMIT_EXCEEDED
LDAP_INSUFFICIENT_ACCESS
LDAP_BUSY
LDAP_UNWILLING_TO_PERFORM
LDAP_OTHER
LDAP_SORT_CONTROL_MISSING
LDAP_INDEX_RANGE_ERROR
SEE ALSO
========

   `Net::LDAP|Net::LDAP' in this node,
`Net::LDAP::Control|Net::LDAP::Control' in this node,
http://info.internet.isi.edu/in-notes/rfc/files/rfc2696.txt

AUTHOR
======

   Graham Barr <gbarr@pobox.com>

   Please report any bugs, or post any suggestions, to the perl-ldap
mailing list <perl-ldap-dev@lists.sourceforge.net>

COPYRIGHT
=========

   Copyright (c) 2000 Graham Barr. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.


File: pm.info,  Node: Net/LDAP/DSML,  Next: Net/LDAP/Entry,  Prev: Net/LDAP/Control/VLVResponse,  Up: Module List

A DSML Writer and Reader for Net::LDAP
**************************************

NAME
====

   Net::LDAP::DSML - A DSML Writer and Reader for Net::LDAP

SYNOPSIS
========

     use Net::LDAP;
     use Net::LDAP::DSML;
     use IO::File;

     my $server = "localhost";
     my $file = "testdsml.xml";
     my $ldap = Net::LDAP->new($server);
     
     $ldap->bind();

     my $dsml = Net::LDAP::DSML->new();

     my $file = "testdsml.xml";

     my $io = IO::File->new($file,"w") or die ("failed to open $file as filehandle.$!\n");
     $dsml->open($io) or die ("DSML problems opening $file.$!\n"); ;

     #or

     open (IO,">$file") or die("failed to open $file.$!");

     $dsml->open(*IO) or die ("DSML problems opening $file.$!\n");

     my $mesg = $ldap->search(
                              base     => 'o=airius.com',
                              scope    => 'sub',
                              filter   => 'ou=accounting',
                              callback => sub {
     					 my ($mesg,$entry) =@_;
     					 $dsml->write($entry) if (ref $entry eq 'Net::LDAP::Entry');
     				       }
                               );

     die ("search failed with ",$mesg->code(),"\n") if $mesg->code();

     $dsml->write($schema);
     $dsml->finish();

     print "Finished printing DSML\n";
     print "Starting to process DSML\n";

     $dsml = new Net::LDAP::DSML();
     $dsml->process($file, entry => \&processEntry);

     #future when schema support is available will be
     #$dsml->process($file, entry => \&processEntry, schema => \&processSchema);

     sub processEntry {
       my $entry = shift;
     
       $entry->dump();
     }

DESCRIPTION
===========

   Directory Service Markup Language (DSML) is the XML standard for
representing directory service information in XML.

   At the moment this module only reads and writes DSML entry entities. It
cannot process any schema entities because schema entities are processed
differently than elements.

   Eventually this module will be a full level 2 consumer and producer
enabling you to give you full DSML conformance.

   The module uses callbacks to improve performance (at least the
appearance of improving performance ;) and to reduce the amount of memory
required to parse large DSML files. Every time a single entry or schema is
processed we pass the Net::LDAP object (either an Entry or Schema object)
to the callback routine.

AUTHOR
======

   Mark Wilcox mark@mwjilcox.com

SEE ALSO
========

   `Net::LDAP|Net::LDAP' in this node, `XML::Parser|XML::Parser' in this
node

COPYRIGHT
=========

   Copyright (c) 2000 Graham Barr and Mark Wilcox. All rights reserved.
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


File: pm.info,  Node: Net/LDAP/Entry,  Next: Net/LDAP/Examples,  Prev: Net/LDAP/DSML,  Up: Module List

An LDAP entry object
********************

NAME
====

   Net::LDAP::Entry - An LDAP entry object

SYNOPSIS
========

     use Net::LDAP;

     $ldap = Net::LDAP->new($host);
     $mesg = $ldap->search(@search_args);

     my $max = $mesg->count;
     for($i = 0 ; $i < $max ; $i++) {
       my $entry = $mesg->entry($i);
       foreach my $attr ($entry->attributes) {
         print join("\n ",$attr, $entry->get_value($attr)),"\n";
       }
     }

     # or

     use Net::LDAP::Entry;
     
     $entry = Net::LDAP::Entry->new;
     
     $entry->add(
       attr1 => 'value1',
       attr2 => [qw(value1 value2)]
     );
     
     $entry->delete( 'unwanted' );
     
     $entry->replace(
       attr1 => 'newvalue'
       attr2 => [qw(new values)]
     );
     
     $entry->update( $ldap ); # update directory server

DESCRIPTION
===========

   The *Net::LDAP::Entry* object represents a single entry in the
directory.  It is a container for attribute-value pairs.

   A *Net::LDAP::Entry* object can be used in two situations. The first and
probably most common use is in the result of a search to the directory
server.

   The other is where a new object is created locally and then a single
command is sent to the directory server to add, modify or replace an
entry. Entries for this purpose can also be created by reading an LDIF
file with the `Net::LDAP::LDIF|Net::LDAP::LDIF' in this node module.

CONSTRUCTOR
===========

new
     Create a new entry object with the changetype set to `'add''

METHODS
=======

add ( ATTR => VALUE [, ATTR2 => VALUE2 ... ] )
     Add one or more new attributes to the entry. Each value must be a
     scalar variable or a reference to an array. The values given will be
     added to the values which already exist for the given attributes.

          $entry->add( 'sn' => 'Barr');

          $entry->add( 'street' => [ '1 some road','nowhere']);

     NOTE: these changes are local to the client and will not appear on
     the directory server until the update method is called.

attributes ( [ OPTIONS ] )
     Return a list of attributes that this entry has.

     OPTIONS is a list of name/value pairs, valid options are :-

    nooptions
          If TRUE, return a list of the attribute names excluding any
          options. For example for the entry

               name: Graham Barr
               name;en-us: Bob
               jpeg;binary: **binary data**

          the return list would be `( 'name', 'jpeg' )'.

changetype ( [ TYPE ] )
     If called without arguments it returns the type of operation that
     would be performed when the update method is called. If called with
     an argument it will set the changetype to TYPE.

     Possible values for TYPE are

    add
          The update method will call the add method on the client object,
          which will result in the entry being added to the directory
          server.

    delete
          The update method will call the delete method on the client
          object, which will result in the entry being removed from the
          directory server.

    modify
          The update method will call the modify method on the client
          object, which will result in any changes that have been made
          locally being made to the entry on the directory server.

delete ( [ ATTR [, ATTR2 ... ]] )
     Delete the given attributes from the entry. If no attributes are
     passed then the next call to update will cause the entry to be
     deleted from the server.

     NOTE: these changes are local to the client and will not appear on
     the directory server until the update method is called.

dn ( [ DN ] )
     Set or get the DN for the entry. With no arguments dn will return the
     current DN. If an argument is given then it will change the DN for
     the entry and return the previous value.

     NOTE: these changes are local to the client and will not appear on
     the directory server until the update method is called.

exists ( ATTR )
     Returns TRUE if the entry has an attribute called ATTR.

get_value ( ATTR [, OPTIONS ] )
     Get the values for the attribute ATTR. In a list context returns all
     values for the given attribute, or the empty list if the attribute
     does not exist. In a scalar context returns the first value for the
     attribute or undef if the attribute does not exist.

     The return value may be changed by OPTIONS, which is a list of name
     => value pairs, valid options are :-

    alloptions
          If TRUE then the result will be a hash reference. The keys of
          the hash will be the options and the hash value will be the
          values for those attributes.  For example if an entry had

               name: Graham Barr
               name;en-us: Bob

          Then a get for attribute "name" with alloptions set would return

               {
                 ''       => [ 'Graham Barr' ],
                 ';en-us' => [ 'Bob' ]
               }

    asref
          If TRUE then the result will be a reference to an array
          containing all the values for the attribute, or undef if the
          attribute does not exist.

     NOTE: In the interest of performance the array references returned by
     get_value are references to structures held inside the entry object.
     These values and thier contents should *NOT* be modified directly.

replace ( ATTR => VALUE [, ATTR2 => VALUE2 ... ] )
     Similar to add, except that the values given will replace any values
     that already exist for the given attributes.

     NOTE: these changes are local to the client and will not appear on
     the directory server until the update method is called.

update ( CLIENT )
     Update the directory server with any changes that have been made
     locally to the attributes of this entry. This means any calls that
     have been made to add, replace or delete since the last call to
     changetype or update was made.

     This method *cannot* be used to modify the DN of the entry on the
     server, for that see the moddn method in `Net::LDAP|Net::LDAP' in
     this node.

     CLIENT is a Net::LDAP object where the update will be sent to.

     The result will be an object of type
     `Net::LDAP::Message|Net::LDAP::Message' in this node as returned by
     the add, modify or delete method called on CLIENT.

SEE ALSO
========

   `Net::LDAP|Net::LDAP' in this node, `Net::LDAP::LDIF|Net::LDAP::LDIF'
in this node

AUTHOR
======

   Graham Barr <gbarr@pobox.com>.

   Please report any bugs, or post any suggestions, to the perl-ldap
mailing list <perl-ldap-dev@lists.sourceforge.net>.

COPYRIGHT
=========

   Copyright (c) 1997-2000 Graham Barr. All rights reserved. This program
is free software; you can redistribute it and/or modify it under the same
terms as Perl itself.


File: pm.info,  Node: Net/LDAP/Examples,  Next: Net/LDAP/FAQ,  Prev: Net/LDAP/Entry,  Up: Module List

PERL LDAP by Example
********************

NAME
====

   Net::LDAP::Examples - PERL LDAP by Example

DESCRIPTION
===========

   The following examples are of course PERL code, found to work with the
Net::LDAP modules.

   The intent of this document is to give the reader a *cut and paste*
jump start to getting an LDAP application working.

   Below you will find snippets of code that should work as-is with only a
small amount of work to correct any variable assignments and LDAP
specifics, e.g. Distinguished Name Syntax, related to the user's own
implementation.

   The Standard Operating Proceedure that is followed here is:

  1. Package		- use Net::LDAP

  2. Initialization	- new

  3. Binding		- bind

  4. Operation	- add modify moddn search

  5. Processing	- displaying data from a search

  6. Error		- displaying error information

  7. Unbinding	- unbind
        Look to each of these for a snippet of code to meet your needs.

   *What is not covered in these examples at this time:*

abandon and compare methods
callback subroutines
CODE
====

PACKAGE - Definitions
---------------------

     use Net::LDAP qw(:all);			# use for all code

     use Net::LDAP::Util qw(ldap_error_name
                            ldap_error_text) ; 	# use for Error handling

INITIALIZING
------------

     $ldap = Net::LDAP->new("yourLDAPhost.yourCompany.com") or die "$@";

BINDING
-------

     $mesg = $ldap->bind( version => 3 );    	# use for searches

     $mesg = $ldap->bind("$userToAuthenticate",
                          password => "$passwd",
                          version => 3 );		# use for changes/edits

     # see your LDAP administrator for information concerning the
     # user authentication setup at your site.

OPERATION - Generating a SEARCH
-------------------------------

     sub LDAPsearch
     	{
     	  my ($ldap,$searchString,$attrs,$base) = @_ ;

     # if they don't pass a base... set it for them

     if (!$base ) { $base = "o=mycompany, c=mycountry"; }

     # if they don't pass an array of attributes...
     # set up something for them

     if (!$attrs ) { $attrs = ['cn','mail' ]; }

     my $result = $ldap->search (
           base    => "$base",
           scope   => "sub",
           filter  => "$searchString",
           attrs   =>  $attrs
           );

     }

     my @Attrs = ();		# request all available attributes
     				# to be returned.

     my $result = LDAPsearch($ldap,"sn=*",\@Attrs);

PROCESSING - Displaying SEARCH Results
--------------------------------------

     #------------
     #
     # Accessing the data as if in a structure
     #  i.e. Using the "as_struct"  method
     #

     my $href = $result->as_struct;

     # get an array of the DN names

     my @arrayOfDNs  = keys %$href ;        # use DN hashes

     # process each DN using it as a key

     foreach (@arrayOfDNs) {
        print $_,"\n";
        my $valref = $$href{$_};

     # get an array of the attribute names
     # passed for this one DN.
     my @arrayOfAttrs = sort keys %$valref; #use Attr hashes

     my $attrName;
     foreach $attrName (@arrayOfAttrs) {

     # skip any binary data: yuck!
                  next if ( $attrName =~ /;binary$/ );

     # get the attribute value (pointer) using the
         	     # attribute name as the hash
     my $attrVal =  @$valref{$attrName} ;
        print "\t $attrName: @$attrVal \n";
     }
                print "#-------------------------------\n";
      	   # End of that DN
              }
           #
           #  end of as_struct method
           #
           #--------

     #------------
     #
     # handle each of the results independently
     # ... i.e. using the walk through method
     #
     	my @entries = $result->entries;

     my $entr ;
     foreach $entr ( @entries )
        {
         print "DN: ",$entr->dn,"\n";
         #my @attrs = sort $entr->attributes;

     my $attr;
                foreach $attr ( sort $entr->attributes ){
     		#skip binary we can't handle
         next if ( $attr =~ /;binary$/ );
         print "  $attr : ",$entr->get_value($attr),"\n";
         }

     #print "@attrs\n";
         print "#-------------------------------\n";
                }

     #
     # end of walk through method
     #------------

OPERATION - Modifying entries
-----------------------------

     #
     #   Modify
     #
     #  for each of the modifies below you'll need to supply
     #  a full DN (Distinguished Name) for the $dn variable.
     #   example:
     #    cn=Jo User,ou=person,o=mycompany,c=mycountry
     #
     #   I would recommend doing a search (listed above)
     #   then use the dn returned to populate the $dn variable.

     #
     #  Do we only have one result returned from the search?

     if ( $result->count != 1 ) { exit ; }  # Nope.. exit

     my $dn = $entries[0]->dn;	   # yes.. get the DN

     #######################################
     #
     #   MODIFY using a HASH
     #

     my %ReplaceHash = ( keyword => "x", proxy => "x" );

     my $result = LDAPmodifyUsingHash($ldap,$dn, \%ReplaceHash );

     sub LDAPmodifyUsingHash
       {
       my ($ldap,$dn,$whatToChange ) = @_ ;
       my $result = $ldap->modify($dn,
                              replace => { %$whatToChange }
                                );
       return ($result );
       }

     #######################################
     #
     #   MODIFY using a ARRAY List
     #

     my @ReplaceArrayList = [  'keyword', "xxxxxxxxxx" ,
                                'proxy' , "yyyyyyyyyy"   ];

     my $result = LDAPmodifyUsingArrayList($ldap,$dn, \@ReplaceArrayList );

     sub LDAPmodifyUsingArrayList
       {
       my ($ldap,$dn,$whatToChange ) = @_ ;
       my $result = $ldap->modify($dn,
                        changes => [
                        replace => @$whatToChange
                        ]
                        );
        return ($result );
       }

     #######################################
     #
     #   MODIFY using a ARRAY
     #

     my @ReplaceArray	= (  'keyword', "xxxxxxxxxx" ,
                               'proxy' , "yyyyyyyyyy"   );

     my $result = LDAPmodifyUsingArray($ldap,$dn, \@ReplaceArray );

     sub LDAPmodifyUsingArray
       {
       my ($ldap,$dn,$whatToChange ) = @_ ;
       my $result = $ldap->modify($dn,
                        changes => [
                        replace => [ @$whatToChange ]
                        ]
                        );
        return ($result );
       }

     #######################################
     #
     #   MODIFY an existing record using 'Changes'
     #    (or combination of add/delete/replace)
     #

     my @whatToChange ;
     my @ReplaceArray ;
     my @DeleteArray ;
     my @AddArray ;

     push @AddArray, 'cn',"me myself";
     push @ReplaceArray, 'sn','!@#$%^&*()__+Hello THere';
     push @ReplaceArray, 'cn',"me myself I";
     push @DeleteArray, 'cn',"me myself";

     if ( $#ReplaceArray > 0 ) {
         push @whatToChange, 'replace' ;
         push @whatToChange, \@ReplaceArray  ;
        }
     if ( $#DeleteArray > 0 ) {
         push @whatToChange, 'delete' ;
         push @whatToChange, \@DeleteArray  ;
        }
     if ( $#AddArray > 0 ) {
         push @whatToChange, 'add' ;
         push @whatToChange, \@AddArray  ;
        }

     $result = LDAPmodify($ldap,$dn, \@whatToChange );

     sub LDAPmodify
     {
        my ($ldap,$dn,$whatToChange) = @_ ;

     my $result = $ldap->modify($dn,
                      changes => [
                      @$whatToChange
                      ]
                      );
          return ($result );
         }

OPERATION - Changing the RDN
----------------------------

     my $newRDN = "cn=Joseph User";

     my $result = LDAPrdnChange($ldap,$dn,$newRDN,"archive");

     sub LDAPrdnChange
     {
      my ($ldap,$dn,$whatToChange,$action) = @_ ;

     my $branch ;

     #
     # if the archive action is selected, move this
     # entry to another place in the directory.
     #
     if ( $action =~ /archive/i )  {
        $branch = "ou=newbranch,o=mycompany,c=mycountry";
        }

     #
     # use the 'deleteoldrdn' to keep from getting
     # multivalues in the NAMING attribute.
     # in most cases that would be the 'CN' attribute
     #
     my $result = $ldap->moddn($dn,
               newrdn => $whatToChange,
               deleteoldrdn => '1',
               newsuperior => $branch
               );

     return ($result );

     }

OPERATION - Adding a new Record
-------------------------------

     my $DNbranch = "ou=bailiwick, o=mycompany, c=mycountry";

     #
     # check with your Directory Schema or Administrator
     # for the correct objectClass... I'm sure it'll be different
     #
     my $CreateArray = [
     	     objectClass => ["top","person","organizationalPerson"],
                       cn => "Jane User",
                      uid => "0000001",
                       sn => "User",
                	    mail => "JaneUser@mycompany.com"
                 ];

     #
     # create the  new DN to look like this
     # " cn=Jo User + uid=0000001 , ou=bailiwick, o=mycompany, c=mycountry "
     #
     # NOTE: this DN  MUST be changed to meet your implementation
     #

     my $NewDN =  "@$CreateArray[2]=".
                  "@$CreateArray[3]+".
                  "@$CreateArray[4]=".
                  "@$CreateArray[5],".
                  $DNbranch;

     LDAPentryCreate($ldap,$NewDN,$CreateArray);

     #
     # CreateArray is a reference to an anonymous array
     # you have to dereference it in the  subroutine it's
     # passed to.
     #

     sub LDAPentryCreate
     {

     my ($ldap,$dn,$whatToCreate) = @_ ;
     my $result = $ldap->add( $dn, attrs => [  @$whatToCreate ] );
     return ($result );

     }

ERROR - Retrieving and Displaying ERROR information
---------------------------------------------------

     use Net::LDAP::Util qw( ldap_error_name
                         ldap_error_text) ;

     if ( $result->code ) {
       #
       # if we've got an error... record it
       #
       LDAPerror("Searching",$result);
       }

     sub LDAPerror
       {
         my ($from,$mesg) = @_;
         print "Return code: ",$mesg->code ;
         print "\tMessage: ", ldap_error_name($mesg->code);
         print " :",        ldap_error_text($mesg->code);
         print "MessageID: ",$mesg->mesg_id;
         print "\tDN: ",$mesg->dn;

     #---
       	# Programmer note:
       	#
       	#  "$mesg->error"  DOESN'T work!!!
       	#
       	#print "\tMessage: ", $mesg->error;
       	#-----

     }

UNBIND
------

     $ldap->unbind;

LDAP SCHEMA RETRIEVAL
=====================

   The following code snippet shows how to retrieve schema information.

   The first procedure is to initialize a new LDAP object using the same
procedures as listed at the beginning of this document.

   The second procedure is to bind to your directory server.  Some servers
may require authentication to retrieve the schema from the directory
server.  This procedure is listed at the beginning of this document too.

   After a successful bind you are ready to retrieve the schema
information.  You do this by initializing a schema object.

     $schema = $ldap->schema();

   In this case Net::LDAP will attempt to determine the dn under which the
schema can be found. First it will look for the attribute
`subschemasubentry' in the root DSE. If that cannot be found then it will
default to the assumption of `cn=schema'

   Alternatively you can specify the dn where the schema is to be found
with

     $schema = $ldap->schema(dn => $dn);

   Once we have a dn to search for, Net::LDAP will fetch the schema entry
with

     $mesg = $self->search(
       base   => $dn,
       scope  => 'base',
       filter => '(objectClass=*)',
     );

   Once the schema object has been initialized, schema methods are used to
retrieve the data.  There are a number of ways this can be done.
Information on the schema methods can be found in the Net::LDAP::Schema
pod documentation.

   The following is a code snippet showing how to get and display
information about returned attributes.

     #
     # Get the attributes
     #

     @attributes = $schema->attributes();
     #
     # Display the attributes
     #

     foreach ( @attributes)
     {
           print "attributeType\n";

     #
     # Get and display the oid number of the objectclass.
     #
     $oid = $schema->name2oid( "$_" );

     #
     # Get the various items associated with
     # this attribute.
     #
     @attribute_items = $schema->items( "$oid" );
     #
     # Read returned item names and display their associated data.
     #
     foreach $value ( @attribute_items )
     {
        # We know we are dealing with an attribute, ignore type.
        next if ( $value eq 'type');  # Type  holds oc or at
        #
        # Read the data for this item of this oid.
        #
        @item = $schema->item( $oid, $value );
        #
        # Some item names have no data, the name itself is data.
        # This type of item has 1 as data.
        #
        if ( defined(@item) && $item[0] == 1 )
        {
        print "\t$value\n";
        next;
        }
        if ( defined(@item) && $#item >= 0 )
        {
        print "\t$value:  @item\n";
        }

     }
       }

   The process is the basically the same for getting objectClass
information.  Where schema->attributes() is used, substitute
schema->objectclasses().  From that point on the process is the same for
both objectClasses and attributes.

BUGS
====

   None known, but there may be some

AUTHOR  (of this document)
==========================

   Russell Biggs <rgb@ticnet.com>

COPYRIGHT
=========

   All rights to this document are hereby relinquished to Graham Barr.


File: pm.info,  Node: Net/LDAP/FAQ,  Next: Net/LDAP/Filter,  Prev: Net/LDAP/Examples,  Up: Module List

Frequently Asked Questions about Net::LDAP
******************************************

NAME
====

   Net::LDAP::FAQ - Frequently Asked Questions about Net::LDAP

SYNOPSIS
========

     perldoc Net::LDAP::FAQ

DESCRIPTION
===========

   This document serves to answer the most frequently asked questions on
both the perl-ldap Mailing List and those sent to Graham Barr.

GENERAL
=======

What is perl-ldap ?
-------------------

   perl-ldap is the distribution name. The perl-ldap distribution contains
the Net::LDAP modules.

Why another perl LDAP implementation ?
--------------------------------------

   perl-ldap's goal is to be as portable as possible. It does this by
being implemented completely in perl. So basically anywhere that perl runs
perl-ldap will run. This is not true for other implementations which
require a C compiler.

Where can I get it ?
--------------------

   Perl-ldap is available from CPAN. You will find it in the
authors/id/GBARR directory. Alternatively you can download the latest
version from  http://www.cpan.org/search?dist=perl-ldap

Is there a web page for perl-ldap ?
-----------------------------------

   Yes there is at http://perl-ldap.sourceforge.net/

Is there a mailing list ?
-------------------------

   Yes there is at perl-ldap-dev@lists.sourceforge.net

   You can subscribe to this list at
http://lists.sourceforge.net/mailman/listinfo/perl-ldap-dev

Is the mailing list archived ?
------------------------------

   Archives of messages since we switched to using sourceforge can be
found at

     http://www.geocrawler.com/lists/3/SourceForge/3482/0/

   Please be aware that the geocrawler system munges code that is in the
email messages.  In particular, apostrophes (') are turned into back ticks
(`) and newlines escapes (\n) are removed (and probably other escapes as
well).

   There is also an archive of the perl-ldap mailing list at
http://www.xray.mpe.mpg.de/mailing-lists/perl-ldap/ which also has
messages from before the move to sourceforge.  The xray archive does not
munge email messages.

Is there any online documentation ?
-----------------------------------

   Yes. perl-ldap has online documentation at
http://perl-ldap.sourceforge.net/ which will have the latest documentation
available.

Is there a public CVS repository ?
----------------------------------

   Yes, it is located at sourceforge.net

Can I get perl-ldap from the public CVS repository?
---------------------------------------------------

   Yes, any one can pull perl-ldap from the public CVS repository on
sourceforge.net.

   There are several ways this can be done.

   Web;

   You can download it from SourceForge by following the release link:

   The 2 lines in the following example should be put together as one
continuous line.  Example;

     http://download.sourceforge.net/perl-ldap/perl-ldap-0.20.tar.gz

   CVS;

   You can download latest version of perl-ldap from SourceForge by
executing a anonymous CVS "get" command.  When the password is requested
press the enter key.

   The 2 lines in the following example should be put together as one
continuous line.  Example;

     cvs -d:pserver:anonymous@cvs.perl-ldap.sourceforge.net:/cvsroot/perl-ldap

   Web page;

   Most of the time there is a URL link on the perl-ldap home page on
sourceforge that points to the latest released version of perl-ldap.  Due
to the fact that humans must update the web page to point to a new release
it sometimes does not get updated as quickly as it should.

What is CVS.
------------

   "CVS" is an acronym for the "Concurrent Versions System".  CVS is a
"Source Control" or "Revision Control" tool designed to keep track of
source changes made by groups of developers working on the same files,
allowing them to stay in sync with each other as each individual chooses.

LDAP AND DIRECTORY TERMINOLOGY.
===============================

   In order to help the user understand the perl-ldap module better some
key LDAP terminology is defined here.

What is a directory.
--------------------

   A directory is a special purpose database that usually contains typed
information such as text strings, binary data, or X.509 certificates.

What is LDAP.
-------------

   LDAP stands for Lightweight Directory Access Protocol.  The word
*Protocol* is the key word in the definition given in the preceding
sentence, LDAP is *NOT* hardware or software.  It is a protocol that
defines how a client and server will communicate with one another.

   The Lightweight Directory Access Protocol is defined in a series of
Requests For Comments, better known as RFC(s).  The RFCs can be found on
the Internet.  A very good source for all of the LDAP RFCs can be found in
the OpenLDAP, http://www.OpenLDAP.org/ , software bundle that can be
downloaded free of charge from the Internet.  Some of the more important
RFC numbers are RFC 1777 for LDAPv2 and RFC 2251 for LDAPv3.

What is a LDAP Directory.
-------------------------

   In the strictest terms of the definition there is no such thing as a
LDAP directory.  To be practical about this situation every day directory
professionals refer to their directory as " a LDAP directory" because it
is easy to say and it does convey the type of protocol used to communicate
with their directory.  Using this definition a LDAP directory is a
directory whose server software conforms to the Lightweight Directory
Access Protocol when communicating with a client.

What is an Entry.
-----------------

   The traditional directory definition of a directory object is called an
Entry. Entries are composed of attributes that contain the information to
be recorded about an object.

   Another non-traditional definition of a directory object is called a
record.  Some directory professionals prefer to use this definition
because of the confusion that sometimes results when using the term Entry.

What is a Distinguished Name.
-----------------------------

   Every entry in a directory, whether it is X.500 or LDAP, has a
Distinguished Name, or DN.  It is a unique Entry identifier through out
the complete directory.  No two Entries can have the same DN within the
same directory.

   Example of a DN:

     cn=Road Runner, ou=bird, dc=carton, dc=com
     ou=bird, dc=carton, dc=com
     dc=carton, dc=com
     dc=com

What is a Relative Distinguished Name.
--------------------------------------

   Every Entry in a directory, whether it is X.500 or LDAP, has a
Distinguished Name which is made up of a sequence of Relative
Distinguished Names, or RDNs.  The sequences of RDNs are separated by
commas (,) or semi-colons (;).  There can be more than one identical RDN
in a directory, but they must be in different bases, or branches, of the
directory.

   Example of a DN:

     cn=Road Runner,ou=bird,dc=carton,dc=com

     RDNs of the proceeding DN:
     RDN => cn=Road Runner
     RDN => ou=bird
     RDN => dc=carton
     RDN => dc=com

   The RDNs are delimited by a comma.

What is a Naming RDN.
---------------------

   Example of a DN:

     cn=Road Runner,ou=bird,dc=carton,dc=com

     Naming RDN of the proceeding DN:

     cn=Road Runner

   Most of the time when directory professionals refer to the RDN of an
entry, this is the RDN that they are referring to.

What is a search base.
----------------------

   A search base is a Distinguished Name that is the starting point of
search queries.

   Example of a DN:

     cn=Road Runner,ou=bird,dc=carton,dc=com

   Possible search base(s) for the proceeding DN:

     Base => cn=Road Runner,ou=bird,dc=carton,dc=com
     Base => ou=bird,dc=carton,dc=com
     Base => dc=carton,dc=com
     Base => dc=com

   Setting the search base to the lowest possible branch of the directory
will speed up searches considerably.

What is an attribute.
---------------------

   The entry(s) in a directory are composed of attributes that contain
information about the object.  Each attribute has a type and can contain
one or more values.  The attribute type is associated with a syntax that
defines what kind of information can be stored in the attributes values
and controls how directory operations on the attribute behave.  What
attributes are required and allowed in a entry is controlled by content
rules that are defined on a per-server basis or by a special attribute in
each entry called an objectClass.

PERL-LDAP INSTALLATION
======================

How do I install perl-ldap ?
----------------------------

   To install the modules that are in the perl-ldap distribution follow the
same steps that you would for most other distributions found on CPAN, that
is

     # replace 0.13 with the version you have

     gunzip perl-ldap-0.13.tar.gz
     tar xvf perl-ldap-0.13.tar
     cd perl-ldap-0.13
     
     perl Makefile.PL
     make
     make test
     make install

But I do not have make, how can I install perl-ldap ?
-----------------------------------------------------

   Well as luck would have it the modules in perl-ldap do not do anything
complex, so a simple copy is enough to install. First run

     perl -V

   This will output information about the version of perl you have
installed. Near the bottom you will find something like

     @INC:
       /usr/local/perl/perl5.005/lib/5.00502/sun4-solaris
       /usr/local/perl/perl5.005/lib/5.00502
       /usr/local/perl/perl5.005/lib/site_perl/5.005/sun4-solaris
       /usr/local/perl/perl5.005/lib/site_perl/5.005
       .

   This is a list of directories that perl searches when it is looking for
a module. The directory you need is the site_perl directory, but without
the system architecture name, in this case it is
`/usr/local/perl/perl5.005/lib/site_perl/5.005'. The files required can
then be installed with

     # replace 0.13 with the version you have

     gunzip perl-ldap-0.13.tar.gz
     tar xvf perl-ldap-0.13.tar
     cd perl-ldap-0.13/lib

     cp * /usr/local/perl/perl5.005/lib/site_perl/5.005

What other modules will I need ?
--------------------------------

   perl-ldap does use other modules. Some are required, but some are
optional (ie required to use certain features)

Convert::ASN1
     This module is required for perl-ldap to work.

     You can obtain the latest release from
     http://search.cpan.org/search?module=Convert::ASN1

Digest::MD5
     This module is optional. It also requires a C compiler when
     installing.  You only need to install Digest::MD5 if you want to use
     the SASL authentication method.

     You can obtain the latest release from
     http://search.cpan.org/search?module=Digest::MD5

URI::ldap
     This module is optional. You only need to install URI::ldap if you are
     going to need to parse ldap referrals. `Net::LDAP|Net::LDAP' in this
     node does not do this automatically yet, so this module is not used
     by perl-ldap.

     You can obtain the latest release from
     http://search.cpan.org/search?module=URI::ldap

OpenSSL and IO::Socket::SSL for Net::LDAPS
     If you want to use Net::LDAP::LDAPS you will need this module and the
     OpenSSL software package.

     You can obtain the latest release of IO::Socket::SSL from
     http://search.cpan.org/search?module=IO::Socket::SSL

     You can obtain the latest release of OpenSSL from
     http://www.openssl.org/

     If you are using a Linux system, many of the distributions have RPM
     packages that you can install.  Use your favorite web search engine
     to find the package that you need.

XML::Parser
     If you want to use Net::LDAP::DSML you will need this module.

     You can obtain the latest release from
     http://search.cpan.org/search?module=XML::Parser

USING NET::LDAP
===============

How do I connect to my server ?
-------------------------------

   The connection to the server is created when you create a new Net::LDAP
object, e.g.

     $ldap = Net::LDAP->new($server);

Net::LDAP->new sometimes returns undef, why ?
---------------------------------------------

   The constructor will return undef if there was a problem connecting to
the specified server. Any error message will be available in $@

How can I tell when the server returns an error, bind() always returns true ?
-----------------------------------------------------------------------------

   Most methods in Net::LDAP return a
`Net::LDAP::Message|Net::LDAP::Message' in this node object, or a sub-class
of that. This object will hold the results from the server, including and
result code.

   So, for example, to determine the result of the bind operation.

     $mesg = $ldap->bind( $dn, password => $passwd);
     
     if ( $mesg->code ) {
       # Handle error codes here
     }

I did a search on my directory using the 'search' method. Where did the results go ?
------------------------------------------------------------------------------------

   Your search results are stored in a 'search object' container.
Consider the following:

     use Net::LDAP;

     $ldap = Net::LDAP->new('ldap.acme.com') or die "$@";
     $mesg = $ldap->search(
                           base   => "o=acme.com",
                           filter => "uid=jsmith",
                          );

   $mesg is a search object container. It is a reference blessed into the
`Net::LDAP::Search|Net::LDAP::Search' in this node package. By calling
methods on this object you can obtain information about the result and
also the individual entries.

   The first thing to check is if the search was successful. This is done
with with the method `$mesg-'code>. This method will return the status code
that the server returned. A success will yield a zero value, but there are
other values, some of which could also be considered a success.  See
`Net::LDAP::Constant|Net::LDAP::Constant' in this node

     use Net::LDAP::Util qw(ldap_error_text);

     die ldap_error_text($mesg->code)
       if $mesg->code;

   There are two ways in which you can access the entries. You can access
then with an index or you can treat the container like a stack and shift
each entry in turn. For example

     # as an array

     # How many entries were returned from the search
     my $max = $mesg->count;

     for( my $index = 0 ; $index < $max ; $index++) {
       my $entry = $mesg->entry($index);
       # ...
     }

     # or as a stack
     
     while( my $entry = $mesg->shift_entry) {
       # ...
     }

   In each case $entry is an entry object container. It is a reference
blessed into the `Net::LDAP::Entry|Net::LDAP::Entry' in this node package.
By calling methods on this object you can obtain information about the
entry.

   For example, to obtain the DN for the entry

     $dn = $entry->dn;

   To obtain the attributes that a given entry has

     @attrs = $entry->attributes;

   And to get the list of values for a given attribute

     @values = $entry->get( 'sn' );

   And to get the first of the values for a given attribute

     $values = $entry->get( 'cn' );

   One thing to remember is that attribute names are case insensitive, so
'sn', 'Sn', 'sN' and 'SN' are all the same.

   So, if you want to print all the values for the attribute `'ou'' then
this is as simple as

     foreach ($entry->get_value( 'ou' )) {
         print $_,"\n";
       }

   Now if you just want to print all the values for all the attributes you
can do

     foreach my $attr ($entry->attributes) {
       foreach my $value ($entry->get_value($attr)) {
         print $attr, ": ", $value, "\n";
       }
     }

How do I limit the scope of a directory search.
-----------------------------------------------

   You limit the scope of a directory search by setting the scope
parameter of search request.  Consider the following:

     use Net::LDAP;

     $ldap = Net::LDAP->new('ldap.acme.com') or die "$@";
     $mesg = $ldap->search(
                           base   => "o=acme.com",
                           scope  => 'sub',
                           filter => "uid=jsmith",
                          );

   Values for the scope parameter are as follows.

     base  Search only the base object.
     
     one   Search the entries immediately below the base
           object.
     
     sub   Search the whole tree below the base object.
           This is the default.

USING NET::LDAPS
================

Using a potentially encrypted (SSL) network connection, how do I connect to my server?
--------------------------------------------------------------------------------------

   This class is a subclass of Net::LDAP so all the normal Net::LDAP
methods can be used with a Net::LDAPS object; see the documentation for
Net::LDAP to find out how to query a directory server using the LDAP
protocol.

   The connection to the server is created when you create a new Net::LDAPS
object, e.g.

     $ldaps = Net::LDAPS->new($server,
                              port => '10000',
                              verify => 'require',
                              capath => '/usr/local/cacerts/',
                              );

   There are additional options to the LDAPS new method and several
additional methods are included in the LDAPS object class.

   For further information and code examples read the LDAPS module
documentation;  perldoc Net::LDAPS

USING LDAP GROUPS.
==================

What are LDAP groups.
---------------------

   LDAP groups are a collection of distinguished names (DN) that are
listed in an attribute called member.  One *important note* to remember is
that a group can be a collection of groups.  This does *NOT* imply that
the subgroups will be flattened into one big group.

   Two scripts for working with groups are available in the contrib
directory.  They are isMember.pl and printMembers.pl.

How do you format a filter to search for entries whose 'member' attribute has a particular value?
-------------------------------------------------------------------------------------------------

   Asking for (member=*) is OK - the directory uses the equality matching
rule which is defined for the member attribute.

   Asking for (member=c*) is not OK - there is no defined substring
matching rule for the member attribute. That's because the member values
are *not* strings, but distinguished names. There is no substring matching
rule for DNs, see RFC 2256 section 5.50.

   What you have to do is get the results of (member=*) and then select
the required results from the returned values. You need to do this using
knowledge of the string representation of DNs defined in RFC 2253, which
is important because the same DN can have different string
representations. So you need to perform some canonicalization if you want
to be correct.

USING DSML.
===========

How can I access DSML features from PERL-LDAP.
----------------------------------------------

   Directory Service Markup Language (DSML) is the XML standard for
representing directory service information in XML.

   Support for DSML is include in PERL-LDAP starting with version .20.

   At the moment this module only reads and writes DSML entry entities. It
cannot process any schema entities because schema entities are processed
differently than elements.

   Eventually this module will be a full level 2 consumer and producer
enabling you to give you full DSML conformance.

   The specification for DSML is at http://www.dsml.org

   For further information and code examples read the DSML module
documentation;  perldoc Net::LDAP::DSML

USING CONTROLS AND VIRTUAL LISTS.
=================================

How do I access the Control features.
-------------------------------------

   Support for LDAP version 3 Control objects is included in perl-ldap
starting with version .20.

   For further information and code examples read the Control module
documentation;  perldoc Net::LDAP::Control

How do I access the Virtual List features.
------------------------------------------

   Support for Virtual Lists is included in perl-ldap starting with
version .20.

   For further information and code examples read the Control module
documentation;  perldoc Net::LDAP::Control

GENERAL QUESTIONS.
==================

Are there any other code examples.
----------------------------------

   Yes, there is an Examples pod file.  To view the pod do the following
command;  perldoc Net::LDAP::Examples

   There is user contributed software in the contrib directory that is
supplied with the PERL-LDAP distribution.  This is an excellent source of
information on how to use the PERL-LDAP module.

Can I contribute perl scripts that use perl-ldap to the contrib section?
------------------------------------------------------------------------

   Any one can submit a perl script that uses perl-ldap for inclusion in
the contrib section.  Graham Barr will determine if the script will be
included and will do the initial check in of the script to the CVS system
on sourceforge.  Graham will make you the owner/developer of the script.

   There are a couple of requirements for consideration.

   You must supply a one line description of your script to be included in
the contrib readme file.

   Inside the script will be the pod documentation for the script.  No
auxiliary documentation will be allowed.  For examples of how to do this
see the tklkup or schema scripts currently in the contrib section.

   If Graham decides to include your script in the contrib section, you
must register with sourceforge before your scripts will be put into the
contrib CVS system.

Is possible to get a complete entry, dn and attributes  without specifying the attributes name?
-----------------------------------------------------------------------------------------------

   Yes, just specify you want a list of no attributes back. The RFC says
that this tells the server to return all readable attributes back (there
may be access controls to prevent some from being returned.)

   So in the search method, just set (for LDAPv2):

     attrs => [ ]

   If you are using LDAPv3, you can specify an attribute called "*"
instead, which lets you ask for additional (eg operational) attributes in
the same search.

     attrs => [ "*" ]

How do I put a jpeg photo into a entry in the directory.
--------------------------------------------------------

   Follow the following code example, replacing the (...) with whatever is
relevant to your setup.

     use Net::LDAP;
     use Net::LDAP::Util qw(ldap_error_text);
     use CGI;
     
     local $/ = undef;
     my $jpeg = <$filename>;

     my $ldap = new Net::LDAP(...);
     my $res = $ldap->bind(...);
        $res = $ldap->modify(...,
                      add => [ 'jpegPhoto' => [ $jpeg ] ]);
        $res = $ldap->unbind();

How do I add a jpeg photo into a entry in the directory via html -forms.
------------------------------------------------------------------------

   Follow the following code example, replacing the (...) with whatever is
relevant to your setup.

     use Net::LDAP;
     use Net::LDAP::Util qw(ldap_error_text);
     use CGI;

     my $q = new CGI;

     print $q->header;
     print $q->start_html(-title => 'Change JPEG photo');

     if ($q->param('Update')) {
             my $filename = $q->param('jpeg');
             local $/ = undef;
             my $jpeg = <$filename>;

     my $ldap = new Net::LDAP(...);
     my $res = $ldap->bind(...);
     $res = $ldap->modify(...,
                     add => [ 'jpegPhoto' => [ $jpeg ] ]);
     $res = $ldap->unbind();
       } else {
     print $q->start_multipart_form();
     print $q->filefield(-name => 'jpeg', -size => 50);
     print $q->submit('Update');
     print $q->end_form();
       }

     print $q->end_html();

How do I avoid file type and data type miss-matching when loading data from a Win32 system.
-------------------------------------------------------------------------------------------

   When loading a binary attribute with data read from a file on a Win32
system, it has been noted that you should set "binmode" on the file before
reading the file contents into the data array.

   Another possible solution to this problem is to convert the binary data
into a base64 encoded string and then store the encoded string in the
file.  Then when reading the file, decode the base64 encoded string back
to binary and then use perl ldap to store the data in the directory.

How do I create a Microsoft Exchange user.
------------------------------------------

   This is a solution provide by a perl-ldap user.

   This code works with ActiveState Perl running on WinNT 4. Please note
that this requires the Win32::Perms module, and needs valid NT account
info to replace the placeholders.

     use Net::LDAP qw(:all);
     use Net::LDAP::Util;
     use Win32::Perms;

     #Constants taken from ADSI Type Library
     $ADS_RIGHT_EXCH_ADD_CHILD = 1;
     $ADS_RIGHT_EXCH_DELETE = 0x10000;
     $ADS_RIGHT_EXCH_DS_REPLICATION = 64;
     $ADS_RIGHT_EXCH_DS_SEARCH = 256;
     $ADS_RIGHT_EXCH_MAIL_ADMIN_AS = 32;
     $ADS_RIGHT_EXCH_MAIL_RECEIVE_AS = 16;
     $ADS_RIGHT_EXCH_MAIL_SEND_AS = 8;
     $ADS_RIGHT_EXCH_MODIFY_ADMIN_ATT = 4;
     $ADS_RIGHT_EXCH_MODIFY_SEC_ATT = 128;
     $ADS_RIGHT_EXCH_MODIFY_USER_ATT = 2;

     $EXCH_USER_RIGHTS = $ADS_RIGHT_EXCH_MAIL_RECEIVE_AS |
     $ADS_RIGHT_EXCH_MAIL_SEND_AS |
     $ADS_RIGHT_EXCH_MODIFY_USER_ATT;

     $exch = new Net::LDAP('server', debug =>0) || die $@;

     $exch->bind( 'cn=admin_user,cn=nt_domain,cn=admin', version =>3,
     password=>'password');

     $myObj = Win32::Perms->new();
     $Result = $myObj->Owner('nt_domain\user_name');
     $myObj->Group('nt_domain\Everyone');
     $myObj->Allow('nt_domain\user_name',
     $EXCH_USER_RIGHTS,OBJECT_INHERIT_ACE);
     $BinarySD = $myObj->GetSD(SD_RELATIVE);
     $TextSD = uc(unpack( "H*", $BinarySD ));
     Win32::Perms::ResolveSid('nt_domain\user_name', $sid);
     $mysid = uc(unpack("H*",$sid));

     $result = $exch->add ( dn   =>
                   'cn=user_name,cn=container,ou=site,o=organisation',
                   attr => [ 'objectClass' => ['organizationalPerson'],
                             'cn'   => 'directory_name',
                             'uid' => 'mail_nickname',
                             'mail' => 'smtp_address',
                           'assoc-nt-account' => [ $mysid ],
                           'nt-security-descriptor' => [ $TextSD ],
                           'mailPreferenceOption'  => 0
                           ]
                 );

     print ldap_error_name($result->code);

Using X.509 certificates.
=========================

How do I store X.509 certificates in the directory?
---------------------------------------------------

   The first problem here is that there are many different formats to hold
certificates in, for example PEM, DER, PKCS#7 and PKCS#12. The directory
*only* uses the DER format (more correctly, it only uses the BER format)
which is a binary format.

   Your first job is to ensure that your certificates are therefore in
DER/BER format. You could use OpenSSL to convert from PEM like this:

     openssl x509 -inform PEM -in cert.pem -outform DER -out cert.der

   Consult the OpenSSL documentation to find out how to perform other
conversions.

   To add a certificate to the directory, just slurp in the DER/BER
certificate into a scalar variable, and add it to the entry's
userCertificate attribute. How you do that will depend on which version of
LDAP you are using.

   To slurp in the certificate try something like this:

     my $cert;
     {
     	local $/ = undef; # Slurp mode
     	open CERT, "cert.der" or die;
     	$cert = <CERT>;
     	close CERT;
     }
     # The certificate is now in $cert

   For LDAPv2, because most directory vendors ignore the string
representation of certificates defined in RFC 1778, you should add this
value to the directory like this:

     $res = $ldap->modify("cn=My User, o=My Company,c=XY",
     		add => [
     			'userCertificate' => [ $cert ]
     		]);
     die "Modify failed (" . ldap_error_name($res->code) . ")\n"
     	if $res->code;

   For LDAPv3, you must do this instead:

     $res = $ldap->modify("cn=My User, o=My Company, c=XY",
     		add => [
     			'userCertificate;binary' => [ $cert ]
     		]);
     die "Modify failed (" . ldap_error_name($res->code) . ")\n"
     	if $res->code;

   Of course, the entry you are trying to add the certificate to must use
object classes that permit the userCertificate attribute, otherwise the
modify will fail with an object class violation error. The inetOrgPerson
structural object class permits userCertificates, as does the
strongAuthenticationUser auxiliary object class. Others might also.

ADDITIONAL DIRECTORY AND LDAP RESOURCES.
========================================

URL(s).
-------

   Deploying LDAP http://bostonlight.com/ldap/

   Directory Services Mark Language (DSML) http://www.dsml.org/

   Jeff Hodges's Kings Mountain LDAP
http://www.kingsmountain.com/ldapRoadmap.shtml

   Mark Wahl's LDAP World at Innosoft.  http://www.innosoft.com/ldapworld/

   Open Source LDAP Directory Server.  http://www.openldap.org/

   CriticalPath http://www.cp.net/

   Innosoft http://www.innosoft.com

   IPlanet - Netscape and SUN Alliance http://www.iplanet.com/

   MessagingDirect http://www.messagingdirect.com/

   Netscape Directory Developers Area
http://developer.netscape.com/directory/

   Nexor's X.500 and Internet Directories
http://www.nexor.com/info/directory.htm/

   SUN JAVA JNDI (Java Naming and Directory Interface)
http://www.java.sun.com/jndi/

BOOK(s)
-------

   Developing LDAP and ADSI Clients for Microsoft(R) Exchange.  By Sven B.
Schreiber.  ISBN:  0201657775

   Implementing LDAP.  By Mark Wilcox.  ISBN:  1861002211

   LDAP : Programming Directory-Enabled Applications With Lightweight
Directory Access Protocol.  By Tim Howes, Mark Smith.  ISBN:  1578700000

   LDAP Programming with Java.  By Rob Weltman, Tony Dahbura.  ISBN:
0201657589

   Understanding and Deploying Ldap Directory Services.  By Tim Howes,
Mark Smith, Gordon Good, Timothy A. Howe ISBN:  1578700701

AUTHOR(s)
=========

   Any good FAQ is made up of many authors, everyone that contributes
information to the perl-ldap mail list is a potential author.

   An attempt to maintain this FAQ is being done by Clif Harden
<charden@texoma.net>.

   The original author of this FAQ was Graham Barr <gbarr@pobox.com>

   Please report any bugs, or post any suggestions, to the perl-ldap
mailing list  <perl-ldap-dev@lists.sourceforge.net>.

COPYRIGHT
=========

   Copyright (c) 1999-2000 Graham Barr. All rights reserved. This document
is distributed, and may be redistributed, under the same terms as Perl
itself.


