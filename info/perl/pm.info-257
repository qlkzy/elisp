This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Net/Jabber/Query/Register,  Next: Net/Jabber/Query/Roster,  Prev: Net/Jabber/Query/Oob,  Up: Module List

Jabber IQ Registration Module
*****************************

NAME
====

   Net::Jabber::Query::Register - Jabber IQ Registration Module

SYNOPSIS
========

     Net::Jabber::Query::Register is a companion to the Net::Jabber::Query module.
     It provides the user a simple interface to set and retrieve all parts
     of a Jabber IQ Registration query.

DESCRIPTION
===========

     To initialize the IQ with a Jabber <iq/> and then access the register
     query you must pass it the XML::Parser Tree array from the
     Net::Jabber::Client module.  In the callback function for the iq:

     use Net::Jabber;

     sub iq {
       my $iq = new Net::Jabber::IQ(@_);
       my $register = $iq->GetQuery();
       .
       .
       .
     }

     You now have access to all of the retrieval functions available.

     To create a new IQ register to send to the server:

     use Net::Jabber;

     $client = new Net::Jabber::Client();
     ...

     $iq = new Net::Jabber::IQ();
     $register = $iq->NewQuery("jabber:iq:register");
     ...

     $client->Send($iq);

     Using $register you can call the creation functions below to populate the
     tag before sending it.

     For more information about the array format being passed to the CallBack
     please read the Net::Jabber::Client documentation.

Retrieval functions
-------------------

     $instructions = $register->GetInstructions();

     $username   = $register->GetUsername();
     $password   = $register->GetPassword();
     $name       = $register->GetName();
     $first      = $register->GetFirst();
     $last       = $register->GetLast();
     $nick       = $register->GetNick();
     $email      = $register->GetEmail();
     $address    = $register->GetAddress();
     $city       = $register->GetCity();
     $state      = $register->GetState();
     $zip        = $register->GetZip();
     $phone      = $register->GetPhone();
     $url        = $register->GetURL();
     $date       = $register->GetDate();
     $misc       = $register->GetMisc();
     $text       = $register->GetText();
     $key        = $register->GetKey();
     $remove     = $register->GetRemove();
     $registered = $register->GetRegistered();

     %fields = $register->GetFields();

Client Creation functions
-------------------------

     $register->SetRegister(username=>'test',
                            password=>'user',
                            name=>'Test Account');

     $register->SetUsername('bob');
     $register->SetPassword('bobrulez');
     $register->SetName('Bob the Great');
     $register->SetFirst('Bob');
     $register->SetLast('Smith');
     $register->SetNick('bobocity');
     $register->SetEmail('bob\@bob.net');
     $register->SetAddress('121 Bob St.');
     $register->SetCity('Bobville');
     $register->SetState('TX');
     $register->SetZip('70000');
     $register->SetPhone('(555)555-5555');
     $register->SetURL('http://www.bob.net');
     $register->SetDate('04/17/2000');
     $register->SetMisc('...');
     $register->SetText('...');
     $register->SetKey('...');
     $register->SetRemove();

Server Creation functions
-------------------------

     $register->SetRegister(instructions=>'Fill out the following fields...',
     			   username=>'',
                            password=>'',
                            name=>'',
     	       	           email=>'');

     $register->SetInstructions('Fill out all of the fields...');

     $register->SetUsername();
     $register->SetPassword();
     $register->SetName();
     $register->SetFirst();
     $register->SetLast();
     $register->SetNick();
     $register->SetEmail();
     $register->SetAddress();
     $register->SetCity();
     $register->SetState();
     $register->SetZip();
     $register->SetPhone();
     $register->SetURL();
     $register->SetDate();
     $register->SetMisc();
     $register->SetText();
     $register->SetKey();
     $register->SetRemove();
     $register->SetRegistered();

Test functions
--------------

     $test = $register->DefinedUsername();
     $test = $register->DefinedPassword();
     $test = $register->DefinedName();
     $test = $register->DefinedFirst();
     $test = $register->DefinedLast();
     $test = $register->DefinedNick();
     $test = $register->DefinedEmail();
     $test = $register->DefinedAddress();
     $test = $register->DefinedCity();
     $test = $register->DefinedState();
     $test = $register->DefinedZip();
     $test = $register->DefinedPhone();
     $test = $register->DefinedURL();
     $test = $register->DefinedDate();
     $test = $register->DefinedMisc();
     $test = $register->DefinedText();
     $test = $register->DefinedKey();
     $test = $register->DefinedRemove();
     $test = $register->DefinedRegistered();

METHODS
=======

Retrieval functions
-------------------

     GetInstructions() - returns a string with the instructions in the <query/>.

     GetUsername() - returns a string with the username in the <query/>.

     GetPassword() - returns a string with the password in the <query/>.

     GetName() - returns a string with the name in the <query/>.

     GetFirst() - returns a string with the fisrt in the <query/>.

     GetLast() - returns a string with the last in the <query/>.

     GetNick() - returns a string with the nick in the <query/>.

     GetEmail() -  returns a string with the email in the <query/>.

     GetAddress() -  returns a string with the address in the <query/>.

     GetCity() -  returns a string with the city in the <query/>.

     GetState() -  returns a string with the state in the <query/>.

     GetZip() -  returns a string with the zip in the <query/>.

     GetPhone() -  returns a string with the phone in the <query/>.

     GetURL() -  returns a string with the URL in the <query/>.

     GetDate() -  returns a string with the date in the <query/>.

     GetMisc() -  returns a string with the misc in the <query/>.

     GetText() -  returns a string with the text in the <query/>.

     GetKey() -  returns a string with the key in the <query/>.

     GetRemove() -  returns a string with the remove in the <query/>.

     GetRegistered() -  returns a string with the registered in the <query/>.

     GetFields() -  returns a hash with the keys being the fields
                    contained in the <query/> and the values the
                    contents of the tags.

Creation functions
------------------

     SetRegister(instructions=>string, - set multiple fields in the <iq/>
     	      username=>string,       at one time.  This is a cumulative
                 password=>string,       and over writing action.  If you
                 name=>string,           set the "username" twice, the second
                 first=>string,          setting is what is used.  If you set
                 last=>string,           the password, and then set the
                 nick=>string,           name then both will be in the
                 email=>string,          <query/> tag.  For valid settings
                 address=>string,        read  the specific Set functions below.
                 city=>string,
                 state=>string,
                 zip=>string,
                 phone=>string,
                 url=>string,
                 date=>string,
                 misc=>string,
                 text=>string,
                 key=>string,
                 remove=>string,
     	      registered=>string)
     
     SetUsername(string) - sets the username for the account you are
                           trying to create.  Set string to "" to send
                           <username/> for instructions.

     SetPassword(string) - sets the password for the account you are
                           trying to create.  Set string to "" to send
                           <password/> for instructions.

     SetName(string) - sets the name for the account you are
                       trying to create.  Set string to "" to send
                       <name/> for instructions.

     SetFirst(string) - sets the first for the account you are
                       trying to create.  Set string to "" to send
                       <first/> for instructions.

     SetLast(string) - sets the last for the account you are
                       trying to create.  Set string to "" to send
                       <last/> for instructions.

     SetNick(string) - sets the nick for the account you are
                       trying to create.  Set string to "" to send
                       <nick/> for instructions.

     SetEmail(string) - sets the email for the account you are
                        trying to create.  Set string to "" to send
                        <email/> for instructions.

     SetAddress(string) - sets the addess for the account you are
                          trying to create.  Set string to "" to send
                          <address/> for instructions.

     SetCity(string) - sets the city for the account you are
                       trying to create.  Set string to "" to send
                       <city/> for instructions.

     SetState(string) - sets the state for the account you are
                        trying to create.  Set string to "" to send
                        <state/> for instructions.

     SetZip(string) - sets the zip code for the account you are
                      trying to create.  Set string to "" to send
                      <zip/> for instructions.

     SetPhone(string) - sets the phone for the account you are
                        trying to create.  Set string to "" to send
                        <phone/> for instructions.

     SetURL(string) - sets the url for the account you are
                      trying to create.  Set string to "" to send
                      <url/> for instructions.

     SetDate(string) - sets the date for the account you are
                       trying to create.  Set string to "" to send
                       <date/> for instructions.

     SetMisc(string) - sets the misc for the account you are
                       trying to create.  Set string to "" to send
                       <misc/> for instructions.

     SetText(string) - sets the text for the account you are
                       trying to create.  Set string to "" to send
                       <text/> for instructions.

     SetKey(string) - sets the key for the server/transport you are trying
                      to regsiter to.

     SetRemove() - sets the remove for the account you are trying to
                   delete so that the account will be removed from the
                   server/transport.

     SetRegistered() - sets the registered for the account you are trying to
                       create so that the account will know that it is
                       already registered.

Test functions
--------------

     DefinedUsername() - returns 1 if there is a <username/> in the query,
                         0 if not.

     DefinedPassword() - returns 1 if there is a <password/> in the query,
                         0 if not.

     DefinedName() - returns 1 if there is a <name/> in the query,
                     0 if not.

     DefinedFirst() - returns 1 if there is a <first/> in the query,
                     0 if not.

     DefinedLast() - returns 1 if there is a <last/> in the query,
                     0 if not.

     DefinedNick() - returns 1 if there is a <nick/> in the query,
                     0 if not.

     DefinedEmail() - returns 1 if there is a <email/> in the query,
                      0 if not.

     DefinedAddress() - returns 1 if there is a <address/> in the query,
                        0 if not.

     DefinedCity() - returns 1 if there is a <city/> in the query,
                     0 if not.

     DefinedState() - returns 1 if there is a <state/> in the query,
                      0 if not.

     DefinedZip() - returns 1 if there is a <zip/> in the query,
                    0 if not.

     DefinedPhone() - returns 1 if there is a <phone/> in the query,
                      0 if not.

     DefinedURL() - returns 1 if there is a <url/> in the query,
                    0 if not.

     DefinedDate() - returns 1 if there is a <date/> in the query,
                     0 if not.

     DefinedMisc() - returns 1 if there is a <misc/> in the query,
                     0 if not.

     DefinedText() - returns 1 if there is a <text/> in the query,
                     0 if not.

     DefinedKey() - returns 1 if there is a <key/> in the query,
                    0 if not.

     DefinedRemove() - returns 1 if there is a <remove/> in the query,
                       0 if not.

     DefinedRegistered() - returns 1 if there is a <registered/> in the query,
                           0 if not.

AUTHOR
======

   By Ryan Eatmon in July of 2000 for http://jabber.org..

COPYRIGHT
=========

   This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


File: pm.info,  Node: Net/Jabber/Query/Roster,  Next: Net/Jabber/Query/Roster/Item,  Prev: Net/Jabber/Query/Register,  Up: Module List

Jabber IQ Roster Module
***********************

NAME
====

   Net::Jabber::Query::Roster - Jabber IQ Roster Module

SYNOPSIS
========

     Net::Jabber::Query::Roster is a companion to the Net::Jabber::Query module.
     It provides the user a simple interface to set and retrieve all parts
     of a Jabber IQ Roster query.

DESCRIPTION
===========

     To initialize the IQ with a Jabber <iq/> and then access the roster
     query you must pass it the XML::Parser Tree array from the
     Net::Jabber::Client module.  In the callback function for the iq:

     use Net::Jabber;

     sub iq {
       my $iq = new Net::Jabber::IQ(@_);
       my $roster = $iq->GetQuery();
       .
       .
       .
     }

     You now have access to all of the retrieval functions available.

     To create a new IQ roster to send to the server:

     use Net::Jabber;

     $client = new Net::Jabber::Client();
     ...

     $iq = new Net::Jabber::IQ();
     $roster = $iq->NewQuery("jabber:iq:roster");
     ...

     $client->Send($iq);

     Using $roster you can call the creation functions below to populate the
     tag before sending it.

     For more information about the array format being passed to the CallBack
     please read the Net::Jabber::Client documentation.

Retrieval functions
-------------------

     @items     = $roster->GetItems();
     @itemTrees = $roster->GetItemTrees();

Creation functions
------------------

     $item   = $roster->AddItem();
     $item   = $roster->AddItem(jid=>"bob\@jabber.org",
                                name=>"Bob",
                                groups=>["school","friends"]);

METHODS
=======

Retrieval functions
-------------------

     GetItems() - returns an array of Net::Jabber::Query::Roster::Item objects.
                  These can be modified or accessed with the functions
                  available to them.

     GetItemTrees() - returns an array of XML::Parser objects that contain
                      the data for each item.

Creation functions
------------------

     AddItem(hash) - creates and returns a new Net::Jabbber::Query::Roster::Item
                     object.  The argument hash is passed to the SetItem
                     function.  Check the Net::Jabber::Query::Roster::Item
                     for valid values.

AUTHOR
======

   By Ryan Eatmon in May of 2000 for http://jabber.org..

COPYRIGHT
=========

   This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


File: pm.info,  Node: Net/Jabber/Query/Roster/Item,  Next: Net/Jabber/Query/Search,  Prev: Net/Jabber/Query/Roster,  Up: Module List

Jabber IQ Roster Item Module
****************************

NAME
====

   Net::Jabber::Query::Roster::Item - Jabber IQ Roster Item Module

SYNOPSIS
========

     Net::Jabber::Query::Roster::Item is a companion to the
     Net::Jabber::Query::Roster module.  It provides the user a simple
     interface to set and retrieve all parts of a Jabber Roster Item.

DESCRIPTION
===========

     To initialize the Item with a Jabber <iq/> and then access the roster
     query you must pass it the XML::Parser Tree array from the
     Net::Jabber::Client module.  In the callback function for the iq:

     use Net::Jabber;

     sub iq {
       my $iq = new Net::Jabber::IQ(@_);
       my $roster = $iq->GetQuery();
       my @items = $roster->GetItems();
       foreach $item (@items) {
         ...
       }
       .
       .
       .
     }

     You now have access to all of the retrieval functions available below.

     To create a new IQ Roster Item to send to the server:

     use Net::Jabber;

     $Client = new Net::Jabber::Client();
     ...

     $iq = new Net::Jabber::IQ();
     $roster = $iq->NewQuery("jabber:iq:roster");
     $item = $roster->AddItem();
     ...

     $client->Send($iq);

     Using $Item you can call the creation functions below to populate the
     tag before sending it.

     For more information about the array format being passed to the CallBack
     please read the Net::Jabber::Client documentation.

Retrieval functions
-------------------

     $jid          = $item->GetJID();
     $jidJID       = $item->GetJID("jid");
     $name         = $item->GetName();
     $subscription = $item->GetSubscription();
     $ask          = $item->GetAsk();
     @groups       = $item->GetGroups();

     @item         = $item->GetTree();
     $str          = $item->GetXML();

Creation functions
------------------

     $item->SetItem(jid=>'bob@jabber.org',
     		   name=>'Bob',
     		   subscription=>'both',
     		   groups=>[ 'friends','school' ]);

     $item->SetJID('bob@jabber.org');
     $item->SetName('Bob');
     $item->SetSubscription('both');
     $item->SetAsk('both');
     $item->SetGroups(['friends','school']);

Test functions
--------------

     $test = $item->DefinedJID();
     $test = $item->DefinedName();
     $test = $item->DefinedSubscription();
     $test = $item->DefinedAsk();
     $test = $item->DefinedGroup();

METHODS
=======

Retrieval functions
-------------------

     GetJID()      - returns either a string with the Jabber Identifier,
     GetJID("jid")   or a Net::Jabber::JID object for the person who is
                     listed in this <item/>.  To get the JID object set the
                     string to "jid", otherwise leave blank for the text
                     string.

     GetName() - returns a string with the name of the jabber ID.

     GetSubscription() - returns a string with the current subscription
                         of this <item/>.

     none    means no one is getting <presence/> tags
     to      means we are getting their <presence/>
             but they are not getting ours
     from    means we are not getting their <presence/>
             but they are getting ours
     both    means we are getting their <presence/>
             and they are getting ours
     remove  remove this jid from the roster

     GetAsk() - returns a string with the current ask of this <item/>.
                This is the pending request by you to this JID, usually
                handled by the server.

     GetGroups() - returns an array of strings with the names of the groups
                  that this <item/> belongs to.

     GetXML() - returns the XML string that represents the <presence/>.
                This is used by the Send() function in Client.pm to send
                this object as a Jabber Presence.

     GetTree() - returns an array that contains the <presence/> tag
                 in XML::Parser Tree format.

Creation functions
------------------

     SetItem(jid=>string|JID,      - set multiple fields in the <item/>
             name=>string,           at one time.  This is a cumulative
             subscription=>string,   and overwriting action.  If you
             ask=>string,            set the "ask" twice, the second
             groups=>array)          setting is what is used.  If you set
                                     the name, and then set the
                                     jid then both will be in the
                                     <item/> tag.  For valid settings
                                     read the specific Set functions below.
                                     Note: group does not behave in this
                                     manner.  For each group setting a
                                     new <group/> tag will be created.

     SetJID(string) - sets the Jabber Identifier.  You can either pass a
     SetJID(JID)      string or a JID object.  They must be valid Jabber
                      Identifiers or the server will return an error message.
                      (ie.  jabber:bob@jabber.org/Silent Bob, etc...)

     SetName(string) - sets the name this roster item should show in the
                       roster.

     SetSubscription(string) - sets the subscription that this roster item
                               has.

     SetAsk(string) - sets the ask for the <item/>.

     SetGroups(array) - sets the group for each group in the array.

Test functions
--------------

     DefinedJID() - returns 1 if jid is defined in the <item/>, 0 otherwise.

     DefinedName() - returns 1 if name is defined in the <item/>, 0 otherwise.

     DefinedSubscription() - returns 1 if subscription is defined in the
                             <item/>, 0 otherwise.

     DefinedAsk() - returns 1 if ask is defined in the <item/>, 0 otherwise.

     DefinedGroup() - returns 1 if there is a <group/> tag in the <item/>,
                      0 otherwise.

AUTHOR
======

   By Ryan Eatmon in July of 2000 for http://jabber.org..

COPYRIGHT
=========

   This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


File: pm.info,  Node: Net/Jabber/Query/Search,  Next: Net/Jabber/Query/Search/Item,  Prev: Net/Jabber/Query/Roster/Item,  Up: Module List

Jabber IQ Search Module
***********************

NAME
====

   Net::Jabber::Query::Search - Jabber IQ Search Module

SYNOPSIS
========

     Net::Jabber::Query::Search is a companion to the Net::Jabber::Query module.
     It provides the user a simple interface to set and retrieve all parts
     of a Jabber IQ Search query.

DESCRIPTION
===========

     To initialize the IQ with a Jabber <iq/> and then access the search
     query you must pass it the XML::Parser Tree array from the
     Net::Jabber::Client module.  In the callback function for the iq:

     use Net::Jabber;

     sub iq {
       my $iq = new Net::Jabber::IQ(@_);
       my $search = $iq->GetQuery();
       .
       .
       .
     }

     You now have access to all of the retrieval functions available.

     To create a new IQ search to send to the server:

     use Net::Jabber;

     $client = new Net::Jabber::Client();
     ...

     $iq = new Net::Jabber::IQ();
     $search = $iq->NewQuery("jabber:iq:search");
     ...

     $client->Send($iq);

     Using $search you can call the creation functions below to populate the
     tag before sending it.

     For more information about the array format being passed to the CallBack
     please read the Net::Jabber::Client documentation.

Retrieval functions
-------------------

     $name         = $search->GetName();
     $first        = $search->GetFirst();
     $given        = $search->GetGiven();
     $last         = $search->GetLast();
     $family       = $search->GetFamily();
     $nick         = $search->GetNick();
     $email        = $search->GetEmail();
     $key          = $search->GetKey();
     $instructions = $search->GetInstructions();

     %fields       = $search->GetFields();

     @items        = $search->GetItems();
     @itemTrees    = $search->GetItemTrees();
     %results      = $search->GetResults();

     $truncated    = $search->GetTruncated();

Creation functions
------------------

     $search->SetSearch(key=>"somekey",
                        name=>"",
                        first=>"",
                        last=>"",
                        nick=>"bob",
                        email=>"");
     $search->SetSearch(instructions=>"Fill in a field to search".
                                      " for any matching Jabber users.",
                        key=>"somekey",
                        name=>"",
                        first=>"",
                        last=>"",
                        nick=>"",
                        email=>"");

     $search->SetInstructions("Fill out the form...");
     $search->SetKey("somekey");
     $search->SetName("");
     $search->SetFirst("Bob");
     $search->SetGiven("Bob");
     $search->SetLast("Smith");
     $search->SetFamily("Smith");
     $search->SetNick("");
     $search->SetEmail("");

     $search->SetTruncated();

     $item   = $search->AddItem();
     $item   = $search->AddItem(jid=>"bob\@jabber.org",
                                name=>"Bob Smith",
     			       first=>"Bob",
     			       last=>"Smith",
     			       nick=>"bob");

Test fucntions
--------------

     $test = $search->DefinedName();
     $test = $search->DefinedFirst();
     $test = $search->DefinedGiven();
     $test = $search->DefinedLast();
     $test = $search->DefinedFamily();
     $test = $search->DefinedNick();
     $test = $search->DefinedEmail();
     $test = $search->DefinedKey();
     $test = $search->DefinedInstructions();

     $test = $search->DefinedTruncated();

METHODS
=======

Retrieval functions
-------------------

     GetInstructions() - returns a string that contains the instructions
                         for using this search query.

     GetKey() - returns a string that contains the value of key from the
                search agent.

     GetName() - returns a string that contains the value of name in the
                 search query.

     GetFirst() - returns a string that contains the value of first in the
                  search query.

     GetGiven() - returns a string that contains the value of given name
                  in the search query.

     GetLast() - returns a string that contains the value of last in the
                 search query.

     GetFamily() - returns a string that contains the value of the family
                   name in the search query.

     GetNick() - returns a string that contains the value of nick in the
                 search query.

     GetEmail() - returns a string that contains the value of email in the
                  search query.

     GetFields() - returns a hash that contains the fields required by the
                   sender in $hash{tag} = value format.

     GetItems() - returns an array of Net::Jabber::Query::Search::Item
                  objects. These can be modified or accessed with the
                  functions available to them.

     GetItemTrees() - returns an array of XML::Parser objects that contain
                      the data for each item.

     GetResults() - returns an hash that represents the data in the Item
                    trees.  The hash looks like this:

     $results{jid1}->{field1} = "value1";
                     {field2} = "value2";
                     {field3} = "value3";
     $results{jid2}->{field1} = "value1";
                     {field2} = "value2";
                     {field3} = "value3";

     GetTruncated() - returns 1 if <truncated/> exists in the search query,
                      0 otherwise.

Creation functions
------------------

     SetSearch(instructions=>string, - set multiple fields in the <query/>
               key=>string,            at one time.  This is a cumulative
               name=>string,           and overwriting action.  If you
               first=>string,          set the "name" twice, the second
               given=>string,          setting is what is used.  If you set
               last=>string,           the first, and then set the
               family=>string)         last then both will be in the
               nick=>string,           search.  For valid settings read
               email=>string)          the specific Set functions below.

     SetInstructions(string) - sets the value of the instructions in the
                               <query/>.

     SetKey(string) - sets the value of key in the <query/>.

     SetName(string) - sets the value of name in the <query/>.  If "" then
                       it creates an empty tag.

     SetFirst(string) - sets the value of first in the <query/>.  If "" then
                        it creates an empty tag.

     SetGiven(string) - sets the value of given in the <query/>.  If "" then
                        it creates an empty tag.

     SetLast(string) - sets the value of last in the <query/>.  If "" then
                       it creates an empty tag.

     SetFamily(string) - sets the value of family in the <query/>.  If "" then
                         it creates an empty tag.

     SetNick(string) - sets the value of nick in the <query/>.  If "" then
                       it creates an empty tag.

     SetEmail(string) - sets the value of email in the <query/>.  If "" then
                        it creates an empty tag.

     SetTruncated() - adds a <truncated/> tag to the <query/> to indicate that
                      the search results were truncated.

     AddItem(hash) - creates and returns a new Net::Jabbber::Query::Search::Item
                     object.  The argument hash is passed to the SetItem
                     function.  Check the Net::Jabber::Query::Search::Item
                     for valid values.

Test functions
--------------

     DefinedInstructions() - returns 1 if there is a <instructions/> in
                             the query, 0 if not.

     DefinedKey() - returns 1 if there is a <key/> in the query, 0 if not.

     DefinedName() - returns 1 if there is a <name/> in the query, 0 if not.

     DefinedFirst() - returns 1 if there is a <first/> in the query, 0 if not.

     DefinedGiven() - returns 1 if there is a <given/> in the query, 0 if not.

     DefinedLast() - returns 1 if there is a <last/> in the query, 0 if not.

     DefinedFamily() - returns 1 if there is a <family/> in the query, 0 if not.

     DefinedNick() - returns 1 if there is a <nick/> in the query, 0 if not.

     DefinedEmail() - returns 1 if there is a <email/> in the query, 0 if not.

     DefinedTruncated() - returns 1 if there is a <truncated/> in the query,
                          0 if not.

AUTHOR
======

   By Ryan Eatmon in May of 2000 for http://jabber.org..

COPYRIGHT
=========

   This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


File: pm.info,  Node: Net/Jabber/Query/Search/Item,  Next: Net/Jabber/Query/Time,  Prev: Net/Jabber/Query/Search,  Up: Module List

Jabber IQ Search Item Module
****************************

NAME
====

   Net::Jabber::Query::Search::Item - Jabber IQ Search Item Module

SYNOPSIS
========

     Net::Jabber::Query::Search::Item is a companion to the
     Net::Jabber::Query::Search module.  It provides the user a simple
     interface to set and retrieve all parts of a Jabber Search Item.

DESCRIPTION
===========

     To initialize the Item with a Jabber <iq/> and then access the search
     query you must pass it the XML::Parser Tree array from the
     Net::Jabber::Client module.  In the callback function for the iq:

     use Net::Jabber;

     sub iq {
       my $iq = new Net::Jabber::IQ(@_);
       my $search = $iq->GetQuery();
       my @items = $search->GetItems();
       foreach $item (@items) {
         ...
       }
       .
       .
       .
     }

     You now have access to all of the retrieval functions available below.

     To create a new IQ Search Item to send to the server:

     use Net::Jabber;

     $Client = new Net::Jabber::Client();
     ...

     $iq = new Net::Jabber::IQ();
     $search = $iq->NewQuery("jabber:iq:search");
     $item = $search->AddItem();
     ...

     $client->Send($iq);

     Using $Item you can call the creation functions below to populate the
     tag before sending it.

     For more information about the array format being passed to the CallBack
     please read the Net::Jabber::Client documentation.

Retrieval functions
-------------------

     $jid    = $item->GetJID();
     $jidJID = $item->GetJID("jid");
     $name   = $item->GetName();
     $first  = $item->GetFirst();
     $given  = $item->GetGiven();
     $last   = $item->GetLast();
     $family = $item->GetFamily();
     $nick   = $item->GetNick();
     $email  = $item->GetEmail();

     %result = $item->GetResult();

     @item   = $item->GetTree();
     $str    = $item->GetXML();

Creation functions
------------------

     $item->SetItem(jid=>'bob@jabber.org',
     		   name=>'Bob',
     		   first=>'Bob',
     		   last=>'Smith',
     		   nick=>'bob',
     		   email=>'bob@hotmail.com');

     $item->SetJID('bob@jabber.org');
     $item->SetName('Bob Smith');
     $item->SetFirst('Bob');
     $item->SetGiven('Bob');
     $item->SetLast('Smith');
     $item->SetFamily('Smith');
     $item->SetNick('bob');
     $item->SetEmail('bob@bobworld.com');

Test functions
--------------

     $test = $item->DefinedName();
     $test = $item->DefinedFirst();
     $test = $item->DefinedGiven();
     $test = $item->DefinedLast();
     $test = $item->DefinedFamily();
     $test = $item->DefinedNick();
     $test = $item->DefinedEmail();

METHODS
=======

Retrieval functions
-------------------

     GetJID()      - returns either a string with the Jabber Identifier,
     GetJID("jid")   or a Net::Jabber::JID object for the account that is
                     listed in this <item/>.  To get the JID object set the
                     string to "jid", otherwise leave blank for the text
                     string.

     GetName() - returns a string with the full name of the account being
                 returned.

     GetFirst() - returns a string with the first name of the account being
                  returned.

     GetGiven() - returns a string with the given name of the account being
                  returned.

     GetLast() - returns a string with the last name of the jabber account
                 being returned.

     GetFamily() - returns a string with the family name of the jabber
                   account being returned.

     GetNick() - returns a string with the nick of the jabber account being
                 returned.

     GetEmail() - returns a string with the email of the jabber account being
                  returned.

     GetResult() - returns a hash with all of the valid fields set.  Here is
                   the way the hash might look.

     $result{last} = "Smith";
     $result{first} = "Bob";

     GetXML() - returns the XML string that represents the <presence/>.
                This is used by the Send() function in Client.pm to send
                this object as a Jabber Presence.

     GetTree() - returns an array that contains the <presence/> tag
                 in XML::Parser Tree format.

Creation functions
------------------

     SetItem(jid=>string|JID, - set multiple fields in the <item/>
             name=>string,      at one time.  This is a cumulative
             first=>string,     and overwriting action.  If you
             given=>string,     set the "name" twice, the second
             last=>string,      setting is what is used.  If you set
             family=>string)    the first, and then set the
             nick=>string,      last then both will be in the
             email=>string)     <item/> tag.  For valid settings
                                read the specific Set functions below.

     SetJID(string) - sets the Jabber Identifier.  You can either pass a
     SetJID(JID)      string or a JID object.  They must be valid Jabber
                      Identifiers or the server will return an error message.
                      (ie.  jabber:bob@jabber.org/Silent Bob, etc...)

     SetName(string) - sets the name this search item should show in the
                       search.

     SetFirst(string) - sets the first name this search item should show
                        in the search.

     SetGiven(string) - sets the given name this search item should show
                        in the search.

     SetLast(string) - sets the last name this search item should show in
                       the search.

     SetFamily(string) - sets the family name this search item should show
                         in the search.

     SetNick(string) - sets the nick this search item should show in the
                       search.

     SetEmail(string) - sets the email this search item should show in the
                        search.

AUTHOR
======

   By Ryan Eatmon in May of 2000 for http://jabber.org..

COPYRIGHT
=========

   This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


File: pm.info,  Node: Net/Jabber/Query/Time,  Next: Net/Jabber/Query/Version,  Prev: Net/Jabber/Query/Search/Item,  Up: Module List

Jabber IQ Time Module
*********************

NAME
====

   Net::Jabber::Query::Time - Jabber IQ Time Module

SYNOPSIS
========

     Net::Jabber::Query::Time is a companion to the Net::Jabber::Query module.
     It provides the user a simple interface to set and retrieve all parts
     of a Jabber Time query.

DESCRIPTION
===========

     To initialize the Query with a Jabber <iq/> and then access the time
     query you must pass it the XML::Parser Tree array from the
     Net::Jabber::Client module.  In the callback function for the iq:

     use Net::Jabber;

     sub iqCB {
       my $iq = new Net::Jabber::IQ(@_);
       my $time = $iq->GetQuery();
       .
       .
       .
     }

     You now have access to all of the retrieval functions available.

     To create a new Query time to send to the server:

     use Net::Jabber;

     $client = new Net::Jabber::Client();
     ...

     $iq = new Net::Jabber::IQ();
     $time = $iq->NewQuery("jabber:iq:time");
     ...

     $client->Send($iq);

     Using $time you can call the creation functions below to populate the
     tag before sending it.

     For more information about the array format being passed to the CallBack
     please read the Net::Jabber::Client documentation.

Retrieval functions
-------------------

     $utc      = $time->GetUTC();
     $timezone = $time->GetTZ();
     $display  = $time->GetDisplay();

Creation functions
------------------

     $time->SetTime(utc=>'20000314T09:50:00',
                    tz=>'EST',
                    display=>'2000/03/14 09:50 AM');

     $time->SetUTC('20000419T13:05:34');
     $time->SetTZ('CST');
     $time->SetDisplay('2000/04/19 01:50 PM');

Test functions
--------------

     $test = $time->DefinedUTC();
     $test = $time->DefinedTZ();
     $test = $time->DefinedDisplay();

METHODS
=======

Retrieval functions
-------------------

     GetUTC() - returns a string with the universal time constant time in
                the <query/>.

     GetTZ() - returns a string with the timezone in the <query/>.

     GetDisplay() - returns a string with the displayin the <query/>.

Creation functions
------------------

     SetTime(utc=>string,     - set multiple fields in the <iq/> at one
             tz=>string,        time.  This is a cumulative and over
             display=>string)   writing action.  If you set the "utc"
                                twice, the second setting is what is
                                used.  If you set the tz, and then
                                set the display then both will be in the
                                <query/> tag.  For valid settings read
                                the specific Set functions below.

     SetUTC(string) - sets the universal time constant time for the
                      <query/>.  The format for the UTC is:
     
                        yyyymmddThh:nn:ss

     yyyy - year
     mm   - month
     dd   - day
     hh   - hour
     nn   - minute
     ss   - second

     SetTZ(string) - sets the timezone of the local client in the <query/>.

     SetDisplay(string) - sets the string to display as the local time in
                          UTC format in the remote client.

Test functions
--------------

     DefinedUTC() - returns 1 if <utc/> exists in the query, 0 otherwise.

     DefinedTZ() - returns 1 if <tz/> exists in the query, 0 otherwise.

     DefinedDisplay() - returns 1 if <display/> exists in the query,
                        0 otherwise.

AUTHOR
======

   By Ryan Eatmon in May of 2000 for http://jabber.org..

COPYRIGHT
=========

   This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


File: pm.info,  Node: Net/Jabber/Query/Version,  Next: Net/Jabber/Server,  Prev: Net/Jabber/Query/Time,  Up: Module List

Jabber IQ Version Module
************************

NAME
====

   Net::Jabber::Query::Version - Jabber IQ Version Module

SYNOPSIS
========

     Net::Jabber::Query::Version is a companion to the Net::Jabber::Query module.
     It provides the user a simple interface to set and retrieve all parts
     of a Jabber Version query.

DESCRIPTION
===========

     To initialize the Query with a Jabber <iq/> and then access the version
     query you must pass it the XML::Parser Tree array from the
     Net::Jabber::Client module.  In the callback function for the iq:

     use Net::Jabber;

     sub iqCB {
       my $iq = new Net::Jabber::IQ(@_);
       my $version = $iq->GetQuery();
       .
       .
       .
     }

     You now have access to all of the retrieval functions available.

     To create a new Query version to send to the server:

     use Net::Jabber;

     $client = new Net::Jabber::Client();
     ...

     $iq = new Net::Jabber::IQ();
     $version = $iq->NewQuery("jabber:iq:version");
     ...

     $client->Send($iq);

     Using $version you can call the creation functions below to populate the
     tag before sending it.

     For more information about the array format being passed to the CallBack
     please read the Net::Jabber::Client documentation.

Retrieval functions
-------------------

     $name = $version->GetName();
     $ver  = $version->GetVer();
     $os   = $version->GetOS();

Creation functions
------------------

     $version->SetVersion(name=>'Net::Jabber',
                          ver=>'1.0',
                          os=>'Perl');

     $version->SetName('JabberClient');
     $version->SetVer('0.1');
     $version->SetOS('Perl/Tk');

Test functions
--------------

     $test = $version->DefinedName();
     $test = $version->DefinedVer();
     $test = $version->DefinedOS();

METHODS
=======

Retrieval functions
-------------------

     GetName() - returns a string with the name in the <query/>.

     GetVer() - returns a string with the version in the <query/>.

     GetOS() - returns a string with the os in the <query/>.

Creation functions
------------------

     SetVersion(name=>string, - set multiple fields in the <iq/> at one
                ver=>string,    time.  This is a cumulative and over
                os=>string)     writing action.  If you set the "name"
                                twice, the second setting is what is
                                used.  If you set the ver, and then
                                set the os then both will be in the
                                <query/> tag.  For valid settings read
                                the specific Set functions below.

     SetName(string) - sets the name of the local client for the <query/>.

     SetVer(string) - sets the version of the local client in the <query/>.

     SetOS(string) - sets the os, or cross-platform language, of the local
                     client in the <query/>.

Test functions
--------------

     DefinedName() - returns 1 if <name/> exists in the query, 0 otherwise.

     DefinedVer() - returns 1 if <version/> exists in the query, 0 otherwise.

     DefinedOS() - returns 1 if <os/> exists in the query, 0 otherwise.

AUTHOR
======

   By Ryan Eatmon in May of 2000 for http://jabber.org..

COPYRIGHT
=========

   This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


File: pm.info,  Node: Net/Jabber/Server,  Next: Net/Jabber/Transport,  Prev: Net/Jabber/Query/Version,  Up: Module List

Jabber Server Library
*********************

NAME
====

   Net::Jabber::Server - Jabber Server Library

SYNOPSIS
========

     Net::Jabber::Server is a module that provides a developer easy access
     to developing applications that need an embedded Jabber server.

DESCRIPTION
===========

     Server.pm seeks to provide enough high level APIs and automation of
     the low level APIs that writing and spawning a Jabber Server in Perl
     is trivial.  For those that wish to work with the low level you can
     do that too, but those functions are covered in the documentation for
     each module.

     Net::Jabber::Server provides functions to run a full Jabber server that
     accepts incoming connections and delivers packets to external Jabber
     servers.  You can use all or none of the functions, there is no requirement.

     For more information on how the details for how Net::Jabber is written
     please see the help for Net::Jabber itself.

     For a full list of high level functions available please see
     Net::Jabber::Protocol.

Basic Functions
---------------

     use Net::Jabber;

     $Server = new Net::Jabber::Server();

     $Server->Start();
     $Server->Start(jabberxml=>"custom_jabber.xml",
     	           hostname=>"foobar.net");

     $Server->Stop();

METHODS
=======

Basic Functions
---------------

     new(debuglevel=>0|1|2, - creates the Server object.  debugfile
         debugfile=>string,   should be set to the path for the debug
         debugtime=>0|1)      log to be written.  If set to "stdout"
                              then the debug will go there.  debuglevel
                              controls the amount of debug.  For more
                              information about the valid setting for
                              debuglevel, debugfile, and debugtime see
                              Net::Jabber::Debug.

     Start(hostname=>string, - starts the server listening on the proper
     	  jaberxml=>string)   ports.  hostname is a quick way of telling
                               the server the hostname to listen on.
                               jabberxml defines the path to a different
                               jabberd configuration file (default is
                               "./jabber.xml").

     Stop() - stops the server from running and shuts down all sub programs.

AUTHOR
======

   By Ryan Eatmon in January of 2001 for http://jabber.org.

COPYRIGHT
=========

   This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


File: pm.info,  Node: Net/Jabber/Transport,  Next: Net/Jabber/X,  Prev: Net/Jabber/Server,  Up: Module List

Jabber Transport Library
************************

NAME
====

   Net::Jabber::Transport - Jabber Transport Library

SYNOPSIS
========

     Net::Jabber::Transport is a module that provides a developer easy access
     to tranports in the Jabber Instant Messaging protocol.

DESCRIPTION
===========

     Transport.pm seeks to provide enough high level APIs and automation of
     the low level APIs that writing a Jabber Transport in Perl is trivial.
     For those that wish to work with the low level you can do that too,
     but those functions are covered in the documentation for each module.

     Net::Jabber::Transport provides functions to connect to a Jabber server,
     login, send and receive messages, set personal information, create
     a new user account, manage the roster, and disconnect.  You can use
     all or none of the functions, there is no requirement.

     For more information on how the details for how Net::Jabber is written
     please see the help for Net::Jabber itself.

     For a full list of high level functions available please see
     Net::Jabber::Protocol.

Basic Functions
---------------

     use Net::Jabber;

     $Con = new Net::Jabber::Transport();

     $Con->Connect(hostname=>"jabber.org");

     if ($Con->Connected()) {
       print "We are connected to the server...\n";
     }

     #
     # For the list of available function see Net::Jabber::Protocol.
     #

     $Con->Disconnect();

METHODS
=======

Basic Functions
---------------

     new(debuglevel=>0|1|2, - creates the Transport object.  debugfile
         debugfile=>string,   should be set to the path for the debug
         debugtime=>0|1)      log to be written.  If set to "stdout"
                              then the debug will go there.  debuglevel
                              controls the amount of debug.  For more
                              information about the valid setting for
                              debuglevel, debugfile, and debugtime see
                              Net::Jabber::Debug.

     Connect(hostname=>string,      - opens a connection to the server
     	    port=>integer,           listedt in the hostname value,
     	    secret=>string,          on the port listed.  The defaults
     	    transportname=>string)   for the two are localhost and 5222.
     				     The secret is the password needed
                                      to attach the hostname, and the
                                      transportname is the name that
                                      server and clients will know the
                                      transport by.

     Disconnect() - closes the connection to the server.

     Connected() - returns 1 if the Transport is connected to the server,
                   and 0 if not.

AUTHOR
======

   By Ryan Eatmon in May of 2000 for http://jabber.org.

COPYRIGHT
=========

   This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


