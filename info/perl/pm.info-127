This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Date/Maya,  Next: Date/Ordinal,  Prev: Date/Manip,  Up: Module List

Translate between Julian days and Maya days.
********************************************

NAME
====

   Date::Maya  -  Translate between Julian days and Maya days.

SYNOPSIS
========

     use Date::Maya;

     my  $long_count             = julian_to_maya 2451432;
     my ($long, $tzolkin, $haab) = julian_to_maya 2451432;
     my  $julian                 = maya_to_julian '12.19.6.9.9';

DESCRIPTION
===========

   For an extensive description of both the Maya calendar and Julian days,
see the calendar faq [1].

   This module presents routines to calculate the Mayan day from a Julian
day, and a Julian day from a Mayan day. The Mayan calendar has different
dating systems, the Long Count (which cycles every 5125 years), the
Tzolkin (260 days) and the Haab (365 days). The Long Count consists of
quintuple of numbers (really a mixed base 20/18 number), while the Tzolkin
and the Haab consist of day numbers and week or month names. In the
Tzolkin, both the week number and week name change from day to day; the
week number cycles through 1 to 13, while there are 20 week names to cycle
through. This gives a period of 260 days. The Haab has 18 months, of each
20 days, numbered 0 to 19. A new month is only started after reaching day
19. At the end of the 360 days, there are 5 Uayeb days. In the Long Count,
all the numbers of the quintuple are 0 to 19 or 0 to 17, except the first,
(the number of *baktuns*), which goes from 1 to 13; with 13 serving as 0.

   By default, Date::Maya exports two subroutines, `julian_to_maya' and
`maya_to_julian'. `julian_to_maya' takes a Julian day as argument, and
returns the Long Count date in scalar context. In list context, it returns
the Long Count date, the Tzolkin date, and the Haab date. `maya_to_julian'
takes a Long Count date as argument, and returns a Julian day.

EPOCH AND ROLL OVER
-------------------

   It is unclear when the epoch of the Mayan calendar occurred. Three dates
are mentioned as candidates, 13 Aug 3114 BC, 11 Aug 3114 BC, and
15 Oct 3374 BC. Unless changed, this module assumes 13 Aug 3114 as the
epoch.

   To change the epoch, import the function `maya_epoch', and call it with
the Julian date that should be the epoch. Constants `MAYA_EPOCH1',
`MAYA_EPOCH2' and `MAYA_EPOCH3' can be imported, which will have the
Julian days for 13 Aug 3114 BC, 11 Aug 3114 BC, and 15 Oct 3374 BC as
values.  The three constants can be imported at once by using the
`:MAYA_EPOCH' tag.

   The Mayan calendar is cyclic, with a period of just over 5125 years.
This means that if the epoch was in Aug 3114 BC, the calendar will roll
over in Dec 2012 AD. If the epoch was in 3374 BC, the roll over has occured
over 200 years ago. Since the calendar is cyclic, the `maya_to_julian'
function is not unique. We will however return only one date, and that is
the first Julian day matching the Long Count date on or after the choosen
epoch.

   The Mayan Long Count calendar rolls over after 1872000 days.

REFERENCES
==========

[1]
     Tondering, Claus: *FREQUENTLY ASKED QUESTIONS ABOUT CALENDARS*
     http://www.pip.dknet.dk/%7Ec-t/calendar.html

REVISION HISTORY
================

     $Log: Maya.pm,v $
     Revision 1.1  1999/09/10 18:01:05  abigail
     Initial revision

AUTHOR
======

   This package was written by Abigail, abigail@delanet.com

COPYRIGHT AND LICENSE
=====================

   This package is copyright 1999 by Abigail.

   This program is free and open software. You may use, copy, modify,
distribute and sell this program (and any modified variants) in any way
you wish, provided you do not restrict others to do the same.


File: pm.info,  Node: Date/Ordinal,  Next: Date/Parse,  Prev: Date/Maya,  Up: Module List

Conversion of dates to ordinal numbers and vice versa
*****************************************************

NAME
====

   Date::Ordinal - Conversion of dates to ordinal numbers and vice versa

SYNOPSIS
========

     use Date::Ordinal;
     
     $ord     = month2ord('January');           # $ord gets 1
     $mon     = ord2month('1');                 # $mon gets 'January'
     $mon     = ord2month(1);                   # $mon gets 'January'
     $mon     = ord2month('01');                # $mon gets 'January'
     $arryref = all_month_ordinations
     @arry    = all_month_names
     $arryref = all_month_names_ref
     $arryref = all_short_month_names_ref
     $arryref = all_day_ordinations

     $arryref = all_hour_ordinations
     $arryref = all_minute_ordinations

     $hashref = ordination_month_pair # {'01' => 'January', ... }
     @day     = days

     =cut

   #----------------------------------------------------------------------

   package Date::Ordinal; #use strict;

   #----------------------------------------------------------------------

DESCRIPTION
===========

   This module is designed to aid in  creation of CGI popup_menus and also
interaction with SQL databases.

CONVERSION ROUTINES
===================

   There are two conversion routines: ord2month() and `month2ord()'.

ord2month()
     This function takes a month number [1..12] and returns a string which
     contains the name of the month identified. If the number is not a
     valid number, then undef will be returned:

          $mon = ord2month('3');

`month2ord()'
     This function takes a month name and returns the integer
     corresponding to the month name, if such exists.

     The match is a regexp match, so both 'Mar' and 'March' will return 3.

     If the argument could not be identified as a month name, then undef
     will be returned:

          $ord = month2ord('March');

     The case of the month name is not important.  See the section `KNOWN
     BUGS AND LIMITATIONS' in this node below.

QUERY ROUTINES
==============

   There is one function (and a reference variant) which can be used to
obtain a list of all month names:

`all_month_names()'
          Returns a list of all month names;

`all_month_names_ref()'
          Returns a reference to a list of all month names;

`all_short_month_names_ref()'
          Returns a reference to a list of all month names in 3-letter form

`ordination_month_pair()'
          returns a reference to a hash of the ordination of a month name
          and the month name

`all_month_ordinations()'
          returns a reference  a hash of the ordination of a month name
          and the month name

PRETTY-PRINTING ROUTINES
========================

`prezero()'
          if the current number is single-diit, prefix it with a '0'

KNOWN BUGS AND LIMITATIONS
==========================

   none

SEE ALSO
========

Locale::US
Date::Manip
AUTHOR
======

   Terrence Brannon <tbrannon@end70.com>

COPYRIGHT
=========

   Copyright (c) 2000 End70 Corporation

   This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


File: pm.info,  Node: Date/Parse,  Next: Date/Tolkien/Shire,  Prev: Date/Ordinal,  Up: Module List

Parse date strings into time values
***********************************

NAME
====

   Date::Parse - Parse date strings into time values

SYNOPSIS
========

     use Date::Parse;
     
     $time = str2time($date);
     
     ($ss,$mm,$hh,$day,$month,$year,$zone) = strptime($date);

DESCRIPTION
===========

   Date::Parse provides two routines for parsing date strings into time
values.

str2time(DATE [, ZONE])
     `str2time' parses DATE and returns a unix time value, or undef upon
     failure.  `ZONE', if given, specifies the timezone to assume when
     parsing if the date string does not specify a timezome.

strptime(DATE [, ZONE])
     `strptime' takes the same arguments as str2time but returns an array
     of values `($ss,$mm,$hh,$day,$month,$year,$zone)'. Elements are only
     defined if they could be extracted from the date string. The `$zone'
     element is the timezone offset in seconds from GMT. An empty array is
     returned upon failure.

MULTI-LANGUAGE SUPPORT
======================

   Date::Parse is capable of parsing dates in several languages, these are
English, French, German and Italian. Changing the language is done via a
static method call, for example

     Date::Parse->language('German');

   will cause Date::Parse to attempt to parse any subsequent dates in
German.

   This is only a first pass, I am considering changing this to be

     $lang = Date::Language->new('German');
     $lang->str2time("25 Jun 1996 21:09:55 +0100");

   I am open to suggestions on this.

EXAMPLE DATES
=============

   Below is a sample list of dates that are known to be parsable with
Date::Parse

     1995:01:24:09:08:17.1823213           ISO-8601
     1995-01-24:09:08:17.1823213
     Wed, 16 Jun 94 07:29:35 CST           Comma and day name are optional
     Thu, 13 Oct 94 10:13:13 -0700
     Wed, 9 Nov 1994 09:50:32 -0500 (EST)  Text in ()'s will be ignored.
     21 dec 17:05                          Will be parsed in the current time zone
     21-dec 17:05
     21/dec 17:05
     21/dec/93 17:05
     1999 10:02:18 "GMT"
     16 Nov 94 22:28:20 PST

BUGS
====

   When both the month and the date are specified in the date as numbers
they are always parsed assuming that the month number comes before the
date. This is the usual format used in American dates.

   The reason why it is like this and not dynamic is that it must be
deterministic. Several people have suggested using the current locale, but
this will not work as the date being parsed may not be in the format of
the current locale.

   My plans to address this, which will be in a future release, is to allow
the programmer to state what order they want these values parsed in.

AUTHOR
======

   Graham Barr <gbarr@pobox.com>

COPYRIGHT
=========

   Copyright (c) 1995 Graham Barr. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.


File: pm.info,  Node: Date/Tolkien/Shire,  Next: DateTime/Precise,  Prev: Date/Parse,  Up: Module List

Date::Tolkien::Shire.pm
***********************

NAME
====

   Date::Tolkien::Shire.pm

DESCRIPTION
===========

   This is an object-oriented module to convert dates into the Shire
Calender as presented in the Lord of the Rings by J. R. R. Tolkien.  It
includes converting epoch time to the Shire Calendar (you can also get
epoch time back), comparison operators, and a method to print a formatted
string containing that does something to the effect of on this date in
history - pulling events from the Lord of the Rings.

   The biggest use I can see in this thing is in a startup script or
possible to keep yourself entertained in an otherwise boring app that
includes a date.  If you have any other ideas/suggestions/uses, etc.,
please let me know.  I am curious to see how this gets used (if it gets
used that is).

AUTHOR
======

   Tom Braun <tbraun@pobox.com>

DATE
====

   February 2001

METHOD REFERENCE
================

   Note:  I have tried to make these as friendly as possible when an error
occurs.  As a consequence, none of them die, croak, etc.  All of these
return 0 on error, but as 0 can be a valid output in a couple cases (the
day of the month for a holiday, for example), the error method should
always be checked to see if an error has occured.  As long as you set a
date before you try to use it, you should be ok.

new
---

   $shiredate = Date::Tolkien::Shire->new; $shiredate =
Date::Tolkien::Shire->new(time); $shiredate =
Date::Tolkien::Shire->new($another_shiredate);

   The constructor new can take zero or one parameter.  Either a new
object can be created without setting a specific date (the zero parameter
version), or an object can be created and the date set to either a current
shire date, or an epoch time such as is returned by the time function.
For specifics on setting dates, see the 'set_date' function.

error
-----

     $the_error = $shiredate->error;
     $the_error = Date::Tolkien::Shire->error;

   This returns a null string if everything in the previous method call was
as it should be, and a string contain a description of what happened if an
error occurred.

set_date
--------

   This method takes either the seconds from the start of the epoch (like
what time returns) or another shire date object, and sets the date of the
object in question equal to that date.  If the object previously contained
a date, it will be overwritten.  Locatime, rather than utc, is used in
converting from epoch date.

   Please see the note below on calculating the year if your curious how I
arrived by that.

time_in_seconds
---------------

   $epoch_time = $shire_date->time_in_seconds

   Returns the epoch time (with 0 for hours, minutes, and seconds) of a
given shire date.   This relies on the library Time::Local, so the caveats
and error handling with that module apply to this method as well.

weekday
-------

   $day_of_week = $shiredate->weekday;

   This function returns the day of the week using the more modern names
in use during the War of the Ring and given in the Lord of the Rings
Appendix D.  If the day in question is not part of any week (Midyear day
and the Overlithe), then the null string is returned.

trad_weekday (for traditional weekday)
--------------------------------------

   $day_of_week = $shiredate->trad_weekday

   This function returns the day of the week using the archaic forms, the
oldest forms found in the Yellowskin of Tuckborough (also given in Appendix
D).  If the day in question is not part of any week (Midyear day and the
Overlithe), then the null string is returned.

month
-----

   $month = $shiredate->month;

   Returns the month of the date in question, or the null string if the
day is a holiday, since holidays are not part of any month.

day
---

   $day_of_month = $self->{monthday};

   returns the day of the month of the day in question, or 0 in the case of
a holiday, since they are not part of any month

holiday
-------

   $holiday = $shiredate->holiday;

   If the day in question is a holiday, returns a string which holiday it
is: "Yule 1", "Yule 2" (first day of the new year), "Lithe 1", "Midyear's
day", "Overlithe", or "Lithe 2".  If the day is not a holiday, the null
string is returned

year
----

   $shire_year = $shiredate->year;

   Returns the year of the shire date in question.  See the note on year
calculaton below if you want to see how I figured this.

Operators
---------

   The following comparison operators are available:     $shiredate1 <
$shiredate2     $shiredate1 lt $shiredate2     $shiredate1 <= $shiredate2
  $shiredate1 le $shiredate2     $shiredate1 >  $shiredate2
$shiredate1 gt $shiredate2     $shiredate1 >= $shiredate2     $shiredate1
ge $shiredate2     $shiredate1 == $shiredate2     $shiredate1 eq
$shiredate2     $shiredate1 != $shiredate2     $shiredate1 ne $shiredate2
  $shiredate1 <=> $shiredate2     $shiredate1 cmp $shiredate2

   You can only compare on shire date to another (no apples to oranges
here).  In this context both the numeric and string operators perform the
exact same function.  Like the standard operators, all but <=> and cmp
return 1 if the condition is true and the null string if it is false.  <=>
and cmp return -1 if the left operand is less than the right one, 0 if the
two operands are equal, and 1 if the left operand is greater than the
right one.

on_date
-------

   $historic_events = $shire_date->on_date

   or you may want to try something like my $shiredate =
Date::Tolkien::Shire->new(time); print "Today is " . $shiredate->on_date .
"\n";

   This method returns a string containing important events that happened
on this day and month in history, as well as the day itself.  It does not
give much more usefullness as far as using dates go, but it should be fun
to run during a startup script or something.  At present the events are
limited to the crucial years at the end of the third age when the final war
of the ring took place and Sauron was permanently defeated.  More dates
will be added as I find them (if I find them maybe I should say).  All the
ones below come from Appendix B of the Lord of the Rings.  At this point,
these are only available in English.

   Note here that the string is formatted.  This is to keep things simple
when using it as in the second example above.  Note that in this second
example you are actually ending with a double space, as the first endline
is part of the return value.

   If you don't like how this is formatted, complain at me and if I like
you I'll consider changing it :-)

NOTE: YEAR CALCULATION
======================

   http://www.glyhweb.com/arda/f/fourthage.html references a letter sent by
Tolkien in 1958 in which he estimates approxiimately 6000 years have passed
since the War of the Ring and the end of the Third Age.  (Thanks to Danny
O'Brien from sending me this link).  I took this approximate as an exact
and calculated back 6000 years from 1958 and set this as the start of the
4th age (1422).  Thus the fourth age begins in our B.C 4042.

   There is one issue that I have not finished yet with year calculation
and it may change in the future (and opinions on it are welcome, as
always).  According to Appendix D of the Lord of the Rings, leap years in
hobbit calendar are every 4 years unless its the turn of the century, in
which case it's not a leap year.  Our calendar uses every 4 years unless
it's 100 years unless its 400 years.  So, if no changes have been made to
the hobbit's calendar since the end of the third age, their calendar would
be about 15 days further behind ours now then when the War of the Ring took
place.  Implementing this seemed to me to go against Tolkien's general
habit of converting dates in the novel to our equivalents to give us a
better sense of time.  My thoughts, at least right now, is that it is
truer to the spirit of things for March 25 today to be about the same as
March 25 was back then.  So instead, I have modified Tolkien's description
of the hobbit calendar so that leap years occur once every 4 years unless
it's 100 years unless it's 400 years, so as it matches our calendar in that
regard.  These 100 and 400 year intervals occur at different times in the
two calendars, however.

   This final fact leads to the one known issue still in this module.
Currently, the logic used here only works for years between 1937 and 2035
(shire years 7401 to 7499).  This is due to the day offset at different
times (in 400 year cycles) between the leap years of the different
calendars.  The module still works for other dates and will provide valid
comparisons, but the day it gives will be slightly off from what is
actually the shire date unless you are between 1937 and 2035 (or 1537 and
1635, etc).  I am planning on fixing this, but that must take a back seat
for the moment to my college classes and more practical projects.

BIBLIOGRAPHY
============

   Tolkien, J. R. R. <i>Return of the King<i>.  New York: Houghton Mifflin
Press, 1955.  http://www.glyphweb.com/arda/f/fourthage.html

BUGS
====

   At present, does shire date reckoning is slightly off for years not
between 1937 and 2035 (shire reckoning 7401 to 7499).  See year
calculation for more information.


File: pm.info,  Node: DateTime/Precise,  Next: Db/Ctree,  Prev: Date/Tolkien/Shire,  Up: Module List

Perform common time and date operations with additional GPS operations
**********************************************************************

NAME
====

   DateTime::Precise - Perform common time and date operations with
additional GPS operations

SYNOPSIS
========

     use DateTime::Precise;

     use DateTime::Precise qw(:TimeVars);

     # Constructors and ways to set time.
     $t1 = DateTime::Precise->new;
     $t2 = DateTime::Precise->new('1998. 4. 3 12:13:44.054');
     $t3 = DateTime::Precise->new(time() - 100);
     $t4 = DateTime::Precise->new('1998.04.24');
     $t1->set_localtime_from_epoch_time;
     $t1->set_gmtime_from_epoch_time(time + 120);
     $t1->set_from_datetime('1998.03.23 16:58:14.65');
     $t1->set_time('YDHMS', 1998, 177, 9, 15, 26.5);

     # This is the same as $d3->set_from_datetime(...)
     $t3->dscanf("%^Y.%M.%D %h:%m:%s", "1998.03.25 20:25:23");
     if ($msg = $d1->dscanf("%~M", $input)) {
         print "error: $msg\n";
         print "Must enter a three-letter month abbrev.\n";
     }

     # Get different parts of the time.
     $year    = $t3->year;
     $month   = $t3->month;
     $day     = $t3->day;
     $hours   = $t3->hours;
     $minutes = $t3->minutes;
     $seconds = $t3->seconds;
     ($year, $day_of_year) = $t3->get_time('Yj');

     # Print times and dates.
     print $t2->asctime;
     print $t2->strftime('%T %C%n');
     print $t2->dprintf("%^Y.%M.%D %h:%m:%s");           # datetime
     print $t2->dprintf("%~w %~M %-D %h:%m:%s CST %^Y"); # ctime

     # Copy times.
     my $t4 = $t2->copy;

     # Set one time object to the same time as another: set $t3 equal to $t2.
     $t3->clone($t2);

     # Find the difference between two times.
     $secs_from_midnight = $t4 - $t1;
     $secs_from_midnight = $t4->diff($t1);

     # Add seconds, days, months, etc to time.
     $t1 = $t4 + 3600;                      # $t1 is now an hour after midnight
     $t1->inc_month(2);                     # add two months to $t1
     $t1->floor_month;                      # set $t1 to the first of the month

     # Can compare and sort DateTime::Precise.
     print "It's late!!!" if ($t1 > $t4);
     @sorted = sort @birthdays;             # normal comparisons work fine

     # Get the GPS weeks, seconds and day.
     $gps_week    = $t1->gps_week;
     $gps_seconds = $t1->gps_seconds;
     $gps_day     = $t1->gps_day;
     ($gps_week, $gps_seconds, $gps_day) = $t1->gps_week_seconds_day;

DESCRIPTION
===========

   The purpose of this library was to replace our dependence on Unix epoch
time, which, being limited to a range of about 1970 to 2030, is inadequate
for our purposes (we have data as old as 1870).  This date library
effectively handles dates from A.D. 1000 to infinity, and would probably
work all the way back to 0 (ignoring, of course, the switch-over to the
Gregorian calendar).  The useful features of Unix epoch time (ease of date
difference calculation and date comparison, strict ordering) are
preserved, and elements such as human-legibility are added.  The library
handles fractional seconds and some date/time manipulations used for the
Global Positioning Satellite system.

   The operators +/-, <=>, cmp, stringify are overloaded.  Addition
handles seconds and fractions of seconds, subtraction handles seconds or
date differences, compares work, and stringification returns the a
representation of the date.

   The US Geological Survey (USGS), likes midnight to be 24:00:00, not
00:00:00.  If $DateTime::Precise::USGSMidnight is set, dprintf will always
print midnight as 24:00:00.  Regardless, time is always stored internally
as 00:00:00.

CONSTRUCTOR
===========

new

new('1998. 4. 3 12:13:44')
new(time() - 100)
new('YDHMS', 1998, 200, 13, 16, 49.5)
     This creates a new time object.  If no argument is passed, then the
     time object is initialized with the time returned from gmtime
     (time()).  The second form is used to set the time explicitly.  The
     argument can be in one of three formats: "YYYY.MM.DD hh:mm:ss.ffff",
     "YYYY.MM.DD" (midnight assumed), or "YYYYMMDDhhmmss.ffff".  Here ffff
     are the fractions of seconds.  The third form sets the time using
     gmtime().  The fourth form sets the time using a format as the first
     argument followed by the particular date adjustments as the following
     arguments.  See set_time() for more information.  If the new fails,
     then new returns an empty list in a list context, an undefined value
     in a scalar context, or nothing in a void context.

     Because the second and third forms pass only one argument to new(),
     there must be a way of distinguishing them.  Currently the following
     test is used: if any non-digit characters are found in the argument or
     if the string form of the argument is longer than 10 character, then
     assume it to be a string to parse for the date.  Otherwise it is the
     time since the Unix epoch.  The string length of 10 was chosen since
     when the Unix epoch time flips to 11 digits, it'll be roughly year
     2287.

METHODS
=======

set_from_datetime *datetime*
     Set date/time from passed date/time string "YYYY.MM.DD hh:mm:ss.fff".
     If set_from_datetime successfully parses *datetime*, then the newly
     set date/time object is returned, otherwise it returns an empty list
     in a list context, an undefined value in a scalar context, or nothing
     in a void context.

set_localtime_from_epoch_time [*epoch*]
     Set from epoch time into the local time zone.  If *epoch* is passed,
     then use that time to set the current time, otherwise use the time as
     returned from time().  The newly set date/time object is returned.

set_gmtime_from_epoch_time [*epoch*]
     Set from the epoch time into the standard Greenwich time zone.  If
     *epoch* is passed, then use that time to set the current time,
     otherwise use the time as returned from time().  The newly set
     date/time object is returned.

set_from_day_of_year year day_of_year
     Set date/from from the year and the decimal day of the year.  Midnight
     January 1st is day 1, noon January 1st is 1.5, etc.  If the date was
     successfully set, then the newly set date/time object is returned,
     otherwise it returns an empty list in a list context, an undefined
     value in a scalar context, or nothing in a void context.

set_from_serial_day *serial_day_number*
     Set the date/time from the serial day.  See also serial_day().  If the
     date was successfully set, then the newly set date/time object is
     returned, otherwise is returns an empty list in a list context, an
     undefined value in a scalar context, or nothing in a void context.

set_from_gps_week_seconds gps_week gps_seconds
     Set the current time using the number of weeks and seconds into the
     week since GPS epoch (January 6, 1980 UTC).  If the date was
     successfully set, then the newly set date/time object is returned,
     otherwise is returns an empty list in a list context, an undefined
     value in a scalar context, or nothing in a void context.

set_time format [*arg*, [*arg*, ...]]
     Set the time.  format is a string composed of a select set of
     characters.  Some characters may take an optional argument, which are
     listed following the format argument in the same order as the
     characters.  The first character must be an absolute time:

          N => Set time to now.  No argument taken.
          G => Set time to GPS time 0 (January 6, 1980).  No argument taken.
          Y => Set time to beginning of the year.  Argument taken.
          J => Set time to modified Julian date.  Argument taken.
          s => Set time to seconds since January 1, 1970.  Argument taken.

     These characters represent modifiers to the time set using the above
     characters:

          B => Add months to time.  Argument taken.
          W => Add weeks to time.  Argument taken.
          D => Add days counted from 1 to time.  Argument taken.
          d => Add days counted from 0 to time.  Argument taken.
          H => Add hours to time.  Argument taken.
          M => Add minutes to time.  Argument taken.
          S => Add seconds to time.  Argument taken.

     If the date and time was successfully set, then it returns the newly
     set date/time object, otherwise set_time() returns an empty list in a
     list context, an undefined value in a scalar context, or nothing in a
     void context and the date and time remain unchanged.

get_time string
     Return an array, where each element of the array corresponds to the
     corresponding strftime() value.  This string should not contain %
     characters.  This method is a much, much better and faster way of
     doing

          map {$self->strftime("%$_")} split(//, $string)

year [year]
     Return the year.  If an argument is passed to year, then set the year
     to the the integer part of the argument and then return the newly set
     year.

month [month]
     Return the numerical month (1 = January, 12 = December).  If an
     argument is passed to month, then set the month to the integer part
     of the argument and return the newly set month.

day [day]
     Return the day of the month.  If an argument is passed to day, then
     set the day to the integer part of the argument and return the newly
     set day.

hours [hours]
     Return the hours in the day.  If an argument is passed to hours, then
     set the hours to the integer part of the argument and return the
     newly set hours.

minutes [minutes]
     Return the minutes in the hour.  If an argument is passed to minutes,
     then set the minutes to the integer part of the argument and return
     the newly set minutes.

seconds [seconds]
     Return the seconds in the minutes.  If an argument is passed to
     seconds, then set the seconds to the argument and return the newly
     set seconds.  This argument accepts fractional seconds and will return
     the fractional seconds.

serial_day
     Returns a serial day number representing the date, plus a fraction
     representing the time since midnight (i.e., noon=0.5).  This is for
     applications which need an scale index (we use it for positioning a
     date on a time-series graph axis).  See also set_from_serial_day().

day_of_year
     Return the day of the year including the fraction part of the day.
     Midnight January 1st is day 1, noon January 1st is 1.5, etc.

julian_day
     Return the day of the year including the fraction part of the day
     where time is 0 based.  Midnight January 1st is day 0, noon January
     1st is 0.5, noon January 2nd is 1.5, etc.

unix_seconds_since_epoch
     Return the time in seconds between the object and January 1, 1970 UTC.

gps_seconds_since_epoch
     Return the time in seconds between the object and January 6, 1980 UTC.

gps_week_seconds_day
     Return an array consisting of the GPS week 0 filled to four spaces,
     the number of seconds into the GPS week, and the GPS day, where day 0
     is Sunday.

gps_week
     Return the GPS week of the object.  The returned number is 0 filled to
     four digits.

gps_seconds
     Return the number of seconds into the current GPS week for the current
     object.

gps_day
     Return the GPS day of the week for the current object, where day 0 is
     Sunday.

copy
     Return an identical copy of the current object.

clone *other_dt*      Set this DateTime::Precise equal to *other_dt*.
dprintf string      Returns string with substitutions:          %x     number zero-padded to 2 digits (ie, '02')     %-x number space-padded to 2 digits (ie, ' 2')     %^x    unpadded number (ie, '2')     %~x    3-letter abbrev corresponding to value (%M and %w only)     %*x    full name corresponding to value (%M and %w only)     %%     '%'
     where x is one of:

     h      hours (0..23)     m      minutes (0..59)     s      seconds
     (0..59)     D      day of the month (1..31)     M      month (1..12)
       Y      years since 1900 (ie, 96)     W      USGS water year
     (year+1 for months Oct-Dec)     w      day of the week (0..6, or
     "Mon", etc.)      E      internal string (no ~^*-)

     so, for example, to get a string in datetime format, you would pass a
     string of '%^Y.%M.%D %h:%m:%s', or, to get a ctime-like string, you
     would pass: `'%~w %~M %-D %h:%m:%s CDT %^Y'' (presuming you're in the
     CDT.  Maybe timezone support will show up some day).

dscanf format string
     Takes a format string format, and use it to read the date and time
     fields from the supplied string.  The current date and time is
     unchanged if dscanf fails.

     All format characters recognized by dprintf() are valid.  Two
     additional characters are recognized, 'U' which sets the time to the
     local time/date using the number of seconds since Unix epoch time and
     'u' which sets the time to GMT time/date using the number of seconds
     since Unix epoch time.  Unless exact characters are supplied or format
     characters are concatenated, will separate on non-matching characters.

strftime format
     Just like the strftime() function call.  This version is based on the
     Solaris manual page.  format is a string containing of zero or more
     conversion specifications.  A specification character consists of a
     '%' (percent) character followed by one conversion characters that
     determine the conversion specifications behavior.  All ordinary
     characters are copied unchanged to the return string.

     The following GPS specific conversions are supported in this strftime:
        %s    the seconds since UTC January 1, 1970     %G    the GPS
     week (4 digits with leading 0's)     %g    the GPS seconds into the
     GPS week with no leading zeros     %f    the GPS day where 0 =
     Sunday, 1 = Monday, etc     %F    the GPS day where 1 = Sunday, 2 =
     Monday, etc

     The following standard conversions are understood:

          %%    the same as %
          %a    the abbreviated weekday name
          %A    the full weekday name
          %b    the abbreviated month name
          %B    the full month name
          %c    the appropriate date and time representation
          %C    century number (the year divided by 100 and truncated to an
                integer as a decimal number [1,99]); single digits are
                preceded by 0
          %d    day of month [1,31]; single digits are preceded by 0
          %D    date as %m/%d/%y
          %e    day of month [1,31]; single digits are preceded by a space
          %h    locale's abbreviated month name
          %H    hour (24-hour clock) [0,23]; single digits are preceded by 0
          %I    hour (12-hour clock) [1,12]; single digits are preceded by 0
          %j    day number of year [1,366]; single digits are preceded by 0
          %k    hour (24-hour clock) [0,23]; single digits are preceded by
                a blank
          %l    hour (12-hour clock) [1,12]; single digits are preceded by
                a blank
          %m    month number [1,12]; single digits are preceded by 0
          %M    minute [00,59]; leading zero is permitted but not required
          %n    insert a newline
          %p    either AM or PM
          %r    appropriate time representation in 12-hour clock format with
                %p
          %R    time as %H:%M
          %S    seconds [00,61]
          %t    insert a tab
          %T    time as %H:%M:%S
          %u    weekday as a decimal number [1,7], with 1 representing Sunday
          %U    week number of year as a decimal number [00,53], with Sunday
                as the first day of week 1
          %V    week number of the year as a decimal number [01,53], with
                Monday as the first day of the week. If the week containing 1
                January has four or more days in the new year, then it is
                considered week 1; otherwise, it is week 53 of the previous
                year, and the next week is week 1.
          %w    weekday as a decimal number [0,6], with 0 representing Sunday
          %W    week number of year as a decimal number [00,53], with Monday
                as the first day of week 1
          %x    locale's appropriate date representation
          %X    locale's appropriate time representation
          %y    year within century [00,99]
          %Y    year, including the century (for example 1993)
          %Z    Always GMT

asctime
     Return a string such as 'Fri Apr 3 12:13:44 GMT 1998'.  This is
     equivalent to strftime('%c').

Incrementing and rounding
-------------------------

   There are many subroutines of the format 'func_unit', where func is one
of (inc, dec, floor, ceil, round) and unit is one of (second, minute,
hour, day, month, year) [second and minute can be abbreviated as sec and
min respectively].

   *inc_unit*(i) increments the date by i units (i defaults to 1 if no
parameter is supplied).  For days through seconds, fractional increments
are allowed.  However, for months and years, only the integer part of the
increment is used.

   *dec_unit*(i) identical to *inc_unit*(-i).

   *round_unit*() rounds the date to the nearest unit.  Rounds years down
for Jan-Jun, and up for Jul-Dec; months down for 1st-15th and up for 16th
and later; days round up on or after 12:00:00; hours on or after xx:30:00,
minutes on or after 30 seconds; seconds on or after 0.5 seconds.

   *floor_unit*() rounds the date down to the earliest time for the
current unit.  For example, *floor_month*() rounds to midnight of the
first day of the current month, floor_day() to midnight of the current
day, and *floor_hour*() to xx:00:00.

   *ceil_unit*() is the complementary function to floor.  It rounds the
date up, to the earliest time in the next unit.  E.g., *ceil_month*()
makes the date midnight of the first day of the next month.

Overloaded operators
--------------------

   Addition, subtraction, and comparison operators are overloaded, as well
as the string representation of a date object.

     # create a new object
     $x = DateTime::Precise->new('1996.05.05 05:05:05');
     # copy it
     $y = $x;
     # increment x by one second
     $x++;
     # decrement by a day
     $y = $y - 86400;
     # test em
     print ($x < $y ? "x is earlier\n" : "y is earlier\n");
     # get the difference
     print "The difference between x and y is ", $x-$y, " seconds.\n";

   If $x is a date object, `$x + $i' is identical to $x->inc_sec($i).

   There are two possible results from subtraction.  `$x - $i', where $i
is a number, will return a new date, $i seconds before $x. `$x - $y',
where $y is another date object, is identical to $x->diff($y).

   Comparison operators (<,>,==,etc) work as one would expect.

PUBLIC CONSTANTS
================

   The following variables are not imported into your package by default.
If you want to use them, then use

     use DateTime::Precise qw(:TimeVars);

   in your package.  Otherwise, you can use the fully qualified package
name, such as $DateTime::Precise::USGSMidnight.

$USGSMidnight
     Set this to 1 if you want midnight represented as 24:00:00 of the
     previous day.  To use this variable in your

*@MonthDays*
     Days per month in a non-leap year.  This array is 1 indexed, so 0 is
     December, 1 is January, etc.

*@MonthName*
     Month names.  This array is 1 indexed, so 0 is December, 1 is January,
     etc.

*@MonthAbbrev*
     Month abbreviated names.  This array is 1indexed, so 0 is Dec, 1 is
     Jan, etc.

*@WeekName*
     Names of the week, 0 indexed.  So 0 is Sunday, 1 is Monday, etc.

*@WeekAbbrev*
     Abbreviated names of the week, 0 indexed.  So 0 is Sun, 1 is Mon, etc.

$Secs_per_week
     The number of seconds in one week (604800).

$Secs_per_day
     The number of seconds in one day (86400).

$Secs_per_hour
     The number of seconds in one hour (3600).

$Secs_per_minute
     The number of seconds in one minute (60).

&JANUARY_1_1970
     Subroutine returning the Unix epoch time January 1, 1970 UTC.

&JANUARY_6_1980
     Subroutine returning the GPS epoch time January 6, 1980 UTC.

PUBLIC SUBROUTINES
==================

*IsLeapYear*(year)
     Returns true if the argument is a leap year.

*DaysInMonth*(month, year)
     Returns the number of days in the month.

IMPLEMENTATION
==============

   This package is based on the DateTime package written by Greg Fast
<gdfast@usgs.gov>.  The _week_of_year routine is based on the
Date_WeekOfYear routine from the Date::DateManip package written by
Sullivan Beck.

   Instead of using the string representation used in the original
DateTime package, this package represents the time internally as a seven
element array, where the elements correspond to the year, month, day,
hours, minutes, seconds, and fractional seconds.

AUTHOR
======

   Contact: Blair Zajac <blair@gps.caltech.edu>.  The original version of
this was was based on DateTime written by Greg Fast <gdfast@usgs.gov>.


File: pm.info,  Node: Db/Ctree,  Next: Db/DFC,  Prev: DateTime/Precise,  Up: Module List

Perl extension to interface with Faircom's CTREE product
********************************************************

NAME
====

   Db::Ctree - Perl extension to interface with Faircom's CTREE product

SYNOPSIS
========

     use Db::Ctree qw(:all);

     InitISAM(10,2,4);
     $ptr = Db::Ctree -> new(0,'file.dat',&SHARED);
     $record = $ptr -> fetch_first();
     while ($record)
     {
        print $record."\n";
        $record = $ptr -> fetch_next();
     }

DESCRIPTION
===========

   This module allows the use of some ISAM and Low-Level CTREE routines
from within perl.  It is a PERL5 replacement for CTREEPERL by John Conover.

   In addition to base CTREE functionality, the ability to tie a hash to a
CTREE table, and some method based access is available.

Base CTREE support.
===================

   Support is provided for most low-level and ISAM routines as documented
in the Faircom documentation.  Those routines that use C structures
(resource records, DODA) are not currently supported. A routine that reads
DODA records is available in the METHOD access method.

   Like in C it is very important to pre-allocate the destination on reads.
Db::CTree just calls the Ctree routine... you *WILL* crash perl just as
fast as you crash C without preallocating enough space.

Error code functions
====================

   With C, error status is available via global variables.  Db::Ctree
provides functions that access the following global "C" variables.

     &isam_err
     &isam_fil
     &sysiocod
     &uerr_cod

Perl hash TIE support
=====================

   A limited Perl hash TIE implementation is available.  If the file has
been created by a C program, includes resource records, and uses unique
keys, it can be TIED to a Perl hash.  Unique keys are required because the
tie uses the GetRecord facility which requires Unique keys.

   TIE returns a pointer you can use for method access.

   Preallocating of space is not required for TIE support.

   The file is automatically closed when the hash (and ptr returned by
TIE) is destroyed or reassigned.

   Sample Code:    InitISAM(10,2,4);    tie %hash, "Db::Ctree",2,
$testIfile,&SHARED;    foreach (keys (%hash) )    {        printf
"%-10s=%s\n",$_,$hash{$_};    }

Perl METHOD support
===================

   A limited Perl method access is provided. The following methods are
available.  In case of error, most functions will return undef. For
details, use the error function defined above.

   These functions ensure enough space is available for the CTREE return
values.  There is no need to preallocate the space.  Variable/Fixed
functions are also selected for you.

   new (fileno,filename,mode)         returns an object reference to the
open file.

   fetch_first()         returns the first record based on the current
index.

   fetch_gte {$key)         note:  key modified with current key
returns the record just like getGTErecord

   fetch_lte {$key)         note:  key modified with current key
returns the record just like getGTErecord

   fetch_prev {)         returns the record just like getGTErecord

   fetch_next {)         returns the record just like getGTErecord

   unpack_record($record)         note: DODA must be stored in file
returns hash with fields as keys

   Sample Code:    InitISAM(10,2,4);    $dbptr = Db::Ctree -> new(2,
$testIfile,&SHARED);    $record = $dbptr -> fetch_first;    while ($record)
  {        %hash = $dbptr -> unpack_record($record);        print
"$hash{COLUMN}\n";        $record = $dbptr -> fetch_next;    }

Notes
=====

   ISAM and LOW LEVEL calls do not preallocate space (like C). Be sure
your variables are big enough! (Method and HASH access do this for you)

   InitISAM sets a tag variable in a class with a DESTROY method that
should issue a StopUser upon a normal Perl exit (including Die's).  This
prevents leaving shared memory segments around in server based systems.
If you coredump (die without Perl cleaning up), these memory segments can
be left around and eventually crash your server!

   Ctree functions are not exported by default. EXPORTER tags are
available for ALL,ISAM,LOWLEVEL,CONSTANTS and VARIABLES. Personally, I
just import tag ":all" and live with the namespace pollution.

   I've also included ctdump and ctload.  These are some simple ctree perl
routines I've written to dump and load tables. (The tables were created by
a C program and have resource and DODA structures already.)

Author
======

   Robert Eden CommTech Corporation rmeden@yahoo.com

SEE ALSO
========

   perl(1), Faircom C-Tree Plus Function Reference Guide, Faircom C-Tree
Plus Programmer's Guide =cut


File: pm.info,  Node: Db/DFC,  Next: DbFramework/Attribute,  Prev: Db/Ctree,  Up: Module List

Perl's Object-oriented interface to Documentum's DFC
****************************************************

NAME
====

   Db::DFC - Perl's Object-oriented interface to Documentum's DFC

SYNOPSIS
========

     use Db::DFC;
     $dfc = Db::DFC->new();

     $DOCBASE = "docbase";
     $USER = "user";
     $PASSWORD = "passwd";
     $DOMAIN = "domain";
     $FILE = $0;

     $dfclient = DfClient->new();
     $idfclient = $dfclient->getLocalClient();
     $idflogininfo = DfLoginInfo->new();

     $idflogininfo->setUser($USER);
     $idflogininfo->setPassword($PASSWORD);
     $idflogininfo->setDomain($DOMAIN);

     $idfsession = $idfclient->newSession($DOCBASE,$idflogininfo);

     $pobj = $idfsession->newObject("dm_document");
     $doc = $dfc->castToIDfDocument($pobj);

     $doc->setObjectName("this file");
     $doc->setContentType("crtext");
     $doc->setFile($FILE);
     $doc->save();

     print "\nDocument Id:" . $doc->getObjectId()->toString() . " created.\n";
     $idfsession->disconnect;

DESCRIPTION
===========

     Db::DFC provides an object-oriented interface to Documentum's DFC.
     ...

AUTHOR
======

     m. Scott Roth, michael.s.roth@saic.com

SEE ALSO
========

   perl(1).


File: pm.info,  Node: DbFramework/Attribute,  Next: DbFramework/Catalog,  Prev: Db/DFC,  Up: Module List

Attribute class
***************

NAME
====

   DbFramework::Attribute - Attribute class

SYNOPSIS
========

     use DbFramework::Attribute;
     my $a = new DbFramework::Attribute($name,$default_value,$is_optional,$data_type);
     $name  = $a->name($name);
     $value = $a->default_value($value);
     $opt   = $a->is_optional($boolean);
     $type  = $a->references($data_type);
     $bgc   = $a->bgcolor($bgcolor);
     $sql   = $a->as_sql;
     $s     = $a->as_string;
     $html  = $a->as_html_form_field($value,$type);
     $html  = $a->as_html_heading($bgcolor);

DESCRIPTION
===========

   A *DbFramework::Attribute* object represents an attribute (column) in a
table (entity).

SUPERCLASSES
============

   *DbFramework::Util*

CLASS METHODS
=============

new($name,$default_value,$is_optional,$data_type)
-------------------------------------------------

   Create a new *DbFramework::Attribute* object.  $name is the name of the
attribute.  *$default_value* is the default value for the attribute.
*$is_optional* should be set to true if the attribute is optional or
false.  $data_type is a *DbFramework::DataType* object.

name($name)
-----------

   If $name is supplied sets the attribute name.  Returns the attribute
name.

default_value($value)
---------------------

   If $value is supplied sets the default value for the attribute.  $value
should be compatible with the the data type set by references().  Returns
the default value for the attribute.

is_optional($boolean)
---------------------

   If $boolean is supplied sets the optionality of the attribute (i.e.
whether it can contain NULLs.)  $boolean should evaluate to true or false.
Returns the optionality of the attribute.

references($data_type)
----------------------

   If $data_type is supplied sets the data type of the attribute.
$data_type is an ANSII data type object i.e.
*DbFramework::DataType::ANSII* or a driver-specific object e.g.
*DbFramework::DataType::Mysql*.  Returns the data type object.

bgcolor($bgcolor)
-----------------

   If $color is supplied sets the background colour for HTML table
headings returned by as_html_heading().  Returns the current background
colour.

as_sql($dbh)
------------

   Returns a string which can be used to create a column in an SQL 'CREATE
TABLE' statement.  $dbh is a DBI handle.

as_html_form_field($value,$type)
--------------------------------

   Returns an HTML form field representation of the attribute.  The HTML
field type produced depends on the name of object returned by data_type().
This can be overidden by setting $type.  $value is the default value to
be entered in the generated field.

as_string()
-----------

   Return attribute details as a text string.

as_html_heading($bgcolor)
-------------------------

   Returns a string for use as a column heading cell in an HTML table.
$bgcolor is the background colour to use for the heading.

SEE ALSO
========

   *Note DbFramework/DataType/ANSII: DbFramework/DataType/ANSII, and *Note
DbFramework/DataType/Mysql: DbFramework/DataType/Mysql,.

AUTHOR
======

   Paul Sharpe <paul@miraclefish.com>

COPYRIGHT
=========

   Copyright (c) 1997,1998,1999 Paul Sharpe. England.  All rights
reserved.  This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.


File: pm.info,  Node: DbFramework/Catalog,  Next: DbFramework/DataModel,  Prev: DbFramework/Attribute,  Up: Module List

Catalog class
*************

NAME
====

   DbFramework::Catalog - Catalog class

SYNOPSIS
========

     use DbFramework::Catalog;
     my $c = new DbFramework::Catalog($dsn,$user,$password);
     $c->set_primary_key($table);
     $c->set_keys($table);
     $c->set_foreign_keys($dm);

DESCRIPTION
===========

   *DbFramework::Catalog* is a class for manipulating the catalog database
used by various DbFramework modules and scripts.

The Catalog
-----------

   DbFramework retrieves as much metadata as possible using DBI.  It aims
to store the metadata not provided by DBI in a consistent manner across
all DBI drivers by using a catalog database called *dbframework_catalog*.
Each database you use with DbFramework requires corresponding key
information added to the catalog.  The *dbframework_catalog* database will
be created for each driver you test when you build DbFramework.  Entries
in the catalog only need to be modified when the corresponding database
schema changes.

   The following (Mysql) SQL creates the catalog database schema.

     CREATE TABLE c_db (
       	  db_name varchar(50) DEFAULT '' NOT NULL,
       	  PRIMARY KEY (db_name)
     );

     CREATE TABLE c_key (
       db_name varchar(50) DEFAULT '' NOT NULL,
       table_name varchar(50) DEFAULT '' NOT NULL,
       key_name varchar(50) DEFAULT '' NOT NULL,
       key_type int(11) DEFAULT '0' NOT NULL,
       key_columns varchar(255) DEFAULT '' NOT NULL,
       PRIMARY KEY (db_name,table_name,key_name)
     );

     CREATE TABLE c_relationship (
       db_name varchar(50) DEFAULT '' NOT NULL,
       fk_table varchar(50) DEFAULT '' NOT NULL,
       fk_key varchar(50) DEFAULT '' NOT NULL,
       pk_table varchar(50) DEFAULT '' NOT NULL,
       PRIMARY KEY (db_name,fk_table,fk_key,pk_table)
     );

     CREATE TABLE c_table (
       table_name varchar(50) DEFAULT '' NOT NULL,
       db_name varchar(50) DEFAULT '' NOT NULL,
       PRIMARY KEY (table_name,db_name)
     );

   The example below shows the creation of a simple Mysql database and the
corresponding catalog entries required by DbFramework.

     CREATE DATABASE foo;
             use foo;

     CREATE TABLE foo (
       	  foo integer not null,
       bar varchar(50),
       KEY var(bar),
       	  PRIMARY KEY (foo)
     );

     CREATE TABLE bar (
       	  bar integer not null,
       # foreign key to table foo
       foo integer not null,
       	  PRIMARY KEY (bar)
     );

     use dbframework_catalog;

     # catalog entry for database 'foo'
     INSERT INTO c_db VALUES('foo');

     # catalog entries for table 'foo'
     INSERT INTO c_table VALUES('foo','foo');
     # primary key type = 0
     INSERT INTO c_key VALUES('foo','foo','primary',0,'foo');
     # index type = 2
     INSERT INTO c_key VALUES('foo','foo','bar_index',2,'bar');

     # catalog entries for table 'bar'
     INSERT INTO c_table VALUES('bar','foo');
     # primary key type = 0
     INSERT INTO c_key VALUES('foo','bar','primary',0,'bar');
     # foreign key type = 1
     INSERT INTO c_key VALUES('foo','bar','foreign_foo',2,'foo');
     # relationship between 'bar' and 'foo'
     INSERT INTO c_relationship VALUES('foo','bar','foreign_foo','foo');

SUPERCLASSES
============

   *DbFramework::Util*

CLASS METHODS
=============

new($dsn,$user,$password)
-------------------------

   Create a new *DbFramework::Catalog* object.  *$dsn* is the DBI data
source name containing the catalog database (default is
'dbframework_catalog').  *$user* and $password are optional arguments
specifying the username and password to use when connecting to the
database.

OBJECT METHODS
==============

set_primary_key($table)
-----------------------

   Set the primary key for the *DbFramework::Table* object *$table*.

set_keys($table)
----------------

   Set the keys (indexes) for the *DbFramework::Table* object *$table*.

set_foreign_keys($dm)
---------------------

   Set the foreign keys for the *DbFramework::DataModel* object *$dm*.

AUTHOR
======

   Paul Sharpe <paul@miraclefish.com>

COPYRIGHT
=========

   Copyright (c) 1999 Paul Sharpe. England.  All rights reserved.  This
program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.


