This is Info file perl.info, produced by Makeinfo version 1.68 from the
input file bigperl.texi.

   settitle perl


File: perl.info,  Node: Top,  Next: perldelta,  Prev: Top,  Up: (dir)

Practical Extraction and Report Language
****************************************

NAME
====

   perl - Practical Extraction and Report Language

SYNOPSIS
========

   *perl*	[ *-sTuU* ] [ *-hv* ] [ -V[:*configvar*] ]
[ *-cw* ] [ -d[:*debugger*] ] [ -D[*number/list*] ]
[ *-pna* ] [ -Fpattern ] [ -l[*octal*] ] [ -0[*octal*] ]
[ -Idir ] [ -m[-]module ] [ -M[-]*'module...'* ]     [ -P ] [ -S ]
[ -x[dir] ]     [ -i[*extension*] ]
[ -e 'command' ]     [ - ] [ *programfile* ] [ argument ]...

   For ease of access, the Perl manual has been split up into several
sections:

* Menu:

* perl:: 	Perl overview (this section)
* perldelta:: 	Perl changes since previous version
* perl5005delta:: Perl changes in version 5.005
* perl5004delta:: Perl changes in version 5.004
* perlfaq:: 	Perl frequently asked questions
* perltoc:: 	Perl documentation table of contents

* perldata:: 	Perl data structures
* perlsyn:: 	Perl syntax
* perlop:: 	Perl operators and precedence
* perlre:: 	Perl regular expressions
* perlrun:: 	Perl execution and options
* perlfunc:: 	Perl builtin functions
* perlopentut:: 	Perl open() tutorial
* perlvar:: 	Perl predefined variables
* perlsub:: 	Perl subroutines
* perlmod:: 	Perl modules: how they work
* perlmodlib:: 	Perl modules: how to write and use
* perlmodinstall:: Perl modules: how to install from CPAN
* perlform:: 	Perl formats
* perlunicode:: 	Perl unicode support
* perllocale:: 	Perl locale support

* perlreftut:: 	Perl references short introduction
* perlref:: 	Perl references, the rest of the story
* perldsc:: 	Perl data structures intro
* perllol:: 	Perl data structures: arrays of arrays
* perlboot:: 	Perl OO tutorial for beginners
* perltoot:: 	Perl OO tutorial, part 1
* perltootc:: 	Perl OO tutorial, part 2
* perlobj:: 	Perl objects
* perltie:: 	Perl objects hidden behind simple variables
* perlbot:: 	Perl OO tricks and examples
* perlipc:: 	Perl interprocess communication
* perlfork:: 	Perl fork() information
* perlthrtut:: 	Perl threads tutorial
* perllexwarn:: 	Perl warnings and their control
* perlfilter:: 	Perl source filters
* perldbmfilter:: Perl DBM filters

* perlcompile:: 	Perl compiler suite intro
* perldebug:: 	Perl debugging
* perldiag:: 	Perl diagnostic messages
* perlnumber:: 	Perl number semantics
* perlsec:: 	Perl security
* perltrap:: 	Perl traps for the unwary
* perlport:: 	Perl portability guide
* perlstyle:: 	Perl style guide

* perlpod:: 	Perl plain old documentation
* perlbook:: 	Perl book information

* perlembed:: 	Perl ways to embed perl in your C or C++ application
* perlapio:: 	Perl internal IO abstraction interface
* perldebguts:: 	Perl debugging guts and tips
* perlxs:: 	Perl XS application programming interface
* perlxstut:: 	Perl XS tutorial
* perlguts:: 	Perl internal functions for those doing extensions
* perlcall:: 	Perl calling conventions from C
* perlapi:: 	Perl API listing (autogenerated)
* perlintern:: 	Perl internal functions (autogenerated)


* Module List:(pm.info)Module List. Got your modules, right here
* Function Index:: Perl functions and operators
* Predefined Variable Index:: Perl predefined variables
* Diagnostics Index:: Perl diagnostic messages

* Menu:

* perl:: 	Perl overview (this section)
* perldelta:: 	Perl changes since previous version
* perl5005delta:: Perl changes in version 5.005
* perl5004delta:: Perl changes in version 5.004
* perlfaq:: 	Perl frequently asked questions
* perltoc:: 	Perl documentation table of contents

* perldata:: 	Perl data structures
* perlsyn:: 	Perl syntax
* perlop:: 	Perl operators and precedence
* perlre:: 	Perl regular expressions
* perlrun:: 	Perl execution and options
* perlfunc:: 	Perl builtin functions
* perlopentut:: 	Perl open() tutorial
* perlvar:: 	Perl predefined variables
* perlsub:: 	Perl subroutines
* perlmod:: 	Perl modules: how they work
* perlmodlib:: 	Perl modules: how to write and use
* perlmodinstall:: Perl modules: how to install from CPAN
* perlform:: 	Perl formats
* perlunicode:: 	Perl unicode support
* perllocale:: 	Perl locale support

* perlreftut:: 	Perl references short introduction
* perlref:: 	Perl references, the rest of the story
* perldsc:: 	Perl data structures intro
* perllol:: 	Perl data structures: arrays of arrays
* perlboot:: 	Perl OO tutorial for beginners
* perltoot:: 	Perl OO tutorial, part 1
* perltootc:: 	Perl OO tutorial, part 2
* perlobj:: 	Perl objects
* perltie:: 	Perl objects hidden behind simple variables
* perlbot:: 	Perl OO tricks and examples
* perlipc:: 	Perl interprocess communication
* perlfork:: 	Perl fork() information
* perlthrtut:: 	Perl threads tutorial
* perllexwarn:: 	Perl warnings and their control
* perlfilter:: 	Perl source filters
* perldbmfilter:: Perl DBM filters

* perlcompile:: 	Perl compiler suite intro
* perldebug:: 	Perl debugging
* perldiag:: 	Perl diagnostic messages
* perlnumber:: 	Perl number semantics
* perlsec:: 	Perl security
* perltrap:: 	Perl traps for the unwary
* perlport:: 	Perl portability guide
* perlstyle:: 	Perl style guide

* perlpod:: 	Perl plain old documentation
* perlbook:: 	Perl book information

* perlembed:: 	Perl ways to embed perl in your C or C++ application
* perlapio:: 	Perl internal IO abstraction interface
* perldebguts:: 	Perl debugging guts and tips
* perlxs:: 	Perl XS application programming interface
* perlxstut:: 	Perl XS tutorial
* perlguts:: 	Perl internal functions for those doing extensions
* perlcall:: 	Perl calling conventions from C
* perlapi:: 	Perl API listing (autogenerated)
* perlintern:: 	Perl internal functions (autogenerated)

* perltodo:: 	Perl things to do
* perlhack:: 	Perl hackers guide
* perlhist:: 	Perl history records


* Module List:(pm.info)Module List. Got your modules, right here
* Function Index:: Perl functions and operators
* Predefined Variable Index:: Perl predefined variables
* Diagnostics Index:: Perl diagnostic messages

* Menu:

* perl:: 	Perl overview (this section)
* perldelta:: 	Perl changes since previous version
* perl5005delta:: Perl changes in version 5.005
* perl5004delta:: Perl changes in version 5.004
* perlfaq:: 	Perl frequently asked questions
* perltoc:: 	Perl documentation table of contents

* perldata:: 	Perl data structures
* perlsyn:: 	Perl syntax
* perlop:: 	Perl operators and precedence
* perlre:: 	Perl regular expressions
* perlrun:: 	Perl execution and options
* perlfunc:: 	Perl builtin functions
* perlopentut:: 	Perl open() tutorial
* perlvar:: 	Perl predefined variables
* perlsub:: 	Perl subroutines
* perlmod:: 	Perl modules: how they work
* perlmodlib:: 	Perl modules: how to write and use
* perlmodinstall:: Perl modules: how to install from CPAN
* perlform:: 	Perl formats
* perlunicode:: 	Perl unicode support
* perllocale:: 	Perl locale support

* perlreftut:: 	Perl references short introduction
* perlref:: 	Perl references, the rest of the story
* perldsc:: 	Perl data structures intro
* perllol:: 	Perl data structures: arrays of arrays
* perlboot:: 	Perl OO tutorial for beginners
* perltoot:: 	Perl OO tutorial, part 1
* perltootc:: 	Perl OO tutorial, part 2
* perlobj:: 	Perl objects
* perltie:: 	Perl objects hidden behind simple variables
* perlbot:: 	Perl OO tricks and examples
* perlipc:: 	Perl interprocess communication
* perlfork:: 	Perl fork() information
* perlthrtut:: 	Perl threads tutorial
* perllexwarn:: 	Perl warnings and their control
* perlfilter:: 	Perl source filters
* perldbmfilter:: Perl DBM filters

* perlcompile:: 	Perl compiler suite intro
* perldebug:: 	Perl debugging
* perldiag:: 	Perl diagnostic messages
* perlnumber:: 	Perl number semantics
* perlsec:: 	Perl security
* perltrap:: 	Perl traps for the unwary
* perlport:: 	Perl portability guide
* perlstyle:: 	Perl style guide

* perlpod:: 	Perl plain old documentation
* perlbook:: 	Perl book information

* perlembed:: 	Perl ways to embed perl in your C or C++ application
* perlapio:: 	Perl internal IO abstraction interface
* perldebguts:: 	Perl debugging guts and tips
* perlxs:: 	Perl XS application programming interface
* perlxstut:: 	Perl XS tutorial
* perlguts:: 	Perl internal functions for those doing extensions
* perlcall:: 	Perl calling conventions from C
* perlapi:: 	Perl API listing (autogenerated)
* perlintern:: 	Perl internal functions (autogenerated)

* perltodo:: 	Perl things to do
* perlhack:: 	Perl hackers guide
* perlhist:: 	Perl history records

* perlamiga:: 	Perl notes for Amiga
* perlcygwin:: 	Perl notes for Cygwin
* perldos:: 	Perl notes for DOS
* perlhpux:: 	Perl notes for HP-UX
* perlmachten:: 	Perl notes for Power MachTen
* perlos2:: 	Perl notes for OS/2
* perlos390:: 	Perl notes for OS/390
* perlvms:: 	Perl notes for VMS
* perlwin32:: 	Perl notes for Windows


* Module List:(pm.info)Module List. Got your modules, right here
* Function Index:: Perl functions and operators
* Predefined Variable Index:: Perl predefined variables
* Diagnostics Index:: Perl diagnostic messages

   (If you're intending to read these straight through for the first time,
the suggested order will tend to reduce the number of forward references.)

   By default, the manpages listed above are installed in the
`/usr/local/man/' directory.

   Extensive additional documentation for Perl modules is available.  The
default configuration for perl will place this additional documentation in
the `/usr/local/lib/perl5/man' directory (or else in the man subdirectory
of the Perl library directory).  Some of this additional documentation is
distributed standard with Perl, but you'll also find documentation for
third-party modules there.

   You should be able to view Perl's documentation with your man(1)
program by including the proper directories in the appropriate start-up
files, or in the MANPATH environment variable.  To find out where the
configuration has installed the manpages, type:

     perl -V:man.dir

   If the directories have a common stem, such as `/usr/local/man/man1'
and `/usr/local/man/man3', you need only to add that stem
(`/usr/local/man') to your man(1) configuration files or your MANPATH
environment variable.  If they do not share a stem, you'll have to add
both stems.

   If that doesn't work for some reason, you can still use the supplied
perldoc script to view module information.  You might also look into
getting a replacement man program.

   If something strange has gone wrong with your program and you're not
sure where you should look for help, try the -w switch first.  It will
often point out exactly where the trouble is.

DESCRIPTION
===========

   Perl is a language optimized for scanning arbitrary text files,
extracting information from those text files, and printing reports based
on that information.  It's also a good language for many system management
tasks.  The language is intended to be practical (easy to use, efficient,
complete) rather than beautiful (tiny, elegant, minimal).

   Perl combines (in the author's opinion, anyway) some of the best
features of C, *sed*, *awk*, and *sh*, so people familiar with those
languages should have little difficulty with it.  (Language historians
will also note some vestiges of *csh*, Pascal, and even BASIC-PLUS.)
Expression syntax corresponds closely to C expression syntax.  Unlike most
Unix utilities, Perl does not arbitrarily limit the size of your data-if
you've got the memory, Perl can slurp in your whole file as a single
string.  Recursion is of unlimited depth.  And the tables used by hashes
(sometimes called "associative arrays") grow as necessary to prevent
degraded performance.  Perl can use sophisticated pattern matching
techniques to scan large amounts of data quickly.  Although optimized for
scanning text, Perl can also deal with binary data, and can make dbm files
look like hashes.  Setuid Perl scripts are safer than C programs through a
dataflow tracing mechanism that prevents many stupid security holes.

   If you have a problem that would ordinarily use *sed* or *awk* or *sh*,
but it exceeds their capabilities or must run a little faster, and you
don't want to write the silly thing in C, then Perl may be for you.  There
are also translators to turn your *sed* and *awk* scripts into Perl
scripts.

   But wait, there's more...

   Begun in 1993 (see *Note Perlhist: perlhist,), Perl version 5 is nearly
a complete rewrite that provides the following additional benefits:

   * modularity and reusability using innumerable modules

     Described in *Note Perlmod: perlmod,, *Note Perlmodlib: perlmodlib,,
     and *Note Perlmodinstall: perlmodinstall,.

   * embeddable and extensible

     Described in *Note Perlembed: perlembed,, *Note Perlxstut:
     perlxstut,, *Note Perlxs: perlxs,, *Note Perlcall: perlcall,, *Note
     Perlguts: perlguts,, and `xsubpp' in this node.

   * roll-your-own magic variables (including multiple simultaneous DBM
     implementations)

     Described in *Note Perltie: perltie, and *Note AnyDBM_File:
     (pm.info)AnyDBM_File,.

   * subroutines can now be overridden, autoloaded, and prototyped

     Described in *Note Perlsub: perlsub,.

   * arbitrarily nested data structures and anonymous functions

     Described in *Note Perlreftut: perlreftut,, *Note Perlref: perlref,,
     *Note Perldsc: perldsc,, and *Note Perllol: perllol,.

   * object-oriented programming

     Described in *Note Perlobj: perlobj,, *Note Perltoot: perltoot,, and
     *Note Perlbot: perlbot,.

   * compilability into C code or Perl bytecode

     Described in *Note B: (pm.info)B, and *Note B/Bytecode:
     (pm.info)B/Bytecode,.

   * support for light-weight processes (threads)

     Described in *Note Perlthrtut: perlthrtut, and `Thread' in this node.

   * support for internationalization, localization, and Unicode

     Described in *Note Perllocale: perllocale, and *Note Utf8:
     (pm.info)utf8,.

   * lexical scoping

     Described in *Note Perlsub: perlsub,.

   * regular expression enhancements

     Described in *Note Perlre: perlre,, with additional examples in *Note
     Perlop: perlop,.

   * enhanced debugger and interactive Perl environment, with integrated
     editor support

     Described in *Note Perldebug: perldebug,.

   * POSIX 1003.1 compliant library

     Described in *Note POSIX: (pm.info)POSIX,.

   Okay, that's *definitely* enough hype.

AVAILABILITY
============

   Perl is available for most operating systems, including virtually all
Unix-like platforms.  See `"Supported Platforms"', *Note Perlport:
perlport, for a listing.

ENVIRONMENT
===========

   See *Note Perlrun: perlrun,.

AUTHOR
======

   Larry Wall <larry@wall.org>, with the help of oodles of other folks.

   If your Perl success stories and testimonials may be of help to others
who wish to advocate the use of Perl in their applications, or if you wish
to simply express your gratitude to Larry and the Perl developers, please
write to perl-thanks@perl.org .

FILES
=====

     "@INC"			locations of perl libraries

SEE ALSO
========

     a2p	awk to perl translator
     s2p	sed to perl translator

     http://www.perl.com/	    the Perl Home Page
     http://www.perl.com/CPAN   the Comprehensive Perl Archive

DIAGNOSTICS
===========

   The `use warnings' pragma (and the -w switch) produces some lovely
diagnostics.

   See *Note Perldiag: perldiag, for explanations of all Perl's
diagnostics.  The `use diagnostics' pragma automatically turns Perl's
normally terse warnings and errors into these longer forms.

   Compilation errors will tell you the line number of the error, with an
indication of the next token or token type that was to be examined.  (In a
script passed to Perl via -e switches, each -e is counted as one line.)

   Setuid scripts have additional constraints that can produce error
messages such as "Insecure dependency".  See *Note Perlsec: perlsec,.

   Did we mention that you should definitely consider using the -w switch?

BUGS
====

   The -w switch is not mandatory.

   Perl is at the mercy of your machine's definitions of various
operations such as type casting, atof(), and floating-point output with
sprintf().

   If your stdio requires a seek or eof between reads and writes on a
particular stream, so does Perl.  (This doesn't apply to sysread() and
syswrite().)

   While none of the built-in data types have any arbitrary size limits
(apart from memory size), there are still a few arbitrary limits:  a given
variable name may not be longer than 251 characters.  Line numbers
displayed by diagnostics are internally stored as short integers, so they
are limited to a maximum of 65535 (higher numbers usually being affected
by wraparound).

   You may mail your bug reports (be sure to include full configuration
information as output by the myconfig program in the perl source tree, or
by `perl -V') to perlbug@perl.com .  If you've succeeded in compiling
perl, the *perlbug* script in the `utils/' subdirectory can be used to
help mail in a bug report.

   Perl actually stands for Pathologically Eclectic Rubbish Lister, but
don't tell anyone I said that.

NOTES
=====

   The Perl motto is "There's more than one way to do it."  Divining how
many more is left as an exercise to the reader.

   The three principal virtues of a programmer are Laziness, Impatience,
and Hubris.  See the Camel Book for why.


File: perl.info,  Node: Win32,  Next: Win32/ADO,  Prev: Wharf/JDockApp/jtools,  Up: Module List

Interfaces to some Win32 API Functions
**************************************

NAME
====

   Win32 - Interfaces to some Win32 API Functions

DESCRIPTION
===========

   Perl on Win32 contains several functions to access Win32 APIs. Some are
included in Perl itself (on Win32) and some are only available after
explicitly requesting the Win32 module with:

     use Win32;

   The builtin functions are marked as [CORE] and the other ones as [EXT]
in the following alphabetical listing. The Win32 module is not part of the
Perl source distribution; it is distributed in the libwin32 bundle of
Win32::* modules on CPAN. The module is already preinstalled in binary
distributions like ActivePerl.

Alphabetical Listing of Win32 Functions
---------------------------------------

Win32::AbortSystemShutdown(MACHINE)
     [EXT] Aborts a system shutdown (started by the InitiateSystemShutdown
     function) on the specified MACHINE.

Win32::BuildNumber()
     [CORE] Returns the ActivePerl build number. This function is only
     available in the ActivePerl binary distribution.

Win32::CopyFile(FROM, TO, OVERWRITE)
     [CORE] The Win32::CopyFile() function copies an existing file to a new
     file. All file information like creation time and file attributes will
     be copied to the new file. However it will not copy the security
     information. If the destination file already exists it will only be
     overwritten when the OVERWRITE parameter is true. But even this will
     not overwrite a read-only file; you have to unlink() it first
     yourself.

Win32::DomainName()
     [CORE] Returns the name of the Microsoft Network domain that the
     owner of the current perl process is logged into.

Win32::ExpandEnvironmentStrings(STRING)
     [EXT] Takes STRING and replaces all referenced environment variable
     names with their defined values. References to environment variables
     take the form `%VariableName%'. Case is ignored when looking up the
     VariableName in the environment. If the variable is not found then the
     original `%VariableName%' text is retained.  Has the same effect as
     the following:

          $string =~ s/%([^%]*)%/$ENV{$1} || "%$1%"/eg

Win32::FormatMessage(ERRORCODE)
     [CORE] Converts the supplied Win32 error number (e.g. returned by
     Win32::GetLastError()) to a descriptive string.  Analogous to the
     perror() standard-C library function.  Note that $^E used in a string
     context has much the same effect.

          C:\> perl -e "$^E = 26; print $^E;"
          The specified disk or diskette cannot be accessed

Win32::FsType()
     [CORE] Returns the name of the filesystem of the currently active
     drive (like 'FAT' or 'NTFS'). In list context it returns three values:
     (FSTYPE, FLAGS, MAXCOMPLEN). FSTYPE is the filesystem type as before.
     FLAGS is a combination of values of the following table:

          0x00000001  supports case-sensitive filenames
          0x00000002  preserves the case of filenames
          0x00000004  supports Unicode in filenames
          0x00000008  preserves and enforces ACLs
          0x00000010  supports file-based compression
          0x00000020  supports disk quotas
          0x00000040  supports sparse files
          0x00000080  supports reparse points
          0x00000100  supports remote storage
          0x00008000  is a compressed volume (e.g. DoubleSpace)
          0x00010000  supports object identifiers
          0x00020000  supports the Encrypted File System (EFS)

     MAXCOMPLEN is the maximum length of a filename component (the part
     between two backslashes) on this file system.

Win32::FreeLibrary(HANDLE)
     [EXT] Unloads a previously loaded dynamic-link library. The HANDLE is
     no longer valid after this call. See
     `LoadLibrary|Win32::LoadLibrary(LIBNAME)' in this node for
     information on dynamically loading a library.

Win32::GetArchName()
     [EXT] Use of this function is deprecated. It is equivalent with
     $ENV{PROCESSOR_ARCHITECTURE}. This might not work on Win9X.

Win32::GetChipName()
     [EXT] Returns the processor type: 386, 486 or 586 for Intel
     processors, 21064 for the Alpha chip.

Win32::GetCwd()
     [CORE] Returns the current active drive and directory. This function
     does not return a UNC path, since the functionality required for such
     a feature is not available under Windows 95.

Win32::GetFullPathName(FILENAME)
     [CORE] GetFullPathName combines the FILENAME with the current drive
     and directory name and returns a fully qualified (aka, absolute) path
     name. In list context it returns two elements: (PATH, FILE) where
     PATH is the complete pathname component (including trailing backslash)
     and FILE is just the filename part.  Note that no attempt is made to
     convert 8.3 components in the supplied FILENAME to longnames or
     vice-versa.  Compare with Win32::GetShortPathName and
     Win32::GetLongPathName.

     This function has been added for Perl 5.6.

Win32::GetLastError()
     [CORE] Returns the last error value generated by a call to a Win32 API
     function.  Note that $^E used in a numeric context amounts to the
     same value.

Win32::GetLongPathName(PATHNAME)
     [CORE] Returns a representaion of PATHNAME composed of longname
     components (if any).  The result may not necessarily be longer than
     PATHNAME.  No attempt is made to convert PATHNAME to the absolute
     path.  Compare with Win32::GetShortPathName and
     Win32::GetFullPathName.

     This function has been added for Perl 5.6.

Win32::GetNextAvailDrive()
     [CORE] Returns a string in the form of "<d>:" where <d> is the first
     available drive letter.

Win32::GetOSVersion()
     [CORE] Returns the array (STRING, MAJOR, MINOR, BUILD, ID), where the
     elements are, respectively: An arbitrary descriptive string, the
     major version number of the operating system, the minor version
     number, the build number, and a digit indicating the actual operating
     system. For ID, the values are 0 for Win32s, 1 for Windows 9X and 2
     for Windows NT. In scalar context it returns just the ID.

Win32::GetShortPathName(PATHNAME)
     [CORE] Returns a representation of PATHNAME composed only of short
     (8.3) path components.  The result may not necessarily be shorter
     than PATHNAME.  Compare with Win32::GetFullPathName and
     Win32::GetLongPathName.

Win32::GetProcAddress(INSTANCE, PROCNAME)
     [EXT] Returns the address of a function inside a loaded library. The
     information about what you can do with this address has been lost in
     the mist of time. Use the Win32::API module instead of this deprecated
     function.

Win32::GetTickCount()
     [CORE] Returns the number of milliseconds elapsed since the last
     system boot. Resolution is limited to system timer ticks (about 10ms
     on WinNT and 55ms on Win9X).

Win32::InitiateSystemShutdown(MACHINE, MESSAGE, TIMEOUT, FORCECLOSE, REBOOT)
     [EXT] Shutsdown the specified MACHINE, notifying users with the
     supplied MESSAGE, within the specified TIMEOUT interval. Forces
     closing of all documents without prompting the user if FORCECLOSE is
     true, and reboots the machine if REBOOT is true. This function works
     only on WinNT.

Win32::IsWinNT()
     [CORE] Returns non zero if the Win32 subsystem is Windows NT.

Win32::IsWin95()
     [CORE] Returns non zero if the Win32 subsystem is Windows 95.

Win32::LoadLibrary(LIBNAME)
     [EXT] Loads a dynamic link library into memory and returns its module
     handle. This handle can be used with Win32::GetProcAddress and
     Win32::FreeLibrary. This function is deprecated. Use the Win32::API
     module instead.

Win32::LoginName()
     [CORE] Returns the username of the owner of the current perl process.

Win32::LookupAccountName(SYSTEM, ACCOUNT, DOMAIN, SID, SIDTYPE)
     [EXT] Looks up ACCOUNT on SYSTEM and returns the domain name the SID
     and the SID type.

Win32::LookupAccountSID(SYSTEM, SID, ACCOUNT, DOMAIN, SIDTYPE)
     [EXT] Looks up SID on SYSTEM and returns the account name, domain
     name, and the SID type.

Win32::MsgBox(MESSAGE [, FLAGS [, TITLE]])
     [EXT] Create a dialogbox containing MESSAGE. FLAGS specifies the
     required icon and buttons according to the following table:

          0 = OK
          1 = OK and Cancel
          2 = Abort, Retry, and Ignore
          3 = Yes, No and Cancel
          4 = Yes and No
          5 = Retry and Cancel

          MB_ICONSTOP          "X" in a red circle
          MB_ICONQUESTION      question mark in a bubble
          MB_ICONEXCLAMATION   exclamation mark in a yellow triangle
          MB_ICONINFORMATION   "i" in a bubble

     TITLE specifies an optional window title. The default is "Perl".

     The function returns the menu id of the selected push button:

          0  Error

          1  OK
          2  Cancel
          3  Abort
          4  Retry
          5  Ignore
          6  Yes
          7  No

Win32::NodeName()
     [CORE] Returns the Microsoft Network node-name of the current machine.

Win32::RegisterServer(LIBRARYNAME)
     [EXT] Loads the DLL LIBRARYNAME and calls the function
     DllRegisterServer.

Win32::SetCwd(NEWDIRECTORY)
     [CORE] Sets the current active drive and directory. This function
     does not work with UNC paths, since the functionality required to
     required for such a feature is not available under Windows 95.

Win32::SetLastError(ERROR)
     [CORE] Sets the value of the last error encountered to ERROR. This is
     that value that will be returned by the Win32::GetLastError()
     function. This functions has been added for Perl 5.6.

Win32::Sleep(TIME)
     [CORE] Pauses for TIME milliseconds. The timeslices are made available
     to other processes and threads.

Win32::Spawn(COMMAND, ARGS, PID)
     [CORE] Spawns a new process using the supplied COMMAND, passing in
     arguments in the string ARGS. The pid of the new process is stored in
     PID. This function is deprecated. Please use the Win32::Process module
     instead.

Win32::UnregisterServer(LIBRARYNAME)
     [EXT] Loads the DLL LIBRARYNAME and calls the function
     DllUnregisterServer.


File: perl.info,  Node: perl5004delta,  Next: perlfaq,  Prev: perl5005delta,  Up: Top

what's new for perl5.004
************************

NAME
====

   perldelta - what's new for perl5.004

DESCRIPTION
===========

   This document describes differences between the 5.003 release (as
documented in *Programming Perl*, second edition-the Camel Book) and this
one.

Supported Environments
======================

   Perl5.004 builds out of the box on Unix, Plan 9, LynxOS, VMS, OS/2,
QNX, AmigaOS, and Windows NT.  Perl runs on Windows 95 as well, but it
cannot be built there, for lack of a reasonable command interpreter.

Core Changes
============

   Most importantly, many bugs were fixed, including several security
problems.  See the Changes file in the distribution for details.

List assignment to %ENV works
-----------------------------

   `%ENV = ()' and `%ENV = @list' now work as expected (except on VMS
where it generates a fatal error).

"Can't locate Foo.pm in @INC" error now lists @INC
--------------------------------------------------

Compilation option: Binary compatibility with 5.003
---------------------------------------------------

   There is a new Configure question that asks if you want to maintain
binary compatibility with Perl 5.003.  If you choose binary compatibility,
you do not have to recompile your extensions, but you might have symbol
conflicts if you embed Perl in another application, just as in the 5.003
release.  By default, binary compatibility is preserved at the expense of
symbol table pollution.

$PERL5OPT environment variable
------------------------------

   You may now put Perl options in the $PERL5OPT environment variable.
Unless Perl is running with taint checks, it will interpret this variable
as if its contents had appeared on a "#!perl" line at the beginning of
your script, except that hyphens are optional.  PERL5OPT may only be used
to set the following switches: *-[DIMUdmw]*.

Limitations on -M, -m, and -T options
-------------------------------------

   The -M and -m options are no longer allowed on the #! line of a script.
If a script needs a module, it should invoke it with the use pragma.

   The -T option is also forbidden on the #! line of a script, unless it
was present on the Perl command line.  Due to the way #!  works, this
usually means that -T must be in the first argument.  Thus:

     #!/usr/bin/perl -T -w

   will probably work for an executable script invoked as `scriptname',
while:

     #!/usr/bin/perl -w -T

   will probably fail under the same conditions.  (Non-Unix systems will
probably not follow this rule.)  But `perl scriptname' is guaranteed to
fail, since then there is no chance of -T being found on the command line
before it is found on the #! line.

More precise warnings
---------------------

   If you removed the -w option from your Perl 5.003 scripts because it
made Perl too verbose, we recommend that you try putting it back when you
upgrade to Perl 5.004.  Each new perl version tends to remove some
undesirable warnings, while adding new warnings that may catch bugs in
your scripts.

Deprecated: Inherited AUTOLOAD for non-methods
----------------------------------------------

   Before Perl 5.004, AUTOLOAD functions were looked up as methods (using
the `@ISA' hierarchy), even when the function to be autoloaded was called
as a plain function (e.g. `Foo::bar()'), not a method (e.g. `< Foo-'bar()
>> or `< $obj-'bar() >>).

   Perl 5.005 will use method lookup only for methods' AUTOLOADs.
However, there is a significant base of existing code that may be using
the old behavior.  So, as an interim step, Perl 5.004 issues an optional
warning when a non-method uses an inherited AUTOLOAD.

   The simple rule is:  Inheritance will not work when autoloading
non-methods.  The simple fix for old code is:  In any module that used to
depend on inheriting AUTOLOAD for non-methods from a base class named
`BaseClass', execute `*AUTOLOAD = \&BaseClass::AUTOLOAD' during startup.

Previously deprecated %OVERLOAD is no longer usable
---------------------------------------------------

   Using %OVERLOAD to define overloading was deprecated in 5.003.
Overloading is now defined using the overload pragma. %OVERLOAD is still
used internally but should not be used by Perl scripts. See *Note
Overload: (pm.info)overload, for more details.

Subroutine arguments created only when they're modified
-------------------------------------------------------

   In Perl 5.004, nonexistent array and hash elements used as subroutine
parameters are brought into existence only if they are actually assigned
to (via `@_').

   Earlier versions of Perl vary in their handling of such arguments.
Perl versions 5.002 and 5.003 always brought them into existence.  Perl
versions 5.000 and 5.001 brought them into existence only if they were not
the first argument (which was almost certainly a bug).  Earlier versions
of Perl never brought them into existence.

   For example, given this code:

     undef @a; undef %a;
     sub show { print $_[0] };
     sub change { $_[0]++ };
     show($a[2]);
     change($a{b});

   After this code executes in Perl 5.004, $a{b} exists but $a[2] does
not.  In Perl 5.002 and 5.003, both $a{b} and $a[2] would have existed
(but $a[2]'s value would have been undefined).

Group vector changeable with $)
-------------------------------

   The $) special variable has always (well, in Perl 5, at least)
reflected not only the current effective group, but also the group list as
returned by the `getgroups()' C function (if there is one).  However,
until this release, there has not been a way to call the `setgroups()' C
function from Perl.

   In Perl 5.004, assigning to $) is exactly symmetrical with examining
it: The first number in its string value is used as the effective gid; if
there are any numbers after the first one, they are passed to the
`setgroups()' C function (if there is one).

Fixed parsing of $$<digit>, &$<digit>, etc.
-------------------------------------------

   Perl versions before 5.004 misinterpreted any type marker followed by
"$" and a digit.  For example, "$$0" was incorrectly taken to mean "${$}0"
instead of "${$0}".  This bug is (mostly) fixed in Perl 5.004.

   However, the developers of Perl 5.004 could not fix this bug completely,
because at least two widely-used modules depend on the old meaning of
"$$0" in a string.  So Perl 5.004 still interprets "$$<digit>" in the old
(broken) way inside strings; but it generates this message as a warning.
And in Perl 5.005, this special treatment will cease.

Fixed localization of $<digit>, $&, etc.
----------------------------------------

   Perl versions before 5.004 did not always properly localize the
regex-related special variables.  Perl 5.004 does localize them, as the
documentation has always said it should.  This may result in $1, $2, etc.
no longer being set where existing programs use them.

No resetting of $. on implicit close
------------------------------------

   The documentation for Perl 5.0 has always stated that $. is not reset
when an already-open file handle is reopened with no intervening call to
close.  Due to a bug, perl versions 5.000 through 5.003 *did* reset $.
under that circumstance; Perl 5.004 does not.

wantarray may return undef
--------------------------

   The wantarray operator returns true if a subroutine is expected to
return a list, and false otherwise.  In Perl 5.004, wantarray can also
return the undefined value if a subroutine's return value will not be used
at all, which allows subroutines to avoid a time-consuming calculation of
a return value if it isn't going to be used.

`eval EXPR' determines value of EXPR in scalar context
------------------------------------------------------

   Perl (version 5) used to determine the value of EXPR inconsistently,
sometimes incorrectly using the surrounding context for the determination.
Now, the value of EXPR (before being parsed by eval) is always determined
in a scalar context.  Once parsed, it is executed as before, by providing
the context that the scope surrounding the eval provided.  This change
makes the behavior Perl4 compatible, besides fixing bugs resulting from
the inconsistent behavior.  This program:

     @a = qw(time now is time);
     print eval @a;
     print '|', scalar eval @a;

   used to print something like "timenowis881399109|4", but now (and in
perl4) prints "4|4".

Changes to tainting checks
--------------------------

   A bug in previous versions may have failed to detect some insecure
conditions when taint checks are turned on.  (Taint checks are used in
setuid or setgid scripts, or when explicitly turned on with the -T
invocation option.)  Although it's unlikely, this may cause a
previously-working script to now fail - which should be construed as a
blessing, since that indicates a potentially-serious security hole was
just plugged.

   The new restrictions when tainting include:

No glob() or <*>
     These operators may spawn the C shell (csh), which cannot be made
     safe.  This restriction will be lifted in a future version of Perl
     when globbing is implemented without the use of an external program.

No spawning if tainted $CDPATH, $ENV, $BASH_ENV
     These environment variables may alter the behavior of spawned programs
     (especially shells) in ways that subvert security.  So now they are
     treated as dangerous, in the manner of $IFS and $PATH.

No spawning if tainted $TERM doesn't look like a terminal name
     Some termcap libraries do unsafe things with $TERM.  However, it
     would be unnecessarily harsh to treat all $TERM values as unsafe,
     since only shell metacharacters can cause trouble in $TERM.  So a
     tainted $TERM is considered to be safe if it contains only
     alphanumerics, underscores, dashes, and colons, and unsafe if it
     contains other characters (including whitespace).

New Opcode module and revised Safe module
-----------------------------------------

   A new Opcode module supports the creation, manipulation and application
of opcode masks.  The revised Safe module has a new API and is implemented
using the new Opcode module.  Please read the new Opcode and Safe
documentation.

Embedding improvements
----------------------

   In older versions of Perl it was not possible to create more than one
Perl interpreter instance inside a single process without leaking like a
sieve and/or crashing.  The bugs that caused this behavior have all been
fixed.  However, you still must take care when embedding Perl in a C
program.  See the updated perlembed manpage for tips on how to manage your
interpreters.

Internal change: FileHandle class based on IO::* classes
--------------------------------------------------------

   File handles are now stored internally as type IO::Handle.  The
FileHandle module is still supported for backwards compatibility, but it
is now merely a front end to the IO::* modules - specifically, IO::Handle,
IO::Seekable, and IO::File.  We suggest, but do not require, that you use
the IO::* modules in new code.

   In harmony with this change, `*GLOB{FILEHANDLE}' is now just a
backward-compatible synonym for `*GLOB{IO}'.

Internal change: PerlIO abstraction interface
---------------------------------------------

   It is now possible to build Perl with AT&T's sfio IO package instead of
stdio.  See *Note Perlapio: perlapio, for more details, and the INSTALL
file for how to use it.

New and changed syntax
----------------------

$coderef->(PARAMS)
     A subroutine reference may now be suffixed with an arrow and a
     (possibly empty) parameter list.  This syntax denotes a call of the
     referenced subroutine, with the given parameters (if any).

     This new syntax follows the pattern of `< $hashref-'{FOO} >> and
     `< $aryref-'[$foo] >>: You may now write `&$subref($foo)' as
     `< $subref-'($foo) >>.  All these arrow terms may be chained; thus,
     `< &{$table-'{FOO}}($bar) >> may now be written
     `< $table-'{FOO}-($bar) >>>.

New and changed builtin constants
---------------------------------

__PACKAGE__
     The current package name at compile time, or the undefined value if
     there is no current package (due to a `package;' directive).  Like
     `__FILE__' and `__LINE__', __PACKAGE__ does not interpolate into
     strings.

New and changed builtin variables
---------------------------------

$^E
     Extended error message on some platforms.  (Also known as
     $EXTENDED_OS_ERROR if you `use English').

$^H
     The current set of syntax checks enabled by `use strict'.  See the
     documentation of strict for more details.  Not actually new, but
     newly documented.  Because it is intended for internal use by Perl
     core components, there is no `use English' long name for this
     variable.

$^M
     By default, running out of memory it is not trappable.  However, if
     compiled for this, Perl may use the contents of $^M as an emergency
     pool after die()ing with this message.  Suppose that your Perl were
     compiled with -DPERL_EMERGENCY_SBRK and used Perl's malloc.  Then

          $^M = 'a' x (1<<16);

     would allocate a 64K buffer for use when in emergency.  See the
     INSTALL file for information on how to enable this option.  As a
     disincentive to casual use of this advanced feature, there is no `use
     English' long name for this variable.

New and changed builtin functions
---------------------------------

delete on slices
     This now works.  (e.g. `delete @ENV{'PATH', 'MANPATH'}')

flock
     is now supported on more platforms, prefers fcntl to lockf when
     emulating, and always flushes before (un)locking.

printf and sprintf
     Perl now implements these functions itself; it doesn't use the C
     library function sprintf() any more, except for floating-point
     numbers, and even then only known flags are allowed.  As a result, it
     is now possible to know which conversions and flags will work, and
     what they will do.

     The new conversions in Perl's sprintf() are:

          %i	a synonym for %d
          %p	a pointer (the address of the Perl value, in hexadecimal)
          %n	special: *stores* the number of characters output so far
               into the next variable in the parameter list

     The new flags that go between the % and the conversion are:

          #	prefix octal with "0", hex with "0x"
          h	interpret integer as C type "short" or "unsigned short"
          V	interpret integer as Perl's standard integer type

     Also, where a number would appear in the flags, an asterisk ("*") may
     be used instead, in which case Perl uses the next item in the
     parameter list as the given number (that is, as the field width or
     precision).  If a field width obtained through "*" is negative, it has
     the same effect as the '-' flag: left-justification.

     See `sprintf', *Note Perlfunc: perlfunc, for a complete list of
     conversion and flags.

keys as an lvalue
     As an lvalue, keys allows you to increase the number of hash buckets
     allocated for the given hash.  This can gain you a measure of
     efficiency if you know the hash is going to get big.  (This is
     similar to pre-extending an array by assigning a larger number to
     $#array.)  If you say

          keys %hash = 200;

     then `%hash' will have at least 200 buckets allocated for it.  These
     buckets will be retained even if you do `%hash = ()'; use `undef
     %hash' if you want to free the storage while `%hash' is still in
     scope.  You can't shrink the number of buckets allocated for the hash
     using keys in this way (but you needn't worry about doing this by
     accident, as trying has no effect).

my() in Control Structures
     You can now use my() (with or without the parentheses) in the control
     expressions of control structures such as:

          while (defined(my $line = <>)) {
              $line = lc $line;
          } continue {
              print $line;
          }

          if ((my $answer = <STDIN>) =~ /^y(es)?$/i) {
              user_agrees();
          } elsif ($answer =~ /^n(o)?$/i) {
              user_disagrees();
          } else {
              chomp $answer;
              die "`$answer' is neither `yes' nor `no'";
          }

     Also, you can declare a foreach loop control variable as lexical by
     preceding it with the word "my".  For example, in:

          foreach my $i (1, 2, 3) {
              some_function();
          }

     $i is a lexical variable, and the scope of $i extends to the end of
     the loop, but not beyond it.

     Note that you still cannot use my() on global punctuation variables
     such as $_ and the like.

pack() and unpack()
     A new format 'w' represents a BER compressed integer (as defined in
     ASN.1).  Its format is a sequence of one or more bytes, each of which
     provides seven bits of the total value, with the most significant
     first.  Bit eight of each byte is set, except for the last byte, in
     which bit eight is clear.

     If 'p' or 'P' are given undef as values, they now generate a NULL
     pointer.

     Both pack() and unpack() now fail when their templates contain invalid
     types.  (Invalid types used to be ignored.)

sysseek()
     The new sysseek() operator is a variant of seek() that sets and gets
     the file's system read/write position, using the lseek(2) system
     call.  It is the only reliable way to seek before using sysread() or
     syswrite().  Its return value is the new position, or the undefined
     value on failure.

use VERSION
     If the first argument to use is a number, it is treated as a version
     number instead of a module name.  If the version of the Perl
     interpreter is less than VERSION, then an error message is printed
     and Perl exits immediately.  Because use occurs at compile time, this
     check happens immediately during the compilation process, unlike
     `require VERSION', which waits until runtime for the check.  This is
     often useful if you need to check the current Perl version before
     useing library modules which have changed in incompatible ways from
     older versions of Perl.  (We try not to do this more than we have to.)

use Module VERSION LIST
     If the VERSION argument is present between Module and LIST, then the
     use will call the VERSION method in class Module with the given
     version as an argument.  The default VERSION method, inherited from
     the UNIVERSAL class, croaks if the given version is larger than the
     value of the variable $Module::VERSION.  (Note that there is not a
     comma after VERSION!)

     This version-checking mechanism is similar to the one currently used
     in the Exporter module, but it is faster and can be used with modules
     that don't use the Exporter.  It is the recommended method for new
     code.

prototype(FUNCTION)
     Returns the prototype of a function as a string (or undef if the
     function has no prototype).  FUNCTION is a reference to or the name
     of the function whose prototype you want to retrieve.  (Not actually
     new; just never documented before.)

srand
     The default seed for srand, which used to be time, has been changed.
     Now it's a heady mix of difficult-to-predict system-dependent values,
     which should be sufficient for most everyday purposes.

     Previous to version 5.004, calling rand without first calling srand
     would yield the same sequence of random numbers on most or all
     machines.  Now, when perl sees that you're calling rand and haven't
     yet called srand, it calls srand with the default seed. You should
     still call srand manually if your code might ever be run on a
     pre-5.004 system, of course, or if you want a seed other than the
     default.

$_ as Default
     Functions documented in the Camel to default to $_ now in fact do,
     and all those that do are so documented in *Note Perlfunc: perlfunc,.

`m//gc' does not reset search position on failure
     The `m//g' match iteration construct has always reset its target
     string's search position (which is visible through the pos operator)
     when a match fails; as a result, the next `m//g' match after a failure
     starts again at the beginning of the string.  With Perl 5.004, this
     reset may be disabled by adding the "c" (for "continue") modifier,
     i.e. `m//gc'.  This feature, in conjunction with the `\G' zero-width
     assertion, makes it possible to chain matches together.  See *Note
     Perlop: perlop, and *Note Perlre: perlre,.

`m//x' ignores whitespace before ?*+{}
     The `m//x' construct has always been intended to ignore all unescaped
     whitespace.  However, before Perl 5.004, whitespace had the effect of
     escaping repeat modifiers like "*" or "?"; for example, `/a *b/x' was
     (mis)interpreted as `/a\*b/x'.  This bug has been fixed in 5.004.

nested `sub{}' closures work now
     Prior to the 5.004 release, nested anonymous functions didn't work
     right.  They do now.

formats work right on changing lexicals
     Just like anonymous functions that contain lexical variables that
     change (like a lexical index variable for a foreach loop), formats
     now work properly.  For example, this silently failed before (printed
     only zeros), but is fine now:

          my $i;
          foreach $i ( 1 .. 10 ) {
          	write;
          }
          format =
          	my i is @#
          	$i
          .

     However, it still fails (without a warning) if the foreach is within a
     subroutine:

          my $i;
          sub foo {
            foreach $i ( 1 .. 10 ) {
          	write;
            }
          }
          foo;
          format =
          	my i is @#
          	$i
          .

New builtin methods
-------------------

   The UNIVERSAL package automatically contains the following methods that
are inherited by all other classes:

isa(CLASS)
     isa returns *true* if its object is blessed into a subclass of CLASS

     isa is also exportable and can be called as a sub with two arguments.
     This allows the ability to check what a reference points to. Example:

          use UNIVERSAL qw(isa);

          if(isa($ref, 'ARRAY')) {
             ...
          }

can(METHOD)
     can checks to see if its object has a method called METHOD, if it
     does then a reference to the sub is returned; if it does not then
     undef is returned.

VERSION( [NEED] )
     VERSION returns the version number of the class (package).  If the
     NEED argument is given then it will check that the current version (as
     defined by the $VERSION variable in the given package) not less than
     NEED; it will die if this is not the case.  This method is normally
     called as a class method.  This method is called automatically by the
     VERSION form of use.

          use A 1.2 qw(some imported subs);
          # implies:
          A->VERSION(1.2);

   NOTE: can directly uses Perl's internal code for method lookup, and isa
uses a very similar method and caching strategy. This may cause strange
effects if the Perl code dynamically changes @ISA in any package.

   You may add other methods to the UNIVERSAL class via Perl or XS code.
You do not need to `use UNIVERSAL' in order to make these methods
available to your program.  This is necessary only if you wish to have isa
available as a plain subroutine in the current package.

TIEHANDLE now supported
-----------------------

   See *Note Perltie: perltie, for other kinds of tie()s.

TIEHANDLE classname, LIST
     This is the constructor for the class.  That means it is expected to
     return an object of some sort. The reference can be used to hold some
     internal information.

          sub TIEHANDLE {
          	print "<shout>\n";
          	my $i;
          	return bless \$i, shift;
          }

PRINT this, LIST
     This method will be triggered every time the tied handle is printed
     to.  Beyond its self reference it also expects the list that was
     passed to the print function.

          sub PRINT {
          	$r = shift;
          	$$r++;
          	return print join( $, => map {uc} @_), $\;
          }

PRINTF this, LIST
     This method will be triggered every time the tied handle is printed to
     with the printf() function.  Beyond its self reference it also
     expects the format and list that was passed to the printf function.

          sub PRINTF {
              shift;
          	  my $fmt = shift;
              print sprintf($fmt, @_)."\n";
          }

READ this LIST
     This method will be called when the handle is read from via the read
     or sysread functions.

          sub READ {
          	$r = shift;
          	my($buf,$len,$offset) = @_;
          	print "READ called, \$buf=$buf, \$len=$len, \$offset=$offset";
          }

READLINE this
     This method will be called when the handle is read from. The method
     should return undef when there is no more data.

          sub READLINE {
          	$r = shift;
          	return "PRINT called $$r times\n"
          }

GETC this
     This method will be called when the getc function is called.

          sub GETC { print "Don't GETC, Get Perl"; return "a"; }

DESTROY this
     As with the other types of ties, this method will be called when the
     tied handle is about to be destroyed. This is useful for debugging and
     possibly for cleaning up.

          sub DESTROY {
          	print "</shout>\n";
          }

Malloc enhancements
-------------------

   If perl is compiled with the malloc included with the perl distribution
(that is, if `perl -V:d_mymalloc' is 'define') then you can print memory
statistics at runtime by running Perl thusly:

     env PERL_DEBUG_MSTATS=2 perl your_script_here

   The value of 2 means to print statistics after compilation and on exit;
with a value of 1, the statistics are printed only on exit.  (If you want
the statistics at an arbitrary time, you'll need to install the optional
module Devel::Peek.)

   Three new compilation flags are recognized by malloc.c.  (They have no
effect if perl is compiled with system malloc().)

-DPERL_EMERGENCY_SBRK
     If this macro is defined, running out of memory need not be a fatal
     error: a memory pool can allocated by assigning to the special
     variable $^M.  See `"$^M"' in this node.

-DPACK_MALLOC
     Perl memory allocation is by bucket with sizes close to powers of two.
     Because of these malloc overhead may be big, especially for data of
     size exactly a power of two.  If `PACK_MALLOC' is defined, perl uses
     a slightly different algorithm for small allocations (up to 64 bytes
     long), which makes it possible to have overhead down to 1 byte for
     allocations which are powers of two (and appear quite often).

     Expected memory savings (with 8-byte alignment in `alignbytes') is
     about 20% for typical Perl usage.  Expected slowdown due to additional
     malloc overhead is in fractions of a percent (hard to measure, because
     of the effect of saved memory on speed).

-DTWO_POT_OPTIMIZE
     Similarly to `PACK_MALLOC', this macro improves allocations of data
     with size close to a power of two; but this works for big allocations
     (starting with 16K by default).  Such allocations are typical for big
     hashes and special-purpose scripts, especially image processing.

     On recent systems, the fact that perl requires 2M from system for 1M
     allocation will not affect speed of execution, since the tail of such
     a chunk is not going to be touched (and thus will not require real
     memory).  However, it may result in a premature out-of-memory error.
     So if you will be manipulating very large blocks with sizes close to
     powers of two, it would be wise to define this macro.

     Expected saving of memory is 0-100% (100% in applications which
     require most memory in such 2**n chunks); expected slowdown is
     negligible.

Miscellaneous efficiency enhancements
-------------------------------------

   Functions that have an empty prototype and that do nothing but return a
fixed value are now inlined (e.g. `sub PI () { 3.14159 }').

   Each unique hash key is only allocated once, no matter how many hashes
have an entry with that key.  So even if you have 100 copies of the same
hash, the hash keys never have to be reallocated.

Support for More Operating Systems
==================================

   Support for the following operating systems is new in Perl 5.004.

Win32
-----

   Perl 5.004 now includes support for building a "native" perl under
Windows NT, using the Microsoft Visual C++ compiler (versions 2.0 and
above) or the Borland C++ compiler (versions 5.02 and above).  The
resulting perl can be used under Windows 95 (if it is installed in the
same directory locations as it got installed in Windows NT).  This port
includes support for perl extension building tools like `MakeMaker' in
this node and `h2xs' in this node, so that many extensions available on
the Comprehensive Perl Archive Network (CPAN) can now be readily built
under Windows NT.  See http://www.perl.com/ for more information on CPAN
and `README.win32' in the perl distribution for more details on how to get
started with building this port.

   There is also support for building perl under the Cygwin32 environment.
Cygwin32 is a set of GNU tools that make it possible to compile and run
many Unix programs under Windows NT by providing a mostly Unix-like
interface for compilation and execution.  See `README.cygwin32' in the
perl distribution for more details on this port and how to obtain the
Cygwin32 toolkit.

Plan 9
------

   See `README.plan9' in the perl distribution.

QNX
---

   See `README.qnx' in the perl distribution.

AmigaOS
-------

   See `README.amigaos' in the perl distribution.

Pragmata
========

   Six new pragmatic modules exist:

use autouse MODULE => qw(sub1 sub2 sub3)
     Defers `require MODULE' until someone calls one of the specified
     subroutines (which must be exported by MODULE).  This pragma should be
     used with caution, and only when necessary.

use blib
use blib 'dir'
     Looks for MakeMaker-like *'blib'* directory structure starting in dir
     (or current directory) and working back up to five levels of parent
     directories.

     Intended for use on command line with -M option as a way of testing
     arbitrary scripts against an uninstalled version of a package.

use constant NAME => VALUE
     Provides a convenient interface for creating compile-time constants,
     See `"Constant Functions"', *Note Perlsub: perlsub,.

use locale
     Tells the compiler to enable (or disable) the use of POSIX locales for
     builtin operations.

     When `use locale' is in effect, the current LC_CTYPE locale is used
     for regular expressions and case mapping; LC_COLLATE for string
     ordering; and LC_NUMERIC for numeric formating in printf and sprintf
     (but not in print).  LC_NUMERIC is always used in write, since
     lexical scoping of formats is problematic at best.

     Each `use locale' or `no locale' affects statements to the end of the
     enclosing BLOCK or, if not inside a BLOCK, to the end of the current
     file.  Locales can be switched and queried with POSIX::setlocale().

     See *Note Perllocale: perllocale, for more information.

use ops
     Disable unsafe opcodes, or any named opcodes, when compiling Perl
     code.

use vmsish
     Enable VMS-specific language features.  Currently, there are three
     VMS-specific features available: 'status', which makes $? and system
     return genuine VMS status values instead of emulating POSIX; 'exit',
     which makes exit take a genuine VMS status value instead of assuming
     that `exit 1' is an error; and 'time', which makes all times relative
     to the local time zone, in the VMS tradition.

Modules
=======

Required Updates
----------------

   Though Perl 5.004 is compatible with almost all modules that work with
Perl 5.003, there are a few exceptions:

     Module   Required Version for Perl 5.004
     ------   -------------------------------
     Filter   Filter-1.12
     LWP      libwww-perl-5.08
     Tk       Tk400.202 (-w makes noise)

   Also, the majordomo mailing list program, version 1.94.1, doesn't work
with Perl 5.004 (nor with perl 4), because it executes an invalid regular
expression.  This bug is fixed in majordomo version 1.94.2.

Installation directories
------------------------

   The *installperl* script now places the Perl source files for
extensions in the architecture-specific library directory, which is where
the shared libraries for extensions have always been.  This change is
intended to allow administrators to keep the Perl 5.004 library directory
unchanged from a previous version, without running the risk of binary
incompatibility between extensions' Perl source and shared libraries.

Module information summary
--------------------------

   Brand new modules, arranged by topic rather than strictly
alphabetically:

     CGI.pm               Web server interface ("Common Gateway Interface")
     CGI/Apache.pm        Support for Apache's Perl module
     CGI/Carp.pm          Log server errors with helpful context
     CGI/Fast.pm          Support for FastCGI (persistent server process)
     CGI/Push.pm          Support for server push
     CGI/Switch.pm        Simple interface for multiple server types

     CPAN                 Interface to Comprehensive Perl Archive Network
     CPAN::FirstTime      Utility for creating CPAN configuration file
     CPAN::Nox            Runs CPAN while avoiding compiled extensions

     IO.pm                Top-level interface to IO::* classes
     IO/File.pm           IO::File extension Perl module
     IO/Handle.pm         IO::Handle extension Perl module
     IO/Pipe.pm           IO::Pipe extension Perl module
     IO/Seekable.pm       IO::Seekable extension Perl module
     IO/Select.pm         IO::Select extension Perl module
     IO/Socket.pm         IO::Socket extension Perl module

     Opcode.pm            Disable named opcodes when compiling Perl code

     ExtUtils/Embed.pm    Utilities for embedding Perl in C programs
     ExtUtils/testlib.pm  Fixes up @INC to use just-built extension

     FindBin.pm           Find path of currently executing program

     Class/Struct.pm      Declare struct-like datatypes as Perl classes
     File/stat.pm         By-name interface to Perl's builtin stat
     Net/hostent.pm       By-name interface to Perl's builtin gethost*
     Net/netent.pm        By-name interface to Perl's builtin getnet*
     Net/protoent.pm      By-name interface to Perl's builtin getproto*
     Net/servent.pm       By-name interface to Perl's builtin getserv*
     Time/gmtime.pm       By-name interface to Perl's builtin gmtime
     Time/localtime.pm    By-name interface to Perl's builtin localtime
     Time/tm.pm           Internal object for Time::{gm,local}time
     User/grent.pm        By-name interface to Perl's builtin getgr*
     User/pwent.pm        By-name interface to Perl's builtin getpw*

     Tie/RefHash.pm       Base class for tied hashes with references as keys

     UNIVERSAL.pm         Base class for *ALL* classes

Fcntl
-----

   New constants in the existing Fcntl modules are now supported, provided
that your operating system happens to support them:

     F_GETOWN F_SETOWN
     O_ASYNC O_DEFER O_DSYNC O_FSYNC O_SYNC
     O_EXLOCK O_SHLOCK

   These constants are intended for use with the Perl operators sysopen()
and fcntl() and the basic database modules like SDBM_File.  For the exact
meaning of these and other Fcntl constants please refer to your operating
system's documentation for fcntl() and open().

   In addition, the Fcntl module now provides these constants for use with
the Perl operator flock():

     LOCK_SH LOCK_EX LOCK_NB LOCK_UN

   These constants are defined in all environments (because where there is
no flock() system call, Perl emulates it).  However, for historical
reasons, these constants are not exported unless they are explicitly
requested with the ":flock" tag (e.g. `use Fcntl ':flock'').

IO
--

   The IO module provides a simple mechanism to load all the IO modules at
one go.  Currently this includes:

     IO::Handle
     IO::Seekable
     IO::File
     IO::Pipe
     IO::Socket

   For more information on any of these modules, please see its respective
documentation.

Math::Complex
-------------

   The Math::Complex module has been totally rewritten, and now supports
more operations.  These are overloaded:

     + - * / ** <=> neg ~ abs sqrt exp log sin cos atan2 "" (stringify)

   And these functions are now exported:

     pi i Re Im arg
     log10 logn ln cbrt root
     tan
     csc sec cot
     asin acos atan
     acsc asec acot
     sinh cosh tanh
     csch sech coth
     asinh acosh atanh
     acsch asech acoth
     cplx cplxe

Math::Trig
----------

   This new module provides a simpler interface to parts of Math::Complex
for those who need trigonometric functions only for real numbers.

DB_File
-------

   There have been quite a few changes made to DB_File. Here are a few of
the highlights:

   * Fixed a handful of bugs.

   * By public demand, added support for the standard hash function
     exists().

   * Made it compatible with Berkeley DB 1.86.

   * Made negative subscripts work with RECNO interface.

   * Changed the default flags from O_RDWR to O_CREAT|O_RDWR and the
     default mode from 0640 to 0666.

   * Made DB_File automatically import the open() constants (O_RDWR,
     O_CREAT etc.) from Fcntl, if available.

   * Updated documentation.

   Refer to the HISTORY section in DB_File.pm for a complete list of
changes. Everything after DB_File 1.01 has been added since 5.003.

Net::Ping
---------

   Major rewrite - support added for both udp echo and real icmp pings.

Object-oriented overrides for builtin operators
-----------------------------------------------

   Many of the Perl builtins returning lists now have object-oriented
overrides.  These are:

     File::stat
     Net::hostent
     Net::netent
     Net::protoent
     Net::servent
     Time::gmtime
     Time::localtime
     User::grent
     User::pwent

   For example, you can now say

     use File::stat;
     use User::pwent;
     $his = (stat($filename)->st_uid == pwent($whoever)->pw_uid);

Utility Changes
===============

pod2html
--------

Sends converted HTML to standard output
     The pod2html utility included with Perl 5.004 is entirely new.  By
     default, it sends the converted HTML to its standard output, instead
     of writing it to a file like Perl 5.003's pod2html did.  Use the
     *-outfile=FILENAME* option to write to a file.

xsubpp
------

void XSUBs now default to returning nothing
     Due to a documentation/implementation bug in previous versions of
     Perl, XSUBs with a return type of void have actually been returning
     one value.  Usually that value was the GV for the XSUB, but sometimes
     it was some already freed or reused value, which would sometimes lead
     to program failure.

     In Perl 5.004, if an XSUB is declared as returning void, it actually
     returns no value, i.e. an empty list (though there is a
     backward-compatibility exception; see below).  If your XSUB really
     does return an SV, you should give it a return type of `SV *'.

     For backward compatibility, xsubpp tries to guess whether a void XSUB
     is really void or if it wants to return an `SV *'.  It does so by
     examining the text of the XSUB: if xsubpp finds what looks like an
     assignment to `ST(0)', it assumes that the XSUB's return type is
     really `SV *'.

C Language API Changes
======================

gv_fetchmethod and `perl_call_sv'
     The gv_fetchmethod function finds a method for an object, just like
     in Perl 5.003.  The GV it returns may be a method cache entry.
     However, in Perl 5.004, method cache entries are not visible to users;
     therefore, they can no longer be passed directly to `perl_call_sv'.
     Instead, you should use the `GvCV' macro on the GV to extract its CV,
     and pass the CV to `perl_call_sv'.

     The most likely symptom of passing the result of gv_fetchmethod to
     `perl_call_sv' is Perl's producing an "Undefined subroutine called"
     error on the *second* call to a given method (since there is no cache
     on the first call).

`perl_eval_pv'
     A new function handy for eval'ing strings of Perl code inside C code.
     This function returns the value from the eval statement, which can be
     used instead of fetching globals from the symbol table.  See *Note
     Perlguts: perlguts,, *Note Perlembed: perlembed, and *Note Perlcall:
     perlcall, for details and examples.

Extended API for manipulating hashes
     Internal handling of hash keys has changed.  The old hashtable API is
     still fully supported, and will likely remain so.  The additions to
     the API allow passing keys as `SV*'s, so that tied hashes can be given
     real scalars as keys rather than plain strings (nontied hashes still
     can only use strings as keys).  New extensions must use the new hash
     access functions and macros if they wish to use `SV*' keys.  These
     additions also make it feasible to manipulate `HE*'s (hash entries),
     which can be more efficient.  See *Note Perlguts: perlguts, for
     details.

Documentation Changes
=====================

   Many of the base and library pods were updated.  These new pods are
included in section 1:

*Note Perldelta: perldelta,
     This document.

*Note Perlfaq: perlfaq,
     Frequently asked questions.

*Note Perllocale: perllocale,
     Locale support (internationalization and localization).

*Note Perltoot: perltoot,
     Tutorial on Perl OO programming.

*Note Perlapio: perlapio,
     Perl internal IO abstraction interface.

*Note Perlmodlib: perlmodlib,
     Perl module library and recommended practice for module creation.
     Extracted from *Note Perlmod: perlmod, (which is much smaller as a
     result).

*Note Perldebug: perldebug,
     Although not new, this has been massively updated.

*Note Perlsec: perlsec,
     Although not new, this has been massively updated.

New Diagnostics
===============

   Several new conditions will trigger warnings that were silent before.
Some only affect certain platforms.  The following new warnings and errors
outline these.  These messages are classified as follows (listed in
increasing order of desperation):

     (W) A warning (optional).
     (D) A deprecation (optional).
     (S) A severe warning (mandatory).
     (F) A fatal error (trappable).
     (P) An internal error you should never see (trappable).
     (X) A very fatal error (nontrappable).
     (A) An alien error message (not generated by Perl).

"my" variable %s masks earlier declaration in same scope
     (W) A lexical variable has been redeclared in the same scope,
     effectively eliminating all access to the previous instance.  This is
     almost always a typographical error.  Note that the earlier variable
     will still exist until the end of the scope or until all closure
     referents to it are destroyed.

%s argument is not a HASH element or slice
     (F) The argument to delete() must be either a hash element, such as

          $foo{$bar}
          $ref->[12]->{"susie"}

     or a hash slice, such as

          @foo{$bar, $baz, $xyzzy}
          @{$ref->[12]}{"susie", "queue"}

Allocation too large: %lx
     (X) You can't allocate more than 64K on an MS-DOS machine.

Allocation too large
     (F) You can't allocate more than 2^31+"small amount" bytes.

Applying %s to %s will act on scalar(%s)
     (W) The pattern match (//), substitution (s///), and transliteration
     (tr///) operators work on scalar values.  If you apply one of them to
     an array or a hash, it will convert the array or hash to a scalar
     value - the length of an array, or the population info of a hash -
     and then work on that scalar value.  This is probably not what you
     meant to do.  See `grep', *Note Perlfunc: perlfunc, and `map', *Note
     Perlfunc: perlfunc, for alternatives.

Attempt to free nonexistent shared string
     (P) Perl maintains a reference counted internal table of strings to
     optimize the storage and access of hash keys and other strings.  This
     indicates someone tried to decrement the reference count of a string
     that can no longer be found in the table.

Attempt to use reference as lvalue in substr
     (W) You supplied a reference as the first argument to substr() used
     as an lvalue, which is pretty strange.  Perhaps you forgot to
     dereference it first.  See `substr', *Note Perlfunc: perlfunc,.

Bareword "%s" refers to nonexistent package
     (W) You used a qualified bareword of the form `Foo::', but the
     compiler saw no other uses of that namespace before that point.
     Perhaps you need to predeclare a package?

Can't redefine active sort subroutine %s
     (F) Perl optimizes the internal handling of sort subroutines and keeps
     pointers into them.  You tried to redefine one such sort subroutine
     when it was currently active, which is not allowed.  If you really
     want to do this, you should write `sort { &func } @x' instead of
     `sort func @x'.

Can't use bareword ("%s") as %s ref while "strict refs" in use
     (F) Only hard references are allowed by "strict refs".  Symbolic
     references are disallowed.  See *Note Perlref: perlref,.

Cannot resolve method `%s' overloading `%s' in package `%s'
     (P) Internal error trying to resolve overloading specified by a method
     name (as opposed to a subroutine reference).

Constant subroutine %s redefined
     (S) You redefined a subroutine which had previously been eligible for
     inlining.  See `"Constant Functions"', *Note Perlsub: perlsub, for
     commentary and workarounds.

Constant subroutine %s undefined
     (S) You undefined a subroutine which had previously been eligible for
     inlining.  See `"Constant Functions"', *Note Perlsub: perlsub, for
     commentary and workarounds.

Copy method did not return a reference
     (F) The method which overloads "=" is buggy. See `Copy Constructor',
     *Note Overload: (pm.info)overload,.

Died
     (F) You passed die() an empty string (the equivalent of `die ""') or
     you called it with no args and both `$@' and $_ were empty.

Exiting pseudo-block via %s
     (W) You are exiting a rather special block construct (like a sort
     block or subroutine) by unconventional means, such as a goto, or a
     loop control statement.  See `sort', *Note Perlfunc: perlfunc,.

Identifier too long
     (F) Perl limits identifiers (names for variables, functions, etc.) to
     252 characters for simple names, somewhat more for compound names
     (like `$A::B').  You've exceeded Perl's limits.  Future versions of
     Perl are likely to eliminate these arbitrary limitations.

Illegal character %s (carriage return)
     (F) A carriage return character was found in the input.  This is an
     error, and not a warning, because carriage return characters can break
     multi-line strings, including here documents (e.g., `print <<EOF;').

Illegal switch in PERL5OPT: %s
     (X) The PERL5OPT environment variable may only be used to set the
     following switches: *-[DIMUdmw]*.

Integer overflow in hex number
     (S) The literal hex number you have specified is too big for your
     architecture. On a 32-bit architecture the largest hex literal is
     0xFFFFFFFF.

Integer overflow in octal number
     (S) The literal octal number you have specified is too big for your
     architecture. On a 32-bit architecture the largest octal literal is
     037777777777.

internal error: glob failed
     (P) Something went wrong with the external program(s) used for glob
     and `< <*.c' >>.  This may mean that your csh (C shell) is broken.
     If so, you should change all of the csh-related variables in
     config.sh:  If you have tcsh, make the variables refer to it as if it
     were csh (e.g. `full_csh='/usr/bin/tcsh''); otherwise, make them all
     empty (except that `d_csh' should be `'undef'') so that Perl will
     think csh is missing.  In either case, after editing config.sh, run
     `./Configure -S' and rebuild Perl.

Invalid conversion in %s: "%s"
     (W) Perl does not understand the given format conversion.  See
     `sprintf', *Note Perlfunc: perlfunc,.

Invalid type in pack: '%s'
     (F) The given character is not a valid pack type.  See `pack', *Note
     Perlfunc: perlfunc,.

Invalid type in unpack: '%s'
     (F) The given character is not a valid unpack type.  See `unpack',
     *Note Perlfunc: perlfunc,.

Name "%s::%s" used only once: possible typo
     (W) Typographical errors often show up as unique variable names.  If
     you had a good reason for having a unique name, then just mention it
     again somehow to suppress the message (the `use vars' pragma is
     provided for just this purpose).

Null picture in formline
     (F) The first argument to formline must be a valid format picture
     specification.  It was found to be empty, which probably means you
     supplied it an uninitialized value.  See *Note Perlform: perlform,.

Offset outside string
     (F) You tried to do a read/write/send/recv operation with an offset
     pointing outside the buffer.  This is difficult to imagine.  The sole
     exception to this is that `sysread()'ing past the buffer will extend
     the buffer and zero pad the new area.

Out of memory!
     (X|F) The malloc() function returned 0, indicating there was
     insufficient remaining memory (or virtual memory) to satisfy the
     request.

     The request was judged to be small, so the possibility to trap it
     depends on the way Perl was compiled.  By default it is not trappable.
     However, if compiled for this, Perl may use the contents of $^M as an
     emergency pool after die()ing with this message.  In this case the
     error is trappable *once*.

Out of memory during request for %s
     (F) The malloc() function returned 0, indicating there was
     insufficient remaining memory (or virtual memory) to satisfy the
     request. However, the request was judged large enough (compile-time
     default is 64K), so a possibility to shut down by trapping this error
     is granted.

panic: frexp
     (P) The library function frexp() failed, making printf("%f")
     impossible.

Possible attempt to put comments in qw() list
     (W) qw() lists contain items separated by whitespace; as with literal
     strings, comment characters are not ignored, but are instead treated
     as literal data.  (You may have used different delimiters than the
     parentheses shown here; braces are also frequently used.)

     You probably wrote something like this:

          @list = qw(
              a # a comment
              b # another comment
          );

     when you should have written this:

          @list = qw(
              a
              b
          );

     If you really want comments, build your list the old-fashioned way,
     with quotes and commas:

          @list = (
              'a',    # a comment
              'b',    # another comment
          );

Possible attempt to separate words with commas
     (W) qw() lists contain items separated by whitespace; therefore commas
     aren't needed to separate the items. (You may have used different
     delimiters than the parentheses shown here; braces are also frequently
     used.)

     You probably wrote something like this:

          qw! a, b, c !;

     which puts literal commas into some of the list items.  Write it
     without commas if you don't want them to appear in your data:

          qw! a b c !;

Scalar value @%s{%s} better written as $%s{%s}
     (W) You've used a hash slice (indicated by @) to select a single
     element of a hash.  Generally it's better to ask for a scalar value
     (indicated by $).  The difference is that `$foo{&bar}' always behaves
     like a scalar, both when assigning to it and when evaluating its
     argument, while `@foo{&bar}' behaves like a list when you assign to
     it, and provides a list context to its subscript, which can do weird
     things if you're expecting only one subscript.

Stub found while resolving method `%s' overloading `%s' in package `%s'
     (P) Overloading resolution over @ISA tree may be broken by importing
     stubs.  Stubs should never be implicitly created, but explicit calls
     to can may break this.

Too late for "-T" option
     (X) The #! line (or local equivalent) in a Perl script contains the
     -T option, but Perl was not invoked with -T in its argument list.
     This is an error because, by the time Perl discovers a -T in a
     script, it's too late to properly taint everything from the
     environment.  So Perl gives up.

untie attempted while %d inner references still exist
     (W) A copy of the object returned from tie (or tied) was still valid
     when untie was called.

Unrecognized character %s
     (F) The Perl parser has no idea what to do with the specified
     character in your Perl script (or eval).  Perhaps you tried to run a
     compressed script, a binary program, or a directory as a Perl program.

Unsupported function fork
     (F) Your version of executable does not support forking.

     Note that under some systems, like OS/2, there may be different
     flavors of Perl executables, some of which may support fork, some
     not. Try changing the name you call Perl by to `perl_', `perl__', and
     so on.

Use of "$$<digit>" to mean "${$}<digit>" is deprecated
     (D) Perl versions before 5.004 misinterpreted any type marker followed
     by "$" and a digit.  For example, "$$0" was incorrectly taken to mean
     "${$}0" instead of "${$0}".  This bug is (mostly) fixed in Perl 5.004.

     However, the developers of Perl 5.004 could not fix this bug
     completely, because at least two widely-used modules depend on the
     old meaning of "$$0" in a string.  So Perl 5.004 still interprets
     "$$<digit>" in the old (broken) way inside strings; but it generates
     this message as a warning.  And in Perl 5.005, this special treatment
     will cease.

Value of %s can be "0"; test with defined()
     (W) In a conditional expression, you used <HANDLE>, <*> (glob),
     `each()', or `readdir()' as a boolean value.  Each of these
     constructs can return a value of "0"; that would make the conditional
     expression false, which is probably not what you intended.  When
     using these constructs in conditional expressions, test their values
     with the defined operator.

Variable "%s" may be unavailable
     (W) An inner (nested) anonymous subroutine is inside a *named*
     subroutine, and outside that is another subroutine; and the anonymous
     (innermost) subroutine is referencing a lexical variable defined in
     the outermost subroutine.  For example:

          sub outermost { my $a; sub middle { sub { $a } } }

     If the anonymous subroutine is called or referenced (directly or
     indirectly) from the outermost subroutine, it will share the variable
     as you would expect.  But if the anonymous subroutine is called or
     referenced when the outermost subroutine is not active, it will see
     the value of the shared variable as it was before and during the
     *first* call to the outermost subroutine, which is probably not what
     you want.

     In these circumstances, it is usually best to make the middle
     subroutine anonymous, using the `sub {}' syntax.  Perl has specific
     support for shared variables in nested anonymous subroutines; a named
     subroutine in between interferes with this feature.

Variable "%s" will not stay shared
     (W) An inner (nested) *named* subroutine is referencing a lexical
     variable defined in an outer subroutine.

     When the inner subroutine is called, it will probably see the value of
     the outer subroutine's variable as it was before and during the
     *first* call to the outer subroutine; in this case, after the first
     call to the outer subroutine is complete, the inner and outer
     subroutines will no longer share a common value for the variable.  In
     other words, the variable will no longer be shared.

     Furthermore, if the outer subroutine is anonymous and references a
     lexical variable outside itself, then the outer and inner subroutines
     will never share the given variable.

     This problem can usually be solved by making the inner subroutine
     anonymous, using the `sub {}' syntax.  When inner anonymous subs that
     reference variables in outer subroutines are called or referenced,
     they are automatically rebound to the current values of such
     variables.

Warning: something's wrong
     (W) You passed warn() an empty string (the equivalent of `warn ""') or
     you called it with no args and $_ was empty.

Ill-formed logical name |%s| in prime_env_iter
     (W) A warning peculiar to VMS.  A logical name was encountered when
     preparing to iterate over %ENV which violates the syntactic rules
     governing logical names.  Since it cannot be translated normally, it
     is skipped, and will not appear in %ENV.  This may be a benign
     occurrence, as some software packages might directly modify logical
     name tables and introduce nonstandard names, or it may indicate that
     a logical name table has been corrupted.

Got an error from DosAllocMem
     (P) An error peculiar to OS/2.  Most probably you're using an obsolete
     version of Perl, and this should not happen anyway.

Malformed PERLLIB_PREFIX
     (F) An error peculiar to OS/2.  PERLLIB_PREFIX should be of the form

          prefix1;prefix2

     or

          prefix1 prefix2

     with nonempty prefix1 and prefix2.  If `prefix1' is indeed a prefix
     of a builtin library search path, prefix2 is substituted.  The error
     may appear if components are not found, or are too long.  See
     "PERLLIB_PREFIX" in `README.os2'.

PERL_SH_DIR too long
     (F) An error peculiar to OS/2. PERL_SH_DIR is the directory to find
     the `sh'-shell in.  See "PERL_SH_DIR" in `README.os2'.

Process terminated by SIG%s
     (W) This is a standard message issued by OS/2 applications, while *nix
     applications die in silence.  It is considered a feature of the OS/2
     port.  One can easily disable this by appropriate sighandlers, see
     `"Signals"', *Note Perlipc: perlipc,.  See also "Process terminated
     by SIGTERM/SIGINT" in `README.os2'.

BUGS
====

   If you find what you think is a bug, you might check the headers of
recently posted articles in the comp.lang.perl.misc newsgroup.  There may
also be information at http://www.perl.com/perl/, the Perl Home Page.

   If you believe you have an unreported bug, please run the *perlbug*
program included with your release.  Make sure you trim your bug down to a
tiny but sufficient test case.  Your bug report, along with the output of
`perl -V', will be sent off to <`perlbug@perl.com'> to be analysed by the
Perl porting team.

SEE ALSO
========

   The Changes file for exhaustive details on what changed.

   The INSTALL file for how to build Perl.  This file has been
significantly updated for 5.004, so even veteran users should look through
it.

   The README file for general stuff.

   The `Copying' file for copyright information.

HISTORY
=======

   Constructed by Tom Christiansen, grabbing material with permission from
innumerable contributors, with kibitzing by more than a few Perl porters.

   Last update: Wed May 14 11:14:09 EDT 1997


File: perl.info,  Node: perl5005delta,  Next: perl5004delta,  Prev: perldelta,  Up: Top

what's new for perl5.005
************************

NAME
====

   perldelta - what's new for perl5.005

DESCRIPTION
===========

   This document describes differences between the 5.004 release and this
one.

About the new versioning system
===============================

   Perl is now developed on two tracks: a maintenance track that makes
small, safe updates to released production versions with emphasis on
compatibility; and a development track that pursues more aggressive
evolution.  Maintenance releases (which should be considered production
quality) have subversion numbers that run from 1 to 49, and development
releases (which should be considered "alpha" quality) run from 50 to 99.

   Perl 5.005 is the combined product of the new dual-track development
scheme.

Incompatible Changes
====================

WARNING:  This version is not binary compatible with Perl 5.004.
----------------------------------------------------------------

   Starting with Perl 5.004_50 there were many deep and far-reaching
changes to the language internals.  If you have dynamically loaded
extensions that you built under perl 5.003 or 5.004, you can continue to
use them with 5.004, but you will need to rebuild and reinstall those
extensions to use them 5.005.  See INSTALL for detailed instructions on
how to upgrade.

Default installation structure has changed
------------------------------------------

   The new Configure defaults are designed to allow a smooth upgrade from
5.004 to 5.005, but you should read INSTALL for a detailed discussion of
the changes in order to adapt them to your system.

Perl Source Compatibility
-------------------------

   When none of the experimental features are enabled, there should be
very few user-visible Perl source compatibility issues.

   If threads are enabled, then some caveats apply. `@_' and $_ become
lexical variables.  The effect of this should be largely transparent to
the user, but there are some boundary conditions under which user will
need to be aware of the issues.  For example, `local(@_)' results in a
"Can't localize lexical variable @_ ..." message.  This may be enabled in
a future version.

   Some new keywords have been introduced.  These are generally expected to
have very little impact on compatibility.  See `New `INIT' in this node
keyword', `New `lock' in this node keyword', and `New `qr' in this node
operator'.

   Certain barewords are now reserved.  Use of these will provoke a warning
if you have asked for them with the -w switch.  See ``our' in this node is
now a reserved word'.

C Source Compatibility
----------------------

   There have been a large number of changes in the internals to support
the new features in this release.

Core sources now require ANSI C compiler
     An ANSI C compiler is now required to build perl.  See INSTALL.

All Perl global variables must now be referenced with an explicit prefix
     All Perl global variables that are visible for use by extensions now
     have a `PL_' prefix.  New extensions should not refer to perl globals
     by their unqualified names.  To preserve sanity, we provide limited
     backward compatibility for globals that are being widely used like
     sv_undef and `na' (which should now be written as PL_sv_undef, PL_na
     etc.)

     If you find that your XS extension does not compile anymore because a
     perl global is not visible, try adding a `PL_' prefix to the global
     and rebuild.

     It is strongly recommended that all functions in the Perl API that
     don't begin with `perl' be referenced with a Perl_ prefix.  The bare
     function names without the Perl_ prefix are supported with macros,
     but this support may cease in a future release.

     See `"API LISTING"', *Note Perlguts: perlguts,.

Enabling threads has source compatibility issues
     Perl built with threading enabled requires extensions to use the new
     `dTHR' macro to initialize the handle to access per-thread data.  If
     you see a compiler error that talks about the variable `thr' not
     being declared (when building a module that has XS code),  you need
     to add `dTHR;' at the beginning of the block that elicited the error.

     The API function `perl_get_sv("@",FALSE)' should be used instead of
     directly accessing perl globals as `GvSV(errgv)'.  The API call is
     backward compatible with existing perls and provides source
     compatibility with threading is enabled.

     See `"C Source Compatibility"' in this node for more information.

Binary Compatibility
--------------------

   This version is NOT binary compatible with older versions.  All
extensions will need to be recompiled.  Further binaries built with
threads enabled are incompatible with binaries built without.  This should
largely be transparent to the user, as all binary incompatible
configurations have their own unique architecture name, and extension
binaries get installed at unique locations.  This allows coexistence of
several configurations in the same directory hierarchy.  See INSTALL.

Security fixes may affect compatibility
---------------------------------------

   A few taint leaks and taint omissions have been corrected.  This may
lead to "failure" of scripts that used to work with older versions.
Compiling with -DINCOMPLETE_TAINTS provides a perl with minimal amounts of
changes to the tainting behavior.  But note that the resulting perl will
have known insecurities.

   Oneliners with the -e switch do not create temporary files anymore.

Relaxed new mandatory warnings introduced in 5.004
--------------------------------------------------

   Many new warnings that were introduced in 5.004 have been made
optional.  Some of these warnings are still present, but perl's new
features make them less often a problem.  See `New Diagnostics' in this
node.

Licensing
---------

   Perl has a new Social Contract for contributors.  See
`Porting/Contract'.

   The license included in much of the Perl documentation has changed.
Most of the Perl documentation was previously under the implicit GNU
General Public License or the Artistic License (at the user's choice).
Now much of the documentation unambiguously states the terms under which
it may be distributed.  Those terms are in general much less restrictive
than the GNU GPL.  See *Note Perl: perl, and the individual perl man pages
listed therein.

Core Changes
============

Threads
-------

   WARNING: Threading is considered an *experimental* feature.  Details of
the implementation may change without notice.  There are known limitations
and some bugs.  These are expected to be fixed in future versions.

   See `README.threads'.

Compiler
--------

   WARNING: The Compiler and related tools are considered *experimental*.
Features may change without notice, and there are known limitations and
bugs.  Since the compiler is fully external to perl, the default
configuration will build and install it.

   The Compiler produces three different types of transformations of a
perl program.  The C backend generates C code that captures perl's state
just before execution begins.  It eliminates the compile-time overheads of
the regular perl interpreter, but the run-time performance remains
comparatively the same.  The CC backend generates optimized C code
equivalent to the code path at run-time.  The CC backend has greater
potential for big optimizations, but only a few optimizations are
implemented currently.  The Bytecode backend generates a platform
independent bytecode representation of the interpreter's state just before
execution.  Thus, the Bytecode back end also eliminates much of the
compilation overhead of the interpreter.

   The compiler comes with several valuable utilities.

   B::Lint is an experimental module to detect and warn about suspicious
code, especially the cases that the -w switch does not detect.

   B::Deparse can be used to demystify perl code, and understand how perl
optimizes certain constructs.

   B::Xref generates cross reference reports of all definition and use of
variables, subroutines and formats in a program.

   B::Showlex show the lexical variables used by a subroutine or file at a
glance.

   perlcc is a simple frontend for compiling perl.

   See `ext/B/README', *Note B: (pm.info)B,, and the respective compiler
modules.

Regular Expressions
-------------------

   Perl's regular expression engine has been seriously overhauled, and
many new constructs are supported.  Several bugs have been fixed.

   Here is an itemized summary:

Many new and improved optimizations
     Changes in the RE engine:

          Unneeded nodes removed;
          Substrings merged together;
          New types of nodes to process (SUBEXPR)* and similar expressions
              quickly, used if the SUBEXPR has no side effects and matches
              strings of the same length;
          Better optimizations by lookup for constant substrings;
          Better search for constants substrings anchored by $ ;

     Changes in Perl code using RE engine:

          More optimizations to s/longer/short/;
          study() was not working;
          /blah/ may be optimized to an analogue of index() if $& $` $' not seen;
          Unneeded copying of matched-against string removed;
          Only matched part of the string is copying if $` $' were not seen;

Many bug fixes
     Note that only the major bug fixes are listed here.  See Changes for
     others.

          Backtracking might not restore start of $3.
          No feedback if max count for * or + on "complex" subexpression
              was reached, similarly (but at compile time) for {3,34567}
          Primitive restrictions on max count introduced to decrease a
              possibility of a segfault;
          (ZERO-LENGTH)* could segfault;
          (ZERO-LENGTH)* was prohibited;
          Long REs were not allowed;
          /RE/g could skip matches at the same position after a
            zero-length match;

New regular expression constructs
     The following new syntax elements are supported:

          (?<=RE)
          (?<!RE)
          (?{ CODE })
          (?i-x)
          (?i:RE)
          (?(COND)YES_RE|NO_RE)
          (?>RE)
          \z

New operator for precompiled regular expressions
     See `New `qr' in this node operator'.

Other improvements
          Better debugging output (possibly with colors),
                      even from non-debugging Perl;
          RE engine code now looks like C, not like assembler;
          Behaviour of RE modifiable by `use re' directive;
          Improved documentation;
          Test suite significantly extended;
          Syntax [:^upper:] etc., reserved inside character classes;

Incompatible changes
          (?i) localized inside enclosing group;
          $( is not interpolated into RE any more;
          /RE/g may match at the same position (with non-zero length)
              after a zero-length match (bug fix).

   See *Note Perlre: perlre, and *Note Perlop: perlop,.

Improved malloc()
-----------------

   See banner at the beginning of `malloc.c' for details.

Quicksort is internally implemented
-----------------------------------

   Perl now contains its own highly optimized qsort() routine.  The new
qsort() is resistant to inconsistent comparison functions, so Perl's
`sort()' will not provoke coredumps any more when given poorly written
sort subroutines.  (Some C library `qsort()'s that were being used before
used to have this problem.)  In our testing, the new `qsort()' required
the minimal number of pair-wise compares on average, among all known
`qsort()' implementations.

   See `perlfunc/sort'.

Reliable signals
----------------

   Perl's signal handling is susceptible to random crashes, because signals
arrive asynchronously, and the Perl runtime is not reentrant at arbitrary
times.

   However, one experimental implementation of reliable signals is
available when threads are enabled.  See `Thread::Signal'.  Also see
INSTALL for how to build a Perl capable of threads.

Reliable stack pointers
-----------------------

   The internals now reallocate the perl stack only at predictable times.
In particular, magic calls never trigger reallocations of the stack,
because all reentrancy of the runtime is handled using a "stack of stacks".
This should improve reliability of cached stack pointers in the internals
and in XSUBs.

More generous treatment of carriage returns
-------------------------------------------

   Perl used to complain if it encountered literal carriage returns in
scripts.  Now they are mostly treated like whitespace within program text.
Inside string literals and here documents, literal carriage returns are
ignored if they occur paired with linefeeds, or get interpreted as
whitespace if they stand alone.  This behavior means that literal carriage
returns in files should be avoided.  You can get the older, more
compatible (but less generous) behavior by defining the preprocessor symbol
`PERL_STRICT_CR' when building perl.  Of course, all this has nothing
whatever to do with how escapes like `\r' are handled within strings.

   Note that this doesn't somehow magically allow you to keep all text
files in DOS format.  The generous treatment only applies to files that
perl itself parses.  If your C compiler doesn't allow carriage returns in
files, you may still be unable to build modules that need a C compiler.

Memory leaks
------------

   substr, pos and vec don't leak memory anymore when used in lvalue
context.  Many small leaks that impacted applications that embed multiple
interpreters have been fixed.

Better support for multiple interpreters
----------------------------------------

   The build-time option `-DMULTIPLICITY' has had many of the details
reworked.  Some previously global variables that should have been
per-interpreter now are.  With care, this allows interpreters to call each
other.  See the `PerlInterp' extension on CPAN.

Behavior of local() on array and hash elements is now well-defined
------------------------------------------------------------------

   See `"Temporary Values via local()"', *Note Perlsub: perlsub,.

`%!' is transparently tied to the *Note Errno: (pm.info)Errno, module
---------------------------------------------------------------------

   See *Note Perlvar: perlvar,, and *Note Errno: (pm.info)Errno,.

Pseudo-hashes are supported
---------------------------

   See *Note Perlref: perlref,.

`EXPR foreach EXPR' is supported
--------------------------------

   See *Note Perlsyn: perlsyn,.

Keywords can be globally overridden
-----------------------------------

   See *Note Perlsub: perlsub,.

$^E is meaningful on Win32
--------------------------

   See *Note Perlvar: perlvar,.

`foreach (1..1000000)' optimized
--------------------------------

   `foreach (1..1000000)' is now optimized into a counting loop.  It does
not try to allocate a 1000000-size list anymore.

`Foo::' can be used as implicitly quoted package name
-----------------------------------------------------

   Barewords caused unintuitive behavior when a subroutine with the same
name as a package happened to be defined.  Thus, `new Foo @args', use the
result of the call to `Foo()' instead of `Foo' being treated as a literal.
The recommended way to write barewords in the indirect object slot is
`new Foo:: @args'.  Note that the method new() is called with a first
argument of `Foo', not `Foo::' when you do that.

`exists $Foo::{Bar::}' tests existence of a package
---------------------------------------------------

   It was impossible to test for the existence of a package without
actually creating it before.  Now `exists $Foo::{Bar::}' can be used to
test if the `Foo::Bar' namespace has been created.

Better locale support
---------------------

   See *Note Perllocale: perllocale,.

Experimental support for 64-bit platforms
-----------------------------------------

   Perl5 has always had 64-bit support on systems with 64-bit longs.
Starting with 5.005, the beginnings of experimental support for systems
with 32-bit long and 64-bit 'long long' integers has been added.  If you
add -DUSE_LONG_LONG to your ccflags in config.sh (or manually define it in
perl.h) then perl will be built with 'long long' support.  There will be
many compiler warnings, and the resultant perl may not work on all
systems.  There are many other issues related to third-party extensions
and libraries.  This option exists to allow people to work on those issues.

prototype() returns useful results on builtins
----------------------------------------------

   See `prototype', *Note Perlfunc: perlfunc,.

Extended support for exception handling
---------------------------------------

   `die()' now accepts a reference value, and `$@' gets set to that value
in exception traps.  This makes it possible to propagate exception
objects.  This is an undocumented *experimental* feature.

Re-blessing in DESTROY() supported for chaining DESTROY() methods
-----------------------------------------------------------------

   See `Destructors', *Note Perlobj: perlobj,.

All printf format conversions are handled internally
----------------------------------------------------

   See `printf', *Note Perlfunc: perlfunc,.

New `INIT' keyword
------------------

   `INIT' subs are like BEGIN and END, but they get run just before the
perl runtime begins execution.  e.g., the Perl Compiler makes use of
`INIT' blocks to initialize and resolve pointers to XSUBs.

New lock keyword
----------------

   The lock keyword is the fundamental synchronization primitive in
threaded perl.  When threads are not enabled, it is currently a noop.

   To minimize impact on source compatibility this keyword is "weak",
i.e., any user-defined subroutine of the same name overrides it, unless a
`use Thread' has been seen.

New `qr//' operator
-------------------

   The `qr//' operator, which is syntactically similar to the other
quote-like operators, is used to create precompiled regular expressions.
This compiled form can now be explicitly passed around in variables, and
interpolated in other regular expressions.  See *Note Perlop: perlop,.

our is now a reserved word
--------------------------

   Calling a subroutine with the name our will now provoke a warning when
using the -w switch.

Tied arrays are now fully supported
-----------------------------------

   See *Note Tie/Array: (pm.info)Tie/Array,.

Tied handles support is better
------------------------------

   Several missing hooks have been added.  There is also a new base class
for TIEARRAY implementations.  See *Note Tie/Array: (pm.info)Tie/Array,.

4th argument to substr
----------------------

   substr() can now both return and replace in one operation.  The optional
4th argument is the replacement string.  See `substr', *Note Perlfunc:
perlfunc,.

Negative LENGTH argument to splice
----------------------------------

   splice() with a negative LENGTH argument now work similar to what the
LENGTH did for substr().  Previously a negative LENGTH was treated as 0.
See `splice', *Note Perlfunc: perlfunc,.

Magic lvalues are now more magical
----------------------------------

   When you say something like `substr($x, 5) = "hi"', the scalar returned
by substr() is special, in that any modifications to it affect $x.  (This
is called a 'magic lvalue' because an 'lvalue' is something on the left
side of an assignment.)  Normally, this is exactly what you would expect
to happen, but Perl uses the same magic if you use substr(), pos(), or
vec() in a context where they might be modified, like taking a reference
with \ or as an argument to a sub that modifies `@_'.  In previous
versions, this 'magic' only went one way, but now changes to the scalar
the magic refers to ($x in the above example) affect the magic lvalue too.
For instance, this code now acts differently:

     $x = "hello";
     sub printit {
     	$x = "g'bye";
     	print $_[0], "\n";
     }
     printit(substr($x, 0, 5));

   In previous versions, this would print "hello", but it now prints
"g'bye".

<> now reads in records
-----------------------

   If $/ is a reference to an integer, or a scalar that holds an integer,
<> will read in records instead of lines. For more info, see `$', *Note
Perlvar: perlvar,.

Supported Platforms
===================

   Configure has many incremental improvements.  Site-wide policy for
building perl can now be made persistent, via Policy.sh.  Configure also
records the command-line arguments used in `config.sh'.

New Platforms
-------------

   BeOS is now supported.  See `README.beos'.

   DOS is now supported under the DJGPP tools.  See `README.dos' (installed
as *Note Perldos: perldos, on some systems).

   MiNT is now supported.  See `README.mint'.

   MPE/iX is now supported.  See `README.mpeix'.

   MVS (aka OS390, aka Open Edition) is now supported.  See `README.os390'
(installed as *Note Perlos390: perlos390, on some systems).

   Stratus VOS is now supported.  See `README.vos'.

Changes in existing support
---------------------------

   Win32 support has been vastly enhanced.  Support for Perl Object, a C++
encapsulation of Perl.  GCC and EGCS are now supported on Win32.  See
`README.win32', aka *Note Perlwin32: perlwin32,.

   VMS configuration system has been rewritten.  See `README.vms'
(installed as `README_vms' in this node on some systems).

   The hints files for most Unix platforms have seen incremental
improvements.

Modules and Pragmata
====================

New Modules
-----------

B
     Perl compiler and tools.  See *Note B: (pm.info)B,.

Data::Dumper
     A module to pretty print Perl data.  See *Note Data/Dumper:
     (pm.info)Data/Dumper,.

Dumpvalue
     A module to dump perl values to the screen. See *Note Dumpvalue:
     (pm.info)Dumpvalue,.

Errno
     A module to look up errors more conveniently.  See *Note Errno:
     (pm.info)Errno,.

File::Spec
     A portable API for file operations.

ExtUtils::Installed
     Query and manage installed modules.

ExtUtils::Packlist
     Manipulate .packlist files.

Fatal
     Make functions/builtins succeed or die.

IPC::SysV
     Constants and other support infrastructure for System V IPC operations
     in perl.

Test
     A framework for writing testsuites.

Tie::Array
     Base class for tied arrays.

Tie::Handle
     Base class for tied handles.

Thread
     Perl thread creation, manipulation, and support.

attrs
     Set subroutine attributes.

fields
     Compile-time class fields.

re
     Various pragmata to control behavior of regular expressions.

Changes in existing modules
---------------------------

Benchmark
     You can now run tests for x seconds instead of guessing the right
     number of tests to run.

Carp
     Carp has a new function cluck(). cluck() warns, like carp(), but also
     adds a stack backtrace to the error message, like confess().

CGI
     CGI has been updated to version 2.42.

Fcntl
     More Fcntl constants added: F_SETLK64, F_SETLKW64, O_LARGEFILE for
     large (more than 4G) file access (the 64-bit support is not yet
     working, though, so no need to get overly excited), Free/Net/OpenBSD
     locking behaviour flags F_FLOCK, F_POSIX, Linux F_SHLCK, and
     O_ACCMODE: the mask of O_RDONLY, O_WRONLY, and O_RDWR.

Math::Complex
     The accessors methods Re, Im, arg, abs, rho, theta, methods can
     ($z->Re()) now also act as mutators ($z->Re(3)).

Math::Trig
     A little bit of radial trigonometry (cylindrical and spherical) added,
     for example the great circle distance.

POSIX
     POSIX now has its own platform-specific hints files.

DB_File
     DB_File supports version 2.x of Berkeley DB.  See
     `ext/DB_File/Changes'.

MakeMaker
     MakeMaker now supports writing empty makefiles, provides a way to
     specify that site umask() policy should be honored.  There is also
     better support for manipulation of .packlist files, and getting
     information about installed modules.

     Extensions that have both architecture-dependent and
     architecture-independent files are now always installed completely in
     the architecture-dependent locations.  Previously, the shareable parts
     were shared both across architectures and across perl versions and
     were therefore liable to be overwritten with newer versions that
     might have subtle incompatibilities.

CPAN
     See <perlmodinstall> and *Note CPAN: (pm.info)CPAN,.

Cwd
     Cwd::cwd is faster on most platforms.

Benchmark
     Keeps better time.

Utility Changes
===============

   h2ph and related utilities have been vastly overhauled.

   perlcc, a new experimental front end for the compiler is available.

   The crude GNU configure emulator is now called `configure.gnu' to avoid
trampling on Configure under case-insensitive filesystems.

   perldoc used to be rather slow.  The slower features are now optional.
In particular, case-insensitive searches need the -i switch, and recursive
searches need -r.  You can set these switches in the `PERLDOC' environment
variable to get the old behavior.

Documentation Changes
=====================

   Config.pm now has a glossary of variables.

   `Porting/patching.pod' has detailed instructions on how to create and
submit patches for perl.

   *Note Perlport: perlport, specifies guidelines on how to write portably.

   *Note Perlmodinstall: perlmodinstall, describes how to fetch and
install modules from CPAN sites.

   Some more Perl traps are documented now.  See *Note Perltrap: perltrap,.

   *Note Perlopentut: perlopentut, gives a tutorial on using open().

   *Note Perlreftut: perlreftut, gives a tutorial on references.

   *Note Perlthrtut: perlthrtut, gives a tutorial on threads.

New Diagnostics
===============

Ambiguous call resolved as CORE::%s(), qualify as such or use &
     (W) A subroutine you have declared has the same name as a Perl
     keyword, and you have used the name without qualification for calling
     one or the other.  Perl decided to call the builtin because the
     subroutine is not imported.

     To force interpretation as a subroutine call, either put an ampersand
     before the subroutine name, or qualify the name with its package.
     Alternatively, you can import the subroutine (or pretend that it's
     imported with the `use subs' pragma).

     To silently interpret it as the Perl operator, use the `CORE::' prefix
     on the operator (e.g. `CORE::log($x)') or by declaring the subroutine
     to be an object method (see *Note Attrs: (pm.info)attrs,).

Bad index while coercing array into hash
     (F) The index looked up in the hash found as the 0'th element of a
     pseudo-hash is not legal.  Index values must be at 1 or greater.  See
     *Note Perlref: perlref,.

Bareword "%s" refers to nonexistent package
     (W) You used a qualified bareword of the form `Foo::', but the
     compiler saw no other uses of that namespace before that point.
     Perhaps you need to predeclare a package?

Can't call method "%s" on an undefined value
     (F) You used the syntax of a method call, but the slot filled by the
     object reference or package name contains an undefined value.
     Something like this will reproduce the error:

          $BADREF = 42;
          process $BADREF 1,2,3;
          $BADREF->process(1,2,3);

Can't check filesystem of script "%s" for nosuid
     (P) For some reason you can't check the filesystem of the script for
     nosuid.

Can't coerce array into hash
     (F) You used an array where a hash was expected, but the array has no
     information on how to map from keys to array indices.  You can do that
     only with arrays that have a hash reference at index 0.

Can't goto subroutine from an eval-string
     (F) The "goto subroutine" call can't be used to jump out of an eval
     "string".  (You can use it to jump out of an eval {BLOCK}, but you
     probably don't want to.)

Can't localize pseudo-hash element
     (F) You said something like `< local $ar-'{'key'} >>, where $ar is a
     reference to a pseudo-hash.  That hasn't been implemented yet, but
     you can get a similar effect by localizing the corresponding array
     element directly - `< local $ar-'[$ar->[0]{'key'}] >>.

Can't use %%! because Errno.pm is not available
     (F) The first time the %! hash is used, perl automatically loads the
     Errno.pm module. The Errno module is expected to tie the %! hash to
     provide symbolic names for $! errno values.

Cannot find an opnumber for "%s"
     (F) A string of a form `CORE::word' was given to prototype(), but
     there is no builtin with the name word.

Character class syntax [. .] is reserved for future extensions
     (W) Within regular expression character classes ([]) the syntax
     beginning with "[." and ending with ".]" is reserved for future
     extensions.  If you need to represent those character sequences
     inside a regular expression character class, just quote the square
     brackets with the backslash: "\[." and ".\]".

Character class syntax [: :] is reserved for future extensions
     (W) Within regular expression character classes ([]) the syntax
     beginning with "[:" and ending with ":]" is reserved for future
     extensions.  If you need to represent those character sequences
     inside a regular expression character class, just quote the square
     brackets with the backslash: "\[:" and ":\]".

Character class syntax [= =] is reserved for future extensions
     (W) Within regular expression character classes ([]) the syntax
     beginning with "[=" and ending with "=]" is reserved for future
     extensions.  If you need to represent those character sequences
     inside a regular expression character class, just quote the square
     brackets with the backslash: "\[=" and "=\]".

%s: Eval-group in insecure regular expression
     (F) Perl detected tainted data when trying to compile a regular
     expression that contains the `(?{ ... })' zero-width assertion, which
     is unsafe.  See `(?{ code })', *Note Perlre: perlre,, and `(?{ code
     })', *Note Perlsec: perlsec,.

%s: Eval-group not allowed, use re 'eval'
     (F) A regular expression contained the `(?{ ... })' zero-width
     assertion, but that construct is only allowed when the `use re
     'eval'' pragma is in effect.  See `(?{ code })', *Note Perlre:
     perlre,.

%s: Eval-group not allowed at run time
     (F) Perl tried to compile a regular expression containing the `(?{
     ... })' zero-width assertion at run time, as it would when the
     pattern contains interpolated values.  Since that is a security risk,
     it is not allowed.  If you insist, you may still do this by
     explicitly building the pattern from an interpolated string at run
     time and using that in an eval().  See `(?{ code })', *Note Perlre:
     perlre,.

Explicit blessing to " (assuming package main)
     (W) You are blessing a reference to a zero length string.  This has
     the effect of blessing the reference into the package main.  This is
     usually not what you want.  Consider providing a default target
     package, e.g. bless($ref, $p || 'MyPackage');

Illegal hex digit ignored
     (W) You may have tried to use a character other than 0 - 9 or A - F
     in a hexadecimal number.  Interpretation of the hexadecimal number
     stopped before the illegal character.

No such array field
     (F) You tried to access an array as a hash, but the field name used is
     not defined.  The hash at index 0 should map all valid field names to
     array indices for that to work.

No such field "%s" in variable %s of type %s
     (F) You tried to access a field of a typed variable where the type
     does not know about the field name.  The field names are looked up in
     the %FIELDS hash in the type package at compile time.  The %FIELDS
     hash is usually set up with the 'fields' pragma.

Out of memory during ridiculously large request
     (F) You can't allocate more than 2^31+"small amount" bytes.  This
     error is most likely to be caused by a typo in the Perl program.
     e.g., `$arr[time]' instead of `$arr[$time]'.

Range iterator outside integer range
     (F) One (or both) of the numeric arguments to the range operator ".."
     are outside the range which can be represented by integers internally.
     One possible workaround is to force Perl to use magical string
     increment by prepending "0" to your numbers.

Recursive inheritance detected while looking for method '%s' in package '%s'
     (F) More than 100 levels of inheritance were encountered while
     invoking a method.  Probably indicates an unintended loop in your
     inheritance hierarchy.

Reference found where even-sized list expected
     (W) You gave a single reference where Perl was expecting a list with
     an even number of elements (for assignment to a hash). This usually
     means that you used the anon hash constructor when you meant to use
     parens. In any case, a hash requires key/value *pairs*.

          %hash = { one => 1, two => 2, };   # WRONG
          %hash = [ qw/ an anon array / ];   # WRONG
          %hash = ( one => 1, two => 2, );   # right
          %hash = qw( one 1 two 2 );                 # also fine

Undefined value assigned to typeglob
     (W) An undefined value was assigned to a typeglob, a la `*foo =
     undef'.  This does nothing.  It's possible that you really mean
     `undef *foo'.

Use of reserved word "%s" is deprecated
     (D) The indicated bareword is a reserved word.  Future versions of
     perl may use it as a keyword, so you're better off either explicitly
     quoting the word in a manner appropriate for its context of use, or
     using a different name altogether.  The warning can be suppressed for
     subroutine names by either adding a & prefix, or using a package
     qualifier, e.g. `&our()', or `Foo::our()'.

perl: warning: Setting locale failed.
     (S) The whole warning message will look something like:

          perl: warning: Setting locale failed.
          perl: warning: Please check that your locale settings:
                  LC_ALL = "En_US",
                  LANG = (unset)
              are supported and installed on your system.
          perl: warning: Falling back to the standard locale ("C").

     Exactly what were the failed locale settings varies.  In the above the
     settings were that the LC_ALL was "En_US" and the LANG had no value.
     This error means that Perl detected that you and/or your system
     administrator have set up the so-called variable system but Perl could
     not use those settings.  This was not dead serious, fortunately: there
     is a "default locale" called "C" that Perl can and will use, the
     script will be run.  Before you really fix the problem, however, you
     will get the same error message each time you run Perl.  How to really
     fix the problem can be found in `"LOCALE PROBLEMS"', *Note
     Perllocale: perllocale,.

Obsolete Diagnostics
====================

Can't mktemp()
     (F) The mktemp() routine failed for some reason while trying to
     process a -e switch.  Maybe your /tmp partition is full, or clobbered.

     Removed because -e doesn't use temporary files any more.

Can't write to temp file for -e: %s
     (F) The write routine failed for some reason while trying to process
     a -e switch.  Maybe your /tmp partition is full, or clobbered.

     Removed because -e doesn't use temporary files any more.

Cannot open temporary file
     (F) The create routine failed for some reason while trying to process
     a -e switch.  Maybe your /tmp partition is full, or clobbered.

     Removed because -e doesn't use temporary files any more.

regexp too big
     (F) The current implementation of regular expressions uses shorts as
     address offsets within a string.  Unfortunately this means that if
     the regular expression compiles to longer than 32767, it'll blow up.
     Usually when you want a regular expression this big, there is a better
     way to do it with multiple statements.  See *Note Perlre: perlre,.

Configuration Changes
=====================

   You can use "Configure -Uinstallusrbinperl" which causes installperl to
skip installing perl also as /usr/bin/perl.  This is useful if you prefer
not to modify /usr/bin for some reason or another but harmful because many
scripts assume to find Perl in /usr/bin/perl.

BUGS
====

   If you find what you think is a bug, you might check the headers of
recently posted articles in the comp.lang.perl.misc newsgroup.  There may
also be information at http://www.perl.com/perl/, the Perl Home Page.

   If you believe you have an unreported bug, please run the *perlbug*
program included with your release.  Make sure you trim your bug down to a
tiny but sufficient test case.  Your bug report, along with the output of
`perl -V', will be sent off to <`perlbug@perl.com'> to be analysed by the
Perl porting team.

SEE ALSO
========

   The Changes file for exhaustive details on what changed.

   The INSTALL file for how to build Perl.

   The README file for general stuff.

   The `Artistic' and `Copying' files for copyright information.

HISTORY
=======

   Written by Gurusamy Sarathy <`gsar@activestate.com'>, with many
contributions from The Perl Porters.

   Send omissions or corrections to <`perlbug@perl.com'>.


File: perl.info,  Node: perlamiga,  Next: perlcygwin,  Prev: perlhist,  Up: Top

Perl under Amiga OS
*******************

NAME
====

   perlamiga - Perl under Amiga OS

SYNOPSIS
========

   One can read this document in the following formats:

     man perlamiga
     multiview perlamiga.guide

   to list some (not all may be available simultaneously), or it may be
read *as is*: either as `README.amiga', or `pod/perlamiga.pod'.

DESCRIPTION
===========

Prerequisites
-------------

*Unix emulation for AmigaOS: ixemul.library*
     You need the Unix emulation for AmigaOS, whose most important part is
     *ixemul.library*. For a minimum setup, get the following archives from
     ftp://ftp.ninemoons.com/pub/ade/current or a mirror:

     ixemul-46.0-bin.lha ixemul-46.0-env-bin.lha pdksh-4.9-bin.lha
     ADE-misc-bin.lha

     Note that there might be newer versions available by the time you read
     this.

     Note also that this is a minimum setup; you might want to add other
     packages of *ADE* (the *Amiga Developers Environment*).

*Version of Amiga OS*
     You need at the very least AmigaOS version 2.0. Recommended is
     version 3.1.

Starting Perl programs under AmigaOS
------------------------------------

   Start your Perl program foo with arguments `arg1 arg2 arg3' the same
way as on any other platform, by

     perl foo arg1 arg2 arg3

   If you want to specify perl options `-my_opts' to the perl itself (as
opposed to to your program), use

     perl -my_opts foo arg1 arg2 arg3

   Alternately, you can try to get a replacement for the system's Execute
command that honors the #!/usr/bin/perl syntax in scripts and set the s-Bit
of your scripts. Then you can invoke your scripts like under UNIX with

     foo arg1 arg2 arg3

   (Note that having *nixish full path to perl `/usr/bin/perl' is not
necessary, `perl' would be enough, but having full path would make it
easier to use your script under *nix.)

Shortcomings of Perl under AmigaOS
----------------------------------

   Perl under AmigaOS lacks some features of perl under UNIX because of
deficiencies in the UNIX-emulation, most notably:

fork()
some features of the UNIX filesystem regarding link count and file dates
inplace operation (the -i switch) without backup file
umask() works, but the correct permissions are only set when the file is       finally close()d
INSTALLATION
============

   Change to the installation directory (most probably ADE:), and extract
the binary distribution:

   lha -mraxe x perl-5.003-bin.lha

   or

   tar xvzpf perl-5.003-bin.tgz

   (Of course you need lha or tar and gunzip for this.)

   For installation of the Unix emulation, read the appropriate docs.

Accessing documentation
=======================

Manpages
--------

   If you have man installed on your system, and you installed perl
manpages, use something like this:

     man perlfunc
     man less
     man ExtUtils.MakeMaker

   to access documentation for different components of Perl. Start with

     man perl

   Note: You have to modify your man.conf file to search for manpages in
the /ade/lib/perl5/man/man3 directory, or the man pages for the perl
library will not be found.

   Note that dot (.) is used as a package separator for documentation for
packages, and as usual, sometimes you need to give the section - 3 above -
to avoid shadowing by the *less(1) manpage*.

HTML
----

   If you have some WWW browser available, you can build HTML docs.  Cd to
directory with `.pod' files, and do like this

     cd /ade/lib/perl5/pod
     pod2html

   After this you can direct your browser the file `perl.html' in this
directory, and go ahead with reading docs.

   Alternatively you may be able to get these docs prebuilt from CPAN.

GNU info files
--------------

   Users of `Emacs' would appreciate it very much, especially with `CPerl'
mode loaded. You need to get latest `pod2info' from CPAN, or, alternately,
prebuilt info pages.

`LaTeX' docs
------------

   can be constructed using `pod2latex'.

BUILD
=====

   Here we discuss how to build Perl under AmigaOS.

Prerequisites
-------------

   You need to have the latest *ADE* (Amiga Developers Environment) from
ftp://ftp.ninemoons.com/pub/ade/current.  Also, you need a lot of free
memory, probably at least 8MB.

Getting the perl source
-----------------------

   You can either get the latest perl-for-amiga source from Ninemoons and
extract it with:

     tar xvzpf perl-5.004-src.tgz

   or get the official source from CPAN:

     http://www.perl.com/CPAN/src/5.0

   Extract it like this

     tar xvzpf perl5.004.tar.gz

   You will see a message about errors while extracting Configure. This is
normal and expected. (There is a conflict with a similarly-named file
configure, but it causes no harm.)

Making
------

     sh configure.gnu --prefix=/ade

   Now

     make

Testing
-------

   Now run

     make test

   Some tests will be skipped because they need the fork() function:

   `io/pipe.t', `op/fork.t', `lib/filehand.t', `lib/open2.t',
`lib/open3.t', `lib/io_pipe.t', `lib/io_sock.t'

Installing the built perl
-------------------------

   Run

     make install

AUTHOR
======

   Norbert Pueschel, pueschel@imsdd.meb.uni-bonn.de

SEE ALSO
========

   perl(1).


File: perl.info,  Node: perlapi,  Next: perlintern,  Prev: perlcall,  Up: Top

autogenerated documentation for the perl public API
***************************************************

NAME
====

   perlapi - autogenerated documentation for the perl public API

DESCRIPTION
===========

   This file contains the documentation of the perl public API generated by
embed.pl, specifically a listing of functions, macros, flags, and variables
that may be used by extension writers.  The interfaces of any functions
that are not listed here are subject to change without notice.  For this
reason, blindly using functions listed in proto.h is to be avoided when
writing extensions.

   Note that all Perl API global variables must be referenced with the
`PL_' prefix.  Some macros are provided for compatibility with the older,
unadorned names, but this support may be disabled in a future release.

   The listing is alphabetical, case insensitive.

AvFILL
     Same as `av_len()'.  Deprecated, use `av_len()' instead.

          int	AvFILL(AV* av)

av_clear
     Clears an array, making it empty.  Does not free the memory used by
     the array itself.

          void	av_clear(AV* ar)

av_extend
     Pre-extend an array.  The key is the index to which the array should
     be extended.

          void	av_extend(AV* ar, I32 key)

av_fetch
     Returns the SV at the specified index in the array.  The key is the
     index.  If `lval' is set then the fetch will be part of a store.
     Check that the return value is non-null before dereferencing it to a
     `SV*'.

     See `"Understanding the Magic of Tied Hashes and Arrays"', *Note
     Perlguts: perlguts, for more information on how to use this function
     on tied arrays.

          SV**	av_fetch(AV* ar, I32 key, I32 lval)

av_len
     Returns the highest index in the array.  Returns -1 if the array is
     empty.

          I32	av_len(AV* ar)

av_make
     Creates a new AV and populates it with a list of SVs.  The SVs are
     copied into the array, so they may be freed after the call to
     av_make.  The new AV will have a reference count of 1.

          AV*	av_make(I32 size, SV** svp)

av_pop
     Pops an SV off the end of the array.  Returns `&PL_sv_undef' if the
     array is empty.

          SV*	av_pop(AV* ar)

av_push
     Pushes an SV onto the end of the array.  The array will grow
     automatically to accommodate the addition.

          void	av_push(AV* ar, SV* val)

av_shift
     Shifts an SV off the beginning of the array.

          SV*	av_shift(AV* ar)

av_store
     Stores an SV in an array.  The array index is specified as key.  The
     return value will be NULL if the operation failed or if the value did
     not need to be actually stored within the array (as in the case of
     tied arrays). Otherwise it can be dereferenced to get the original
     `SV*'.  Note that the caller is responsible for suitably incrementing
     the reference count of val before the call, and decrementing it if
     the function returned NULL.

     See `"Understanding the Magic of Tied Hashes and Arrays"', *Note
     Perlguts: perlguts, for more information on how to use this function
     on tied arrays.

          SV**	av_store(AV* ar, I32 key, SV* val)

av_undef
     Undefines the array.  Frees the memory used by the array itself.

          void	av_undef(AV* ar)

av_unshift
     Unshift the given number of undef values onto the beginning of the
     array.  The array will grow automatically to accommodate the
     addition.  You must then use av_store to assign values to these new
     elements.

          void	av_unshift(AV* ar, I32 num)

call_argv
     Performs a callback to the specified Perl sub.  See *Note Perlcall:
     perlcall,.

     NOTE: the perl_ form of this function is deprecated.

          I32	call_argv(const char* sub_name, I32 flags, char** argv)

call_method
     Performs a callback to the specified Perl method.  The blessed object
     must be on the stack.  See *Note Perlcall: perlcall,.

     NOTE: the perl_ form of this function is deprecated.

          I32	call_method(const char* methname, I32 flags)

call_pv
     Performs a callback to the specified Perl sub.  See *Note Perlcall:
     perlcall,.

     NOTE: the perl_ form of this function is deprecated.

          I32	call_pv(const char* sub_name, I32 flags)

call_sv
     Performs a callback to the Perl sub whose name is in the SV.  See
     *Note Perlcall: perlcall,.

     NOTE: the perl_ form of this function is deprecated.

          I32	call_sv(SV* sv, I32 flags)

CLASS
     Variable which is setup by xsubpp to indicate the class name for a
     C++ XS constructor.  This is always a `char*'.  See THIS.

          char*	CLASS

Copy
     The XSUB-writer's interface to the C memcpy function.  The src is the
     source, dest is the destination, `nitems' is the number of items, and
     type is the type.  May fail on overlapping copies.  See also Move.

          void	Copy(void* src, void* dest, int nitems, type)

croak
     This is the XSUB-writer's interface to Perl's die function.  Use this
     function the same way you use the C printf function.  See warn.

          void	croak(const char* pat, ...)

CvSTASH
     Returns the stash of the CV.

          HV*	CvSTASH(CV* cv)

dMARK
     Declare a stack marker variable, mark, for the XSUB.  See MARK and
     dORIGMARK.

          dMARK;

dORIGMARK
     Saves the original stack mark for the XSUB.  See ORIGMARK.

          dORIGMARK;

dSP
     Declares a local copy of perl's stack pointer for the XSUB, available
     via the SP macro.  See SP.

          dSP;

dXSARGS
     Sets up stack and mark pointers for an XSUB, calling dSP and dMARK.
     This is usually handled automatically by xsubpp.  Declares the items
     variable to indicate the number of items on the stack.

          dXSARGS;

dXSI32
     Sets up the ix variable for an XSUB which has aliases.  This is
     usually handled automatically by xsubpp.

          dXSI32;

ENTER
     Opening bracket on a callback.  See LEAVE and *Note Perlcall:
     perlcall,.

          ENTER;

eval_pv
     Tells Perl to eval the given string and return an SV* result.

     NOTE: the perl_ form of this function is deprecated.

          SV*	eval_pv(const char* p, I32 croak_on_error)

eval_sv
     Tells Perl to eval the string in the SV.

     NOTE: the perl_ form of this function is deprecated.

          I32	eval_sv(SV* sv, I32 flags)

EXTEND
     Used to extend the argument stack for an XSUB's return values. Once
     used, guarrantees that there is room for at least `nitems' to be
     pushed onto the stack.

          void	EXTEND(SP, int nitems)

fbm_compile
     Analyses the string in order to make fast searches on it using
     fbm_instr() - the Boyer-Moore algorithm.

          void	fbm_compile(SV* sv, U32 flags)

fbm_instr
     Returns the location of the SV in the string delimited by str and
     `strend'.  It returns Nullch if the string can't be found.  The sv
     does not have to be fbm_compiled, but the search will not be as fast
     then.

          char*	fbm_instr(unsigned char* big, unsigned char* bigend, SV* littlesv, U32 flags)

FREETMPS
     Closing bracket for temporaries on a callback.  See SAVETMPS and
     *Note Perlcall: perlcall,.

          FREETMPS;

get_av
     Returns the AV of the specified Perl array.  If create is set and the
     Perl variable does not exist then it will be created.  If create is
     not set and the variable does not exist then NULL is returned.

     NOTE: the perl_ form of this function is deprecated.

          AV*	get_av(const char* name, I32 create)

get_cv
     Returns the CV of the specified Perl subroutine.  If create is set and
     the Perl subroutine does not exist then it will be declared (which
     has the same effect as saying `sub name;').  If create is not set and
     the subroutine does not exist then NULL is returned.

     NOTE: the perl_ form of this function is deprecated.

          CV*	get_cv(const char* name, I32 create)

get_hv
     Returns the HV of the specified Perl hash.  If create is set and the
     Perl variable does not exist then it will be created.  If create is
     not set and the variable does not exist then NULL is returned.

     NOTE: the perl_ form of this function is deprecated.

          HV*	get_hv(const char* name, I32 create)

get_sv
     Returns the SV of the specified Perl scalar.  If create is set and the
     Perl variable does not exist then it will be created.  If create is
     not set and the variable does not exist then NULL is returned.

     NOTE: the perl_ form of this function is deprecated.

          SV*	get_sv(const char* name, I32 create)

GIMME
     A backward-compatible version of GIMME_V which can only return
     G_SCALAR or G_ARRAY; in a void context, it returns G_SCALAR.
     Deprecated.  Use GIMME_V instead.

          U32	GIMME

GIMME_V
     The XSUB-writer's equivalent to Perl's wantarray.  Returns G_VOID,
     G_SCALAR or G_ARRAY for void, scalar or array context, respectively.

          U32	GIMME_V

GvSV
     Return the SV from the GV.

          SV*	GvSV(GV* gv)

gv_fetchmeth
     Returns the glob with the given name and a defined subroutine or
     NULL.  The glob lives in the given stash, or in the stashes
     accessible via @ISA and @UNIVERSAL.

     The argument level should be either 0 or -1.  If `level==0', as a
     side-effect creates a glob with the given name in the given stash
     which in the case of success contains an alias for the subroutine,
     and sets up caching info for this glob.  Similarly for all the
     searched stashes.

     This function grants `"SUPER"' token as a postfix of the stash name.
     The GV returned from gv_fetchmeth may be a method cache entry, which
     is not visible to Perl code.  So when calling call_sv, you should not
     use the GV directly; instead, you should use the method's CV, which
     can be obtained from the GV with the `GvCV' macro.

          GV*	gv_fetchmeth(HV* stash, const char* name, STRLEN len, I32 level)

gv_fetchmethod
     See `gv_fetchmethod_autoload' in this node.

          GV*	gv_fetchmethod(HV* stash, const char* name)

gv_fetchmethod_autoload
     Returns the glob which contains the subroutine to call to invoke the
     method on the stash.  In fact in the presence of autoloading this may
     be the glob for "AUTOLOAD".  In this case the corresponding variable
     $AUTOLOAD is already setup.

     The third parameter of gv_fetchmethod_autoload determines whether
     AUTOLOAD lookup is performed if the given method is not present:
     non-zero means yes, look for AUTOLOAD; zero means no, don't look for
     AUTOLOAD.  Calling gv_fetchmethod is equivalent to calling
     gv_fetchmethod_autoload with a non-zero `autoload' parameter.

     These functions grant `"SUPER"' token as a prefix of the method name.
     Note that if you want to keep the returned glob for a long time, you
     need to check for it being "AUTOLOAD", since at the later time the
     call may load a different subroutine due to $AUTOLOAD changing its
     value. Use the glob created via a side effect to do this.

     These functions have the same side-effects and as gv_fetchmeth with
     `level==0'.  name should be writable if contains ':' or `' '''. The
     warning against passing the GV returned by gv_fetchmeth to call_sv
     apply equally to these functions.

          GV*	gv_fetchmethod_autoload(HV* stash, const char* name, I32 autoload)

gv_stashpv
     Returns a pointer to the stash for a specified package.  name should
     be a valid UTF-8 string.  If create is set then the package will be
     created if it does not already exist.  If create is not set and the
     package does not exist then NULL is returned.

          HV*	gv_stashpv(const char* name, I32 create)

gv_stashsv
     Returns a pointer to the stash for a specified package, which must be
     a valid UTF-8 string.  See gv_stashpv.

          HV*	gv_stashsv(SV* sv, I32 create)

G_ARRAY
     Used to indicate array context.  See GIMME_V, GIMME and *Note
     Perlcall: perlcall,.

G_DISCARD
     Indicates that arguments returned from a callback should be
     discarded.  See *Note Perlcall: perlcall,.

G_EVAL
     Used to force a Perl eval wrapper around a callback.  See *Note
     Perlcall: perlcall,.

G_NOARGS
     Indicates that no arguments are being sent to a callback.  See *Note
     Perlcall: perlcall,.

G_SCALAR
     Used to indicate scalar context.  See GIMME_V, GIMME, and *Note
     Perlcall: perlcall,.

G_VOID
     Used to indicate void context.  See GIMME_V and *Note Perlcall:
     perlcall,.

HEf_SVKEY
     This flag, used in the length slot of hash entries and magic
     structures, specifies the structure contains a `SV*' pointer where a
     `char*' pointer is to be expected. (For information only-not to be
     used).

HeHASH
     Returns the computed hash stored in the hash entry.

          U32	HeHASH(HE* he)

HeKEY
     Returns the actual pointer stored in the key slot of the hash entry.
     The pointer may be either `char*' or `SV*', depending on the value of
     `HeKLEN()'.  Can be assigned to.  The `HePV()' or `HeSVKEY()' macros
     are usually preferable for finding the value of a key.

          void*	HeKEY(HE* he)

HeKLEN
     If this is negative, and amounts to HEf_SVKEY, it indicates the entry
     holds an `SV*' key.  Otherwise, holds the actual length of the key.
     Can be assigned to. The `HePV()' macro is usually preferable for
     finding key lengths.

          STRLEN	HeKLEN(HE* he)

HePV
     Returns the key slot of the hash entry as a `char*' value, doing any
     necessary dereferencing of possibly `SV*' keys.  The length of the
     string is placed in len (this is a macro, so do not use `&len').  If
     you do not care about what the length of the key is, you may use the
     global variable PL_na, though this is rather less efficient than
     using a local variable.  Remember though, that hash keys in perl are
     free to contain embedded nulls, so using `strlen()' or similar is not
     a good way to find the length of hash keys. This is very similar to
     the `SvPV()' macro described elsewhere in this document.

          char*	HePV(HE* he, STRLEN len)

HeSVKEY
     Returns the key as an `SV*', or Nullsv if the hash entry does not
     contain an `SV*' key.

          SV*	HeSVKEY(HE* he)

HeSVKEY_force
     Returns the key as an `SV*'.  Will create and return a temporary
     mortal `SV*' if the hash entry contains only a `char*' key.

          SV*	HeSVKEY_force(HE* he)

HeSVKEY_set
     Sets the key to a given `SV*', taking care to set the appropriate
     flags to indicate the presence of an `SV*' key, and returns the same
     `SV*'.

          SV*	HeSVKEY_set(HE* he, SV* sv)

HeVAL
     Returns the value slot (type `SV*') stored in the hash entry.

          SV*	HeVAL(HE* he)

HvNAME
     Returns the package name of a stash.  See SvSTASH, CvSTASH.

          char*	HvNAME(HV* stash)

hv_clear
     Clears a hash, making it empty.

          void	hv_clear(HV* tb)

hv_delete
     Deletes a key/value pair in the hash.  The value SV is removed from
     the hash and returned to the caller.  The `klen' is the length of the
     key.  The flags value will normally be zero; if set to G_DISCARD then
     NULL will be returned.

          SV*	hv_delete(HV* tb, const char* key, U32 klen, I32 flags)

hv_delete_ent
     Deletes a key/value pair in the hash.  The value SV is removed from
     the hash and returned to the caller.  The flags value will normally
     be zero; if set to G_DISCARD then NULL will be returned.  hash can be
     a valid precomputed hash value, or 0 to ask for it to be computed.

          SV*	hv_delete_ent(HV* tb, SV* key, I32 flags, U32 hash)

hv_exists
     Returns a boolean indicating whether the specified hash key exists.
     The `klen' is the length of the key.

          bool	hv_exists(HV* tb, const char* key, U32 klen)

hv_exists_ent
     Returns a boolean indicating whether the specified hash key exists.
     hash can be a valid precomputed hash value, or 0 to ask for it to be
     computed.

          bool	hv_exists_ent(HV* tb, SV* key, U32 hash)

hv_fetch
     Returns the SV which corresponds to the specified key in the hash.
     The `klen' is the length of the key.  If `lval' is set then the fetch
     will be part of a store.  Check that the return value is non-null
     before dereferencing it to a `SV*'.

     See `"Understanding the Magic of Tied Hashes and Arrays"', *Note
     Perlguts: perlguts, for more information on how to use this function
     on tied hashes.

          SV**	hv_fetch(HV* tb, const char* key, U32 klen, I32 lval)

hv_fetch_ent
     Returns the hash entry which corresponds to the specified key in the
     hash.  hash must be a valid precomputed hash number for the given
     key, or 0 if you want the function to compute it.  IF `lval' is set
     then the fetch will be part of a store.  Make sure the return value
     is non-null before accessing it.  The return value when `tb' is a
     tied hash is a pointer to a static location, so be sure to make a
     copy of the structure if you need to store it somewhere.

     See `"Understanding the Magic of Tied Hashes and Arrays"', *Note
     Perlguts: perlguts, for more information on how to use this function
     on tied hashes.

          HE*	hv_fetch_ent(HV* tb, SV* key, I32 lval, U32 hash)

hv_iterinit
     Prepares a starting point to traverse a hash table.  Returns the
     number of keys in the hash (i.e. the same as `HvKEYS(tb)').  The
     return value is currently only meaningful for hashes without tie
     magic.

     NOTE: Before version 5.004_65, hv_iterinit used to return the number
     of hash buckets that happen to be in use.  If you still need that
     esoteric value, you can get it through the macro `HvFILL(tb)'.

          I32	hv_iterinit(HV* tb)

hv_iterkey
     Returns the key from the current position of the hash iterator.  See
     hv_iterinit.

          char*	hv_iterkey(HE* entry, I32* retlen)

hv_iterkeysv
     Returns the key as an `SV*' from the current position of the hash
     iterator.  The return value will always be a mortal copy of the key.
     Also see hv_iterinit.

          SV*	hv_iterkeysv(HE* entry)

hv_iternext
     Returns entries from a hash iterator.  See hv_iterinit.

          HE*	hv_iternext(HV* tb)

hv_iternextsv
     Performs an hv_iternext, hv_iterkey, and hv_iterval in one operation.

          SV*	hv_iternextsv(HV* hv, char** key, I32* retlen)

hv_iterval
     Returns the value from the current position of the hash iterator.  See
     hv_iterkey.

          SV*	hv_iterval(HV* tb, HE* entry)

hv_magic
     Adds magic to a hash.  See sv_magic.

          void	hv_magic(HV* hv, GV* gv, int how)

hv_store
     Stores an SV in a hash.  The hash key is specified as key and `klen'
     is the length of the key.  The hash parameter is the precomputed hash
     value; if it is zero then Perl will compute it.  The return value
     will be NULL if the operation failed or if the value did not need to
     be actually stored within the hash (as in the case of tied hashes).
     Otherwise it can be dereferenced to get the original `SV*'.  Note
     that the caller is responsible for suitably incrementing the
     reference count of val before the call, and decrementing it if the
     function returned NULL.

     See `"Understanding the Magic of Tied Hashes and Arrays"', *Note
     Perlguts: perlguts, for more information on how to use this function
     on tied hashes.

          SV**	hv_store(HV* tb, const char* key, U32 klen, SV* val, U32 hash)

hv_store_ent
     Stores val in a hash.  The hash key is specified as key.  The hash
     parameter is the precomputed hash value; if it is zero then Perl will
     compute it.  The return value is the new hash entry so created.  It
     will be NULL if the operation failed or if the value did not need to
     be actually stored within the hash (as in the case of tied hashes).
     Otherwise the contents of the return value can be accessed using the
     `He???' macros described here.  Note that the caller is responsible
     for suitably incrementing the reference count of val before the call,
     and decrementing it if the function returned NULL.

     See `"Understanding the Magic of Tied Hashes and Arrays"', *Note
     Perlguts: perlguts, for more information on how to use this function
     on tied hashes.

          HE*	hv_store_ent(HV* tb, SV* key, SV* val, U32 hash)

hv_undef
     Undefines the hash.

          void	hv_undef(HV* tb)

isALNUM
     Returns a boolean indicating whether the C `char' is an ascii
     alphanumeric character or digit.

          bool	isALNUM(char ch)

isALPHA
     Returns a boolean indicating whether the C `char' is an ascii
     alphabetic character.

          bool	isALPHA(char ch)

isDIGIT
     Returns a boolean indicating whether the C `char' is an ascii digit.

          bool	isDIGIT(char ch)

isLOWER
     Returns a boolean indicating whether the C `char' is a lowercase
     character.

          bool	isLOWER(char ch)

isSPACE
     Returns a boolean indicating whether the C `char' is whitespace.

          bool	isSPACE(char ch)

isUPPER
     Returns a boolean indicating whether the C `char' is an uppercase
     character.

          bool	isUPPER(char ch)

items
     Variable which is setup by xsubpp to indicate the number of items on
     the stack.  See `"Variable-length Parameter Lists"', *Note Perlxs:
     perlxs,.

          I32	items

ix
     Variable which is setup by xsubpp to indicate which of an XSUB's
     aliases was used to invoke it.  See `"The ALIAS: Keyword"', *Note
     Perlxs: perlxs,.

          I32	ix

LEAVE
     Closing bracket on a callback.  See ENTER and *Note Perlcall:
     perlcall,.

          LEAVE;

looks_like_number
     Test if an the content of an SV looks like a number (or is a number).

          I32	looks_like_number(SV* sv)

MARK
     Stack marker variable for the XSUB.  See dMARK.

mg_clear
     Clear something magical that the SV represents.  See sv_magic.

          int	mg_clear(SV* sv)

mg_copy
     Copies the magic from one SV to another.  See sv_magic.

          int	mg_copy(SV* sv, SV* nsv, const char* key, I32 klen)

mg_find
     Finds the magic pointer for type matching the SV.  See sv_magic.

          MAGIC*	mg_find(SV* sv, int type)

mg_free
     Free any magic storage used by the SV.  See sv_magic.

          int	mg_free(SV* sv)

mg_get
     Do magic after a value is retrieved from the SV.  See sv_magic.

          int	mg_get(SV* sv)

mg_length
     Report on the SV's length.  See sv_magic.

          U32	mg_length(SV* sv)

mg_magical
     Turns on the magical status of an SV.  See sv_magic.

          void	mg_magical(SV* sv)

mg_set
     Do magic after a value is assigned to the SV.  See sv_magic.

          int	mg_set(SV* sv)

Move
     The XSUB-writer's interface to the C memmove function.  The src is the
     source, dest is the destination, `nitems' is the number of items, and
     type is the type.  Can do overlapping moves.  See also Copy.

          void	Move(void* src, void* dest, int nitems, type)

New
     The XSUB-writer's interface to the C malloc function.

          void	New(int id, void* ptr, int nitems, type)

newAV
     Creates a new AV.  The reference count is set to 1.

          AV*	newAV()

Newc
     The XSUB-writer's interface to the C malloc function, with cast.

          void	Newc(int id, void* ptr, int nitems, type, cast)

newCONSTSUB
     Creates a constant sub equivalent to Perl `sub FOO () { 123 }' which
     is eligible for inlining at compile-time.

          void	newCONSTSUB(HV* stash, char* name, SV* sv)

newHV
     Creates a new HV.  The reference count is set to 1.

          HV*	newHV()

newRV_inc
     Creates an RV wrapper for an SV.  The reference count for the
     original SV is incremented.

          SV*	newRV_inc(SV* sv)

newRV_noinc
     Creates an RV wrapper for an SV.  The reference count for the original
     SV is not incremented.

          SV*	newRV_noinc(SV *sv)

NEWSV
     Creates a new SV.  A non-zero len parameter indicates the number of
     bytes of preallocated string space the SV should have.  An extra byte
     for a tailing NUL is also reserved.  (SvPOK is not set for the SV
     even if string space is allocated.)  The reference count for the new
     SV is set to 1.  id is an integer id between 0 and 1299 (used to
     identify leaks).

          SV*	NEWSV(int id, STRLEN len)

newSViv
     Creates a new SV and copies an integer into it.  The reference count
     for the SV is set to 1.

          SV*	newSViv(IV i)

newSVnv
     Creates a new SV and copies a floating point value into it.  The
     reference count for the SV is set to 1.

          SV*	newSVnv(NV n)

newSVpv
     Creates a new SV and copies a string into it.  The reference count
     for the SV is set to 1.  If len is zero, Perl will compute the length
     using strlen().  For efficiency, consider using newSVpvn instead.

          SV*	newSVpv(const char* s, STRLEN len)

newSVpvf
     Creates a new SV an initialize it with the string formatted like
     sprintf.

          SV*	newSVpvf(const char* pat, ...)

newSVpvn
     Creates a new SV and copies a string into it.  The reference count
     for the SV is set to 1.  Note that if len is zero, Perl will create a
     zero length string.  You are responsible for ensuring that the source
     string is at least len bytes long.

          SV*	newSVpvn(const char* s, STRLEN len)

newSVrv
     Creates a new SV for the RV, rv, to point to.  If rv is not an RV then
     it will be upgraded to one.  If `classname' is non-null then the new
     SV will be blessed in the specified package.  The new SV is returned
     and its reference count is 1.

          SV*	newSVrv(SV* rv, const char* classname)

newSVsv
     Creates a new SV which is an exact duplicate of the original SV.

          SV*	newSVsv(SV* old)

newSVuv
     Creates a new SV and copies an unsigned integer into it.  The
     reference count for the SV is set to 1.

          SV*	newSVuv(UV u)

newXS
     Used by xsubpp to hook up XSUBs as Perl subs.

newXSproto
     Used by xsubpp to hook up XSUBs as Perl subs.  Adds Perl prototypes to
     the subs.

Newz
     The XSUB-writer's interface to the C malloc function.  The allocated
     memory is zeroed with `memzero'.

          void	Newz(int id, void* ptr, int nitems, type)

Nullav
     Null AV pointer.

Nullch
     Null character pointer.

Nullcv
     Null CV pointer.

Nullhv
     Null HV pointer.

Nullsv
     Null SV pointer.

ORIGMARK
     The original stack mark for the XSUB.  See dORIGMARK.

perl_alloc
     Allocates a new Perl interpreter.  See *Note Perlembed: perlembed,.

          PerlInterpreter*	perl_alloc()

perl_construct
     Initializes a new Perl interpreter.  See *Note Perlembed: perlembed,.

          void	perl_construct(PerlInterpreter* interp)

perl_destruct
     Shuts down a Perl interpreter.  See *Note Perlembed: perlembed,.

          void	perl_destruct(PerlInterpreter* interp)

perl_free
     Releases a Perl interpreter.  See *Note Perlembed: perlembed,.

          void	perl_free(PerlInterpreter* interp)

perl_parse
     Tells a Perl interpreter to parse a Perl script.  See *Note
     Perlembed: perlembed,.

          int	perl_parse(PerlInterpreter* interp, XSINIT_t xsinit, int argc, char** argv, char** env)

perl_run
     Tells a Perl interpreter to run.  See *Note Perlembed: perlembed,.

          int	perl_run(PerlInterpreter* interp)

PL_DBsingle
     When Perl is run in debugging mode, with the -d switch, this SV is a
     boolean which indicates whether subs are being single-stepped.
     Single-stepping is automatically turned on after every step.  This is
     the C variable which corresponds to Perl's $DB::single variable.  See
     PL_DBsub.

          SV *	PL_DBsingle

PL_DBsub
     When Perl is run in debugging mode, with the -d switch, this GV
     contains the SV which holds the name of the sub being debugged.  This
     is the C variable which corresponds to Perl's $DB::sub variable.  See
     PL_DBsingle.

          GV *	PL_DBsub

PL_DBtrace
     Trace variable used when Perl is run in debugging mode, with the -d
     switch.  This is the C variable which corresponds to Perl's $DB::trace
     variable.  See PL_DBsingle.

          SV *	PL_DBtrace

PL_dowarn
     The C variable which corresponds to Perl's $^W warning variable.

          bool	PL_dowarn

PL_modglobal
     PL_modglobal is a general purpose, interpreter global HV for use by
     extensions that need to keep information on a per-interpreter basis.
     In a pinch, it can also be used as a symbol table for extensions to
     share data among each other.  It is a good idea to use keys prefixed
     by the package name of the extension that owns the data.

          HV*	PL_modglobal

PL_na
     A convenience variable which is typically used with SvPV when one
     doesn't care about the length of the string.  It is usually more
     efficient to either declare a local variable and use that instead or
     to use the SvPV_nolen macro.

          STRLEN	PL_na

PL_sv_no
     This is the false SV.  See PL_sv_yes.  Always refer to this as
     `&PL_sv_no'.

          SV	PL_sv_no

PL_sv_undef
     This is the undef SV.  Always refer to this as `&PL_sv_undef'.

          SV	PL_sv_undef

PL_sv_yes
     This is the `true' SV.  See PL_sv_no.  Always refer to this as
     `&PL_sv_yes'.

          SV	PL_sv_yes

POPi
     Pops an integer off the stack.

          IV	POPi

POPl
     Pops a long off the stack.

          long	POPl

POPn
     Pops a double off the stack.

          NV	POPn

POPp
     Pops a string off the stack.

          char*	POPp

POPs
     Pops an SV off the stack.

          SV*	POPs

PUSHi
     Push an integer onto the stack.  The stack must have room for this
     element.  Handles 'set' magic.  See XPUSHi.

          void	PUSHi(IV iv)

PUSHMARK
     Opening bracket for arguments on a callback.  See PUTBACK and *Note
     Perlcall: perlcall,.

          PUSHMARK;

PUSHn
     Push a double onto the stack.  The stack must have room for this
     element.  Handles 'set' magic.  See XPUSHn.

          void	PUSHn(NV nv)

PUSHp
     Push a string onto the stack.  The stack must have room for this
     element.  The len indicates the length of the string.  Handles 'set'
     magic.  See XPUSHp.

          void	PUSHp(char* str, STRLEN len)

PUSHs
     Push an SV onto the stack.  The stack must have room for this element.
     Does not handle 'set' magic.  See XPUSHs.

          void	PUSHs(SV* sv)

PUSHu
     Push an unsigned integer onto the stack.  The stack must have room
     for this element.  See XPUSHu.

          void	PUSHu(UV uv)

PUTBACK
     Closing bracket for XSUB arguments.  This is usually handled by
     xsubpp.  See PUSHMARK and *Note Perlcall: perlcall, for other uses.

          PUTBACK;

Renew
     The XSUB-writer's interface to the C realloc function.

          void	Renew(void* ptr, int nitems, type)

Renewc
     The XSUB-writer's interface to the C realloc function, with cast.

          void	Renewc(void* ptr, int nitems, type, cast)

require_pv
     Tells Perl to require a module.

     NOTE: the perl_ form of this function is deprecated.

          void	require_pv(const char* pv)

RETVAL
     Variable which is setup by xsubpp to hold the return value for an
     XSUB. This is always the proper type for the XSUB. See `"The RETVAL
     Variable"', *Note Perlxs: perlxs,.

          (whatever)	RETVAL

Safefree
     The XSUB-writer's interface to the C free function.

          void	Safefree(void* src, void* dest, int nitems, type)

savepv
     Copy a string to a safe spot.  This does not use an SV.

          char*	savepv(const char* sv)

savepvn
     Copy a string to a safe spot.  The len indicates number of bytes to
     copy.  This does not use an SV.

          char*	savepvn(const char* sv, I32 len)

SAVETMPS
     Opening bracket for temporaries on a callback.  See FREETMPS and
     *Note Perlcall: perlcall,.

          SAVETMPS;

SP
     Stack pointer.  This is usually handled by xsubpp.  See dSP and
     SPAGAIN.

SPAGAIN
     Refetch the stack pointer.  Used after a callback.  See *Note
     Perlcall: perlcall,.

          SPAGAIN;

ST
     Used to access elements on the XSUB's stack.

          SV*	ST(int ix)

strEQ
     Test two strings to see if they are equal.  Returns true or false.

          bool	strEQ(char* s1, char* s2)

strGE
     Test two strings to see if the first, `s1', is greater than or equal
     to the second, `s2'.  Returns true or false.

          bool	strGE(char* s1, char* s2)

strGT
     Test two strings to see if the first, `s1', is greater than the
     second, `s2'.  Returns true or false.

          bool	strGT(char* s1, char* s2)

strLE
     Test two strings to see if the first, `s1', is less than or equal to
     the second, `s2'.  Returns true or false.

          bool	strLE(char* s1, char* s2)

strLT
     Test two strings to see if the first, `s1', is less than the second,
     `s2'.  Returns true or false.

          bool	strLT(char* s1, char* s2)

strNE
     Test two strings to see if they are different.  Returns true or false.

          bool	strNE(char* s1, char* s2)

strnEQ
     Test two strings to see if they are equal.  The len parameter
     indicates the number of bytes to compare.  Returns true or false. (A
     wrapper for strncmp).

          bool	strnEQ(char* s1, char* s2, STRLEN len)

strnNE
     Test two strings to see if they are different.  The len parameter
     indicates the number of bytes to compare.  Returns true or false. (A
     wrapper for strncmp).

          bool	strnNE(char* s1, char* s2, STRLEN len)

StructCopy
     This is an architecture-independant macro to copy one structure to
     another.

          void	StructCopy(type src, type dest, type)

SvCUR
     Returns the length of the string which is in the SV.  See SvLEN.

          STRLEN	SvCUR(SV* sv)

SvCUR_set
     Set the length of the string which is in the SV.  See SvCUR.

          void	SvCUR_set(SV* sv, STRLEN len)

SvEND
     Returns a pointer to the last character in the string which is in the
     SV.  See SvCUR.  Access the character as *(SvEND(sv)).

          char*	SvEND(SV* sv)

SvGETMAGIC
     Invokes mg_get on an SV if it has 'get' magic.  This macro evaluates
     its argument more than once.

          void	SvGETMAGIC(SV* sv)

SvGROW
     Expands the character buffer in the SV so that it has room for the
     indicated number of bytes (remember to reserve space for an extra
     trailing NUL character).  Calls sv_grow to perform the expansion if
     necessary.  Returns a pointer to the character buffer.

          void	SvGROW(SV* sv, STRLEN len)

SvIOK
     Returns a boolean indicating whether the SV contains an integer.

          bool	SvIOK(SV* sv)

SvIOKp
     Returns a boolean indicating whether the SV contains an integer.
     Checks the private setting.  Use SvIOK.

          bool	SvIOKp(SV* sv)

SvIOK_off
     Unsets the IV status of an SV.

          void	SvIOK_off(SV* sv)

SvIOK_on
     Tells an SV that it is an integer.

          void	SvIOK_on(SV* sv)

SvIOK_only
     Tells an SV that it is an integer and disables all other OK bits.

          void	SvIOK_only(SV* sv)

SvIV
     Coerces the given SV to an integer and returns it.

          IV	SvIV(SV* sv)

SvIVX
     Returns the integer which is stored in the SV, assuming SvIOK is true.

          IV	SvIVX(SV* sv)

SvLEN
     Returns the size of the string buffer in the SV.  See SvCUR.

          STRLEN	SvLEN(SV* sv)

SvNIOK
     Returns a boolean indicating whether the SV contains a number,
     integer or double.

          bool	SvNIOK(SV* sv)

SvNIOKp
     Returns a boolean indicating whether the SV contains a number,
     integer or double.  Checks the private setting.  Use SvNIOK.

          bool	SvNIOKp(SV* sv)

SvNIOK_off
     Unsets the NV/IV status of an SV.

          void	SvNIOK_off(SV* sv)

SvNOK
     Returns a boolean indicating whether the SV contains a double.

          bool	SvNOK(SV* sv)

SvNOKp
     Returns a boolean indicating whether the SV contains a double.
     Checks the private setting.  Use SvNOK.

          bool	SvNOKp(SV* sv)

SvNOK_off
     Unsets the NV status of an SV.

          void	SvNOK_off(SV* sv)

SvNOK_on
     Tells an SV that it is a double.

          void	SvNOK_on(SV* sv)

SvNOK_only
     Tells an SV that it is a double and disables all other OK bits.

          void	SvNOK_only(SV* sv)

SvNV
     Coerce the given SV to a double and return it.

          NV	SvNV(SV* sv)

SvNVX
     Returns the double which is stored in the SV, assuming SvNOK is true.

          NV	SvNVX(SV* sv)

SvOK
     Returns a boolean indicating whether the value is an SV.

          bool	SvOK(SV* sv)

SvOOK
     Returns a boolean indicating whether the SvIVX is a valid offset
     value for the SvPVX.  This hack is used internally to speed up
     removal of characters from the beginning of a SvPV.  When SvOOK is
     true, then the start of the allocated string buffer is really (SvPVX
     - SvIVX).

          bool	SvOOK(SV* sv)

SvPOK
     Returns a boolean indicating whether the SV contains a character
     string.

          bool	SvPOK(SV* sv)

SvPOKp
     Returns a boolean indicating whether the SV contains a character
     string.  Checks the private setting.  Use SvPOK.

          bool	SvPOKp(SV* sv)

SvPOK_off
     Unsets the PV status of an SV.

          void	SvPOK_off(SV* sv)

SvPOK_on
     Tells an SV that it is a string.

          void	SvPOK_on(SV* sv)

SvPOK_only
     Tells an SV that it is a string and disables all other OK bits.

          void	SvPOK_only(SV* sv)

SvPV
     Returns a pointer to the string in the SV, or a stringified form of
     the SV if the SV does not contain a string.  Handles 'get' magic.

          char*	SvPV(SV* sv, STRLEN len)

SvPVX
     Returns a pointer to the string in the SV.  The SV must contain a
     string.

          char*	SvPVX(SV* sv)

SvPV_force
     Like <SvPV> but will force the SV into becoming a string (SvPOK).
     You want force if you are going to update the SvPVX directly.

          char*	SvPV_force(SV* sv, STRLEN len)

SvPV_nolen
     Returns a pointer to the string in the SV, or a stringified form of
     the SV if the SV does not contain a string.  Handles 'get' magic.

          char*	SvPV_nolen(SV* sv)

SvREFCNT
     Returns the value of the object's reference count.

          U32	SvREFCNT(SV* sv)

SvREFCNT_dec
     Decrements the reference count of the given SV.

          void	SvREFCNT_dec(SV* sv)

SvREFCNT_inc
     Increments the reference count of the given SV.

          SV*	SvREFCNT_inc(SV* sv)

SvROK
     Tests if the SV is an RV.

          bool	SvROK(SV* sv)

SvROK_off
     Unsets the RV status of an SV.

          void	SvROK_off(SV* sv)

SvROK_on
     Tells an SV that it is an RV.

          void	SvROK_on(SV* sv)

SvRV
     Dereferences an RV to return the SV.

          SV*	SvRV(SV* sv)

SvSETMAGIC
     Invokes mg_set on an SV if it has 'set' magic.  This macro evaluates
     its argument more than once.

          void	SvSETMAGIC(SV* sv)

SvSetSV
     Calls sv_setsv if dsv is not the same as ssv.  May evaluate arguments
     more than once.

          void	SvSetSV(SV* dsb, SV* ssv)

SvSetSV_nosteal
     Calls a non-destructive version of sv_setsv if dsv is not the same as
     ssv. May evaluate arguments more than once.

          void	SvSetSV_nosteal(SV* dsv, SV* ssv)

SvSTASH
     Returns the stash of the SV.

          HV*	SvSTASH(SV* sv)

SvTAINT
     Taints an SV if tainting is enabled

          void	SvTAINT(SV* sv)

SvTAINTED
     Checks to see if an SV is tainted. Returns TRUE if it is, FALSE if
     not.

          bool	SvTAINTED(SV* sv)

SvTAINTED_off
     Untaints an SV. Be *very* careful with this routine, as it
     short-circuits some of Perl's fundamental security features. XS
     module authors should not use this function unless they fully
     understand all the implications of unconditionally untainting the
     value. Untainting should be done in the standard perl fashion, via a
     carefully crafted regexp, rather than directly untainting variables.

          void	SvTAINTED_off(SV* sv)

SvTAINTED_on
     Marks an SV as tainted.

          void	SvTAINTED_on(SV* sv)

SvTRUE
     Returns a boolean indicating whether Perl would evaluate the SV as
     true or false, defined or undefined.  Does not handle 'get' magic.

          bool	SvTRUE(SV* sv)

SvTYPE
     Returns the type of the SV.  See svtype.

          svtype	SvTYPE(SV* sv)

svtype
     An enum of flags for Perl types.  These are found in the file *sv.h*
     in the svtype enum.  Test these flags with the SvTYPE macro.

SVt_IV
     Integer type flag for scalars.  See svtype.

SVt_NV
     Double type flag for scalars.  See svtype.

SVt_PV
     Pointer type flag for scalars.  See svtype.

SVt_PVAV
     Type flag for arrays.  See svtype.

SVt_PVCV
     Type flag for code refs.  See svtype.

SVt_PVHV
     Type flag for hashes.  See svtype.

SVt_PVMG
     Type flag for blessed scalars.  See svtype.

SvUPGRADE
     Used to upgrade an SV to a more complex form.  Uses sv_upgrade to
     perform the upgrade if necessary.  See svtype.

          void	SvUPGRADE(SV* sv, svtype type)

SvUV
     Coerces the given SV to an unsigned integer and returns it.

          UV	SvUV(SV* sv)

SvUVX
     Returns the unsigned integer which is stored in the SV, assuming
     SvIOK is true.

          UV	SvUVX(SV* sv)

sv_2mortal
     Marks an SV as mortal.  The SV will be destroyed when the current
     context ends.

          SV*	sv_2mortal(SV* sv)

sv_bless
     Blesses an SV into a specified package.  The SV must be an RV.  The
     package must be designated by its stash (see `gv_stashpv()').  The
     reference count of the SV is unaffected.

          SV*	sv_bless(SV* sv, HV* stash)

sv_catpv
     Concatenates the string onto the end of the string which is in the SV.
     Handles 'get' magic, but not 'set' magic.  See sv_catpv_mg.

          void	sv_catpv(SV* sv, const char* ptr)

sv_catpvf
     Processes its arguments like sprintf and appends the formatted output
     to an SV.  Handles 'get' magic, but not 'set' magic.  `SvSETMAGIC()'
     must typically be called after calling this function to handle 'set'
     magic.

          void	sv_catpvf(SV* sv, const char* pat, ...)

sv_catpvf_mg
     Like sv_catpvf, but also handles 'set' magic.

          void	sv_catpvf_mg(SV *sv, const char* pat, ...)

sv_catpvn
     Concatenates the string onto the end of the string which is in the
     SV.  The len indicates number of bytes to copy.  Handles 'get' magic,
     but not 'set' magic.  See sv_catpvn_mg.

          void	sv_catpvn(SV* sv, const char* ptr, STRLEN len)

sv_catpvn_mg
     Like sv_catpvn, but also handles 'set' magic.

          void	sv_catpvn_mg(SV *sv, const char *ptr, STRLEN len)

sv_catpv_mg
     Like sv_catpv, but also handles 'set' magic.

          void	sv_catpv_mg(SV *sv, const char *ptr)

sv_catsv
     Concatenates the string from SV `ssv' onto the end of the string in SV
     `dsv'.  Handles 'get' magic, but not 'set' magic.  See sv_catsv_mg.

          void	sv_catsv(SV* dsv, SV* ssv)

sv_catsv_mg
     Like sv_catsv, but also handles 'set' magic.

          void	sv_catsv_mg(SV *dstr, SV *sstr)

sv_chop
     Efficient removal of characters from the beginning of the string
     buffer.  SvPOK(sv) must be true and the `ptr' must be a pointer to
     somewhere inside the string buffer.  The `ptr' becomes the first
     character of the adjusted string.

          void	sv_chop(SV* sv, char* ptr)

sv_cmp
     Compares the strings in two SVs.  Returns -1, 0, or 1 indicating
     whether the string in `sv1' is less than, equal to, or greater than
     the string in `sv2'.

          I32	sv_cmp(SV* sv1, SV* sv2)

sv_dec
     Auto-decrement of the value in the SV.

          void	sv_dec(SV* sv)

sv_derived_from
     Returns a boolean indicating whether the SV is derived from the
     specified class.  This is the function that implements
     UNIVERSAL::isa.  It works for class names as well as for objects.

          bool	sv_derived_from(SV* sv, const char* name)

sv_eq
     Returns a boolean indicating whether the strings in the two SVs are
     identical.

          I32	sv_eq(SV* sv1, SV* sv2)

sv_grow
     Expands the character buffer in the SV.  This will use sv_unref and
     will upgrade the SV to SVt_PV.  Returns a pointer to the character
     buffer.  Use SvGROW.

          char*	sv_grow(SV* sv, STRLEN newlen)

sv_inc
     Auto-increment of the value in the SV.

          void	sv_inc(SV* sv)

sv_insert
     Inserts a string at the specified offset/length within the SV.
     Similar to the Perl substr() function.

          void	sv_insert(SV* bigsv, STRLEN offset, STRLEN len, char* little, STRLEN littlelen)

sv_isa
     Returns a boolean indicating whether the SV is blessed into the
     specified class.  This does not check for subtypes; use
     sv_derived_from to verify an inheritance relationship.

          int	sv_isa(SV* sv, const char* name)

sv_isobject
     Returns a boolean indicating whether the SV is an RV pointing to a
     blessed object.  If the SV is not an RV, or if the object is not
     blessed, then this will return false.

          int	sv_isobject(SV* sv)

sv_len
     Returns the length of the string in the SV.  See also SvCUR.

          STRLEN	sv_len(SV* sv)

sv_magic
     Adds magic to an SV.

          void	sv_magic(SV* sv, SV* obj, int how, const char* name, I32 namlen)

sv_mortalcopy
     Creates a new SV which is a copy of the original SV.  The new SV is
     marked as mortal.

          SV*	sv_mortalcopy(SV* oldsv)

sv_newmortal
     Creates a new SV which is mortal.  The reference count of the SV is
     set to 1.

          SV*	sv_newmortal()

sv_setiv
     Copies an integer into the given SV.  Does not handle 'set' magic.
     See sv_setiv_mg.

          void	sv_setiv(SV* sv, IV num)

sv_setiv_mg
     Like sv_setiv, but also handles 'set' magic.

          void	sv_setiv_mg(SV *sv, IV i)

sv_setnv
     Copies a double into the given SV.  Does not handle 'set' magic.  See
     sv_setnv_mg.

          void	sv_setnv(SV* sv, NV num)

sv_setnv_mg
     Like sv_setnv, but also handles 'set' magic.

          void	sv_setnv_mg(SV *sv, NV num)

sv_setpv
     Copies a string into an SV.  The string must be null-terminated.
     Does not handle 'set' magic.  See sv_setpv_mg.

          void	sv_setpv(SV* sv, const char* ptr)

sv_setpvf
     Processes its arguments like sprintf and sets an SV to the formatted
     output.  Does not handle 'set' magic.  See sv_setpvf_mg.

          void	sv_setpvf(SV* sv, const char* pat, ...)

sv_setpvf_mg
     Like sv_setpvf, but also handles 'set' magic.

          void	sv_setpvf_mg(SV *sv, const char* pat, ...)

sv_setpviv
     Copies an integer into the given SV, also updating its string value.
     Does not handle 'set' magic.  See sv_setpviv_mg.

          void	sv_setpviv(SV* sv, IV num)

sv_setpviv_mg
     Like sv_setpviv, but also handles 'set' magic.

          void	sv_setpviv_mg(SV *sv, IV iv)

sv_setpvn
     Copies a string into an SV.  The len parameter indicates the number of
     bytes to be copied.  Does not handle 'set' magic.  See sv_setpvn_mg.

          void	sv_setpvn(SV* sv, const char* ptr, STRLEN len)

sv_setpvn_mg
     Like sv_setpvn, but also handles 'set' magic.

          void	sv_setpvn_mg(SV *sv, const char *ptr, STRLEN len)

sv_setpv_mg
     Like sv_setpv, but also handles 'set' magic.

          void	sv_setpv_mg(SV *sv, const char *ptr)

sv_setref_iv
     Copies an integer into a new SV, optionally blessing the SV.  The rv
     argument will be upgraded to an RV.  That RV will be modified to
     point to the new SV.  The `classname' argument indicates the package
     for the blessing.  Set `classname' to Nullch to avoid the blessing.
     The new SV will be returned and will have a reference count of 1.

          SV*	sv_setref_iv(SV* rv, const char* classname, IV iv)

sv_setref_nv
     Copies a double into a new SV, optionally blessing the SV.  The rv
     argument will be upgraded to an RV.  That RV will be modified to
     point to the new SV.  The `classname' argument indicates the package
     for the blessing.  Set `classname' to Nullch to avoid the blessing.
     The new SV will be returned and will have a reference count of 1.

          SV*	sv_setref_nv(SV* rv, const char* classname, NV nv)

sv_setref_pv
     Copies a pointer into a new SV, optionally blessing the SV.  The rv
     argument will be upgraded to an RV.  That RV will be modified to
     point to the new SV.  If the pv argument is NULL then PL_sv_undef
     will be placed into the SV.  The `classname' argument indicates the
     package for the blessing.  Set `classname' to Nullch to avoid the
     blessing.  The new SV will be returned and will have a reference
     count of 1.

     Do not use with other Perl types such as HV, AV, SV, CV, because those
     objects will become corrupted by the pointer copy process.

     Note that sv_setref_pvn copies the string while this copies the
     pointer.

          SV*	sv_setref_pv(SV* rv, const char* classname, void* pv)

sv_setref_pvn
     Copies a string into a new SV, optionally blessing the SV.  The
     length of the string must be specified with n.  The rv argument will
     be upgraded to an RV.  That RV will be modified to point to the new
     SV.  The `classname' argument indicates the package for the blessing.
     Set `classname' to Nullch to avoid the blessing.  The new SV will be
     returned and will have a reference count of 1.

     Note that sv_setref_pv copies the pointer while this copies the
     string.

          SV*	sv_setref_pvn(SV* rv, const char* classname, char* pv, STRLEN n)

sv_setsv
     Copies the contents of the source SV `ssv' into the destination SV
     `dsv'.  The source SV may be destroyed if it is mortal.  Does not
     handle 'set' magic.  See the macro forms SvSetSV, SvSetSV_nosteal and
     sv_setsv_mg.

          void	sv_setsv(SV* dsv, SV* ssv)

sv_setsv_mg
     Like sv_setsv, but also handles 'set' magic.

          void	sv_setsv_mg(SV *dstr, SV *sstr)

sv_setuv
     Copies an unsigned integer into the given SV.  Does not handle 'set'
     magic.  See sv_setuv_mg.

          void	sv_setuv(SV* sv, UV num)

sv_setuv_mg
     Like sv_setuv, but also handles 'set' magic.

          void	sv_setuv_mg(SV *sv, UV u)

sv_unref
     Unsets the RV status of the SV, and decrements the reference count of
     whatever was being referenced by the RV.  This can almost be thought
     of as a reversal of newSVrv.  See SvROK_off.

          void	sv_unref(SV* sv)

sv_upgrade
     Upgrade an SV to a more complex form.  Use SvUPGRADE.  See svtype.

          bool	sv_upgrade(SV* sv, U32 mt)

sv_usepvn
     Tells an SV to use `ptr' to find its string value.  Normally the
     string is stored inside the SV but sv_usepvn allows the SV to use an
     outside string.  The `ptr' should point to memory that was allocated
     by malloc.  The string length, len, must be supplied.  This function
     will realloc the memory pointed to by `ptr', so that pointer should
     not be freed or used by the programmer after giving it to sv_usepvn.
     Does not handle 'set' magic.  See sv_usepvn_mg.

          void	sv_usepvn(SV* sv, char* ptr, STRLEN len)

sv_usepvn_mg
     Like sv_usepvn, but also handles 'set' magic.

          void	sv_usepvn_mg(SV *sv, char *ptr, STRLEN len)

sv_vcatpvfn
     Processes its arguments like vsprintf and appends the formatted output
     to an SV.  Uses an array of SVs if the C style variable argument list
     is missing (NULL).  When running with taint checks enabled, indicates
     via `maybe_tainted' if results are untrustworthy (often due to the
     use of locales).

          void	sv_vcatpvfn(SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, bool *maybe_tainted)

sv_vsetpvfn
     Works like `vcatpvfn' but copies the text into the SV instead of
     appending it.

          void	sv_vsetpvfn(SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, bool *maybe_tainted)

THIS
     Variable which is setup by xsubpp to designate the object in a C++
     XSUB.  This is always the proper type for the C++ object.  See CLASS
     and `"Using XS With C++"', *Note Perlxs: perlxs,.

          (whatever)	THIS

toLOWER
     Converts the specified character to lowercase.

          char	toLOWER(char ch)

toUPPER
     Converts the specified character to uppercase.

          char	toUPPER(char ch)

warn
     This is the XSUB-writer's interface to Perl's warn function.  Use this
     function the same way you use the C printf function.  See croak.

          void	warn(const char* pat, ...)

XPUSHi
     Push an integer onto the stack, extending the stack if necessary.
     Handles 'set' magic. See PUSHi.

          void	XPUSHi(IV iv)

XPUSHn
     Push a double onto the stack, extending the stack if necessary.
     Handles 'set' magic.  See PUSHn.

          void	XPUSHn(NV nv)

XPUSHp
     Push a string onto the stack, extending the stack if necessary.  The
     len indicates the length of the string.  Handles 'set' magic.  See
     PUSHp.

          void	XPUSHp(char* str, STRLEN len)

XPUSHs
     Push an SV onto the stack, extending the stack if necessary.  Does not
     handle 'set' magic.  See PUSHs.

          void	XPUSHs(SV* sv)

XPUSHu
     Push an unsigned integer onto the stack, extending the stack if
     necessary.  See PUSHu.

          void	XPUSHu(UV uv)

XS
     Macro to declare an XSUB and its C parameter list.  This is handled by
     xsubpp.

XSRETURN
     Return from XSUB, indicating number of items on the stack.  This is
     usually handled by xsubpp.

          void	XSRETURN(int nitems)

XSRETURN_EMPTY
     Return an empty list from an XSUB immediately.

          XSRETURN_EMPTY;

XSRETURN_IV
     Return an integer from an XSUB immediately.  Uses XST_mIV.

          void	XSRETURN_IV(IV iv)

XSRETURN_NO
     Return `&PL_sv_no' from an XSUB immediately.  Uses XST_mNO.

          XSRETURN_NO;

XSRETURN_NV
     Return an double from an XSUB immediately.  Uses XST_mNV.

          void	XSRETURN_NV(NV nv)

XSRETURN_PV
     Return a copy of a string from an XSUB immediately.  Uses XST_mPV.

          void	XSRETURN_PV(char* str)

XSRETURN_UNDEF
     Return `&PL_sv_undef' from an XSUB immediately.  Uses XST_mUNDEF.

          XSRETURN_UNDEF;

XSRETURN_YES
     Return `&PL_sv_yes' from an XSUB immediately.  Uses XST_mYES.

          XSRETURN_YES;

XST_mIV
     Place an integer into the specified position pos on the stack.  The
     value is stored in a new mortal SV.

          void	XST_mIV(int pos, IV iv)

XST_mNO
     Place `&PL_sv_no' into the specified position pos on the stack.

          void	XST_mNO(int pos)

XST_mNV
     Place a double into the specified position pos on the stack.  The
     value is stored in a new mortal SV.

          void	XST_mNV(int pos, NV nv)

XST_mPV
     Place a copy of a string into the specified position pos on the stack.
     The value is stored in a new mortal SV.

          void	XST_mPV(int pos, char* str)

XST_mUNDEF
     Place `&PL_sv_undef' into the specified position pos on the stack.

          void	XST_mUNDEF(int pos)

XST_mYES
     Place `&PL_sv_yes' into the specified position pos on the stack.

          void	XST_mYES(int pos)

XS_VERSION
     The version identifier for an XS module.  This is usually handled
     automatically by ExtUtils::MakeMaker.  See XS_VERSION_BOOTCHECK.

XS_VERSION_BOOTCHECK
     Macro to verify that a PM module's $VERSION variable matches the XS
     module's XS_VERSION variable.  This is usually handled automatically
     by xsubpp.  See `"The VERSIONCHECK: Keyword"', *Note Perlxs: perlxs,.

          XS_VERSION_BOOTCHECK;

Zero
     The XSUB-writer's interface to the C `memzero' function.  The dest is
     the destination, `nitems' is the number of items, and type is the
     type.

          void	Zero(void* dest, int nitems, type)

AUTHORS
=======

   Until May 1997, this document was maintained by Jeff Okamoto
<okamoto@corp.hp.com>.  It is now maintained as part of Perl itself.

   With lots of help and suggestions from Dean Roehrich, Malcolm Beattie,
Andreas Koenig, Paul Hudson, Ilya Zakharevich, Paul Marquess, Neil Bowers,
Matthew Green, Tim Bunce, Spider Boardman, Ulrich Pfeifer, Stephen
McCamant, and Gurusamy Sarathy.

   API Listing originally by Dean Roehrich <roehrich@cray.com>.

   Updated to be autogenerated from comments in the source by Benjamin
Stuhl.

SEE ALSO
========

   perlguts(1), perlxs(1), perlxstut(1), perlintern(1)


File: perl.info,  Node: perlapio,  Next: perldebguts,  Prev: perlembed,  Up: Top

perl's IO abstraction interface.
********************************

NAME
====

   perlapio - perl's IO abstraction interface.

SYNOPSIS
========

     PerlIO *PerlIO_stdin(void);
     PerlIO *PerlIO_stdout(void);
     PerlIO *PerlIO_stderr(void);

     PerlIO *PerlIO_open(const char *,const char *);
     int     PerlIO_close(PerlIO *);

     int     PerlIO_stdoutf(const char *,...)
     int     PerlIO_puts(PerlIO *,const char *);
     int     PerlIO_putc(PerlIO *,int);
     int     PerlIO_write(PerlIO *,const void *,size_t);
     int     PerlIO_printf(PerlIO *, const char *,...);
     int     PerlIO_vprintf(PerlIO *, const char *, va_list);
     int     PerlIO_flush(PerlIO *);

     int     PerlIO_eof(PerlIO *);
     int     PerlIO_error(PerlIO *);
     void    PerlIO_clearerr(PerlIO *);

     int     PerlIO_getc(PerlIO *);
     int     PerlIO_ungetc(PerlIO *,int);
     int     PerlIO_read(PerlIO *,void *,size_t);

     int     PerlIO_fileno(PerlIO *);
     PerlIO *PerlIO_fdopen(int, const char *);
     PerlIO *PerlIO_importFILE(FILE *, int flags);
     FILE   *PerlIO_exportFILE(PerlIO *, int flags);
     FILE   *PerlIO_findFILE(PerlIO *);
     void    PerlIO_releaseFILE(PerlIO *,FILE *);

     void    PerlIO_setlinebuf(PerlIO *);

     long    PerlIO_tell(PerlIO *);
     int     PerlIO_seek(PerlIO *,off_t,int);
     int     PerlIO_getpos(PerlIO *,Fpos_t *)
     int     PerlIO_setpos(PerlIO *,Fpos_t *)
     void    PerlIO_rewind(PerlIO *);

     int     PerlIO_has_base(PerlIO *);
     int     PerlIO_has_cntptr(PerlIO *);
     int     PerlIO_fast_gets(PerlIO *);
     int     PerlIO_canset_cnt(PerlIO *);

     char   *PerlIO_get_ptr(PerlIO *);
     int     PerlIO_get_cnt(PerlIO *);
     void    PerlIO_set_cnt(PerlIO *,int);
     void    PerlIO_set_ptrcnt(PerlIO *,char *,int);
     char   *PerlIO_get_base(PerlIO *);
     int     PerlIO_get_bufsiz(PerlIO *);

DESCRIPTION
===========

   Perl's source code should use the above functions instead of those
defined in ANSI C's *stdio.h*.  The perl headers will `#define' them to
the I/O mechanism selected at Configure time.

   The functions are modeled on those in *stdio.h*, but parameter order
has been "tidied up a little".

*PerlIO **
     This takes the place of FILE *. Like FILE * it should be treated as
     opaque (it is probably safe to assume it is a pointer to something).

*PerlIO_stdin()*, *PerlIO_stdout()*, *PerlIO_stderr()*
     Use these rather than stdin, stdout, stderr. They are written to look
     like "function calls" rather than variables because this makes it
     easier to *make them* function calls if platform cannot export data
     to loaded modules, or if (say) different "threads" might have
     different values.

*PerlIO_open(path, mode)*, *PerlIO_fdopen(fd,mode)*
     These correspond to fopen()/fdopen() arguments are the same.

*PerlIO_printf(f,fmt,...)*, *PerlIO_vprintf(f,fmt,a)*
     These are fprintf()/vfprintf() equivalents.

PerlIO_stdoutf(fmt,...)
     This is printf() equivalent. printf is #defined to this function, so
     it is (currently) legal to use `printf(fmt,...)' in perl sources.

*PerlIO_read(f,buf,count)*, *PerlIO_write(f,buf,count)*
     These correspond to fread() and fwrite(). Note that arguments are
     different, there is only one "count" and order has "file" first.

PerlIO_close(f)
*PerlIO_puts(f,s)*, *PerlIO_putc(f,c)*
     These correspond to fputs() and fputc().  Note that arguments have
     been revised to have "file" first.

PerlIO_ungetc(f,c)
     This corresponds to ungetc().  Note that arguments have been revised
     to have "file" first.

PerlIO_getc(f)
     This corresponds to getc().

PerlIO_eof(f)
     This corresponds to feof().

PerlIO_error(f)
     This corresponds to ferror().

PerlIO_fileno(f)
     This corresponds to fileno(), note that on some platforms, the
     meaning of "fileno" may not match Unix.

PerlIO_clearerr(f)
     This corresponds to clearerr(), i.e., clears 'eof' and 'error' flags
     for the "stream".

PerlIO_flush(f)
     This corresponds to fflush().

PerlIO_tell(f)
     This corresponds to ftell().

PerlIO_seek(f,o,w)
     This corresponds to fseek().

*PerlIO_getpos(f,p)*, *PerlIO_setpos(f,p)*
     These correspond to fgetpos() and fsetpos(). If platform does not
     have the stdio calls then they are implemented in terms of
     PerlIO_tell() and PerlIO_seek().

PerlIO_rewind(f)
     This corresponds to rewind(). Note may be redefined in terms of
     PerlIO_seek() at some point.

PerlIO_tmpfile()
     This corresponds to tmpfile(), i.e., returns an anonymous PerlIO
     which will automatically be deleted when closed.

Co-existence with stdio
-----------------------

   There is outline support for co-existence of PerlIO with stdio.
Obviously if PerlIO is implemented in terms of stdio there is no problem.
However if perlio is implemented on top of (say) sfio then mechanisms must
exist to create a FILE * which can be passed to library code which is
going to use stdio calls.

PerlIO_importFILE(f,flags)
     Used to get a PerlIO * from a FILE *.  May need additional arguments,
     interface under review.

PerlIO_exportFILE(f,flags)
     Given an PerlIO * return a 'native' FILE * suitable for passing to
     code expecting to be compiled and linked with ANSI C *stdio.h*.

     The fact that such a FILE * has been 'exported' is recorded, and may
     affect future PerlIO operations on the original PerlIO *.

PerlIO_findFILE(f)
     Returns previously 'exported' FILE * (if any).  Place holder until
     interface is fully defined.

PerlIO_releaseFILE(p,f)
     Calling PerlIO_releaseFILE informs PerlIO that all use of FILE * is
     complete. It is removed from list of 'exported' FILE *s, and
     associated PerlIO * should revert to original behaviour.

PerlIO_setlinebuf(f)
     This corresponds to setlinebuf(). Use is deprecated pending further
     discussion. (Perl core uses it *only* when "dumping"; it has nothing
     to do with $| auto-flush.)

   In addition to user API above there is an "implementation" interface
which allows perl to get at internals of PerlIO.  The following calls
correspond to the various FILE_xxx macros determined by Configure. This
section is really of interest to only those concerned with detailed
perl-core behaviour or implementing a PerlIO mapping.

PerlIO_has_cntptr(f)
     Implementation can return pointer to current position in the "buffer"
     and a count of bytes available in the buffer.

PerlIO_get_ptr(f)
     Return pointer to next readable byte in buffer.

PerlIO_get_cnt(f)
     Return count of readable bytes in the buffer.

PerlIO_canset_cnt(f)
     Implementation can adjust its idea of number of bytes in the buffer.

PerlIO_fast_gets(f)
     Implementation has all the interfaces required to allow perl's fast
     code to handle <FILE> mechanism.

          PerlIO_fast_gets(f) = PerlIO_has_cntptr(f) && \
                                PerlIO_canset_cnt(f) && \
                                `Can set pointer into buffer'

PerlIO_set_ptrcnt(f,p,c)
     Set pointer into buffer, and a count of bytes still in the buffer.
     Should be used only to set pointer to within range implied by
     previous calls to `PerlIO_get_ptr' and `PerlIO_get_cnt'.

PerlIO_set_cnt(f,c)
     Obscure - set count of bytes in the buffer. Deprecated.  Currently
     used in only doio.c to force count < -1 to -1.  Perhaps should be
     PerlIO_set_empty or similar.  This call may actually do nothing if
     "count" is deduced from pointer and a "limit".

PerlIO_has_base(f)
     Implementation has a buffer, and can return pointer to whole buffer
     and its size. Used by perl for -T / -B tests.  Other uses would be
     very obscure...

PerlIO_get_base(f)
     Return start of buffer.

PerlIO_get_bufsiz(f)
     Return *total size* of buffer.


File: perl.info,  Node: perlbook,  Next: perlembed,  Prev: perlpod,  Up: Top

Perl book information
*********************

NAME
====

   perlbook - Perl book information

DESCRIPTION
===========

   The Camel Book, officially known as *Programming Perl, Second Edition*,
by Larry Wall et al, is the definitive reference work covering nearly all
of Perl.  You can order it and other Perl books from O'Reilly &
Associates, 1-800-998-9938.  Local/overseas is +1 707 829 0515.  If you
can locate an O'Reilly order form, you can also fax to +1 707 829 0104.
If you're web-connected, you can even mosey on over to http://www.ora.com/
for an online order form.

   Other Perl books from various publishers and authors can be found
listed in *Note Perlfaq2: perlfaq2,.


File: perl.info,  Node: perlboot,  Next: perltoot,  Prev: perllol,  Up: Top

Beginner's Object-Oriented Tutorial
***********************************

NAME
====

   perlboot - Beginner's Object-Oriented Tutorial

DESCRIPTION
===========

   If you're not familiar with objects from other languages, some of the
other Perl object documentation may be a little daunting, such as *Note
Perlobj: perlobj,, a basic reference in using objects, and *Note Perltoot:
perltoot,, which introduces readers to the peculiarities of Perl's object
system in a tutorial way.

   So, let's take a different approach, presuming no prior object
experience. It helps if you know about subroutines (*Note Perlsub:
perlsub,), references (*Note Perlref: perlref, et. seq.), and packages
(*Note Perlmod: perlmod,), so become familiar with those first if you
haven't already.

If we could talk to the animals...
----------------------------------

   Let's let the animals talk for a moment:

     sub Cow::speak {
       print "a Cow goes moooo!\n";
     }
     sub Horse::speak {
       print "a Horse goes neigh!\n";
     }
     sub Sheep::speak {
       print "a Sheep goes baaaah!\n"
     }

     Cow::speak;
     Horse::speak;
     Sheep::speak;

   This results in:

     a Cow goes moooo!
     a Horse goes neigh!
     a Sheep goes baaaah!

   Nothing spectacular here.  Simple subroutines, albeit from separate
packages, and called using the full package name.  So let's create an
entire pasture:

     # Cow::speak, Horse::speak, Sheep::speak as before
     @pasture = qw(Cow Cow Horse Sheep Sheep);
     foreach $animal (@pasture) {
       &{$animal."::speak"};
     }

   This results in:

     a Cow goes moooo!
     a Cow goes moooo!
     a Horse goes neigh!
     a Sheep goes baaaah!
     a Sheep goes baaaah!

   Wow.  That symbolic coderef de-referencing there is pretty nasty.
We're counting on `no strict subs' mode, certainly not recommended for
larger programs.  And why was that necessary?  Because the name of the
package seems to be inseparable from the name of the subroutine we want to
invoke within that package.

   Or is it?

Introducing the method invocation arrow
---------------------------------------

   For now, let's say that `< Class-'method >> invokes subroutine method
in package Class.  (Here, "Class" is used in its "category" meaning, not
its "scholastic" meaning.) That's not completely accurate, but we'll do
this one step at a time.  Now let's use it like so:

     # Cow::speak, Horse::speak, Sheep::speak as before
     Cow->speak;
     Horse->speak;
     Sheep->speak;

   And once again, this results in:

     a Cow goes moooo!
     a Horse goes neigh!
     a Sheep goes baaaah!

   That's not fun yet.  Same number of characters, all constant, no
variables.  But yet, the parts are separable now.  Watch:

     $a = "Cow";
     $a->speak; # invokes Cow->speak

   Ahh!  Now that the package name has been parted from the subroutine
name, we can use a variable package name.  And this time, we've got
something that works even when `use strict refs' is enabled.

Invoking a barnyard
-------------------

   Let's take that new arrow invocation and put it back in the barnyard
example:

     sub Cow::speak {
       print "a Cow goes moooo!\n";
     }
     sub Horse::speak {
       print "a Horse goes neigh!\n";
     }
     sub Sheep::speak {
       print "a Sheep goes baaaah!\n"
     }

     @pasture = qw(Cow Cow Horse Sheep Sheep);
     foreach $animal (@pasture) {
       $animal->speak;
     }

   There!  Now we have the animals all talking, and safely at that,
without the use of symbolic coderefs.

   But look at all that common code.  Each of the speak routines has a
similar structure: a print operator and a string that contains common
text, except for two of the words.  It'd be nice if we could factor out
the commonality, in case we decide later to change it all to `says'
instead of `goes'.

   And we actually have a way of doing that without much fuss, but we have
to hear a bit more about what the method invocation arrow is actually
doing for us.

The extra parameter of method invocation
----------------------------------------

   The invocation of:

     Class->method(@args)

   attempts to invoke subroutine `Class::method' as:

     Class::method("Class", @args);

   (If the subroutine can't be found, "inheritance" kicks in, but we'll
get to that later.)  This means that we get the class name as the first
parameter (the only parameter, if no arguments are given).  So we can
rewrite the `Sheep' speaking subroutine as:

     sub Sheep::speak {
       my $class = shift;
       print "a $class goes baaaah!\n";
     }

   And the other two animals come out similarly:

     sub Cow::speak {
       my $class = shift;
       print "a $class goes moooo!\n";
     }
     sub Horse::speak {
       my $class = shift;
       print "a $class goes neigh!\n";
     }

   In each case, $class will get the value appropriate for that
subroutine.  But once again, we have a lot of similar structure.  Can we
factor that out even further?  Yes, by calling another method in the same
class.

Calling a second method to simplify things
------------------------------------------

   Let's call out from speak to a helper method called sound.  This method
provides the constant text for the sound itself.

     { package Cow;
       sub sound { "moooo" }
       sub speak {
     	my $class = shift;
     	print "a $class goes ", $class->sound, "!\n"
       }
     }

   Now, when we call `< Cow-'speak >>, we get a $class of `Cow' in speak.
This in turn selects the `< Cow-'sound >> method, which returns `moooo'.
But how different would this be for the `Horse'?

     { package Horse;
       sub sound { "neigh" }
       sub speak {
     	my $class = shift;
     	print "a $class goes ", $class->sound, "!\n"
       }
     }

   Only the name of the package and the specific sound change.  So can we
somehow share the definition for speak between the Cow and the Horse?
Yes, with inheritance!

Inheriting the windpipes
------------------------

   We'll define a common subroutine package called `Animal', with the
definition for speak:

     { package Animal;
       sub speak {
     	my $class = shift;
     	print "a $class goes ", $class->sound, "!\n"
       }
     }

   Then, for each animal, we say it "inherits" from `Animal', along with
the animal-specific sound:

     { package Cow;
       @ISA = qw(Animal);
       sub sound { "moooo" }
     }

   Note the added `@ISA' array.  We'll get to that in a minute.

   But what happens when we invoke `< Cow-'speak >> now?

   First, Perl constructs the argument list.  In this case, it's just
`Cow'.  Then Perl looks for `Cow::speak'.  But that's not there, so Perl
checks for the inheritance array `@Cow::ISA'.  It's there, and contains
the single name `Animal'.

   Perl next checks for speak inside `Animal' instead, as in
`Animal::speak'.  And that's found, so Perl invokes that subroutine with
the already frozen argument list.

   Inside the `Animal::speak' subroutine, $class becomes `Cow' (the first
argument).  So when we get to the step of invoking `< $class-'sound >>,
it'll be looking for `< Cow-'sound >>, which gets it on the first try
without looking at `@ISA'.  Success!

A few notes about @ISA
----------------------

   This magical `@ISA' variable (pronounced "is a" not "ice-uh"), has
declared that `Cow' "is a" `Animal'.  Note that it's an array, not a
simple single value, because on rare occasions, it makes sense to have
more than one parent class searched for the missing methods.

   If `Animal' also had an `@ISA', then we'd check there too.  The search
is recursive, depth-first, left-to-right in each `@ISA'.  Typically, each
`@ISA' has only one element (multiple elements means multiple inheritance
and multiple headaches), so we get a nice tree of inheritance.

   When we turn on `use strict', we'll get complaints on `@ISA', since
it's not a variable containing an explicit package name, nor is it a
lexical ("my") variable.  We can't make it a lexical variable though (it
has to belong to the package to be found by the inheritance mechanism), so
there's a couple of straightforward ways to handle that.

   The easiest is to just spell the package name out:

     @Cow::ISA = qw(Animal);

   Or allow it as an implicitly named package variable:

     package Cow;
     use vars qw(@ISA);
     @ISA = qw(Animal);

   If you're bringing in the class from outside, via an object-oriented
module, you change:

     package Cow;
     use Animal;
     use vars qw(@ISA);
     @ISA = qw(Animal);

   into just:

     package Cow;
     use base qw(Animal);

   And that's pretty darn compact.

Overriding the methods
----------------------

   Let's add a mouse, which can barely be heard:

     # Animal package from before
     { package Mouse;
       @ISA = qw(Animal);
       sub sound { "squeak" }
       sub speak {
         my $class = shift;
     	print "a $class goes ", $class->sound, "!\n";
     	print "[but you can barely hear it!]\n";
       }
     }

     Mouse->speak;

   which results in:

     a Mouse goes squeak!
     [but you can barely hear it!]

   Here, Mouse has its own speaking routine, so `< Mouse-'speak >> doesn't
immediately invoke `< Animal-'speak >>.  This is known as "overriding".
In fact, we didn't even need to say that a Mouse was an `Animal' at all,
since all of the methods needed for speak are completely defined with
Mouse.

   But we've now duplicated some of the code from `< Animal-'speak >>, and
this can once again be a maintenance headache.  So, can we avoid that?
Can we say somehow that a Mouse does everything any other `Animal' does,
but add in the extra comment?  Sure!

   First, we can invoke the `Animal::speak' method directly:

     # Animal package from before
     { package Mouse;
       @ISA = qw(Animal);
       sub sound { "squeak" }
       sub speak {
         my $class = shift;
         Animal::speak($class);
     	print "[but you can barely hear it!]\n";
       }
     }

   Note that we have to include the $class parameter (almost surely the
value of `"Mouse"') as the first parameter to `Animal::speak', since we've
stopped using the method arrow.  Why did we stop?  Well, if we invoke `<
Animal-'speak >> there, the first parameter to the method will be
`"Animal"' not `"Mouse"', and when time comes for it to call for the
sound, it won't have the right class to come back to this package.

   Invoking `Animal::speak' directly is a mess, however.  What if
`Animal::speak' didn't exist before, and was being inherited from a class
mentioned in `@Animal::ISA'?  Because we are no longer using the method
arrow, we get one and only one chance to hit the right subroutine.

   Also note that the `Animal' classname is now hardwired into the
subroutine selection.  This is a mess if someone maintains the code,
changing `@ISA' for <Mouse> and didn't notice `Animal' there in speak.
So, this is probably not the right way to go.

Starting the search from a different place
------------------------------------------

   A better solution is to tell Perl to search from a higher place in the
inheritance chain:

     # same Animal as before
     { package Mouse;
       # same @ISA, &sound as before
       sub speak {
         my $class = shift;
         $class->Animal::speak;
         print "[but you can barely hear it!]\n";
       }
     }

   Ahh.  This works.  Using this syntax, we start with `Animal' to find
speak, and use all of `Animal''s inheritance chain if not found
immediately.  And yet the first parameter will be $class, so the found
speak method will get Mouse as its first entry, and eventually work its
way back to `Mouse::sound' for the details.

   But this isn't the best solution.  We still have to keep the `@ISA' and
the initial search package coordinated.  Worse, if Mouse had multiple
entries in `@ISA', we wouldn't necessarily know which one had actually
defined speak.  So, is there an even better way?

The SUPER way of doing things
-----------------------------

   By changing the `Animal' class to the SUPER class in that invocation,
we get a search of all of our super classes (classes listed in `@ISA')
automatically:

     # same Animal as before
     { package Mouse;
       # same @ISA, &sound as before
       sub speak {
         my $class = shift;
         $class->SUPER::speak;
         print "[but you can barely hear it!]\n";
       }
     }

   So, `SUPER::speak' means look in the current package's `@ISA' for
speak, invoking the first one found.

Where we're at so far...
------------------------

   So far, we've seen the method arrow syntax:

     Class->method(@args);

   or the equivalent:

     $a = "Class";
     $a->method(@args);

   which constructs an argument list of:

     ("Class", @args)

   and attempts to invoke

     Class::method("Class", @Args);

   However, if `Class::method' is not found, then `@Class::ISA' is examined
(recursively) to locate a package that does indeed contain method, and
that subroutine is invoked instead.

   Using this simple syntax, we have class methods, (multiple)
inheritance, overriding, and extending.  Using just what we've seen so
far, we've been able to factor out common code, and provide a nice way to
reuse implementations with variations.  This is at the core of what
objects provide, but objects also provide instance data, which we haven't
even begun to cover.

A horse is a horse, of course of course - or is it?
---------------------------------------------------

   Let's start with the code for the `Animal' class and the `Horse' class:

     { package Animal;
       sub speak {
         my $class = shift;
         print "a $class goes ", $class->sound, "!\n"
       }
     }
     { package Horse;
       @ISA = qw(Animal);
       sub sound { "neigh" }
     }

   This lets us invoke `< Horse-'speak >> to ripple upward to
`Animal::speak', calling back to `Horse::sound' to get the specific sound,
and the output of:

     a Horse goes neigh!

   But all of our Horse objects would have to be absolutely identical.  If
I add a subroutine, all horses automatically share it.  That's great for
making horses the same, but how do we capture the distinctions about an
individual horse?  For example, suppose I want to give my first horse a
name.  There's got to be a way to keep its name separate from the other
horses.

   We can do that by drawing a new distinction, called an "instance".  An
"instance" is generally created by a class.  In Perl, any reference can be
an instance, so let's start with the simplest reference that can hold a
horse's name: a scalar reference.

     my $name = "Mr. Ed";
     my $talking = \$name;

   So now `$talking' is a reference to what will be the instance-specific
data (the name).  The final step in turning this into a real instance is
with a special operator called bless:

     bless $talking, Horse;

   This operator stores information about the package named `Horse' into
the thing pointed at by the reference.  At this point, we say `$talking'
is an instance of `Horse'.  That is, it's a specific horse.  The reference
is otherwise unchanged, and can still be used with traditional
dereferencing operators.

Invoking an instance method
---------------------------

   The method arrow can be used on instances, as well as names of packages
(classes).  So, let's get the sound that `$talking' makes:

     my $noise = $talking->sound;

   To invoke sound, Perl first notes that `$talking' is a blessed
reference (and thus an instance).  It then constructs an argument list, in
this case from just `($talking)'.  (Later we'll see that arguments will
take their place following the instance variable, just like with classes.)

   Now for the fun part: Perl takes the class in which the instance was
blessed, in this case `Horse', and uses that to locate the subroutine to
invoke the method.  In this case, `Horse::sound' is found directly
(without using inheritance), yielding the final subroutine invocation:

     Horse::sound($talking)

   Note that the first parameter here is still the instance, not the name
of the class as before.  We'll get `neigh' as the return value, and
that'll end up as the `$noise' variable above.

   If Horse::sound had not been found, we'd be wandering up the
`@Horse::ISA' list to try to find the method in one of the superclasses,
just as for a class method.  The only difference between a class method
and an instance method is whether the first parameter is an instance (a
blessed reference) or a class name (a string).

Accessing the instance data
---------------------------

   Because we get the instance as the first parameter, we can now access
the instance-specific data.  In this case, let's add a way to get at the
name:

     { package Horse;
       @ISA = qw(Animal);
       sub sound { "neigh" }
       sub name {
         my $self = shift;
         $$self;
       }
     }

   Now we call for the name:

     print $talking->name, " says ", $talking->sound, "\n";

   Inside `Horse::name', the `@_' array contains just `$talking', which
the shift stores into `$self'.  (It's traditional to shift the first
parameter off into a variable named `$self' for instance methods, so stay
with that unless you have strong reasons otherwise.)  Then, `$self' gets
de-referenced as a scalar ref, yielding `Mr. Ed', and we're done with
that.  The result is:

     Mr. Ed says neigh.

How to build a horse
--------------------

   Of course, if we constructed all of our horses by hand, we'd most
likely make mistakes from time to time.  We're also violating one of the
properties of object-oriented programming, in that the "inside guts" of a
Horse are visible.  That's good if you're a veterinarian, but not if you
just like to own horses.  So, let's let the Horse class build a new horse:

     { package Horse;
       @ISA = qw(Animal);
       sub sound { "neigh" }
       sub name {
         my $self = shift;
         $$self;
       }
       sub named {
         my $class = shift;
         my $name = shift;
         bless \$name, $class;
       }
     }

   Now with the new `named' method, we can build a horse:

     my $talking = Horse->named("Mr. Ed");

   Notice we're back to a class method, so the two arguments to
`Horse::named' are `Horse' and `Mr. Ed'.  The bless operator not only
blesses $name, it also returns the reference to $name, so that's fine as a
return value.  And that's how to build a horse.

   We've called the constructor `named' here, so that it quickly denotes
the constructor's argument as the name for this particular `Horse'.  You
can use different constructors with different names for different ways of
"giving birth" to the object (like maybe recording its pedigree or date of
birth).  However, you'll find that most people coming to Perl from more
limited languages use a single constructor named new, with various ways of
interpreting the arguments to new.  Either style is fine, as long as you
document your particular way of giving birth to an object.  (And you
*were* going to do that, right?)

Inheriting the constructor
--------------------------

   But was there anything specific to `Horse' in that method?  No.
Therefore, it's also the same recipe for building anything else that
inherited from `Animal', so let's put it there:

     { package Animal;
       sub speak {
         my $class = shift;
         print "a $class goes ", $class->sound, "!\n"
       }
       sub name {
         my $self = shift;
         $$self;
       }
       sub named {
         my $class = shift;
         my $name = shift;
         bless \$name, $class;
       }
     }
     { package Horse;
       @ISA = qw(Animal);
       sub sound { "neigh" }
     }

   Ahh, but what happens if we invoke speak on an instance?

     my $talking = Horse->named("Mr. Ed");
     $talking->speak;

   We get a debugging value:

     a Horse=SCALAR(0xaca42ac) goes neigh!

   Why?  Because the `Animal::speak' routine is expecting a classname as
its first parameter, not an instance.  When the instance is passed in,
we'll end up using a blessed scalar reference as a string, and that shows
up as we saw it just now.

Making a method work with either classes or instances
-----------------------------------------------------

   All we need is for a method to detect if it is being called on a class
or called on an instance.  The most straightforward way is with the ref
operator.  This returns a string (the classname) when used on a blessed
reference, and undef when used on a string (like a classname).  Let's
modify the name method first to notice the change:

     sub name {
       my $either = shift;
       ref $either
         ? $$either # it's an instance, return name
         : "an unnamed $either"; # it's a class, return generic
     }

   Here, the `?:' operator comes in handy to select either the dereference
or a derived string.  Now we can use this with either an instance or a
class.  Note that I've changed the first parameter holder to `$either' to
show that this is intended:

     my $talking = Horse->named("Mr. Ed");
     print Horse->name, "\n"; # prints "an unnamed Horse\n"
     print $talking->name, "\n"; # prints "Mr Ed.\n"

   and now we'll fix speak to use this:

     sub speak {
       my $either = shift;
       print $either->name, " goes ", $either->sound, "\n";
     }

   And since sound already worked with either a class or an instance,
we're done!

Adding parameters to a method
-----------------------------

   Let's train our animals to eat:

     { package Animal;
       sub named {
         my $class = shift;
         my $name = shift;
         bless \$name, $class;
       }
       sub name {
         my $either = shift;
         ref $either
     	? $$either # it's an instance, return name
     	: "an unnamed $either"; # it's a class, return generic
       }
       sub speak {
         my $either = shift;
         print $either->name, " goes ", $either->sound, "\n";
       }
       sub eat {
         my $either = shift;
         my $food = shift;
         print $either->name, " eats $food.\n";
       }
     }
     { package Horse;
       @ISA = qw(Animal);
       sub sound { "neigh" }
     }
     { package Sheep;
       @ISA = qw(Animal);
       sub sound { "baaaah" }
     }

   And now try it out:

     my $talking = Horse->named("Mr. Ed");
     $talking->eat("hay");
     Sheep->eat("grass");

   which prints:

     Mr. Ed eats hay.
     an unnamed Sheep eats grass.

   An instance method with parameters gets invoked with the instance, and
then the list of parameters.  So that first invocation is like:

     Animal::eat($talking, "hay");

More interesting instances
--------------------------

   What if an instance needs more data?  Most interesting instances are
made of many items, each of which can in turn be a reference or even
another object.  The easiest way to store these is often in a hash.  The
keys of the hash serve as the names of parts of the object (often called
"instance variables" or "member variables"), and the corresponding values
are, well, the values.

   But how do we turn the horse into a hash?  Recall that an object was
any blessed reference.  We can just as easily make it a blessed hash
reference as a blessed scalar reference, as long as everything that looks
at the reference is changed accordingly.

   Let's make a sheep that has a name and a color:

     my $bad = bless { Name => "Evil", Color => "black" }, Sheep;

   so `< $bad-'{Name} >> has `Evil', and `< $bad-'{Color} >> has `black'.
But we want to make `< $bad-'name >> access the name, and that's now
messed up because it's expecting a scalar reference.  Not to worry,
because that's pretty easy to fix up:

     ## in Animal
     sub name {
       my $either = shift;
       ref $either ?
         $either->{Name} :
         "an unnamed $either";
     }

   And of course `named' still builds a scalar sheep, so let's fix that as
well:

     ## in Animal
     sub named {
       my $class = shift;
       my $name = shift;
       my $self = { Name => $name, Color => $class->default_color };
       bless $self, $class;
     }

   What's this `default_color'?  Well, if `named' has only the name, we
still need to set a color, so we'll have a class-specific initial color.
For a sheep, we might define it as white:

     ## in Sheep
     sub default_color { "white" }

   And then to keep from having to define one for each additional class,
we'll define a "backstop" method that serves as the "default default",
directly in `Animal':

     ## in Animal
     sub default_color { "brown" }

   Now, because name and `named' were the only methods that referenced the
"structure" of the object, the rest of the methods can remain the same, so
speak still works as before.

A horse of a different color
----------------------------

   But having all our horses be brown would be boring.  So let's add a
method or two to get and set the color.

     ## in Animal
     sub color {
       $_[0]->{Color}
     }
     sub set_color {
       $_[0]->{Color} = $_[1];
     }

   Note the alternate way of accessing the arguments: `$_[0]' is used
in-place, rather than with a shift.  (This saves us a bit of time for
something that may be invoked frequently.)  And now we can fix that color
for Mr. Ed:

     my $talking = Horse->named("Mr. Ed");
     $talking->set_color("black-and-white");
     print $talking->name, " is colored ", $talking->color, "\n";

   which results in:

     Mr. Ed is colored black-and-white

Summary
-------

   So, now we have class methods, constructors, instance methods, instance
data, and even accessors.  But that's still just the beginning of what
Perl has to offer.  We haven't even begun to talk about accessors that
double as getters and setters, destructors, indirect object notation,
subclasses that add instance data, per-class data, overloading, "isa" and
"can" tests, UNIVERSAL class, and so on.  That's for the rest of the Perl
documentation to cover.  Hopefully, this gets you started, though.

SEE ALSO
========

   For more information, see *Note Perlobj: perlobj, (for all the gritty
details about Perl objects, now that you've seen the basics), *Note
Perltoot: perltoot, (the tutorial for those who already know objects),
*Note Perlbot: perlbot, (for some more tricks), and books such as Damian
Conway's excellent *Object Oriented Perl*.

COPYRIGHT
=========

   Copyright (c) 1999, 2000 by Randal L. Schwartz and Stonehenge
Consulting Services, Inc.  Permission is hereby granted to distribute this
document intact with the Perl distribution, and in accordance with the
licenses of the Perl distribution; derived documents must include this
copyright notice intact.

   Portions of this text have been derived from Perl Training materials
originally appearing in the *Packages, References, Objects, and Modules*
course taught by instructors for Stonehenge Consulting Services, Inc. and
used with permission.

   Portions of this text have been derived from materials originally
appearing in *Linux Magazine* and used with permission.


File: perl.info,  Node: perlbot,  Next: perlipc,  Prev: perltie,  Up: Top

Bag'o Object Tricks (the BOT)
*****************************

NAME
====

   perlbot - Bag'o Object Tricks (the BOT)

DESCRIPTION
===========

   The following collection of tricks and hints is intended to whet curious
appetites about such things as the use of instance variables and the
mechanics of object and class relationships.  The reader is encouraged to
consult relevant textbooks for discussion of Object Oriented definitions
and methodology.  This is not intended as a tutorial for object-oriented
programming or as a comprehensive guide to Perl's object oriented features,
nor should it be construed as a style guide.

   The Perl motto still holds:  There's more than one way to do it.

OO SCALING TIPS
===============

  1. Do not attempt to verify the type of $self.  That'll break if the
     class is inherited, when the type of $self is valid but its package
     isn't what you expect.  See rule 5.

  2. If an object-oriented (OO) or indirect-object (IO) syntax was used,
     then the object is probably the correct type and there's no need to
     become paranoid about it.  Perl isn't a paranoid language anyway.  If
     people subvert the OO or IO syntax then they probably know what
     they're doing and you should let them do it.  See rule 1.

  3. Use the two-argument form of bless().  Let a subclass use your
     constructor.  See `INHERITING A CONSTRUCTOR' in this node.

  4. The subclass is allowed to know things about its immediate
     superclass, the superclass is allowed to know nothing about a
     subclass.

  5. Don't be trigger happy with inheritance.  A "using", "containing", or
     "delegation" relationship (some sort of aggregation, at least) is
     often more appropriate.  See `OBJECT RELATIONSHIPS' in this node,
     `USING RELATIONSHIP WITH SDBM' in this node, and `"DELEGATION"' in
     this node.

  6. The object is the namespace.  Make package globals accessible via the
     object.  This will remove the guess work about the symbol's home
     package.  See `CLASS CONTEXT AND THE OBJECT' in this node.

  7. IO syntax is certainly less noisy, but it is also prone to
     ambiguities that can cause difficult-to-find bugs.  Allow people to
     use the sure-thing OO syntax, even if you don't like it.

  8. Do not use function-call syntax on a method.  You're going to be
     bitten someday.  Someone might move that method into a superclass and
     your code will be broken.  On top of that you're feeding the paranoia
     in rule 2.

  9. Don't assume you know the home package of a method.  You're making it
     difficult for someone to override that method.  See `THINKING OF CODE
     REUSE' in this node.


INSTANCE VARIABLES
==================

   An anonymous array or anonymous hash can be used to hold instance
variables.  Named parameters are also demonstrated.

     package Foo;

     sub new {
     	my $type = shift;
     	my %params = @_;
     	my $self = {};
     	$self->{'High'} = $params{'High'};
     	$self->{'Low'}  = $params{'Low'};
     	bless $self, $type;
     }

     package Bar;

     sub new {
     	my $type = shift;
     	my %params = @_;
     	my $self = [];
     	$self->[0] = $params{'Left'};
     	$self->[1] = $params{'Right'};
     	bless $self, $type;
     }

     package main;

     $a = Foo->new( 'High' => 42, 'Low' => 11 );
     print "High=$a->{'High'}\n";
     print "Low=$a->{'Low'}\n";

     $b = Bar->new( 'Left' => 78, 'Right' => 40 );
     print "Left=$b->[0]\n";
     print "Right=$b->[1]\n";

SCALAR INSTANCE VARIABLES
=========================

   An anonymous scalar can be used when only one instance variable is
needed.

     package Foo;

     sub new {
     	my $type = shift;
     	my $self;
     	$self = shift;
     	bless \$self, $type;
     }

     package main;

     $a = Foo->new( 42 );
     print "a=$$a\n";

INSTANCE VARIABLE INHERITANCE
=============================

   This example demonstrates how one might inherit instance variables from
a superclass for inclusion in the new class.  This requires calling the
superclass's constructor and adding one's own instance variables to the new
object.

     package Bar;

     sub new {
     	my $type = shift;
     	my $self = {};
     	$self->{'buz'} = 42;
     	bless $self, $type;
     }

     package Foo;
     @ISA = qw( Bar );

     sub new {
     	my $type = shift;
     	my $self = Bar->new;
     	$self->{'biz'} = 11;
     	bless $self, $type;
     }

     package main;

     $a = Foo->new;
     print "buz = ", $a->{'buz'}, "\n";
     print "biz = ", $a->{'biz'}, "\n";

OBJECT RELATIONSHIPS
====================

   The following demonstrates how one might implement "containing" and
"using" relationships between objects.

     package Bar;

     sub new {
     	my $type = shift;
     	my $self = {};
     	$self->{'buz'} = 42;
     	bless $self, $type;
     }

     package Foo;

     sub new {
     	my $type = shift;
     	my $self = {};
     	$self->{'Bar'} = Bar->new;
     	$self->{'biz'} = 11;
     	bless $self, $type;
     }

     package main;

     $a = Foo->new;
     print "buz = ", $a->{'Bar'}->{'buz'}, "\n";
     print "biz = ", $a->{'biz'}, "\n";

OVERRIDING SUPERCLASS METHODS
=============================

   The following example demonstrates how to override a superclass method
and then call the overridden method.  The SUPER pseudo-class allows the
programmer to call an overridden superclass method without actually knowing
where that method is defined.

     package Buz;
     sub goo { print "here's the goo\n" }

     package Bar; @ISA = qw( Buz );
     sub google { print "google here\n" }

     package Baz;
     sub mumble { print "mumbling\n" }

     package Foo;
     @ISA = qw( Bar Baz );

     sub new {
     	my $type = shift;
     	bless [], $type;
     }
     sub grr { print "grumble\n" }
     sub goo {
     	my $self = shift;
     	$self->SUPER::goo();
     }
     sub mumble {
     	my $self = shift;
     	$self->SUPER::mumble();
     }
     sub google {
     	my $self = shift;
     	$self->SUPER::google();
     }

     package main;

     $foo = Foo->new;
     $foo->mumble;
     $foo->grr;
     $foo->goo;
     $foo->google;

USING RELATIONSHIP WITH SDBM
============================

   This example demonstrates an interface for the SDBM class.  This
creates a "using" relationship between the SDBM class and the new class
Mydbm.

     package Mydbm;

     require SDBM_File;
     require Tie::Hash;
     @ISA = qw( Tie::Hash );

     sub TIEHASH {
         my $type = shift;
         my $ref  = SDBM_File->new(@_);
         bless {'dbm' => $ref}, $type;
     }
     sub FETCH {
         my $self = shift;
         my $ref  = $self->{'dbm'};
         $ref->FETCH(@_);
     }
     sub STORE {
         my $self = shift;
         if (defined $_[0]){
     	my $ref = $self->{'dbm'};
     	$ref->STORE(@_);
         } else {
     	die "Cannot STORE an undefined key in Mydbm\n";
         }
     }

     package main;
     use Fcntl qw( O_RDWR O_CREAT );

     tie %foo, "Mydbm", "Sdbm", O_RDWR|O_CREAT, 0640;
     $foo{'bar'} = 123;
     print "foo-bar = $foo{'bar'}\n";

     tie %bar, "Mydbm", "Sdbm2", O_RDWR|O_CREAT, 0640;
     $bar{'Cathy'} = 456;
     print "bar-Cathy = $bar{'Cathy'}\n";

THINKING OF CODE REUSE
======================

   One strength of Object-Oriented languages is the ease with which old
code can use new code.  The following examples will demonstrate first how
one can hinder code reuse and then how one can promote code reuse.

   This first example illustrates a class which uses a fully-qualified
method call to access the "private" method BAZ().  The second example will
show that it is impossible to override the BAZ() method.

     package FOO;

     sub new {
     	my $type = shift;
     	bless {}, $type;
     }
     sub bar {
     	my $self = shift;
     	$self->FOO::private::BAZ;
     }

     package FOO::private;

     sub BAZ {
     	print "in BAZ\n";
     }

     package main;

     $a = FOO->new;
     $a->bar;

   Now we try to override the BAZ() method.  We would like FOO::bar() to
call GOOP::BAZ(), but this cannot happen because FOO::bar() explicitly
calls FOO::private::BAZ().

     package FOO;

     sub new {
     	my $type = shift;
     	bless {}, $type;
     }
     sub bar {
     	my $self = shift;
     	$self->FOO::private::BAZ;
     }

     package FOO::private;

     sub BAZ {
     	print "in BAZ\n";
     }

     package GOOP;
     @ISA = qw( FOO );
     sub new {
     	my $type = shift;
     	bless {}, $type;
     }

     sub BAZ {
     	print "in GOOP::BAZ\n";
     }

     package main;

     $a = GOOP->new;
     $a->bar;

   To create reusable code we must modify class FOO, flattening class
FOO::private.  The next example shows a reusable class FOO which allows the
method GOOP::BAZ() to be used in place of FOO::BAZ().

     package FOO;

     sub new {
     	my $type = shift;
     	bless {}, $type;
     }
     sub bar {
     	my $self = shift;
     	$self->BAZ;
     }

     sub BAZ {
     	print "in BAZ\n";
     }

     package GOOP;
     @ISA = qw( FOO );

     sub new {
     	my $type = shift;
     	bless {}, $type;
     }
     sub BAZ {
     	print "in GOOP::BAZ\n";
     }

     package main;

     $a = GOOP->new;
     $a->bar;

CLASS CONTEXT AND THE OBJECT
============================

   Use the object to solve package and class context problems.  Everything
a method needs should be available via the object or should be passed as a
parameter to the method.

   A class will sometimes have static or global data to be used by the
methods.  A subclass may want to override that data and replace it with new
data.  When this happens the superclass may not know how to find the new
copy of the data.

   This problem can be solved by using the object to define the context of
the method.  Let the method look in the object for a reference to the
data.  The alternative is to force the method to go hunting for the data
("Is it in my class, or in a subclass?  Which subclass?"), and this can be
inconvenient and will lead to hackery.  It is better just to let the
object tell the method where that data is located.

     package Bar;

     %fizzle = ( 'Password' => 'XYZZY' );

     sub new {
     	my $type = shift;
     	my $self = {};
     	$self->{'fizzle'} = \%fizzle;
     	bless $self, $type;
     }

     sub enter {
     	my $self = shift;

     # Don't try to guess if we should use %Bar::fizzle
     # or %Foo::fizzle.  The object already knows which
     # we should use, so just ask it.
     #
     my $fizzle = $self->{'fizzle'};

     print "The word is ", $fizzle->{'Password'}, "\n";
     	}

     package Foo;
     @ISA = qw( Bar );

     %fizzle = ( 'Password' => 'Rumple' );

     sub new {
     	my $type = shift;
     	my $self = Bar->new;
     	$self->{'fizzle'} = \%fizzle;
     	bless $self, $type;
     }

     package main;

     $a = Bar->new;
     $b = Foo->new;
     $a->enter;
     $b->enter;

INHERITING A CONSTRUCTOR
========================

   An inheritable constructor should use the second form of bless() which
allows blessing directly into a specified class.  Notice in this example
that the object will be a BAR not a FOO, even though the constructor is in
class FOO.

     package FOO;

     sub new {
     	my $type = shift;
     	my $self = {};
     	bless $self, $type;
     }

     sub baz {
     	print "in FOO::baz()\n";
     }

     package BAR;
     @ISA = qw(FOO);

     sub baz {
     	print "in BAR::baz()\n";
     }

     package main;

     $a = BAR->new;
     $a->baz;

DELEGATION
==========

   Some classes, such as SDBM_File, cannot be effectively subclassed
because they create foreign objects.  Such a class can be extended with
some sort of aggregation technique such as the "using" relationship
mentioned earlier or by delegation.

   The following example demonstrates delegation using an AUTOLOAD()
function to perform message-forwarding.  This will allow the Mydbm object
to behave exactly like an SDBM_File object.  The Mydbm class could now
extend the behavior by adding custom FETCH() and STORE() methods, if this
is desired.

     package Mydbm;

     require SDBM_File;
     require Tie::Hash;
     @ISA = qw(Tie::Hash);

     sub TIEHASH {
     	my $type = shift;
     	my $ref = SDBM_File->new(@_);
     	bless {'delegate' => $ref};
     }

     sub AUTOLOAD {
     	my $self = shift;

     # The Perl interpreter places the name of the
     # message in a variable called $AUTOLOAD.

     # DESTROY messages should never be propagated.
     return if $AUTOLOAD =~ /::DESTROY$/;

     # Remove the package name.
     $AUTOLOAD =~ s/^Mydbm:://;

     # Pass the message to the delegate.
     $self->{'delegate'}->$AUTOLOAD(@_);
     	}

     package main;
     use Fcntl qw( O_RDWR O_CREAT );

     tie %foo, "Mydbm", "adbm", O_RDWR|O_CREAT, 0640;
     $foo{'bar'} = 123;
     print "foo-bar = $foo{'bar'}\n";


File: perl.info,  Node: perlcall,  Next: perlapi,  Prev: perlguts,  Up: Top

Perl calling conventions from C
*******************************

NAME
====

   perlcall - Perl calling conventions from C

DESCRIPTION
===========

   The purpose of this document is to show you how to call Perl subroutines
directly from C, i.e., how to write *callbacks*.

   Apart from discussing the C interface provided by Perl for writing
callbacks the document uses a series of examples to show how the interface
actually works in practice.  In addition some techniques for coding
callbacks are covered.

   Examples where callbacks are necessary include

   * An Error Handler

     You have created an XSUB interface to an application's C API.

     A fairly common feature in applications is to allow you to define a C
     function that will be called whenever something nasty occurs. What we
     would like is to be able to specify a Perl subroutine that will be
     called instead.

   * An Event Driven Program

     The classic example of where callbacks are used is when writing an
     event driven program like for an X windows application.  In this case
     you register functions to be called whenever specific events occur,
     e.g., a mouse button is pressed, the cursor moves into a window or a
     menu item is selected.

   Although the techniques described here are applicable when embedding
Perl in a C program, this is not the primary goal of this document.  There
are other details that must be considered and are specific to embedding
Perl. For details on embedding Perl in C refer to *Note Perlembed:
perlembed,.

   Before you launch yourself head first into the rest of this document,
it would be a good idea to have read the following two documents - *Note
Perlxs: perlxs, and *Note Perlguts: perlguts,.

THE CALL_ FUNCTIONS
===================

   Although this stuff is easier to explain using examples, you first need
be aware of a few important definitions.

   Perl has a number of C functions that allow you to call Perl
subroutines.  They are

     I32 call_sv(SV* sv, I32 flags) ;
     I32 call_pv(char *subname, I32 flags) ;
     I32 call_method(char *methname, I32 flags) ;
     I32 call_argv(char *subname, I32 flags, register char **argv) ;

   The key function is call_sv.  All the other functions are fairly simple
wrappers which make it easier to call Perl subroutines in special cases.
At the end of the day they will all call call_sv to invoke the Perl
subroutine.

   All the *call_** functions have a flags parameter which is used to pass
a bit mask of options to Perl.  This bit mask operates identically for
each of the functions.  The settings available in the bit mask are
discussed in `FLAG VALUES' in this node.

   Each of the functions will now be discussed in turn.

call_sv
     call_sv takes two parameters, the first, sv, is an SV*.  This allows
     you to specify the Perl subroutine to be called either as a C string
     (which has first been converted to an SV) or a reference to a
     subroutine. The section, Using call_sv, shows how you can make use of
     call_sv.

call_pv
     The function, call_pv, is similar to call_sv except it expects its
     first parameter to be a C char* which identifies the Perl subroutine
     you want to call, e.g., `call_pv("fred", 0)'.  If the subroutine you
     want to call is in another package, just include the package name in
     the string, e.g., `"pkg::fred"'.

call_method
     The function call_method is used to call a method from a Perl class.
     The parameter `methname' corresponds to the name of the method to be
     called.  Note that the class that the method belongs to is passed on
     the Perl stack rather than in the parameter list. This class can be
     either the name of the class (for a static method) or a reference to
     an object (for a virtual method).  See *Note Perlobj: perlobj, for
     more information on static and virtual methods and `Using
     call_method' in this node for an example of using call_method.

call_argv
     call_argv calls the Perl subroutine specified by the C string stored
     in the `subname' parameter. It also takes the usual flags parameter.
     The final parameter, `argv', consists of a NULL terminated list of C
     strings to be passed as parameters to the Perl subroutine.  See Using
     call_argv.

   All the functions return an integer. This is a count of the number of
items returned by the Perl subroutine. The actual items returned by the
subroutine are stored on the Perl stack.

   As a general rule you should always check the return value from these
functions.  Even if you are expecting only a particular number of values
to be returned from the Perl subroutine, there is nothing to stop someone
from doing something unexpected-don't say you haven't been warned.

FLAG VALUES
===========

   The flags parameter in all the *call_** functions is a bit mask which
can consist of any combination of the symbols defined below, OR'ed
together.

G_VOID
------

   Calls the Perl subroutine in a void context.

   This flag has 2 effects:

  1. It indicates to the subroutine being called that it is executing in a
     void context (if it executes wantarray the result will be the
     undefined value).

  2. It ensures that nothing is actually returned from the subroutine.

        The value returned by the *call_** function indicates how many
items have been returned by the Perl subroutine - in this case it will be
0.

G_SCALAR
--------

   Calls the Perl subroutine in a scalar context.  This is the default
context flag setting for all the *call_** functions.

   This flag has 2 effects:

  1. It indicates to the subroutine being called that it is executing in a
     scalar context (if it executes wantarray the result will be false).

  2. It ensures that only a scalar is actually returned from the
     subroutine.  The subroutine can, of course,  ignore the wantarray and
     return a list anyway. If so, then only the last element of the list
     will be returned.

        The value returned by the *call_** function indicates how many
items have been returned by the Perl subroutine - in this case it will be
either 0 or 1.

   If 0, then you have specified the G_DISCARD flag.

   If 1, then the item actually returned by the Perl subroutine will be
stored on the Perl stack - the section Returning a Scalar shows how to
access this value on the stack.  Remember that regardless of how many
items the Perl subroutine returns, only the last one will be accessible
from the stack - think of the case where only one value is returned as
being a list with only one element.  Any other items that were returned
will not exist by the time control returns from the *call_** function.
The section *Returning a list in a scalar context* shows an example of
this behavior.

G_ARRAY
-------

   Calls the Perl subroutine in a list context.

   As with G_SCALAR, this flag has 2 effects:

  1. It indicates to the subroutine being called that it is executing in an
     array context (if it executes wantarray the result will be true).

  2. It ensures that all items returned from the subroutine will be
     accessible when control returns from the *call_** function.

        The value returned by the *call_** function indicates how many
items have been returned by the Perl subroutine.

   If 0, then you have specified the G_DISCARD flag.

   If not 0, then it will be a count of the number of items returned by
the subroutine. These items will be stored on the Perl stack.  The section
Returning a list of values gives an example of using the G_ARRAY flag and
the mechanics of accessing the returned items from the Perl stack.

G_DISCARD
---------

   By default, the *call_** functions place the items returned from by the
Perl subroutine on the stack.  If you are not interested in these items,
then setting this flag will make Perl get rid of them automatically for
you.  Note that it is still possible to indicate a context to the Perl
subroutine by using either G_SCALAR or G_ARRAY.

   If you do not set this flag then it is *very* important that you make
sure that any temporaries (i.e., parameters passed to the Perl subroutine
and values returned from the subroutine) are disposed of yourself.  The
section Returning a Scalar gives details of how to dispose of these
temporaries explicitly and the section *Using Perl to dispose of
temporaries* discusses the specific circumstances where you can ignore the
problem and let Perl deal with it for you.

G_NOARGS
--------

   Whenever a Perl subroutine is called using one of the *call_**
functions, it is assumed by default that parameters are to be passed to
the subroutine.  If you are not passing any parameters to the Perl
subroutine, you can save a bit of time by setting this flag.  It has the
effect of not creating the `@_' array for the Perl subroutine.

   Although the functionality provided by this flag may seem
straightforward, it should be used only if there is a good reason to do
so.  The reason for being cautious is that even if you have specified the
G_NOARGS flag, it is still possible for the Perl subroutine that has been
called to think that you have passed it parameters.

   In fact, what can happen is that the Perl subroutine you have called
can access the `@_' array from a previous Perl subroutine.  This will
occur when the code that is executing the *call_** function has itself
been called from another Perl subroutine. The code below illustrates this

     sub fred
       { print "@_\n"  }

     sub joe
       { &fred }

     &joe(1,2,3) ;

   This will print

     1 2 3

   What has happened is that `fred' accesses the `@_' array which belongs
to `joe'.

G_EVAL
------

   It is possible for the Perl subroutine you are calling to terminate
abnormally, e.g., by calling die explicitly or by not actually existing.
By default, when either of these events occurs, the process will terminate
immediately.  If you want to trap this type of event, specify the G_EVAL
flag.  It will put an *eval { }* around the subroutine call.

   Whenever control returns from the *call_** function you need to check
the `$@' variable as you would in a normal Perl script.

   The value returned from the *call_** function is dependent on what
other flags have been specified and whether an error has occurred.  Here
are all the different cases that can occur:

   * If the *call_** function returns normally, then the value returned is
     as specified in the previous sections.

   * If G_DISCARD is specified, the return value will always be 0.

   * If G_ARRAY is specified and an error has occurred, the return value
     will always be 0.

   * If G_SCALAR is specified and an error has occurred, the return value
     will be 1 and the value on the top of the stack will be undef. This
     means that if you have already detected the error by checking `$@' and
     you want the program to continue, you must remember to pop the undef
     from the stack.

   See Using G_EVAL for details on using G_EVAL.

G_KEEPERR
---------

   You may have noticed that using the G_EVAL flag described above will
always clear the `$@' variable and set it to a string describing the error
iff there was an error in the called code.  This unqualified resetting of
`$@' can be problematic in the reliable identification of errors using the
`eval {}' mechanism, because the possibility exists that perl will call
other code (end of block processing code, for example) between the time
the error causes `$@' to be set within `eval {}', and the subsequent
statement which checks for the value of `$@' gets executed in the user's
script.

   This scenario will mostly be applicable to code that is meant to be
called from within destructors, asynchronous callbacks, signal handlers,
__DIE__ or `__WARN__' hooks, and tie functions.  In such situations, you
will not want to clear `$@' at all, but simply to append any new errors to
any existing value of `$@'.

   The G_KEEPERR flag is meant to be used in conjunction with G_EVAL in
*call_** functions that are used to implement such code.  This flag has no
effect when G_EVAL is not used.

   When G_KEEPERR is used, any errors in the called code will be prefixed
with the string "\t(in cleanup)", and appended to the current value of
`$@'.

   The G_KEEPERR flag was introduced in Perl version 5.002.

   See Using G_KEEPERR for an example of a situation that warrants the use
of this flag.

Determining the Context
-----------------------

   As mentioned above, you can determine the context of the currently
executing subroutine in Perl with wantarray.  The equivalent test can be
made in C by using the GIMME_V macro, which returns G_ARRAY if you have
been called in an array context, G_SCALAR if in a scalar context, or
G_VOID if in a void context (i.e. the return value will not be used).  An
older version of this macro is called GIMME; in a void context it returns
G_SCALAR instead of G_VOID.  An example of using the GIMME_V macro is
shown in section Using GIMME_V.

KNOWN PROBLEMS
==============

   This section outlines all known problems that exist in the *call_**
functions.

  1. If you are intending to make use of both the G_EVAL and G_SCALAR flags
     in your code, use a version of Perl greater than 5.000.  There is a
     bug in version 5.000 of Perl which means that the combination of
     these two flags will not work as described in the section FLAG VALUES.

     Specifically, if the two flags are used when calling a subroutine and
     that subroutine does not call die, the value returned by *call_**
     will be wrong.

  2. In Perl 5.000 and 5.001 there is a problem with using *call_** if the
     Perl sub you are calling attempts to trap a die.

     The symptom of this problem is that the called Perl sub will continue
     to completion, but whenever it attempts to pass control back to the
     XSUB, the program will immediately terminate.

     For example, say you want to call this Perl sub

          sub fred
          {
              eval { die "Fatal Error" ; }
              print "Trapped error: $@\n"
                  if $@ ;
          }

     via this XSUB

          void
          Call_fred()
              CODE:
              PUSHMARK(SP) ;
              call_pv("fred", G_DISCARD|G_NOARGS) ;
              fprintf(stderr, "back in Call_fred\n") ;

     When `Call_fred' is executed it will print

          Trapped error: Fatal Error

     As control never returns to `Call_fred', the `"back in Call_fred"'
     string will not get printed.

     To work around this problem, you can either upgrade to Perl 5.002 or
     higher, or use the G_EVAL flag with *call_** as shown below

          void
          Call_fred()
              CODE:
              PUSHMARK(SP) ;
              call_pv("fred", G_EVAL|G_DISCARD|G_NOARGS) ;
              fprintf(stderr, "back in Call_fred\n") ;


EXAMPLES
========

   Enough of the definition talk, let's have a few examples.

   Perl provides many macros to assist in accessing the Perl stack.
Wherever possible, these macros should always be used when interfacing to
Perl internals.  We hope this should make the code less vulnerable to any
changes made to Perl in the future.

   Another point worth noting is that in the first series of examples I
have made use of only the call_pv function.  This has been done to keep
the code simpler and ease you into the topic.  Wherever possible, if the
choice is between using call_pv and call_sv, you should always try to use
call_sv.  See Using call_sv for details.

No Parameters, Nothing returned
-------------------------------

   This first trivial example will call a Perl subroutine, *PrintUID*, to
print out the UID of the process.

     sub PrintUID
     {
         print "UID is $<\n" ;
     }

   and here is a C function to call it

     static void
     call_PrintUID()
     {
         dSP ;

     PUSHMARK(SP) ;
     call_pv("PrintUID", G_DISCARD|G_NOARGS) ;
         }

   Simple, eh.

   A few points to note about this example.

  1. Ignore dSP and `PUSHMARK(SP)' for now. They will be discussed in the
     next example.

  2. We aren't passing any parameters to *PrintUID* so G_NOARGS can be
     specified.

  3. We aren't interested in anything returned from *PrintUID*, so
     G_DISCARD is specified. Even if *PrintUID* was changed to return some
     value(s), having specified G_DISCARD will mean that they will be
     wiped by the time control returns from call_pv.

  4. As call_pv is being used, the Perl subroutine is specified as a C
     string. In this case the subroutine name has been 'hard-wired' into
     the code.

  5. Because we specified G_DISCARD, it is not necessary to check the value
     returned from call_pv. It will always be 0.


Passing Parameters
------------------

   Now let's make a slightly more complex example. This time we want to
call a Perl subroutine, `LeftString', which will take 2 parameters-a
string ($s) and an integer ($n).  The subroutine will simply print the
first $n characters of the string.

   So the Perl subroutine would look like this

     sub LeftString
     {
         my($s, $n) = @_ ;
         print substr($s, 0, $n), "\n" ;
     }

   The C function required to call *LeftString* would look like this.

     static void
     call_LeftString(a, b)
     char * a ;
     int b ;
     {
         dSP ;

     ENTER ;
             SAVETMPS ;

     PUSHMARK(SP) ;
     XPUSHs(sv_2mortal(newSVpv(a, 0)));
     XPUSHs(sv_2mortal(newSViv(b)));
     PUTBACK ;

     call_pv("LeftString", G_DISCARD);

     FREETMPS ;
     LEAVE ;
         }

   Here are a few notes on the C function *call_LeftString*.

  1. Parameters are passed to the Perl subroutine using the Perl stack.
     This is the purpose of the code beginning with the line dSP and
     ending with the line PUTBACK.  The dSP declares a local copy of the
     stack pointer.  This local copy should always be accessed as SP.

  2. If you are going to put something onto the Perl stack, you need to
     know where to put it. This is the purpose of the macro dSP-it declares
     and initializes a local copy of the Perl stack pointer.

     All the other macros which will be used in this example require you to
     have used this macro.

     The exception to this rule is if you are calling a Perl subroutine
     directly from an XSUB function. In this case it is not necessary to
     use the dSP macro explicitly-it will be declared for you
     automatically.

  3. Any parameters to be pushed onto the stack should be bracketed by the
     PUSHMARK and PUTBACK macros.  The purpose of these two macros, in
     this context, is to count the number of parameters you are pushing
     automatically.  Then whenever Perl is creating the `@_' array for the
     subroutine, it knows how big to make it.

     The PUSHMARK macro tells Perl to make a mental note of the current
     stack pointer. Even if you aren't passing any parameters (like the
     example shown in the section No Parameters, Nothing returned) you
     must still call the PUSHMARK macro before you can call any of the
     *call_** functions-Perl still needs to know that there are no
     parameters.

     The PUTBACK macro sets the global copy of the stack pointer to be the
     same as our local copy. If we didn't do this call_pv wouldn't know
     where the two parameters we pushed were-remember that up to now all
     the stack pointer manipulation we have done is with our local copy,
     not the global copy.

  4. The only flag specified this time is G_DISCARD. Because we are
     passing 2 parameters to the Perl subroutine this time, we have not
     specified G_NOARGS.

  5. Next, we come to XPUSHs. This is where the parameters actually get
     pushed onto the stack. In this case we are pushing a string and an
     integer.

     See `"XSUBs and the Argument Stack"', *Note Perlguts: perlguts, for
     details on how the XPUSH macros work.

  6. Because we created temporary values (by means of sv_2mortal() calls)
     we will have to tidy up the Perl stack and dispose of mortal SVs.

     This is the purpose of

          ENTER ;
          SAVETMPS ;

     at the start of the function, and

          FREETMPS ;
          LEAVE ;

     at the end. The ENTER/SAVETMPS pair creates a boundary for any
     temporaries we create.  This means that the temporaries we get rid of
     will be limited to those which were created after these calls.

     The FREETMPS/LEAVE pair will get rid of any values returned by the
     Perl subroutine (see next example), plus it will also dump the mortal
     SVs we have created.  Having ENTER/SAVETMPS at the beginning of the
     code makes sure that no other mortals are destroyed.

     Think of these macros as working a bit like using `{' and `}' in Perl
     to limit the scope of local variables.

     See the section Using Perl to dispose of temporaries for details of
     an alternative to using these macros.

  7. Finally, *LeftString* can now be called via the call_pv function.


Returning a Scalar
------------------

   Now for an example of dealing with the items returned from a Perl
subroutine.

   Here is a Perl subroutine, *Adder*, that takes 2 integer parameters and
simply returns their sum.

     sub Adder
     {
         my($a, $b) = @_ ;
         $a + $b ;
     }

   Because we are now concerned with the return value from *Adder*, the C
function required to call it is now a bit more complex.

     static void
     call_Adder(a, b)
     int a ;
     int b ;
     {
         dSP ;
         int count ;

     ENTER ;
     SAVETMPS;

     PUSHMARK(SP) ;
     XPUSHs(sv_2mortal(newSViv(a)));
     XPUSHs(sv_2mortal(newSViv(b)));
     PUTBACK ;

     count = call_pv("Adder", G_SCALAR);

     SPAGAIN ;

     if (count != 1)
         croak("Big trouble\n") ;

     printf ("The sum of %d and %d is %d\n", a, b, POPi) ;

     PUTBACK ;
     FREETMPS ;
     LEAVE ;
         }

   Points to note this time are

  1. The only flag specified this time was G_SCALAR. That means the `@_'
     array will be created and that the value returned by *Adder* will
     still exist after the call to call_pv.

  2. The purpose of the macro SPAGAIN is to refresh the local copy of the
     stack pointer. This is necessary because it is possible that the
     memory allocated to the Perl stack has been reallocated whilst in the
     call_pv call.

     If you are making use of the Perl stack pointer in your code you must
     always refresh the local copy using SPAGAIN whenever you make use of
     the *call_** functions or any other Perl internal function.

  3. Although only a single value was expected to be returned from *Adder*,
     it is still good practice to check the return code from call_pv
     anyway.

     Expecting a single value is not quite the same as knowing that there
     will be one. If someone modified *Adder* to return a list and we
     didn't check for that possibility and take appropriate action the Perl
     stack would end up in an inconsistent state. That is something you
     *really* don't want to happen ever.

  4. The POPi macro is used here to pop the return value from the stack.
     In this case we wanted an integer, so POPi was used.

     Here is the complete list of POP macros available, along with the
     types they return.

          POPs	SV
          POPp	pointer
          POPn	double
          POPi	integer
          POPl	long

  5. The final PUTBACK is used to leave the Perl stack in a consistent
     state before exiting the function.  This is necessary because when we
     popped the return value from the stack with POPi it updated only our
     local copy of the stack pointer.  Remember, PUTBACK sets the global
     stack pointer to be the same as our local copy.


Returning a list of values
--------------------------

   Now, let's extend the previous example to return both the sum of the
parameters and the difference.

   Here is the Perl subroutine

     sub AddSubtract
     {
        my($a, $b) = @_ ;
        ($a+$b, $a-$b) ;
     }

   and this is the C function

     static void
     call_AddSubtract(a, b)
     int a ;
     int b ;
     {
         dSP ;
         int count ;

     ENTER ;
     SAVETMPS;

     PUSHMARK(SP) ;
     XPUSHs(sv_2mortal(newSViv(a)));
     XPUSHs(sv_2mortal(newSViv(b)));
     PUTBACK ;

     count = call_pv("AddSubtract", G_ARRAY);

     SPAGAIN ;

     if (count != 2)
         croak("Big trouble\n") ;

     printf ("%d - %d = %d\n", a, b, POPi) ;
     printf ("%d + %d = %d\n", a, b, POPi) ;

     PUTBACK ;
     FREETMPS ;
     LEAVE ;
         }

   If *call_AddSubtract* is called like this

     call_AddSubtract(7, 4) ;

   then here is the output

     7 - 4 = 3
     7 + 4 = 11

   Notes

  1. We wanted array context, so G_ARRAY was used.

  2. Not surprisingly POPi is used twice this time because we were
     retrieving 2 values from the stack. The important thing to note is
     that when using the `POP*' macros they come off the stack in reverse
     order.


Returning a list in a scalar context
------------------------------------

   Say the Perl subroutine in the previous section was called in a scalar
context, like this

     static void
     call_AddSubScalar(a, b)
     int a ;
     int b ;
     {
         dSP ;
         int count ;
         int i ;

     ENTER ;
     SAVETMPS;

     PUSHMARK(SP) ;
     XPUSHs(sv_2mortal(newSViv(a)));
     XPUSHs(sv_2mortal(newSViv(b)));
     PUTBACK ;

     count = call_pv("AddSubtract", G_SCALAR);

     SPAGAIN ;

     printf ("Items Returned = %d\n", count) ;

     for (i = 1 ; i <= count ; ++i)
         printf ("Value %d = %d\n", i, POPi) ;

     PUTBACK ;
     FREETMPS ;
     LEAVE ;
         }

   The other modification made is that *call_AddSubScalar* will print the
number of items returned from the Perl subroutine and their value (for
simplicity it assumes that they are integer).  So if *call_AddSubScalar*
is called

     call_AddSubScalar(7, 4) ;

   then the output will be

     Items Returned = 1
     Value 1 = 3

   In this case the main point to note is that only the last item in the
list is returned from the subroutine, *AddSubtract* actually made it back
to *call_AddSubScalar*.

Returning Data from Perl via the parameter list
-----------------------------------------------

   It is also possible to return values directly via the parameter list -
whether it is actually desirable to do it is another matter entirely.

   The Perl subroutine, *Inc*, below takes 2 parameters and increments
each directly.

     sub Inc
     {
         ++ $_[0] ;
         ++ $_[1] ;
     }

   and here is a C function to call it.

     static void
     call_Inc(a, b)
     int a ;
     int b ;
     {
         dSP ;
         int count ;
         SV * sva ;
         SV * svb ;

     ENTER ;
     SAVETMPS;

     sva = sv_2mortal(newSViv(a)) ;
     svb = sv_2mortal(newSViv(b)) ;

     PUSHMARK(SP) ;
     XPUSHs(sva);
     XPUSHs(svb);
     PUTBACK ;

     count = call_pv("Inc", G_DISCARD);

     if (count != 0)
         croak ("call_Inc: expected 0 values from 'Inc', got %d\n",
                count) ;

     printf ("%d + 1 = %d\n", a, SvIV(sva)) ;
     printf ("%d + 1 = %d\n", b, SvIV(svb)) ;

     FREETMPS ;
             LEAVE ;
         }

   To be able to access the two parameters that were pushed onto the stack
after they return from call_pv it is necessary to make a note of their
addresses-thus the two variables `sva' and `svb'.

   The reason this is necessary is that the area of the Perl stack which
held them will very likely have been overwritten by something else by the
time control returns from call_pv.

Using G_EVAL
------------

   Now an example using G_EVAL. Below is a Perl subroutine which computes
the difference of its 2 parameters. If this would result in a negative
result, the subroutine calls die.

     sub Subtract
     {
         my ($a, $b) = @_ ;

     die "death can be fatal\n" if $a < $b ;

     $a - $b ;
         }

   and some C to call it

     static void
     call_Subtract(a, b)
     int a ;
     int b ;
     {
         dSP ;
         int count ;

     ENTER ;
     SAVETMPS;

     PUSHMARK(SP) ;
     XPUSHs(sv_2mortal(newSViv(a)));
     XPUSHs(sv_2mortal(newSViv(b)));
     PUTBACK ;

     count = call_pv("Subtract", G_EVAL|G_SCALAR);

     SPAGAIN ;

     /* Check the eval first */
     if (SvTRUE(ERRSV))
     {
     	    STRLEN n_a;
         printf ("Uh oh - %s\n", SvPV(ERRSV, n_a)) ;
         POPs ;
     }
     else
     {
         if (count != 1)
            croak("call_Subtract: wanted 1 value from 'Subtract', got %d\n",
                     count) ;

     printf ("%d - %d = %d\n", a, b, POPi) ;
             }

     PUTBACK ;
     FREETMPS ;
     LEAVE ;
         }

   If *call_Subtract* is called thus

     call_Subtract(4, 5)

   the following will be printed

     Uh oh - death can be fatal

   Notes

  1. We want to be able to catch the die so we have used the G_EVAL flag.
     Not specifying this flag would mean that the program would terminate
     immediately at the die statement in the subroutine *Subtract*.

  2. The code

          if (SvTRUE(ERRSV))
          {
          	STRLEN n_a;
              printf ("Uh oh - %s\n", SvPV(ERRSV, n_a)) ;
              POPs ;
          }

     is the direct equivalent of this bit of Perl

          print "Uh oh - $@\n" if $@ ;

     `PL_errgv' is a perl global of type `GV *' that points to the symbol
     table entry containing the error.  `ERRSV' therefore refers to the C
     equivalent of `$@'.

  3. Note that the stack is popped using POPs in the block where
     `SvTRUE(ERRSV)' is true.  This is necessary because whenever a
     *call_** function invoked with G_EVAL|G_SCALAR returns an error, the
     top of the stack holds the value undef. Because we want the program
     to continue after detecting this error, it is essential that the
     stack is tidied up by removing the undef.


Using G_KEEPERR
---------------

   Consider this rather facetious example, where we have used an XS
version of the call_Subtract example above inside a destructor:

     package Foo;
     sub new { bless {}, $_[0] }
     sub Subtract {
         my($a,$b) = @_;
         die "death can be fatal" if $a < $b ;
         $a - $b;
     }
     sub DESTROY { call_Subtract(5, 4); }
     sub foo { die "foo dies"; }

     package main;
     eval { Foo->new->foo };
     print "Saw: $@" if $@;             # should be, but isn't

   This example will fail to recognize that an error occurred inside the
`eval {}'.  Here's why: the call_Subtract code got executed while perl was
cleaning up temporaries when exiting the eval block, and because
call_Subtract is implemented with call_pv using the G_EVAL flag, it
promptly reset `$@'.  This results in the failure of the outermost test
for `$@', and thereby the failure of the error trap.

   Appending the G_KEEPERR flag, so that the call_pv call in call_Subtract
reads:

     count = call_pv("Subtract", G_EVAL|G_SCALAR|G_KEEPERR);

   will preserve the error and restore reliable error handling.

Using call_sv
-------------

   In all the previous examples I have 'hard-wired' the name of the Perl
subroutine to be called from C.  Most of the time though, it is more
convenient to be able to specify the name of the Perl subroutine from
within the Perl script.

   Consider the Perl code below

     sub fred
     {
         print "Hello there\n" ;
     }

     CallSubPV("fred") ;

   Here is a snippet of XSUB which defines *CallSubPV*.

     void
     CallSubPV(name)
     	char *	name
     	CODE:
     	PUSHMARK(SP) ;
     	call_pv(name, G_DISCARD|G_NOARGS) ;

   That is fine as far as it goes. The thing is, the Perl subroutine can
be specified as only a string.  For Perl 4 this was adequate, but Perl 5
allows references to subroutines and anonymous subroutines.  This is where
call_sv is useful.

   The code below for *CallSubSV* is identical to *CallSubPV* except that
the name parameter is now defined as an SV* and we use call_sv instead of
call_pv.

     void
     CallSubSV(name)
     	SV *	name
     	CODE:
     	PUSHMARK(SP) ;
     	call_sv(name, G_DISCARD|G_NOARGS) ;

   Because we are using an SV to call *fred* the following can all be used

     CallSubSV("fred") ;
     CallSubSV(\&fred) ;
     $ref = \&fred ;
     CallSubSV($ref) ;
     CallSubSV( sub { print "Hello there\n" } ) ;

   As you can see, call_sv gives you much greater flexibility in how you
can specify the Perl subroutine.

   You should note that if it is necessary to store the SV (name in the
example above) which corresponds to the Perl subroutine so that it can be
used later in the program, it not enough just to store a copy of the
pointer to the SV. Say the code above had been like this

     static SV * rememberSub ;

     void
     SaveSub1(name)
     	SV *	name
     	CODE:
     	rememberSub = name ;

     void
     CallSavedSub1()
     	CODE:
     	PUSHMARK(SP) ;
     	call_sv(rememberSub, G_DISCARD|G_NOARGS) ;

   The reason this is wrong is that by the time you come to use the
pointer `rememberSub' in `CallSavedSub1', it may or may not still refer to
the Perl subroutine that was recorded in `SaveSub1'.  This is particularly
true for these cases

     SaveSub1(\&fred) ;
     CallSavedSub1() ;

     SaveSub1( sub { print "Hello there\n" } ) ;
     CallSavedSub1() ;

   By the time each of the `SaveSub1' statements above have been executed,
the SV*s which corresponded to the parameters will no longer exist.
Expect an error message from Perl of the form

     Can't use an undefined value as a subroutine reference at ...

   for each of the `CallSavedSub1' lines.

   Similarly, with this code

     $ref = \&fred ;
     SaveSub1($ref) ;
     $ref = 47 ;
     CallSavedSub1() ;

   you can expect one of these messages (which you actually get is
dependent on the version of Perl you are using)

     Not a CODE reference at ...
     Undefined subroutine &main::47 called ...

   The variable $ref may have referred to the subroutine `fred' whenever
the call to `SaveSub1' was made but by the time `CallSavedSub1' gets
called it now holds the number 47. Because we saved only a pointer to the
original SV in `SaveSub1', any changes to $ref will be tracked by the
pointer `rememberSub'. This means that whenever `CallSavedSub1' gets
called, it will attempt to execute the code which is referenced by the SV*
`rememberSub'.  In this case though, it now refers to the integer 47, so
expect Perl to complain loudly.

   A similar but more subtle problem is illustrated with this code

     $ref = \&fred ;
     SaveSub1($ref) ;
     $ref = \&joe ;
     CallSavedSub1() ;

   This time whenever `CallSavedSub1' get called it will execute the Perl
subroutine `joe' (assuming it exists) rather than `fred' as was originally
requested in the call to `SaveSub1'.

   To get around these problems it is necessary to take a full copy of the
SV.  The code below shows `SaveSub2' modified to do that

     static SV * keepSub = (SV*)NULL ;

     void
     SaveSub2(name)
         SV *	name
     	CODE:
      	/* Take a copy of the callback */
     	if (keepSub == (SV*)NULL)
     	    /* First time, so create a new SV */
     	    keepSub = newSVsv(name) ;
     	else
     	    /* Been here before, so overwrite */
     	    SvSetSV(keepSub, name) ;

     void
     CallSavedSub2()
     	CODE:
     	PUSHMARK(SP) ;
     	call_sv(keepSub, G_DISCARD|G_NOARGS) ;

   To avoid creating a new SV every time `SaveSub2' is called, the
function first checks to see if it has been called before.  If not, then
space for a new SV is allocated and the reference to the Perl subroutine,
name is copied to the variable `keepSub' in one operation using newSVsv.
Thereafter, whenever `SaveSub2' is called the existing SV, `keepSub', is
overwritten with the new value using SvSetSV.

Using call_argv
---------------

   Here is a Perl subroutine which prints whatever parameters are passed
to it.

     sub PrintList
     {
         my(@list) = @_ ;

     foreach (@list) { print "$_\n" }
         }

   and here is an example of call_argv which will call *PrintList*.

     static char * words[] = {"alpha", "beta", "gamma", "delta", NULL} ;

     static void
     call_PrintList()
     {
         dSP ;

     call_argv("PrintList", G_DISCARD, words) ;
         }

   Note that it is not necessary to call PUSHMARK in this instance.  This
is because call_argv will do it for you.

Using call_method
-----------------

   Consider the following Perl code

     {
         package Mine ;

     sub new
     {
         my($type) = shift ;
         bless [@_]
     }

     sub Display
     {
         my ($self, $index) = @_ ;
         print "$index: $$self[$index]\n" ;
     }

     sub PrintID
     {
         my($class) = @_ ;
         print "This is Class $class version 1.0\n" ;
     }
         }

   It implements just a very simple class to manage an array.  Apart from
the constructor, new, it declares methods, one static and one virtual. The
static method, `PrintID', prints out simply the class name and a version
number. The virtual method, Display, prints out a single element of the
array.  Here is an all Perl example of using it.

     $a = new Mine ('red', 'green', 'blue') ;
     $a->Display(1) ;
     PrintID Mine;

   will print

     1: green
     This is Class Mine version 1.0

   Calling a Perl method from C is fairly straightforward. The following
things are required

   * a reference to the object for a virtual method or the name of the
     class for a static method.

   * the name of the method.

   * any other parameters specific to the method.

   Here is a simple XSUB which illustrates the mechanics of calling both
the `PrintID' and Display methods from C.

     void
     call_Method(ref, method, index)
         SV *	ref
         char *	method
         int		index
         CODE:
         PUSHMARK(SP);
         XPUSHs(ref);
         XPUSHs(sv_2mortal(newSViv(index))) ;
         PUTBACK;

     call_method(method, G_DISCARD) ;

     void
     call_PrintID(class, method)
         char *	class
         char *	method
         CODE:
         PUSHMARK(SP);
         XPUSHs(sv_2mortal(newSVpv(class, 0))) ;
         PUTBACK;

     call_method(method, G_DISCARD) ;

   So the methods `PrintID' and Display can be invoked like this

     $a = new Mine ('red', 'green', 'blue') ;
     call_Method($a, 'Display', 1) ;
     call_PrintID('Mine', 'PrintID') ;

   The only thing to note is that in both the static and virtual methods,
the method name is not passed via the stack-it is used as the first
parameter to call_method.

Using GIMME_V
-------------

   Here is a trivial XSUB which prints the context in which it is
currently executing.

     void
     PrintContext()
         CODE:
         I32 gimme = GIMME_V;
         if (gimme == G_VOID)
             printf ("Context is Void\n") ;
         else if (gimme == G_SCALAR)
             printf ("Context is Scalar\n") ;
         else
             printf ("Context is Array\n") ;

   and here is some Perl to test it

     PrintContext ;
     $a = PrintContext ;
     @a = PrintContext ;

   The output from that will be

     Context is Void
     Context is Scalar
     Context is Array

Using Perl to dispose of temporaries
------------------------------------

   In the examples given to date, any temporaries created in the callback
(i.e., parameters passed on the stack to the *call_** function or values
returned via the stack) have been freed by one of these methods

   * specifying the G_DISCARD flag with *call_**.

   * explicitly disposed of using the ENTER/SAVETMPS - FREETMPS/LEAVE
     pairing.

   There is another method which can be used, namely letting Perl do it
for you automatically whenever it regains control after the callback has
terminated.  This is done by simply not using the

     ENTER ;
     SAVETMPS ;
     ...
     FREETMPS ;
     LEAVE ;

   sequence in the callback (and not, of course, specifying the G_DISCARD
flag).

   If you are going to use this method you have to be aware of a possible
memory leak which can arise under very specific circumstances.  To explain
these circumstances you need to know a bit about the flow of control
between Perl and the callback routine.

   The examples given at the start of the document (an error handler and
an event driven program) are typical of the two main sorts of flow control
that you are likely to encounter with callbacks.  There is a very
important distinction between them, so pay attention.

   In the first example, an error handler, the flow of control could be as
follows.  You have created an interface to an external library.  Control
can reach the external library like this

     perl --> XSUB --> external library

   Whilst control is in the library, an error condition occurs. You have
previously set up a Perl callback to handle this situation, so it will get
executed. Once the callback has finished, control will drop back to Perl
again.  Here is what the flow of control will be like in that situation

     perl --> XSUB --> external library
                       ...
                       error occurs
                       ...
                       external library --> call_* --> perl
                                                           |
     perl <-- XSUB <-- external library <-- call_* <----+

   After processing of the error using *call_** is completed, control
reverts back to Perl more or less immediately.

   In the diagram, the further right you go the more deeply nested the
scope is.  It is only when control is back with perl on the extreme left
of the diagram that you will have dropped back to the enclosing scope and
any temporaries you have left hanging around will be freed.

   In the second example, an event driven program, the flow of control
will be more like this

     perl --> XSUB --> event handler
                       ...
                       event handler --> call_* --> perl
                                                        |
                       event handler <-- call_* <----+
                       ...
                       event handler --> call_* --> perl
                                                        |
                       event handler <-- call_* <----+
                       ...
                       event handler --> call_* --> perl
                                                        |
                       event handler <-- call_* <----+

   In this case the flow of control can consist of only the repeated
sequence

     event handler --> call_* --> perl

   for practically the complete duration of the program.  This means that
control may never drop back to the surrounding scope in Perl at the
extreme left.

   So what is the big problem? Well, if you are expecting Perl to tidy up
those temporaries for you, you might be in for a long wait.  For Perl to
dispose of your temporaries, control must drop back to the enclosing scope
at some stage.  In the event driven scenario that may never happen.  This
means that as time goes on, your program will create more and more
temporaries, none of which will ever be freed. As each of these
temporaries consumes some memory your program will eventually consume all
the available memory in your system-kapow!

   So here is the bottom line-if you are sure that control will revert
back to the enclosing Perl scope fairly quickly after the end of your
callback, then it isn't absolutely necessary to dispose explicitly of any
temporaries you may have created. Mind you, if you are at all uncertain
about what to do, it doesn't do any harm to tidy up anyway.

Strategies for storing Callback Context Information
---------------------------------------------------

   Potentially one of the trickiest problems to overcome when designing a
callback interface can be figuring out how to store the mapping between
the C callback function and the Perl equivalent.

   To help understand why this can be a real problem first consider how a
callback is set up in an all C environment.  Typically a C API will
provide a function to register a callback.  This will expect a pointer to
a function as one of its parameters.  Below is a call to a hypothetical
function `register_fatal' which registers the C function to get called
when a fatal error occurs.

     register_fatal(cb1) ;

   The single parameter `cb1' is a pointer to a function, so you must have
defined `cb1' in your code, say something like this

     static void
     cb1()
     {
         printf ("Fatal Error\n") ;
         exit(1) ;
     }

   Now change that to call a Perl subroutine instead

     static SV * callback = (SV*)NULL;

     static void
     cb1()
     {
         dSP ;

     PUSHMARK(SP) ;

     /* Call the Perl sub to process the callback */
     call_sv(callback, G_DISCARD) ;
         }

     void
     register_fatal(fn)
         SV *	fn
         CODE:
         /* Remember the Perl sub */
         if (callback == (SV*)NULL)
             callback = newSVsv(fn) ;
         else
             SvSetSV(callback, fn) ;

     /* register the callback with the external library */
     register_fatal(cb1) ;

   where the Perl equivalent of `register_fatal' and the callback it
registers, `pcb1', might look like this

     # Register the sub pcb1
     register_fatal(\&pcb1) ;

     sub pcb1
     {
         die "I'm dying...\n" ;
     }

   The mapping between the C callback and the Perl equivalent is stored in
the global variable callback.

   This will be adequate if you ever need to have only one callback
registered at any time. An example could be an error handler like the code
sketched out above. Remember though, repeated calls to `register_fatal'
will replace the previously registered callback function with the new one.

   Say for example you want to interface to a library which allows
asynchronous file i/o.  In this case you may be able to register a
callback whenever a read operation has completed. To be of any use we want
to be able to call separate Perl subroutines for each file that is opened.
As it stands, the error handler example above would not be adequate as it
allows only a single callback to be defined at any time. What we require
is a means of storing the mapping between the opened file and the Perl
subroutine we want to be called for that file.

   Say the i/o library has a function `asynch_read' which associates a C
function `ProcessRead' with a file handle fh-this assumes that it has also
provided some routine to open the file and so obtain the file handle.

     asynch_read(fh, ProcessRead)

   This may expect the C *ProcessRead* function of this form

     void
     ProcessRead(fh, buffer)
     int	fh ;
     char *	buffer ;
     {
          ...
     }

   To provide a Perl interface to this library we need to be able to map
between the fh parameter and the Perl subroutine we want called.  A hash
is a convenient mechanism for storing this mapping.  The code below shows
a possible implementation

     static HV * Mapping = (HV*)NULL ;

     void
     asynch_read(fh, callback)
         int	fh
         SV *	callback
         CODE:
         /* If the hash doesn't already exist, create it */
         if (Mapping == (HV*)NULL)
             Mapping = newHV() ;

     /* Save the fh -> callback mapping */
     hv_store(Mapping, (char*)&fh, sizeof(fh), newSVsv(callback), 0) ;

     /* Register with the C Library */
     asynch_read(fh, asynch_read_if) ;

   and `asynch_read_if' could look like this

     static void
     asynch_read_if(fh, buffer)
     int	fh ;
     char *	buffer ;
     {
         dSP ;
         SV ** sv ;

     /* Get the callback associated with fh */
     sv =  hv_fetch(Mapping, (char*)&fh , sizeof(fh), FALSE) ;
     if (sv == (SV**)NULL)
         croak("Internal error...\n") ;

     PUSHMARK(SP) ;
     XPUSHs(sv_2mortal(newSViv(fh))) ;
     XPUSHs(sv_2mortal(newSVpv(buffer, 0))) ;
     PUTBACK ;

     /* Call the Perl sub */
     call_sv(*sv, G_DISCARD) ;
         }

   For completeness, here is `asynch_close'.  This shows how to remove the
entry from the hash `Mapping'.

     void
     asynch_close(fh)
         int	fh
         CODE:
         /* Remove the entry from the hash */
         (void) hv_delete(Mapping, (char*)&fh, sizeof(fh), G_DISCARD) ;

     /* Now call the real asynch_close */
     asynch_close(fh) ;

   So the Perl interface would look like this

     sub callback1
     {
         my($handle, $buffer) = @_ ;
     }

     # Register the Perl callback
     asynch_read($fh, \&callback1) ;

     asynch_close($fh) ;

   The mapping between the C callback and Perl is stored in the global
hash `Mapping' this time. Using a hash has the distinct advantage that it
allows an unlimited number of callbacks to be registered.

   What if the interface provided by the C callback doesn't contain a
parameter which allows the file handle to Perl subroutine mapping?  Say in
the asynchronous i/o package, the callback function gets passed only the
buffer parameter like this

     void
     ProcessRead(buffer)
     char *	buffer ;
     {
         ...
     }

   Without the file handle there is no straightforward way to map from the
C callback to the Perl subroutine.

   In this case a possible way around this problem is to predefine a
series of C functions to act as the interface to Perl, thus

     #define MAX_CB		3
     #define NULL_HANDLE	-1
     typedef void (*FnMap)() ;

     struct MapStruct {
         FnMap    Function ;
         SV *     PerlSub ;
         int      Handle ;
       } ;

     static void  fn1() ;
     static void  fn2() ;
     static void  fn3() ;

     static struct MapStruct Map [MAX_CB] =
         {
             { fn1, NULL, NULL_HANDLE },
             { fn2, NULL, NULL_HANDLE },
             { fn3, NULL, NULL_HANDLE }
         } ;

     static void
     Pcb(index, buffer)
     int index ;
     char * buffer ;
     {
         dSP ;

     PUSHMARK(SP) ;
     XPUSHs(sv_2mortal(newSVpv(buffer, 0))) ;
     PUTBACK ;

     /* Call the Perl sub */
     call_sv(Map[index].PerlSub, G_DISCARD) ;
         }

     static void
     fn1(buffer)
     char * buffer ;
     {
         Pcb(0, buffer) ;
     }

     static void
     fn2(buffer)
     char * buffer ;
     {
         Pcb(1, buffer) ;
     }

     static void
     fn3(buffer)
     char * buffer ;
     {
         Pcb(2, buffer) ;
     }

     void
     array_asynch_read(fh, callback)
         int		fh
         SV *	callback
         CODE:
         int index ;
         int null_index = MAX_CB ;

     /* Find the same handle or an empty entry */
     for (index = 0 ; index < MAX_CB ; ++index)
     {
         if (Map[index].Handle == fh)
             break ;

     if (Map[index].Handle == NULL_HANDLE)
         null_index = index ;
             }

     if (index == MAX_CB && null_index == MAX_CB)
         croak ("Too many callback functions registered\n") ;

     if (index == MAX_CB)
         index = null_index ;

     /* Save the file handle */
     Map[index].Handle = fh ;

     /* Remember the Perl sub */
     if (Map[index].PerlSub == (SV*)NULL)
         Map[index].PerlSub = newSVsv(callback) ;
     else
         SvSetSV(Map[index].PerlSub, callback) ;

     asynch_read(fh, Map[index].Function) ;

     void
     array_asynch_close(fh)
         int	fh
         CODE:
         int index ;

     /* Find the file handle */
     for (index = 0; index < MAX_CB ; ++ index)
         if (Map[index].Handle == fh)
             break ;

     if (index == MAX_CB)
         croak ("could not close fh %d\n", fh) ;

     Map[index].Handle = NULL_HANDLE ;
     SvREFCNT_dec(Map[index].PerlSub) ;
     Map[index].PerlSub = (SV*)NULL ;

     asynch_close(fh) ;

   In this case the functions `fn1', `fn2', and `fn3' are used to remember
the Perl subroutine to be called. Each of the functions holds a separate
hard-wired index which is used in the function `Pcb' to access the Map
array and actually call the Perl subroutine.

   There are some obvious disadvantages with this technique.

   Firstly, the code is considerably more complex than with the previous
example.

   Secondly, there is a hard-wired limit (in this case 3) to the number of
callbacks that can exist simultaneously. The only way to increase the
limit is by modifying the code to add more functions and then recompiling.
None the less, as long as the number of functions is chosen with some
care, it is still a workable solution and in some cases is the only one
available.

   To summarize, here are a number of possible methods for you to consider
for storing the mapping between C and the Perl callback

  1. Ignore the problem - Allow only 1 callback For a lot of situations,
     like interfacing to an error handler, this may be a perfectly
     adequate solution.

  2. Create a sequence of callbacks - hard wired limit If it is impossible
     to tell from the parameters passed back from the C callback what the
     context is, then you may need to create a sequence of C callback
     interface functions, and store pointers to each in an array.

  3. Use a parameter to map to the Perl callback A hash is an ideal
     mechanism to store the mapping between C and Perl.


Alternate Stack Manipulation
----------------------------

   Although I have made use of only the `POP*' macros to access values
returned from Perl subroutines, it is also possible to bypass these macros
and read the stack using the ST macro (See *Note Perlxs: perlxs, for a
full description of the ST macro).

   Most of the time the `POP*' macros should be adequate, the main problem
with them is that they force you to process the returned values in
sequence. This may not be the most suitable way to process the values in
some cases. What we want is to be able to access the stack in a random
order. The ST macro as used when coding an XSUB is ideal for this purpose.

   The code below is the example given in the section *Returning a list of
values* recoded to use ST instead of `POP*'.

     static void
     call_AddSubtract2(a, b)
     int a ;
     int b ;
     {
         dSP ;
         I32 ax ;
         int count ;

     ENTER ;
     SAVETMPS;

     PUSHMARK(SP) ;
     XPUSHs(sv_2mortal(newSViv(a)));
     XPUSHs(sv_2mortal(newSViv(b)));
     PUTBACK ;

     count = call_pv("AddSubtract", G_ARRAY);

     SPAGAIN ;
     SP -= count ;
     ax = (SP - PL_stack_base) + 1 ;

     if (count != 2)
         croak("Big trouble\n") ;

     printf ("%d + %d = %d\n", a, b, SvIV(ST(0))) ;
     printf ("%d - %d = %d\n", a, b, SvIV(ST(1))) ;

     PUTBACK ;
     FREETMPS ;
     LEAVE ;
         }

   Notes

  1. Notice that it was necessary to define the variable `ax'.  This is
     because the ST macro expects it to exist.  If we were in an XSUB it
     would not be necessary to define `ax' as it is already defined for
     you.

  2. The code

          SPAGAIN ;
          SP -= count ;
          ax = (SP - PL_stack_base) + 1 ;

     sets the stack up so that we can use the ST macro.

  3. Unlike the original coding of this example, the returned values are
     not accessed in reverse order.  So `ST(0)' refers to the first value
     returned by the Perl subroutine and `ST(count-1)' refers to the last.


Creating and calling an anonymous subroutine in C
-------------------------------------------------

   As we've already shown, call_sv can be used to invoke an anonymous
subroutine.  However, our example showed a Perl script invoking an XSUB to
perform this operation.  Let's see how it can be done inside our C code:

     ...

     SV *cvrv = eval_pv("sub { print 'You will not find me cluttering any namespace!' }", TRUE);

     ...

     call_sv(cvrv, G_VOID|G_NOARGS);

   eval_pv is used to compile the anonymous subroutine, which will be the
return value as well (read more about eval_pv in `eval_pv', *Note Perlapi:
perlapi,).  Once this code reference is in hand, it can be mixed in with
all the previous examples we've shown.

SEE ALSO
========

   *Note Perlxs: perlxs,, *Note Perlguts: perlguts,, *Note Perlembed:
perlembed,

AUTHOR
======

   Paul Marquess

   Special thanks to the following people who assisted in the creation of
the document.

   Jeff Okamoto, Tim Bunce, Nick Gianniotis, Steve Kelem, Gurusamy Sarathy
and Larry Wall.

DATE
====

   Version 1.3, 14th Apr 1997


