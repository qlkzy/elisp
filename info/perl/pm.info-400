This is Info file pm.info, produced by Makeinfo version 1.68 from the
input file bigpm.texi.


File: pm.info,  Node: Tk/Workspace,  Next: Tk/X,  Prev: Tk/Wm,  Up: Module List

Persistent, multi-purpose text processor.   (File browser, shell, editor) script.   Requires Perl/Tk; optionally Net::FTP.
**************************************************************************************************************************

NAME
====

     Workspace.pm--Persistent, multi-purpose text processor.
     (File browser, shell, editor) script.
     Requires Perl/Tk; optionally Net::FTP.

SYNOPSIS
========

     # Create a workspace from the shell prompt:

     mkws "workspace"

     # Open an existing workspace from the shell prompt:

     workspace [-background | -bg <color>] [-textbackground <color>]
               [-foreground | -fg <color>] [-textforeground <color>]
               [-font | -fn <fontdesc>] [-importfile <filename>]
               [-exportfile <filename>] [-dump] [-xrm <pattern>]
               [-class <Classname>] [-display | -screen <dpyname>]
               [-title <workspacename>] [-help] [-iconic]
               [-motif] [-synchronous] [-write] [-quit]

     # Open from a Perl script:

     use Tk;
     use Tk::Workspace;

     Tk::Workspace::open(Tk::Workspace::create("workspace"));

     # Create workspace object within a Perl script:

     $w = Tk::Workspace -> new( x => 100,
                                y => 100,
                                width => 300,
                                height => 250,
     				 textfont => "*-courier-medium-r-*-*-12-*",
                                foreground => 'white',
                                background => 'black',
                                menuvisible => 'true',
                                scroll => 'se',
                                insert => '1.0',
                                menubarvisible => 'True',
                                text => 'Text to be inserted',
                                name => 'workspace' );

DESCRIPTION
===========

   Workspace uses the Tk::TextUndo widget to create an embedded Perl text
editor.  The resulting file can be run as a standalone program.

OPTIONS
=======

   In normal use, common X toolkit options apply to non-text areas, like
the window border and menus. Text resources can also be specified, but
they often have a lower priority than the Workspace's saved values and
user selections.  Refer to the section: X RESOURCES, below.

   Command line options are described more fully in the Tk::CmdLine manual
page.

X Toolkit Options
-----------------

-foreground | -fg <color>
     Foreground color of widgets.  -fg is a synonym for -foreground.

-background | -bg <color>
     Background color of widgets.  -bg is a synonym for -background.

-class <classname>
     Name of X Window resource class.  In normal use, this is overriden by
     the Workspace name.

-display | -screen <displayname>
     Name of X display.  -screen is a synonym for -display.

-font | -fn <fontname>
     Font descriptor for widgets.  -fn is a synonym for -font.

-iconic
     Start with the window iconfied.

-motif
     Adhere as closely as possible to Motif look-and-feel standards.

-name <resourcename>
     Specifies the name under which X resources can be found.  Refer to
     the section: X RESOURCES, below.

-synchronous
     Requests should be sent to the X server synchronously.  Mainly useful
     for debugging.

-title <windowtitle>
     Title of the window.  This is overridden by the Workspace.

-xrm <resourcestring>
     Specifies a resource pattern to override defaults.  Refer to the
     section: X RESOURCES, below.

Workspace Specific Options
--------------------------

-textforeground <color>
     Set the color of the text foreground.  Overrides the Workspace's own
     setting.

-textbackground <color>
     Set the color of the text background.  Overrides the Workspace's own
     setting.

-importfile <filename>
     At startup, import <filename> into the workspace at the cursor
     position.

-exportfile <filename>
     Export the text of the workspace to <filename>.

-title <workspacename>
     Set the window title and workspace name.

-write
     Save the workspace in its current state.  If the window is not yet
     drawn, use the default geometry of 565x351+100+100 and insertion
     cursor index of 1.0.

-dump
     Print the Workspace text to standard output.

-quit
     Close the Workspace without saving.

X RESOURCES
===========

   In normal use, a workspace's Xresources begin with its name in
lower-case letters.

     myworkspace*borderwidth:       3
     myworkspace*relief:            sunken
     myworkspace*takefocus:         true

   Top-level options are described in the Tk::Toplevel and Tk::options
manual pages.

   In addition, several subwidgets have standard names, so properties can
easily apply to all Workspaces:

     Widget             Resource Name
     ------             -------------
     Text Editor        workspaceText
     Menu Bar Menus     workspaceMenuBar
     Popup Menus        workspacePopupMenu

   Examples of resource settings that apply to all Workspaces:

     *workspaceText*insertwidth:         5
     *workspaceText*spacing1:            20
     *workspaceMenuBar*foreground:       white
     *workspaceMenuBar*background:       darkslategray
     *workspacePopupMenu*foreground:     white
     *workspacePopupMenu*background:     mediumgray

   Complete descriptions of the options that each widget recognizes are
given in the Tk::Text, Tk::TextUndo, and Tk::Menu manual pages.

MENU FUNCTIONS
==============

   A workspace contains a menu bar with File, Edit, Options, and Help
menus.

   The menus also pop up by pressing the right mouse button (Button-3)
over the text area, whether the menu bar is visible or not.

   The menu functions are provided by the Tk::Workspace, Tk::TextUndo,
Tk::Text, and Tk::Widget modules.

File Menu
---------

   Import Text - Insert the contents of a selected text file at the
insertion point.

   Export Text - Write the contents of the workspace to a text file.

   The Import and Export Text functions allow saving to files on remote
hosts using FTP, if the Perl Net::FTP module is installed.  Please refer
to the file INSTALL in the distribution archive and the
Tk::RemoteFileSelect manual page.

   System Command - Prompts for the name of a command to be executed by
the shell, /bin/sh.  The output is inserted into the workspace.

   For example, to insert a manual page into the workspace, enter:

     man <programname> | colcrt - | col -b

   Shell - Starts an interactive shell.  The prompt is the PS1 prompt of
the environment where the workspace was started.  At present the workspace
shell recognizes only a subset of the bash prompt variables, and does not
implement command history or setting of environment variables in the
subshell.

   Due to I/O blocking, results can be unpredictable, especially if the
called program causes an eof condition on STDERR.  For details refer to
the Tk::Shell POD documentation.

   Refer to the bash(1) manual page for further information.

   Typing 'exit' leaves the shell and returns the workspace to normal text
editing mode.

   Filter - Specify a filter and output destination for the text in the
Workspace.  A "filter" is defined as a program that takes its input from
standard input, STDIN, and sends its output to standard output, STDOUT.
By default, output is inserted into the Workspace at the cursor position.
Other destinations are:

     - File--Write output to the file name specified.
     - Terminal--Write output to the Workspace's STDOUT or to a
       character device specified as the output file.
     - New Workspace--Write output to a new Workspace with the
       name specified.

   If the Perl Net::FTP module is installed, filter output can be sent to
a remote host, using the pathname syntax, hostname:/filepathname .

   Save - Save the workspace to disk.

   Quit - Close the workspace window, optionally saving to disk.

   Workspaces are saved with file mode permissions 0700 (read, write, and
execute for the owner of the file).

Edit Menu
---------

   Undo - Reverse the next previous change to the text.

   Cut - Delete the selected text and place it on the X clipboard.

   Copy - Copy the selected text to the X clipboard.

   Paste - Insert text from the X clipboard at the insertion point.

   Evaluate Selection - Interpret the selected text as Perl code.

   Search & Replace - Open a dialog box to enter search and/or replace
strings.  Users can select options for exact upper/lower case matching,
regular expression searches, forward or backward searches, and no query on
replace.  If "Replace without Asking" is selected, then all search matches
will be replaced.  The default is to prompt before the replacement.
Replacements for regular expression matches are not supported.

   Goto Line - Go to the line entered by the user.

   Which Line - Report the line and column position of the insertion point.

Options Menu
------------

   Wrap - Select how the text should wrap at the right margin.

   Scroll Bars - Select from scroll bars at right or left, top or bottom of
the text area.

   Encoding - Select the encoding to use when exporting text.  Does not
affect the Workspace text itself.  When importing, the text is mapped into
ISO-8859-1, regardless of encoding.  This option is only available if the
UTF16 libraries are installed on the system.  If they aren't, then the
Workspace uses the default ISO 8859-1 encoding.  Refer to the file INSTALL
in the distribution archive for information about the required libraries.

   Show/Hide Menubar - Toggle whether the menubar is visible.  A popup
version of the menus is always available by pressing the right mouse
button (Button 3) over the text area.

   Color Editor - Pops up a Color Editor window.  You can select the text
attribute that you want to change from the Colors -> Color Attributes
menu.  If your system libraries have an rgb.txt file, a list of the
available colors is displayed on the left-hand side of the window.
Double-clicking on a color name, or selecting its color space parameters
from the sliders in the middle of the ColorEditor, displays that color in
the swatch on the right-hand side of the window.  Pressing the Apply...
button at the bottom of the Color Editor applies the color selection to
the text.  The most useful attributes for Workspace text are foreground,
background, and insertBackground.

   Text Font - Select text font from list of system fonts.

Help Menu
---------

   About - Report name of workspace and modification time, and version of
Workspace.pm library.

   Help - Display the Workspace.pm POD documentation in a text window
formatted by pod2text.

KEY BINDINGS
============

   For further information, please refer to the Tk::Text and Tk::bind man
pages.

     Alt-Q                 Quit, Optionally Saving Text
     Alt-S                 Save Workspace to Disk
     Alt-I                 Import Text
     Alt-W                 Export Text
     Alt-U                 Undo
     Alt-X                 Copy Selection to Clipboard and Delete
     Alt-C                 Copy Selection to Clipboard
     Alt-V                 Insert Clipboard Contents at Cursor
     Alt-F                 Search & Replace

     Right, Ctrl-F         Forward Character
     Left, Ctrl-B          Backward Character
     Up, Ctrl-P            Up One Line
     Down, Ctrl-N          Down One Line
     Shift-Right           Forward Character Extend Selection
     Shift-Left            Backward Character Extend Selection
     Shift-Up              Up One Line, Extend Selection
     Shift-Down            Down One Line, Extend Selection
     Ctrl-Right, Meta-F    Forward Word
     Ctrl-Left, Meta-B     Backward Word
     Ctrl-Up               Up One Paragraph
     Ctrl-Down             Down One Paragraph
     PgUp                  Scroll View Up One Screen
     PgDn                  Scroll View Down One Screen
     Ctrl-PgUp             Scroll View Right
     Ctrl-PgDn             Scroll View Left
     Home, Ctrl-A          Beginning of Line
     End, Ctrl-E           End of Line
     Ctrl-Home, Meta-<     Beginning of Text
     Ctrl-End, Meta->      End of Text
     Ctrl-/                Select All
     Ctrl-\                Clear Selection
     F16, Copy, Meta-W     Copy Selection to Clipboard
     F20, Cut, Ctrl-W      Copy Selection to Clipboard and Delete
     F18, Paste, Ctrl-Y    Paste Clipboard Text at Insertion Point
     Delete, Ctrl-D        Delete Character to Right, or Selection
     Backspace, Ctrl-H     Delete Character to Left, or Selection
     Meta-D                Delete Word to Right
     Meta-Backspace, Meta-Delete
                           Delete Word to Left
     Ctrl-K                Delete from Cursor to End of Line
     Ctrl-O                Open a Blank Line
     Ctrl-X                Clear Selection
     Ctrl-T                Reverse Order of Characters on Either Side
                           of the Cursor
     Mouse Button 1:
     Single Click: Set Insertion Cursor at Mouse Pointer
     Double Click: Select Word Under the Mouse Pointer and Position
     Cursor at the Beginning of the Word
     Triple Click: Select Line Under the Mouse Pointer and Position
     Cursor at the Beginning of the Line
     Drag: Define Selection from Insertion Cursor
     Shift-Drag: Extend Selection
     Double Click, Shift-Drag: Extend Selection by Whole Words
     Triple Click, Shift-Drag: Extend Selection by Whole Lines
     Ctrl: Position Insertion Cursor without Affecting Selection

     Mouse Button 2:
     Click: Copy Selection into Text at the Mouse Pointer
     Drag:Shift View

     Mouse Button 3:
     Pop Up Menu Bar

     Meta                  Escape


METHODS
=======

   There is no actual API specification, but Workspaces recognize the
following instance methods:

   about, bind, close_dialog, cmd_import, commandline, create,
custom_args, defaultcursor, do_win_signal_event, dump, editmenu,
elementColor, evalselection, exportfile, filemenu, filenotfound, filter,
filter_dialog, filter_text, fontdialogaccept, fontdialogapply,
fontdialogclose, geometry, goto_line, havenet, height, helpmenu,
importfile, insertionpoint, libname, menubar, menubarvisible, menus,
mktmpfile, my_directory, name, new, open, optionsmenu, outputfile,
outputmode, parent_ws, popupmenu, postpopupmenu, quit, requirecond,
scroll, scrollbar, self_help, set_scroll, text, textbackground, textfont,
textforeground, title, togglemenubar, user_import, watchcursor, what_line,
width, window, wmgeometry, workspaceobject, wrap, write, write_to_disk,
ws_copy, ws_cut, ws_export, ws_font, ws_paste, ws_undo, x, y

   The following class methods are available:

   new, ScrollMenuItems, WrapMenuItems, workspaceobject.

   The 'new' constructor recognizes the settings of the following options,
which are used by the Workspace.pm :

   window, name, textfont, width, height, x, y, foreground, background,
textfont, filemenu, editmenu, optionsmenu, wrapmenu, scrollmenu, modemenu,
helpmenu, menubar, popupmenu, menubarvisible, scroll, scrollbuttons,
insertionpoint, text

CREDITS
=======

   Tk::Workspace by rkiesling@mainmatter.com (Robert Kiesling)

   Perl/Tk by Nick Ing-Simmons.  Tk::ColorEditor widget by Steven Lidie.
Perl by Larry Wall and many others.

REVISION
========

   $Id: Workspace.pm,v 1.63 2000/12/30 12:15:32 kiesling Exp $

SEE ALSO:
=========

   Tk::overview(1), Tk::ColorEditor(1), perl(1) manual pages.


File: pm.info,  Node: Tk/X,  Next: Tk/X11Font,  Prev: Tk/Workspace,  Up: Module List

Perl extension for Xlib constants.
**********************************

NAME
====

   Tk::X - Perl extension for Xlib constants.

SYNOPSIS
========

     use Tk::X;

DESCRIPTION
===========

   A module generated by h2xs. It exists to export Xlib #define type
constants for possible use with Tk::Xlib.

Exported constants
==================

     Above
     AllTemporary
     AllocAll
     AllocNone
     AllowExposures
     AlreadyGrabbed
     Always
     AnyButton
     AnyKey
     AnyModifier
     AnyPropertyType
     ArcChord
     ArcPieSlice
     AsyncBoth
     AsyncKeyboard
     AsyncPointer
     AutoRepeatModeDefault
     AutoRepeatModeOff
     AutoRepeatModeOn
     BadAccess
     BadAlloc
     BadAtom
     BadColor
     BadCursor
     BadDrawable
     BadFont
     BadGC
     BadIDChoice
     BadImplementation
     BadLength
     BadMatch
     BadName
     BadPixmap
     BadRequest
     BadValue
     BadWindow
     Below
     BottomIf
     Button1
     Button1Mask
     Button1MotionMask
     Button2
     Button2Mask
     Button2MotionMask
     Button3
     Button3Mask
     Button3MotionMask
     Button4
     Button4Mask
     Button4MotionMask
     Button5
     Button5Mask
     Button5MotionMask
     ButtonMotionMask
     ButtonPress
     ButtonPressMask
     ButtonRelease
     ButtonReleaseMask
     CWBackPixel
     CWBackPixmap
     CWBackingPixel
     CWBackingPlanes
     CWBackingStore
     CWBitGravity
     CWBorderPixel
     CWBorderPixmap
     CWBorderWidth
     CWColormap
     CWCursor
     CWDontPropagate
     CWEventMask
     CWHeight
     CWOverrideRedirect
     CWSaveUnder
     CWSibling
     CWStackMode
     CWWidth
     CWWinGravity
     CWX
     CWY
     CapButt
     CapNotLast
     CapProjecting
     CapRound
     CenterGravity
     CirculateNotify
     CirculateRequest
     ClientMessage
     ClipByChildren
     ColormapChangeMask
     ColormapInstalled
     ColormapNotify
     ColormapUninstalled
     Complex
     ConfigureNotify
     ConfigureRequest
     ControlMapIndex
     ControlMask
     Convex
     CoordModeOrigin
     CoordModePrevious
     CopyFromParent
     CreateNotify
     CurrentTime
     CursorShape
     DefaultBlanking
     DefaultExposures
     DestroyAll
     DestroyNotify
     DirectColor
     DisableAccess
     DisableScreenInterval
     DisableScreenSaver
     DoBlue
     DoGreen
     DoRed
     DontAllowExposures
     DontPreferBlanking
     EastGravity
     EnableAccess
     EnterNotify
     EnterWindowMask
     EvenOddRule
     Expose
     ExposureMask
     FamilyChaos
     FamilyDECnet
     FamilyInternet
     FillOpaqueStippled
     FillSolid
     FillStippled
     FillTiled
     FirstExtensionError
     FocusChangeMask
     FocusIn
     FocusOut
     FontChange
     FontLeftToRight
     FontRightToLeft
     ForgetGravity
     GCArcMode
     GCBackground
     GCCapStyle
     GCClipMask
     GCClipXOrigin
     GCClipYOrigin
     GCDashList
     GCDashOffset
     GCFillRule
     GCFillStyle
     GCFont
     GCForeground
     GCFunction
     GCGraphicsExposures
     GCJoinStyle
     GCLastBit
     GCLineStyle
     GCLineWidth
     GCPlaneMask
     GCStipple
     GCSubwindowMode
     GCTile
     GCTileStipXOrigin
     GCTileStipYOrigin
     GXand
     GXandInverted
     GXandReverse
     GXclear
     GXcopy
     GXcopyInverted
     GXequiv
     GXinvert
     GXnand
     GXnoop
     GXnor
     GXor
     GXorInverted
     GXorReverse
     GXset
     GXxor
     GrabFrozen
     GrabInvalidTime
     GrabModeAsync
     GrabModeSync
     GrabNotViewable
     GrabSuccess
     GraphicsExpose
     GravityNotify
     GrayScale
     HostDelete
     HostInsert
     IncludeInferiors
     InputFocus
     InputOnly
     InputOutput
     IsUnmapped
     IsUnviewable
     IsViewable
     JoinBevel
     JoinMiter
     JoinRound
     KBAutoRepeatMode
     KBBellDuration
     KBBellPercent
     KBBellPitch
     KBKey
     KBKeyClickPercent
     KBLed
     KBLedMode
     KeyPress
     KeyPressMask
     KeyRelease
     KeyReleaseMask
     KeymapNotify
     KeymapStateMask
     LASTEvent
     LSBFirst
     LastExtensionError
     LeaveNotify
     LeaveWindowMask
     LedModeOff
     LedModeOn
     LineDoubleDash
     LineOnOffDash
     LineSolid
     LockMapIndex
     LockMask
     LowerHighest
     MSBFirst
     MapNotify
     MapRequest
     MappingBusy
     MappingFailed
     MappingKeyboard
     MappingModifier
     MappingNotify
     MappingPointer
     MappingSuccess
     Mod1MapIndex
     Mod1Mask
     Mod2MapIndex
     Mod2Mask
     Mod3MapIndex
     Mod3Mask
     Mod4MapIndex
     Mod4Mask
     Mod5MapIndex
     Mod5Mask
     MotionNotify
     NoEventMask
     NoExpose
     NoSymbol
     Nonconvex
     None
     NorthEastGravity
     NorthGravity
     NorthWestGravity
     NotUseful
     NotifyAncestor
     NotifyDetailNone
     NotifyGrab
     NotifyHint
     NotifyInferior
     NotifyNonlinear
     NotifyNonlinearVirtual
     NotifyNormal
     NotifyPointer
     NotifyPointerRoot
     NotifyUngrab
     NotifyVirtual
     NotifyWhileGrabbed
     Opposite
     OwnerGrabButtonMask
     ParentRelative
     PlaceOnBottom
     PlaceOnTop
     PointerMotionHintMask
     PointerMotionMask
     PointerRoot
     PointerWindow
     PreferBlanking
     PropModeAppend
     PropModePrepend
     PropModeReplace
     PropertyChangeMask
     PropertyDelete
     PropertyNewValue
     PropertyNotify
     PseudoColor
     RaiseLowest
     ReparentNotify
     ReplayKeyboard
     ReplayPointer
     ResizeRedirectMask
     ResizeRequest
     RetainPermanent
     RetainTemporary
     RevertToNone
     RevertToParent
     RevertToPointerRoot
     ScreenSaverActive
     ScreenSaverReset
     SelectionClear
     SelectionNotify
     SelectionRequest
     SetModeDelete
     SetModeInsert
     ShiftMapIndex
     ShiftMask
     SouthEastGravity
     SouthGravity
     SouthWestGravity
     StaticColor
     StaticGravity
     StaticGray
     StippleShape
     StructureNotifyMask
     SubstructureNotifyMask
     SubstructureRedirectMask
     Success
     SyncBoth
     SyncKeyboard
     SyncPointer
     TileShape
     TopIf
     TrueColor
     UnmapGravity
     UnmapNotify
     Unsorted
     VisibilityChangeMask
     VisibilityFullyObscured
     VisibilityNotify
     VisibilityPartiallyObscured
     VisibilityUnobscured
     WestGravity
     WhenMapped
     WindingRule
     XYBitmap
     XYPixmap
     X_H
     X_PROTOCOL
     X_PROTOCOL_REVISION
     YSorted
     YXBanded
     YXSorted
     ZPixmap

AUTHOR
======

   Nick Ing-Simmons ran h2xs ...


File: pm.info,  Node: Tk/X11Font,  Next: Tk/XFontSelect,  Prev: Tk/X,  Up: Module List

a class for finding X Fonts
***************************

NAME
====

   Tk::Font - a class for finding X Fonts

SYNOPSIS
========

     use Tk::X11Font;

     $font = $widget->X11Font(foundry => 'adobe',
                           family  => 'times',
                           point   => 120
                          );

     $font = $widget->X11Font('*-courier-medium-r-normal-*-*');

DESCRIPTION
===========

     This module can be use to interrogate the X server what fonts are
     avaliable.

METHODS
=======

Foundry( [ $val ] )
-------------------

Family( [ $val ] )
------------------

Weight( [ $val ] )
------------------

Slant( [ $val ] )
-----------------

Swidth( [ $val ] )
------------------

Adstyle( [ $val ] )
-------------------

Pixel( [ $val ] )
-----------------

Point( [ $val ] )
-----------------

Xres( [ $val ] )
----------------

Yres( [ $val ] )
----------------

Space( [ $val ] )
-----------------

Avgwidth( [ $val ] )
--------------------

Registry( [ $val ] )
--------------------

Encoding( [ $val ] )
--------------------

   Set the given field in the font name to $val if given and return the
current or previous value

Name( [ $max ] )
----------------

   In a list context it returns a list of all font names that match the
fields given. It will return a maximum of `$max' names, or 128 if $max is
not given.

   In a scalar contex it returns the first matching name or undef

Clone( [ key => value, [ ...]] )
--------------------------------

   Create a duplicate of the curent font object and modify the given fields

AUTHOR
======

   Graham Barr <Graham.Barr@tiuk.ti.com>

HISTORY
=======

   11-Jan-96 Initial version

   08-Nov-98 Renamed for Tk800.012

COPYRIGHT
=========

   Copyright (c) 1995-1996 Graham Barr. All rights reserved. This program
is free software; you can redistribute it and/or modify it under the same
terms as Perl itself.


File: pm.info,  Node: Tk/XFontSelect,  Next: Tk/XMLViewer,  Prev: Tk/X11Font,  Up: Module List

X11 Font Selection Dialog.
**************************

NAME
====

     Tk::XFontSelect.pm--X11 Font Selection Dialog.

SYNOPSIS
========

     use Tk;
     use Tk::XFontSelect;

     my $fontdialog = $mw -> FontSelect;
     my $font = $fontdialog -> Show;

DESCRIPTION
===========

   The Tk::XFontSelect widget displays a dialog box that lists the
descriptors of all of the fonts that are present on the system.  Selecting
a font descriptor and pressing the "Accept" button returns to the main
application a string containing that font descriptor.

   The list of font descriptors is generated by the xlsfonts command, a
standard utility of the XFree86 Rev. 3.3.2 distribution.

SEE ALSO
========

   xlsfonts(1) man page.

VERSION INFO
============

   First Release Version

   $Revision: 0.42 $


File: pm.info,  Node: Tk/XMLViewer,  Next: Tk/Xrm,  Prev: Tk/XFontSelect,  Up: Module List

Tk widget to display XML
************************

NAME
====

   Tk::XMLViewer - Tk widget to display XML

SYNOPSIS
========

     use Tk::XMLViewer;
     $xmlviewer = $top->XMLViewer->pack;
     $xmlviewer->insertXML(-file => "test.xml");
     $xmlviewer->insertXML(-text => "<?xml?><a><bla /><foo>bar</foo></a>");

DESCRIPTION
===========

   Tk::XMLViewer is an widget inherited from Tk::Text which displays XML
in a hierarchical tree. You can use the plus and minus buttons to
hide/show parts of the tree.

METHODS
=======

insertXML
     Insert XML into the XMLViewer widget. Use the -file argument to insert
     a file and -text to insert an XML string.

DumpXML
     Dump the contents of an Tk::Text widget into an XML string, which can
     be used as input for the XMLViewer widget. Use the static variant for
     Tk::Text widgets and the method for XMLViewer widgets.

          $xml_string1 = Tk::XMLViewer::DumpXML($text_widget);
          $xml_string2 = $xmlviewer->DumpXML;

SetIndent
     Set indent with for XML tags

          $xmlviewer->SetIndent(width);

XMLMenu
     Insert XML Menu into Text widget menu.

          $xmlviewer->XMLMenu;

SourceType
     Returns type of source used for last insertXML (-file or -text)

SourceContent
     Returns filename (source type -file) or XML text (source type -text)
     used for last insertXML.

GetInfo
     Returns hash of standard XML decl and DOCTYPE elements:

          my %xmlheader = $xmlviewer->GetInfo;

     Elements for XMLdecl: Version Encoding Standalone Elements for
     DOCTYPE: Name Sysid Pubid Internal

BUGS
====

   Perl/Tk does not support Unicode, yet. For perl 5.6.0 and newer,
unicode characters are translated to ISO-8859-1 chars, if possible.  For
older perls, there is no conversion (unless Unicode::String is installed),
so unicode characters will show as binary values.

   DumpXML will not work with nested text tags.

   There should be only one insertXML operation at one time (these is
probably only an issue with threaded operations, which do not work in
Perl/Tk anyway).

   Viewing of large XML files is slow.

   head1 TODO

     - show to depth n: close everything from depth n+1
     - create menu item "close selected region"
     - DTD validation (is this possible with XML::Parser?)

AUTHOR
======

   Slaven Rezic, <eserte@cs.tu-berlin.de>

   Some additions by Jerry Geiger <jgeiger@rios.de>.

SEE ALSO
========

   *Note XML/Parser: XML/Parser,(3), *Note Tk/Text: Tk/Text,(3).


File: pm.info,  Node: Tk/Xrm,  Next: Tk/after,  Prev: Tk/XMLViewer,  Up: Module List

X Resource/Defaults/Options routines that obey the rules.
*********************************************************

NAME
====

   Tk::Xrm - X Resource/Defaults/Options routines that obey the rules.

SYNOPSIS
========

     use Tk;
     use Tk::Xrm;

DESCRIPTION
===========

   Using this modules causes Tk's Option code to be replaced by versions
which use routines from <X11/Xresource.h> - i.e. same ones every other X
toolkit uses.

   Result is that "matching" of name/Class with the options database
follows the same rules as other X toolkits. This makes it more predictable,
and makes it easier to have a single ~/.Xdefaults file which gives sensible
results for both Tk and (say) Motif applications.

BUGS
====

   Currently *optionAdd*(key => value?, priority?) ignores optional
priority completely and just does XrmPutStringResource().  Perhaps it
should be more subtle and do XrmMergeDatabases() or XrmCombineDatabase().

   This version is a little slower than Tk's re-invention but there is
more optimization that can be done.

SEE ALSO
========

   `Tk::option|Tk::option' in this node

KEYWORDS
========

   database, option, priority, retrieve


File: pm.info,  Node: Tk/after,  Next: Tk/bind,  Prev: Tk/Xrm,  Up: Module List

Execute a command after a time delay
************************************

NAME
====

   Tk::after - Execute a command after a time delay

     $widget->after(*ms*)

     $id = $widget->after(*ms*?,callback?)

     $id = $widget->repeat(*ms*?,callback?)

     $widget->*afterCancel*($id)

     $id = $widget->*afterIdle*(callback)

     $widget->*afterInfo*?($id)?

DESCRIPTION
===========

   This method is used to delay execution of the program or to execute a
callback in background sometime in the future.

   In perl/Tk $widget->after is implemented via the class `Tk::After', and
callbacks are associated with $widget, and are automatically cancelled
when the widget is destroyed. An almost identical interface, but without
automatic cancel, and without repeat is provided via Tk::after method.

   The internal Tk::After class has the following synopsis:

     $id = Tk::After->new($widget,$time,'once',callback);
     $id = Tk::After->new($widget,$time,'repeat',callback);
     $id->cancel;

   The after method has several forms as follows:

$widget->after(*ms*)
     The value *ms* must be an integer giving a time in milliseconds.  The
     command sleeps for *ms* milliseconds and then returns.  While the
     command is sleeping the application does not respond to events.

$widget->after(*ms*,callback)
     In this form the command returns immediately, but it arranges for
     callback be executed *ms* milliseconds later as an event handler.
     The callback will be executed exactly once, at the given time.  The
     command will be executed in context of $widget.  If an error occurs
     while executing the delayed command then the `Tk::Error|Tk::Error' in
     this node mechanism is used to report the error.  The after command
     returns an identifier (an object in the perl/Tk case) that can be
     used to cancel the delayed command using *afterCancel*.

$widget->repeat(*ms*,callback)
     In this form the command returns immediately, but it arranges for
     callback be executed *ms* milliseconds later as an event handler.
     After callback has executed it is re-scheduled, to be executed in a
     futher *ms*, and so on until it is cancelled.

$widget->*afterCancel*($id)
$id->cancel
     Cancels the execution of a delayed command that was previously
     scheduled.  $id indicates which command should be canceled;  it must
     have been the return value from a previous after command.  If the
     command given by $id has already been executed (and is not scheduled
     to be executed again) then *afterCancel* has no effect.

$widget->*afterCancel*(callback)
     *This form is not robust in perl/Tk - its use is deprecated.* This
     command should also cancel the execution of a delayed command.  The
     callback argument is compared with pending callbacks, if a match is
     found, that callback is cancelled and will never be executed;  if no
     such callback is currently pending then the *afterCancel* has no
     effect.

$widget->*afterIdle*(callback)
     Arranges for callback to be evaluated later as an idle callback.  The
     script will be run exactly once, the next time the event loop is
     entered and there are no events to process.  The command returns an
     identifier that can be used to cancel the delayed command using
     *afterCancel*.  If an error occurs while executing the script then the
     `Tk::Error|Tk::Error' in this node mechanism is used to report the
     error.

$widget->*afterInfo*?($id)?
     This command returns information about existing event handlers.  If
     no $id argument is supplied, the command returns a list of the
     identifiers for all existing  event handlers created by the after
     command for this MainWindow. If $id is supplied, it specifies an
     existing handler; $id must have been the return value from some
     previous call to after and it must not have triggered yet or been
     cancelled. In this case the command returns a list with two elements.
     The first element of the list is the callback associated  with $id,
     and the second element is either idle or timer to indicate what kind
     of event handler it is.

   The after(*ms*) and *afterIdle* forms of the command assume that the
application is event driven:  the delayed commands will not be executed
unless the application enters the event loop.  In applications that are
not normally event-driven, the event loop can be entered with the *vwait*
and update commands.

SEE ALSO
========

   `Tk::Error|Tk::Error' in this node `Tk::callbacks|Tk::callbacks' in
this node

KEYWORDS
========

   cancel, delay, idle callback, sleep, time


File: pm.info,  Node: Tk/bind,  Next: Tk/bindtags,  Prev: Tk/after,  Up: Module List

Arrange for X events to invoke callbacks
****************************************

NAME
====

   Tk::bind - Arrange for X events to invoke callbacks

   Retrieve bindings:

       $widget->bind

       $widget->bind(tag)

       $widget->bind(sequence)

       $widget->bind(tag,sequence)

   Associate and destroy bindings:

       $widget->bind(sequence,callback)

       $widget->bind(tag,sequence,callback)

DESCRIPTION
===========

   The bind method associates callbacks with X events.  If callback is
specified, bind will arrange for callback to be evaluated whenever the
event(s) given by sequence occur in the window(s) identified by $widget or
tag.  If callback is an empty string then the current binding for sequence
is destroyed, leaving sequence unbound.  In all of the cases where a
callback argument is provided, bind returns an empty string.

   If sequence is specified without a callback, then the callback
currently bound to sequence is returned, or undef is returned if there is
no binding for sequence.  If neither sequence nor callback is specified,
then the return value is a list whose elements are all the sequences for
which there exist bindings for tag.

   If no tag is specified then the bind refers to $widget.  If tag is
specified then it is typically a class name and the bind refers to all
instances of the class on the *MainWindow* associated with $widget. (It is
possible for tag to be another "widget object" but this practice is
deprecated.) Perl's ref($object) can be used to get the class name of any
object.  Each window has an associated list of tags, and a binding applies
to a particular window if its tag is among those specified for the window.
Although the *bindtags* method may be used to assign an arbitrary set of
binding tags to a window, the default binding tags provide the following
behavior:

   If a tag is the name of an internal window the binding applies to that
window.

   If the tag is the name of a toplevel window the binding applies to the
toplevel window and all its internal windows.

   If the tag is the name of a class of widgets, such as *Tk::Button*, the
binding applies to all widgets in that class;

   If tag has the value all, the binding applies to all windows descended
from the MainWindow of the application.

EVENT PATTERNS
==============

   The sequence argument specifies a sequence of one or more event
patterns, with optional white space between the patterns.  Each event
pattern has the following syntax:

       '<modifier-modifier-type-detail>'

   The entire event pattern is surrounded by angle brackets, and normally
needs to be quoted, as angle brackets are special to perl.  Inside the
angle brackets are zero or more modifiers, an event type, and an extra
piece of information (detail) identifying a particular button or keysym.
Any of the fields may be omitted, as long as at least one of type and
detail is present.  The fields must be separated by white space or dashes.

   A second form of pattern is used to specify a user-defined, named
virtual event; see *Note Tk/event: Tk/event, for details.  It has the
following syntax:

       <<name>>

   The entire virtual event pattern is surrounded by double angle brackets.
Inside the angle brackets is the user-defined name of the virtual event.
Modifiers, such as Shift or Control, may not be combined with a virtual
event to modify it.  Bindings on a virtual event may be created before the
virtual event is defined, and if the definition of a virtual event changes
dynamically, all windows bound to that virtual event will respond
immediately to the new definition.

MODIFIERS
=========

   Modifiers consist of any of the following values:

     Control	Mod2, M2
     Shift          Mod3, M3
     Lock          	Mod4, M4
     Button1, B1	Mod5, M5
     Button2, B2	Meta, M
     Button3, B3	Alt
     Button4, B4	Double
     Button5, B5	Triple
     Mod1,    M1

   Where more than one value is listed, separated by commas, the values
are equivalent.  Most of the modifiers have the obvious X meanings.  For
example, *Button1* requires that button 1 be depressed when the event
occurs.  For a binding to match a given event, the modifiers in the event
must include all of those specified in the event pattern.  An event may
also contain additional modifiers not specified in the binding.  For
example, if button 1 is pressed while the shift and control keys are down,
the pattern *<Control-Button-1>* will match the event, but
*<Mod1-Button-1>* will not.  If no modifiers are specified, then any
combination of modifiers may be present in the event.

   Meta and M refer to whichever of the *M1* through *M5* modifiers is
associated with the meta key(s) on the keyboard (keysyms *Meta_R* and
*Meta_L*).  If there are no meta keys, or if they are not associated with
any modifiers, then Meta and M will not match any events.  Similarly, the
*Alt* modifier refers to whichever modifier is associated with the alt
key(s) on the keyboard (keysyms *Alt_L* and *Alt_R*).

   The Double and Triple modifiers are a convenience for specifying double
mouse clicks and other repeated events. They cause a particular event
pattern to be repeated 2 or 3 times, and also place a time and space
requirement on the sequence:  for a sequence of events to match a Double
or Triple pattern, all of the events must occur close together in time and
without substantial mouse motion in between.  For example,
*<Double-Button-1>* is equivalent to *<Button-1><Button-1>* with the extra
time and space requirement.

EVENT TYPES
===========

   The type field may be any of the standard X event types, with a few
extra abbreviations.  Below is a list of all the valid types; where two
names appear together, they are synonyms.

     ButtonPress, Button	Expose	Map
     ButtonRelease	FocusIn	Motion
     Circulate	FocusOut	Property
     Colormap	Gravity	Reparent
     Configure	KeyPress, Key	Unmap
     Destroy	KeyRelease	Visibility
     Enter	Leave	Activate
     Deactivate

   The last part of a long event specification is detail.  In the case of
a *ButtonPress* or ButtonRelease event, it is the number of a button
(1-5).  If a button number is given, then only an event on that particular
button will match;  if no button number is given, then an event on any
button will match.  Note:  giving a specific button number is different
than specifying a button modifier; in the first case, it refers to a
button being pressed or released, while in the second it refers to some
other button that is already depressed when the matching event occurs.  If
a button number is given then type may be omitted:  if will default to
*ButtonPress*.  For example, the specifier *<1>* is equivalent to
*<ButtonPress-1>*.

   If the event type is *KeyPress* or *KeyRelease*, then detail may be
specified in the form of an X keysym.  Keysyms are textual specifications
for particular keys on the keyboard; they include all the alphanumeric
ASCII characters (e.g. "a" is the keysym for the ASCII character "a"),
plus descriptions for non-alphanumeric characters ("comma" is the keysym
for the comma character), plus descriptions for all the non-ASCII keys on
the keyboard ("Shift_L" is the keysm for the left shift key, and "F1" is
the keysym for the F1 function key, if it exists).  The complete list of
keysyms is not presented here;  it is available in other X documentation
and may vary from system to system.  If necessary, you can use the 'K'
notation described below to print out the keysym name for a particular key.
If a keysym detail is given, then the type field may be omitted;  it will
default to *KeyPress*.  For example, *<Control-comma>* is equivalent to
*<Control-KeyPress-comma>*.

BINDING CALLBACKS AND SUBSTITUTIONS
===================================

   The callback argument to bind is a perl/Tk callback.  which will be
executed whenever the given event sequence occurs.  (See *Note
Tk/callbacks: Tk/callbacks, for description of the possible forms.)
Callback will be associated with the same *MainWindow* that is associated
with the $widget that was used to invoke the bind method, and it will run
as though called from MainLoop.  If callback contains any *Ev*(%) calls,
then each "nested" *Ev*(%) "callback" will be evaluated when the event
occurs to form arguments to be passed to the main callback.  The
replacement depends on the character %, as defined in the list below.
Unless otherwise indicated, the replacement string is the numeric
(decimal) value of the given field from the current event. Perl/Tk has
enhanced this mechanism slightly compared to the comparable Tcl/Tk
mechanism. The enhancements are not yet all reflected in the list below.
Some of the substitutions are only valid for certain types of events;  if
they are used for other types of events the value substituted is undefined
(not the same as undef!).

'#'
     The number of the last client request processed by the server (the
     serial field from the event).  Valid for all event types.

'a'
     The above field from the event, formatted as a hexadecimal number.
     Valid only for Configure events.

'b'
     The number of the button that was pressed or released.  Valid only
     for *ButtonPress* and ButtonRelease events.

'c'
     The count field from the event.  Valid only for *Expose* events.

'd'
     The detail field from the event.  The 'd' is replaced by a string
     identifying the detail.  For Enter, *Leave*, *FocusIn*, and
     *FocusOut* events, the string will be one of the following:

          NotifyAncestor	NotifyNonlinearVirtual
          NotifyDetailNone	NotifyPointer
          NotifyInferior	NotifyPointerRoot
          NotifyNonlinear	NotifyVirtual

     For events other than these, the substituted string is undefined.
     (Note that this is not the same as Detail part of sequence use to
     specify the event.)

'f'
     The focus field from the event (0 or 1).  Valid only for Enter and
     *Leave* events.

'h'
     The height field from the event.  Valid only for Configure, *Expose*,
     and *GraphicsExpose* events.

'k'
     The *keycode* field from the event.  Valid only for *KeyPress* and
     *KeyRelease* events.

'm'
     The mode field from the event.  The substituted string is one of
     *NotifyNormal*, *NotifyGrab*, *NotifyUngrab*, or
     *NotifyWhileGrabbed*.  Valid only for *EnterWindow*, *FocusIn*,
     *FocusOut*, and *LeaveWindow* events.

'o'
     The *override_redirect* field from the event.  Valid only for Map,
     *Reparent*, and Configure events.

'p'
     The *place* field from the event, substituted as one of the strings
     *PlaceOnTop* or *PlaceOnBottom*.  Valid only for *Circulate* events.

's'
     The state field from the event.  For *ButtonPress*, ButtonRelease,
     Enter, *KeyPress*, *KeyRelease*, *Leave*, and *Motion* events, a
     decimal string is substituted.  For *Visibility*, one of the strings
     *VisibilityUnobscured*, *VisibilityPartiallyObscured*, and
     *VisibilityFullyObscured* is substituted.

't'
     The time field from the event.  Valid only for events that contain a
     time field.

'w'
     The width field from the event.  Valid only for Configure, *Expose*,
     and *GraphicsExpose* events.

'x'
     The x field from the event.  Valid only for events containing an x
     field.

'y'
     The y field from the event.  Valid only for events containing a y
     field.

*'@'*
     The string "@*x,y*" where x and y are as above.  Valid only for
     events containing x and y fields.  This format is used my methods of
     *Tk::Text* and similar widgets.

'A'
     Substitutes the ASCII character corresponding to the event, or the
     empty string if the event doesn't correspond to an ASCII character
     (e.g. the shift key was pressed).  *XLookupString* does all the work
     of translating from the event to an ASCII character.  Valid only for
     *KeyPress* and *KeyRelease* events.

'B'
     The *border_width* field from the event.  Valid only for Configure
     events.

'E'
     The *send_event* field from the event.  Valid for all event types.

'K'
     The keysym corresponding to the event, substituted as a textual
     string.  Valid only for *KeyPress* and *KeyRelease* events.

'N'
     The keysym corresponding to the event, substituted as a decimal
     number.  Valid only for *KeyPress* and *KeyRelease* events.

'R'
     The root window identifier from the event.  Valid only for events
     containing a root field.

'S'
     The *subwindow* window identifier from the event, as an object if it
     is one otherwise as a hexadecimal number.  Valid only for events
     containing a *subwindow* field.

'T'
     The type field from the event.  Valid for all event types.

'W'
     The window to which the event was reported (the $widget field from
     the event) - as an perl/Tk object.  Valid for all event types.

'X'
     The *x_root* field from the event.  If a virtual-root window manager
     is being used then the substituted value is the corresponding
     x-coordinate in the virtual root.  Valid only for *ButtonPress*,
     ButtonRelease, *KeyPress*, *KeyRelease*, and *Motion* events.

'Y'
     The *y_root* field from the event.  If a virtual-root window manager
     is being used then the substituted value is the corresponding
     y-coordinate in the virtual root.  Valid only for *ButtonPress*,
     ButtonRelease, *KeyPress*, *KeyRelease*, and *Motion* events.

MULTIPLE MATCHES
================

   It is possible for several bindings to match a given X event.  If the
bindings are associated with different tag's, then each of the bindings
will be executed, in order.  By default, a class binding will be executed
first, followed by a binding for the widget, a binding for its toplevel,
and an all binding.  The *bindtags* method may be used to change this
order for a particular window or to associate additional binding tags with
the window.

   return and *Tk->break* may be used inside a callback to control the
processing of matching callbacks.  If return is invoked, then the current
callback is terminated but Tk will continue processing callbacks
associated with other tag's.  If *Tk->break* is invoked within a callback,
then that callback terminates and no other callbacks will be invoked for
the event.  (*Tk->break* is implemented via perl's die with a special value
which is "caught" by the perl/Tk "glue" code.)

   If more than one binding matches a particular event and they have the
same tag, then the most specific binding is chosen and its callback is
evaluated.  The following tests are applied, in order, to determine which
of several matching sequences is more specific: (a) an event pattern that
specifies a specific button or key is more specific than one that doesn't;
(b) a longer sequence (in terms of number of events matched) is more
specific than a shorter sequence; (c) if the modifiers specified in one
pattern are a subset of the modifiers in another pattern, then the pattern
with more modifiers is more specific.  (d) a virtual event whose physical
pattern matches the sequence is less specific than the same physical
pattern that is not associated with a virtual event.  (e) given a sequence
that matches two or more virtual events, one of the virtual events will be
chosen, but the order is undefined.

   If the matching sequences contain more than one event, then tests
(c)-(e) are applied in order from the most recent event to the least recent
event in the sequences.  If these tests fail to determine a winner, then
the most recently registered sequence is the winner.

   If there are two (or more) virtual events that are both triggered by the
same sequence, and both of those virtual events are bound to the same
window tag, then only one of the virtual events will be triggered, and it
will be picked at random:

     $widget->eventAdd('<<Paste>>' => '<Control-y>');
     $widget->eventAdd('<<Paste>>' => '<Button-2>');
     $widget->eventAdd <<Scroll>>' => '<Button-2>');
     $widget->bind('Tk::Entry','<<Paste>>',sub { print 'Paste'});
     $widget->bind('Tk::Entry','<<Scroll>>', sub {print 'Scroll'});

   If the user types Control-y, the *<<Paste>>* binding will be invoked,
but if the user presses button 2 then one of either the *<<Paste>>* or the
*<<Scroll>>* bindings will be invoked, but exactly which one gets invoked
is undefined.

   If an X event does not match any of the existing bindings, then the
event is ignored.  An unbound event is not considered to be an error.

MULTI-EVENT SEQUENCES AND IGNORED EVENTS
========================================

   When a sequence specified in a bind method contains more than one event
pattern, then its callback is executed whenever the recent events (leading
up to and including the current event) match the given sequence.  This
means, for example, that if button 1 is clicked repeatedly the sequence
*<Double-ButtonPress-1>* will match each button press but the first.  If
extraneous events that would prevent a match occur in the middle of an
event sequence then the extraneous events are ignored unless they are
*KeyPress* or *ButtonPress* events.  For example, *<Double-ButtonPress-1>*
will match a sequence of presses of button 1, even though there will be
ButtonRelease events (and possibly *Motion* events) between the
*ButtonPress* events.  Furthermore, a *KeyPress* event may be preceded by
any number of other *KeyPress* events for modifier keys without the
modifier keys preventing a match.  For example, the event sequence *aB*
will match a press of the a key, a release of the a key, a press of the
Shift key, and a press of the b key:  the press of Shift is ignored
because it is a modifier key.  Finally, if several *Motion* events occur
in a row, only the last one is used for purposes of matching binding
sequences.

ERRORS
======

   If an error occurs in executing the callback for a binding then the
*Tk::Error* mechanism is used to report the error.  The *Tk::Error*
mechanism will be executed at same call level, and associated with the
same *MainWindow* as as the callback was invoked.

CAVEATS
=======

   Note that for the Canvas widget, the call to bind has to be fully
qualified. This is because there is already a bind method for the Canvas
widget, which binds individual canvas tags.

       *$canvas*->*Tk::bind*

SEE ALSO
========

   `Tk::Error|Tk::Error' in this node `Tk::callbacks|Tk::callbacks' in
this node `Tk::bindtags|Tk::bindtags' in this node

KEYWORDS
========

   Event, binding


