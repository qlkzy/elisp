This is bash.info, produced by makeinfo version 4.13 from
/u/karl/gnu/www/bash/work.b/bash.texi.

This text is a brief description of the features that are present in
the Bash shell (version 4.1, 23 December 2009).

   This is Edition 4.1, last updated 23 December 2009, of `The GNU Bash
Reference Manual', for `Bash', Version 4.1.

   Copyright (C) 1988-2009 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual", and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License".

     (a) The FSF's Back-Cover Text is: You are free to copy and modify
     this GNU manual.  Buying copies from GNU Press supports the FSF in
     developing GNU and promoting software freedom."


INFO-DIR-SECTION Basics
START-INFO-DIR-ENTRY
* Bash: (bash).                     The GNU Bourne-Again SHell.
END-INFO-DIR-ENTRY


File: bash.info,  Node: Miscellaneous Commands,  Prev: Keyboard Macros,  Up: Bindable Readline Commands

8.4.8 Some Miscellaneous Commands
---------------------------------

`re-read-init-file (C-x C-r)'
     Read in the contents of the INPUTRC file, and incorporate any
     bindings or variable assignments found there.

`abort (C-g)'
     Abort the current editing command and ring the terminal's bell
     (subject to the setting of `bell-style').

`do-uppercase-version (M-a, M-b, M-X, ...)'
     If the metafied character X is lowercase, run the command that is
     bound to the corresponding uppercase character.

`prefix-meta (<ESC>)'
     Metafy the next character typed.  This is for keyboards without a
     meta key.  Typing `<ESC> f' is equivalent to typing `M-f'.

`undo (C-_ or C-x C-u)'
     Incremental undo, separately remembered for each line.

`revert-line (M-r)'
     Undo all changes made to this line.  This is like executing the
     `undo' command enough times to get back to the beginning.

`tilde-expand (M-&)'
     Perform tilde expansion on the current word.

`set-mark (C-@)'
     Set the mark to the point.  If a numeric argument is supplied, the
     mark is set to that position.

`exchange-point-and-mark (C-x C-x)'
     Swap the point with the mark.  The current cursor position is set
     to the saved position, and the old cursor position is saved as the
     mark.

`character-search (C-])'
     A character is read and point is moved to the next occurrence of
     that character.  A negative count searches for previous
     occurrences.

`character-search-backward (M-C-])'
     A character is read and point is moved to the previous occurrence
     of that character.  A negative count searches for subsequent
     occurrences.

`skip-csi-sequence ()'
     Read enough characters to consume a multi-key sequence such as
     those defined for keys like Home and End.  Such sequences begin
     with a Control Sequence Indicator (CSI), usually ESC-[.  If this
     sequence is bound to "\e[", keys producing such sequences will
     have no effect unless explicitly bound to a readline command,
     instead of inserting stray characters into the editing buffer.
     This is unbound by default, but usually bound to ESC-[.

`insert-comment (M-#)'
     Without a numeric argument, the value of the `comment-begin'
     variable is inserted at the beginning of the current line.  If a
     numeric argument is supplied, this command acts as a toggle:  if
     the characters at the beginning of the line do not match the value
     of `comment-begin', the value is inserted, otherwise the
     characters in `comment-begin' are deleted from the beginning of
     the line.  In either case, the line is accepted as if a newline
     had been typed.  The default value of `comment-begin' causes this
     command to make the current line a shell comment.  If a numeric
     argument causes the comment character to be removed, the line will
     be executed by the shell.

`dump-functions ()'
     Print all of the functions and their key bindings to the Readline
     output stream.  If a numeric argument is supplied, the output is
     formatted in such a way that it can be made part of an INPUTRC
     file.  This command is unbound by default.

`dump-variables ()'
     Print all of the settable variables and their values to the
     Readline output stream.  If a numeric argument is supplied, the
     output is formatted in such a way that it can be made part of an
     INPUTRC file.  This command is unbound by default.

`dump-macros ()'
     Print all of the Readline key sequences bound to macros and the
     strings they output.  If a numeric argument is supplied, the
     output is formatted in such a way that it can be made part of an
     INPUTRC file.  This command is unbound by default.

`glob-complete-word (M-g)'
     The word before point is treated as a pattern for pathname
     expansion, with an asterisk implicitly appended.  This pattern is
     used to generate a list of matching file names for possible
     completions.

`glob-expand-word (C-x *)'
     The word before point is treated as a pattern for pathname
     expansion, and the list of matching file names is inserted,
     replacing the word.  If a numeric argument is supplied, a `*' is
     appended before pathname expansion.

`glob-list-expansions (C-x g)'
     The list of expansions that would have been generated by
     `glob-expand-word' is displayed, and the line is redrawn.  If a
     numeric argument is supplied, a `*' is appended before pathname
     expansion.

`display-shell-version (C-x C-v)'
     Display version information about the current instance of Bash.

`shell-expand-line (M-C-e)'
     Expand the line as the shell does.  This performs alias and
     history expansion as well as all of the shell word expansions
     (*note Shell Expansions::).

`history-expand-line (M-^)'
     Perform history expansion on the current line.

`magic-space ()'
     Perform history expansion on the current line and insert a space
     (*note History Interaction::).

`alias-expand-line ()'
     Perform alias expansion on the current line (*note Aliases::).

`history-and-alias-expand-line ()'
     Perform history and alias expansion on the current line.

`insert-last-argument (M-. or M-_)'
     A synonym for `yank-last-arg'.

`operate-and-get-next (C-o)'
     Accept the current line for execution and fetch the next line
     relative to the current line from the history for editing.  Any
     argument is ignored.

`edit-and-execute-command (C-xC-e)'
     Invoke an editor on the current command line, and execute the
     result as shell commands.  Bash attempts to invoke `$VISUAL',
     `$EDITOR', and `emacs' as the editor, in that order.



File: bash.info,  Node: Readline vi Mode,  Next: Programmable Completion,  Prev: Bindable Readline Commands,  Up: Command Line Editing

8.5 Readline vi Mode
====================

While the Readline library does not have a full set of `vi' editing
functions, it does contain enough to allow simple editing of the line.
The Readline `vi' mode behaves as specified in the POSIX 1003.2
standard.

   In order to switch interactively between `emacs' and `vi' editing
modes, use the `set -o emacs' and `set -o vi' commands (*note The Set
Builtin::).  The Readline default is `emacs' mode.

   When you enter a line in `vi' mode, you are already placed in
`insertion' mode, as if you had typed an `i'.  Pressing <ESC> switches
you into `command' mode, where you can edit the text of the line with
the standard `vi' movement keys, move to previous history lines with
`k' and subsequent lines with `j', and so forth.


File: bash.info,  Node: Programmable Completion,  Next: Programmable Completion Builtins,  Prev: Readline vi Mode,  Up: Command Line Editing

8.6 Programmable Completion
===========================

When word completion is attempted for an argument to a command for
which a completion specification (a COMPSPEC) has been defined using
the `complete' builtin (*note Programmable Completion Builtins::), the
programmable completion facilities are invoked.

   First, the command name is identified.  If a compspec has been
defined for that command, the compspec is used to generate the list of
possible completions for the word.  If the command word is the empty
string (completion attempted at the beginning of an empty line), any
compspec defined with the `-E' option to `complete' is used.  If the
command word is a full pathname, a compspec for the full pathname is
searched for first.  If no compspec is found for the full pathname, an
attempt is made to find a compspec for the portion following the final
slash.  If those searches do not result in a compspec, any compspec
defined with the `-D' option to `complete' is used as the default.

   Once a compspec has been found, it is used to generate the list of
matching words.  If a compspec is not found, the default Bash completion
described above (*note Commands For Completion::) is performed.

   First, the actions specified by the compspec are used.  Only matches
which are prefixed by the word being completed are returned.  When the
`-f' or `-d' option is used for filename or directory name completion,
the shell variable `FIGNORE' is used to filter the matches.  *Note Bash
Variables::, for a description of `FIGNORE'.

   Any completions specified by a filename expansion pattern to the
`-G' option are generated next.  The words generated by the pattern
need not match the word being completed.  The `GLOBIGNORE' shell
variable is not used to filter the matches, but the `FIGNORE' shell
variable is used.

   Next, the string specified as the argument to the `-W' option is
considered.  The string is first split using the characters in the `IFS'
special variable as delimiters.  Shell quoting is honored.  Each word
is then expanded using brace expansion, tilde expansion, parameter and
variable expansion, command substitution, and arithmetic expansion, as
described above (*note Shell Expansions::).  The results are split
using the rules described above (*note Word Splitting::).  The results
of the expansion are prefix-matched against the word being completed,
and the matching words become the possible completions.

   After these matches have been generated, any shell function or
command specified with the `-F' and `-C' options is invoked.  When the
command or function is invoked, the `COMP_LINE', `COMP_POINT',
`COMP_KEY', and `COMP_TYPE' variables are assigned values as described
above (*note Bash Variables::).  If a shell function is being invoked,
the `COMP_WORDS' and `COMP_CWORD' variables are also set.  When the
function or command is invoked, the first argument is the name of the
command whose arguments are being completed, the second argument is the
word being completed, and the third argument is the word preceding the
word being completed on the current command line.  No filtering of the
generated completions against the word being completed is performed;
the function or command has complete freedom in generating the matches.

   Any function specified with `-F' is invoked first.  The function may
use any of the shell facilities, including the `compgen' and `compopt'
builtins described below (*note Programmable Completion Builtins::), to
generate the matches.  It must put the possible completions in the
`COMPREPLY' array variable.

   Next, any command specified with the `-C' option is invoked in an
environment equivalent to command substitution.  It should print a list
of completions, one per line, to the standard output.  Backslash may be
used to escape a newline, if necessary.

   After all of the possible completions are generated, any filter
specified with the `-X' option is applied to the list.  The filter is a
pattern as used for pathname expansion; a `&' in the pattern is
replaced with the text of the word being completed.  A literal `&' may
be escaped with a backslash; the backslash is removed before attempting
a match.  Any completion that matches the pattern will be removed from
the list.  A leading `!' negates the pattern; in this case any
completion not matching the pattern will be removed.

   Finally, any prefix and suffix specified with the `-P' and `-S'
options are added to each member of the completion list, and the result
is returned to the Readline completion code as the list of possible
completions.

   If the previously-applied actions do not generate any matches, and
the `-o dirnames' option was supplied to `complete' when the compspec
was defined, directory name completion is attempted.

   If the `-o plusdirs' option was supplied to `complete' when the
compspec was defined, directory name completion is attempted and any
matches are added to the results of the other actions.

   By default, if a compspec is found, whatever it generates is
returned to the completion code as the full set of possible completions.
The default Bash completions are not attempted, and the Readline default
of filename completion is disabled.  If the `-o bashdefault' option was
supplied to `complete' when the compspec was defined, the default Bash
completions are attempted if the compspec generates no matches.  If the
`-o default' option was supplied to `complete' when the compspec was
defined, Readline's default completion will be performed if the
compspec (and, if attempted, the default Bash completions) generate no
matches.

   When a compspec indicates that directory name completion is desired,
the programmable completion functions force Readline to append a slash
to completed names which are symbolic links to directories, subject to
the value of the MARK-DIRECTORIES Readline variable, regardless of the
setting of the MARK-SYMLINKED-DIRECTORIES Readline variable.

   There is some support for dynamically modifying completions.  This is
most useful when used in combination with a default completion specified
with `-D'.  It's possible for shell functions executed as completion
handlers to indicate that completion should be retried by returning an
exit status of 124.  If a shell function returns 124, and changes the
compspec associated with the command on which completion is being
attempted (supplied as the first argument when the function is
executed), programmable completion restarts from the beginning, with an
attempt to find a compspec for that command.  This allows a set of
completions to be built dynamically as completion is attempted, rather
than being loaded all at once.

   For instance, assuming that there is a library of compspecs, each
kept in a file corresponding to the name of the command, the following
default completion function would load completions dynamically:

     _completion_loader()
     {
     	. "/etc/bash_completion.d/$1.sh" >/dev/null 2>&1 && return 124
     }
     complete -D -F _completion_loader


File: bash.info,  Node: Programmable Completion Builtins,  Prev: Programmable Completion,  Up: Command Line Editing

8.7 Programmable Completion Builtins
====================================

Two builtin commands are available to manipulate the programmable
completion facilities.

`compgen'
          `compgen [OPTION] [WORD]'

     Generate possible completion matches for WORD according to the
     OPTIONs, which may be any option accepted by the `complete'
     builtin with the exception of `-p' and `-r', and write the matches
     to the standard output.  When using the `-F' or `-C' options, the
     various shell variables set by the programmable completion
     facilities, while available, will not have useful values.

     The matches will be generated in the same way as if the
     programmable completion code had generated them directly from a
     completion specification with the same flags.  If WORD is
     specified, only those completions matching WORD will be displayed.

     The return value is true unless an invalid option is supplied, or
     no matches were generated.

`complete'
          `complete [-abcdefgjksuv] [-o COMP-OPTION] [-DE] [-A ACTION] [-G GLOBPAT] [-W WORDLIST]
          [-F FUNCTION] [-C COMMAND] [-X FILTERPAT]
          [-P PREFIX] [-S SUFFIX] NAME [NAME ...]'
          `complete -pr [-DE] [NAME ...]'

     Specify how arguments to each NAME should be completed.  If the
     `-p' option is supplied, or if no options are supplied, existing
     completion specifications are printed in a way that allows them to
     be reused as input.  The `-r' option removes a completion
     specification for each NAME, or, if no NAMEs are supplied, all
     completion specifications.  The `-D' option indicates that the
     remaining options and actions should apply to the "default"
     command completion; that is, completion attempted on a command for
     which no completion has previously been defined.  The `-E' option
     indicates that the remaining options and actions should apply to
     "empty" command completion; that is, completion attempted on a
     blank line.

     The process of applying these completion specifications when word
     completion is attempted is described above (*note Programmable
     Completion::).  The `-D' option takes precedence over `-E'.

     Other options, if specified, have the following meanings.  The
     arguments to the `-G', `-W', and `-X' options (and, if necessary,
     the `-P' and `-S' options) should be quoted to protect them from
     expansion before the `complete' builtin is invoked.

    `-o COMP-OPTION'
          The COMP-OPTION controls several aspects of the compspec's
          behavior beyond the simple generation of completions.
          COMP-OPTION may be one of:

         `bashdefault'
               Perform the rest of the default Bash completions if the
               compspec generates no matches.

         `default'
               Use Readline's default filename completion if the
               compspec generates no matches.

         `dirnames'
               Perform directory name completion if the compspec
               generates no matches.

         `filenames'
               Tell Readline that the compspec generates filenames, so
               it can perform any filename-specific processing (like
               adding a slash to directory names quoting special
               characters, or suppressing trailing spaces).  This
               option is intended to be used with shell functions
               specified with `-F'.

         `nospace'
               Tell Readline not to append a space (the default) to
               words completed at the end of the line.

         `plusdirs'
               After any matches defined by the compspec are generated,
               directory name completion is attempted and any matches
               are added to the results of the other actions.


    `-A ACTION'
          The ACTION may be one of the following to generate a list of
          possible completions:

         `alias'
               Alias names.  May also be specified as `-a'.

         `arrayvar'
               Array variable names.

         `binding'
               Readline key binding names (*note Bindable Readline
               Commands::).

         `builtin'
               Names of shell builtin commands.  May also be specified
               as `-b'.

         `command'
               Command names.  May also be specified as `-c'.

         `directory'
               Directory names.  May also be specified as `-d'.

         `disabled'
               Names of disabled shell builtins.

         `enabled'
               Names of enabled shell builtins.

         `export'
               Names of exported shell variables.  May also be
               specified as `-e'.

         `file'
               File names.  May also be specified as `-f'.

         `function'
               Names of shell functions.

         `group'
               Group names.  May also be specified as `-g'.

         `helptopic'
               Help topics as accepted by the `help' builtin (*note
               Bash Builtins::).

         `hostname'
               Hostnames, as taken from the file specified by the
               `HOSTFILE' shell variable (*note Bash Variables::).

         `job'
               Job names, if job control is active.  May also be
               specified as `-j'.

         `keyword'
               Shell reserved words.  May also be specified as `-k'.

         `running'
               Names of running jobs, if job control is active.

         `service'
               Service names.  May also be specified as `-s'.

         `setopt'
               Valid arguments for the `-o' option to the `set' builtin
               (*note The Set Builtin::).

         `shopt'
               Shell option names as accepted by the `shopt' builtin
               (*note Bash Builtins::).

         `signal'
               Signal names.

         `stopped'
               Names of stopped jobs, if job control is active.

         `user'
               User names.  May also be specified as `-u'.

         `variable'
               Names of all shell variables.  May also be specified as
               `-v'.

    `-G GLOBPAT'
          The filename expansion pattern GLOBPAT is expanded to generate
          the possible completions.

    `-W WORDLIST'
          The WORDLIST is split using the characters in the `IFS'
          special variable as delimiters, and each resultant word is
          expanded.  The possible completions are the members of the
          resultant list which match the word being completed.

    `-C COMMAND'
          COMMAND is executed in a subshell environment, and its output
          is used as the possible completions.

    `-F FUNCTION'
          The shell function FUNCTION is executed in the current shell
          environment.  When it finishes, the possible completions are
          retrieved from the value of the `COMPREPLY' array variable.

    `-X FILTERPAT'
          FILTERPAT is a pattern as used for filename expansion.  It is
          applied to the list of possible completions generated by the
          preceding options and arguments, and each completion matching
          FILTERPAT is removed from the list.  A leading `!' in
          FILTERPAT negates the pattern; in this case, any completion
          not matching FILTERPAT is removed.

    `-P PREFIX'
          PREFIX is added at the beginning of each possible completion
          after all other options have been applied.

    `-S SUFFIX'
          SUFFIX is appended to each possible completion after all
          other options have been applied.

     The return value is true unless an invalid option is supplied, an
     option other than `-p' or `-r' is supplied without a NAME
     argument, an attempt is made to remove a completion specification
     for a NAME for which no specification exists, or an error occurs
     adding a completion specification.

`compopt'
          `compopt' [-o OPTION] [-DE] [+o OPTION] [NAME]
     Modify completion options for each NAME according to the OPTIONs,
     or for the currently-execution completion if no NAMEs are supplied.
     If no OPTIONs are given, display the completion options for each
     NAME or the current completion.  The possible values of OPTION are
     those valid for the `complete' builtin described above.  The `-D'
     option indicates that the remaining options should apply to the
     "default" command completion; that is, completion attempted on a
     command for which no completion has previously been defined.  The
     `-E' option indicates that the remaining options should apply to
     "empty" command completion; that is, completion attempted on a
     blank line.

     The `-D' option takes precedence over `-E'.

     The return value is true unless an invalid option is supplied, an
     attempt is made to modify the options for a NAME for which no
     completion specification exists, or an output error occurs.



File: bash.info,  Node: Using History Interactively,  Next: Installing Bash,  Prev: Command Line Editing,  Up: Top

9 Using History Interactively
*****************************

This chapter describes how to use the GNU History Library
interactively, from a user's standpoint.  It should be considered a
user's guide.  For information on using the GNU History Library in
other programs, see the GNU Readline Library Manual.

* Menu:

* Bash History Facilities::	How Bash lets you manipulate your command
				history.
* Bash History Builtins::	The Bash builtin commands that manipulate
				the command history.
* History Interaction::		What it feels like using History as a user.


File: bash.info,  Node: Bash History Facilities,  Next: Bash History Builtins,  Up: Using History Interactively

9.1 Bash History Facilities
===========================

When the `-o history' option to the `set' builtin is enabled (*note The
Set Builtin::), the shell provides access to the "command history", the
list of commands previously typed.  The value of the `HISTSIZE' shell
variable is used as the number of commands to save in a history list.
The text of the last `$HISTSIZE' commands (default 500) is saved.  The
shell stores each command in the history list prior to parameter and
variable expansion but after history expansion is performed, subject to
the values of the shell variables `HISTIGNORE' and `HISTCONTROL'.

   When the shell starts up, the history is initialized from the file
named by the `HISTFILE' variable (default `~/.bash_history').  The file
named by the value of `HISTFILE' is truncated, if necessary, to contain
no more than the number of lines specified by the value of the
`HISTFILESIZE' variable.  When an interactive shell exits, the last
`$HISTSIZE' lines are copied from the history list to the file named by
`$HISTFILE'.  If the `histappend' shell option is set (*note Bash
Builtins::), the lines are appended to the history file, otherwise the
history file is overwritten.  If `HISTFILE' is unset, or if the history
file is unwritable, the history is not saved.  After saving the
history, the history file is truncated to contain no more than
`$HISTFILESIZE' lines.  If `HISTFILESIZE' is not set, no truncation is
performed.

   If the `HISTTIMEFORMAT' is set, the time stamp information
associated with each history entry is written to the history file,
marked with the history comment character.  When the history file is
read, lines beginning with the history comment character followed
immediately by a digit are interpreted as timestamps for the previous
history line.

   The builtin command `fc' may be used to list or edit and re-execute
a portion of the history list.  The `history' builtin may be used to
display or modify the history list and manipulate the history file.
When using command-line editing, search commands are available in each
editing mode that provide access to the history list (*note Commands
For History::).

   The shell allows control over which commands are saved on the history
list.  The `HISTCONTROL' and `HISTIGNORE' variables may be set to cause
the shell to save only a subset of the commands entered.  The `cmdhist'
shell option, if enabled, causes the shell to attempt to save each line
of a multi-line command in the same history entry, adding semicolons
where necessary to preserve syntactic correctness.  The `lithist' shell
option causes the shell to save the command with embedded newlines
instead of semicolons.  The `shopt' builtin is used to set these
options.  *Note Bash Builtins::, for a description of `shopt'.


File: bash.info,  Node: Bash History Builtins,  Next: History Interaction,  Prev: Bash History Facilities,  Up: Using History Interactively

9.2 Bash History Builtins
=========================

Bash provides two builtin commands which manipulate the history list
and history file.

`fc'
          `fc [-e ENAME] [-lnr] [FIRST] [LAST]'
          `fc -s [PAT=REP] [COMMAND]'

     Fix Command.  In the first form, a range of commands from FIRST to
     LAST is selected from the history list.  Both FIRST and LAST may
     be specified as a string (to locate the most recent command
     beginning with that string) or as a number (an index into the
     history list, where a negative number is used as an offset from the
     current command number).  If LAST is not specified it is set to
     FIRST.  If FIRST is not specified it is set to the previous
     command for editing and -16 for listing.  If the `-l' flag is
     given, the commands are listed on standard output.  The `-n' flag
     suppresses the command numbers when listing.  The `-r' flag
     reverses the order of the listing.  Otherwise, the editor given by
     ENAME is invoked on a file containing those commands.  If ENAME is
     not given, the value of the following variable expansion is used:
     `${FCEDIT:-${EDITOR:-vi}}'.  This says to use the value of the
     `FCEDIT' variable if set, or the value of the `EDITOR' variable if
     that is set, or `vi' if neither is set.  When editing is complete,
     the edited commands are echoed and executed.

     In the second form, COMMAND is re-executed after each instance of
     PAT in the selected command is replaced by REP.

     A useful alias to use with the `fc' command is `r='fc -s'', so
     that typing `r cc' runs the last command beginning with `cc' and
     typing `r' re-executes the last command (*note Aliases::).

`history'
          history [N]
          history -c
          history -d OFFSET
          history [-anrw] [FILENAME]
          history -ps ARG

     With no options, display the history list with line numbers.
     Lines prefixed with a `*' have been modified.  An argument of N
     lists only the last N lines.  If the shell variable
     `HISTTIMEFORMAT' is set and not null, it is used as a format
     string for STRFTIME to display the time stamp associated with each
     displayed history entry.  No intervening blank is printed between
     the formatted time stamp and the history line.

     Options, if supplied, have the following meanings:

    `-c'
          Clear the history list.  This may be combined with the other
          options to replace the history list completely.

    `-d OFFSET'
          Delete the history entry at position OFFSET.  OFFSET should
          be specified as it appears when the history is displayed.

    `-a'
          Append the new history lines (history lines entered since the
          beginning of the current Bash session) to the history file.

    `-n'
          Append the history lines not already read from the history
          file to the current history list.  These are lines appended
          to the history file since the beginning of the current Bash
          session.

    `-r'
          Read the current history file and append its contents to the
          history list.

    `-w'
          Write out the current history to the history file.

    `-p'
          Perform history substitution on the ARGs and display the
          result on the standard output, without storing the results in
          the history list.

    `-s'
          The ARGs are added to the end of the history list as a single
          entry.


     When any of the `-w', `-r', `-a', or `-n' options is used, if
     FILENAME is given, then it is used as the history file.  If not,
     then the value of the `HISTFILE' variable is used.



File: bash.info,  Node: History Interaction,  Prev: Bash History Builtins,  Up: Using History Interactively

9.3 History Expansion
=====================

The History library provides a history expansion feature that is similar
to the history expansion provided by `csh'.  This section describes the
syntax used to manipulate the history information.

   History expansions introduce words from the history list into the
input stream, making it easy to repeat commands, insert the arguments
to a previous command into the current input line, or fix errors in
previous commands quickly.

   History expansion takes place in two parts.  The first is to
determine which line from the history list should be used during
substitution.  The second is to select portions of that line for
inclusion into the current one.  The line selected from the history is
called the "event", and the portions of that line that are acted upon
are called "words".  Various "modifiers" are available to manipulate
the selected words.  The line is broken into words in the same fashion
that Bash does, so that several words surrounded by quotes are
considered one word.  History expansions are introduced by the
appearance of the history expansion character, which is `!' by default.
Only `\' and `'' may be used to escape the history expansion character.

   Several shell options settable with the `shopt' builtin (*note Bash
Builtins::) may be used to tailor the behavior of history expansion.
If the `histverify' shell option is enabled, and Readline is being
used, history substitutions are not immediately passed to the shell
parser.  Instead, the expanded line is reloaded into the Readline
editing buffer for further modification.  If Readline is being used,
and the `histreedit' shell option is enabled, a failed history
expansion will be reloaded into the Readline editing buffer for
correction.  The `-p' option to the `history' builtin command may be
used to see what a history expansion will do before using it.  The `-s'
option to the `history' builtin may be used to add commands to the end
of the history list without actually executing them, so that they are
available for subsequent recall.  This is most useful in conjunction
with Readline.

   The shell allows control of the various characters used by the
history expansion mechanism with the `histchars' variable, as explained
above (*note Bash Variables::).  The shell uses the history comment
character to mark history timestamps when writing the history file.

* Menu:

* Event Designators::	How to specify which history line to use.
* Word Designators::	Specifying which words are of interest.
* Modifiers::		Modifying the results of substitution.


File: bash.info,  Node: Event Designators,  Next: Word Designators,  Up: History Interaction

9.3.1 Event Designators
-----------------------

An event designator is a reference to a command line entry in the
history list.  

`!'
     Start a history substitution, except when followed by a space, tab,
     the end of the line, `=' or `(' (when the `extglob' shell option
     is enabled using the `shopt' builtin).

`!N'
     Refer to command line N.

`!-N'
     Refer to the command N lines back.

`!!'
     Refer to the previous command.  This is a synonym for `!-1'.

`!STRING'
     Refer to the most recent command starting with STRING.

`!?STRING[?]'
     Refer to the most recent command containing STRING.  The trailing
     `?' may be omitted if the STRING is followed immediately by a
     newline.

`^STRING1^STRING2^'
     Quick Substitution.  Repeat the last command, replacing STRING1
     with STRING2.  Equivalent to `!!:s/STRING1/STRING2/'.

`!#'
     The entire command line typed so far.



File: bash.info,  Node: Word Designators,  Next: Modifiers,  Prev: Event Designators,  Up: History Interaction

9.3.2 Word Designators
----------------------

Word designators are used to select desired words from the event.  A
`:' separates the event specification from the word designator.  It may
be omitted if the word designator begins with a `^', `$', `*', `-', or
`%'.  Words are numbered from the beginning of the line, with the first
word being denoted by 0 (zero).  Words are inserted into the current
line separated by single spaces.

   For example,

`!!'
     designates the preceding command.  When you type this, the
     preceding command is repeated in toto.

`!!:$'
     designates the last argument of the preceding command.  This may be
     shortened to `!$'.

`!fi:2'
     designates the second argument of the most recent command starting
     with the letters `fi'.

   Here are the word designators:

`0 (zero)'
     The `0'th word.  For many applications, this is the command word.

`N'
     The Nth word.

`^'
     The first argument; that is, word 1.

`$'
     The last argument.

`%'
     The word matched by the most recent `?STRING?' search.

`X-Y'
     A range of words; `-Y' abbreviates `0-Y'.

`*'
     All of the words, except the `0'th.  This is a synonym for `1-$'.
     It is not an error to use `*' if there is just one word in the
     event; the empty string is returned in that case.

`X*'
     Abbreviates `X-$'

`X-'
     Abbreviates `X-$' like `X*', but omits the last word.


   If a word designator is supplied without an event specification, the
previous command is used as the event.


File: bash.info,  Node: Modifiers,  Prev: Word Designators,  Up: History Interaction

9.3.3 Modifiers
---------------

After the optional word designator, you can add a sequence of one or
more of the following modifiers, each preceded by a `:'.

`h'
     Remove a trailing pathname component, leaving only the head.

`t'
     Remove all leading pathname components, leaving the tail.

`r'
     Remove a trailing suffix of the form `.SUFFIX', leaving the
     basename.

`e'
     Remove all but the trailing suffix.

`p'
     Print the new command but do not execute it.

`q'
     Quote the substituted words, escaping further substitutions.

`x'
     Quote the substituted words as with `q', but break into words at
     spaces, tabs, and newlines.

`s/OLD/NEW/'
     Substitute NEW for the first occurrence of OLD in the event line.
     Any delimiter may be used in place of `/'.  The delimiter may be
     quoted in OLD and NEW with a single backslash.  If `&' appears in
     NEW, it is replaced by OLD.  A single backslash will quote the
     `&'.  The final delimiter is optional if it is the last character
     on the input line.

`&'
     Repeat the previous substitution.

`g'
`a'
     Cause changes to be applied over the entire event line.  Used in
     conjunction with `s', as in `gs/OLD/NEW/', or with `&'.

`G'
     Apply the following `s' modifier once to each word in the event.



File: bash.info,  Node: Installing Bash,  Next: Reporting Bugs,  Prev: Using History Interactively,  Up: Top

10 Installing Bash
******************

This chapter provides basic instructions for installing Bash on the
various supported platforms.  The distribution supports the GNU
operating systems, nearly every version of Unix, and several non-Unix
systems such as BeOS and Interix.  Other independent ports exist for
MS-DOS, OS/2, and Windows platforms.

* Menu:

* Basic Installation::	Installation instructions.
* Compilers and Options::	How to set special options for various
				systems.
* Compiling For Multiple Architectures::	How to compile Bash for more
						than one kind of system from
						the same source tree.
* Installation Names::	How to set the various paths used by the installation.
* Specifying the System Type::	How to configure Bash for a particular system.
* Sharing Defaults::	How to share default configuration values among GNU
			programs.
* Operation Controls::	Options recognized by the configuration program.
* Optional Features::	How to enable and disable optional features when
			building Bash.


File: bash.info,  Node: Basic Installation,  Next: Compilers and Options,  Up: Installing Bash

10.1 Basic Installation
=======================

These are installation instructions for Bash.

   The simplest way to compile Bash is:

  1. `cd' to the directory containing the source code and type
     `./configure' to configure Bash for your system.  If you're using
     `csh' on an old version of System V, you might need to type `sh
     ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes some time.  While running, it prints
     messages telling which features it is checking for.

  2. Type `make' to compile Bash and build the `bashbug' bug reporting
     script.

  3. Optionally, type `make tests' to run the Bash test suite.

  4. Type `make install' to install `bash' and `bashbug'.  This will
     also install the manual pages and Info file.


   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package
(the top directory, the `builtins', `doc', and `support' directories,
each directory under `lib', and several others).  It also creates a
`config.h' file containing system-dependent definitions.  Finally, it
creates a shell script named `config.status' that you can run in the
future to recreate the current configuration, a file `config.cache'
that saves the results of its tests to speed up reconfiguring, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').  If at some point `config.cache' contains
results you don't want to keep, you may remove or edit it.

   To find out more about the options and arguments that the
`configure' script understands, type

     bash-2.04$ ./configure --help

at the Bash prompt in your Bash source directory.

   If you need to do unusual things to compile Bash, please try to
figure out how `configure' could check whether or not to do them, and
mail diffs or instructions to <bash-maintainers@gnu.org> so they can be
considered for the next release.

   The file `configure.in' is used to create `configure' by a program
called Autoconf.  You only need `configure.in' if you want to change it
or regenerate `configure' using a newer version of Autoconf.  If you do
this, make sure you are using Autoconf version 2.50 or newer.

   You can remove the program binaries and object files from the source
code directory by typing `make clean'.  To also remove the files that
`configure' created (so you can compile Bash for a different kind of
computer), type `make distclean'.


File: bash.info,  Node: Compilers and Options,  Next: Compiling For Multiple Architectures,  Prev: Basic Installation,  Up: Installing Bash

10.2 Compilers and Options
==========================

Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:

     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

   On systems that have the `env' program, you can do it like this:

     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

   The configuration process uses GCC to build Bash if it is available.


File: bash.info,  Node: Compiling For Multiple Architectures,  Next: Installation Names,  Prev: Compilers and Options,  Up: Installing Bash

10.3 Compiling For Multiple Architectures
=========================================

You can compile Bash for more than one kind of computer at the same
time, by placing the object files for each architecture in their own
directory.  To do this, you must use a version of `make' that supports
the `VPATH' variable, such as GNU `make'.  `cd' to the directory where
you want the object files and executables to go and run the `configure'
script from the source directory.  You may need to supply the
`--srcdir=PATH' argument to tell `configure' where the source files
are.  `configure' automatically checks for the source code in the
directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you can compile Bash for one architecture at a time in the
source code directory.  After you have installed Bash for one
architecture, use `make distclean' before reconfiguring for another
architecture.

   Alternatively, if your system supports symbolic links, you can use
the `support/mkclone' script to create a build tree which has symbolic
links back to each file in the source directory.  Here's an example
that creates a build directory in the current directory from a source
directory `/usr/gnu/src/bash-2.0':

     bash /usr/gnu/src/bash-2.0/support/mkclone -s /usr/gnu/src/bash-2.0 .

The `mkclone' script requires Bash, so you must have already built Bash
for at least one architecture before you can create build directories
for other architectures.


File: bash.info,  Node: Installation Names,  Next: Specifying the System Type,  Prev: Compiling For Multiple Architectures,  Up: Installing Bash

10.4 Installation Names
=======================

By default, `make install' will install into `/usr/local/bin',
`/usr/local/man', etc.  You can specify an installation prefix other
than `/usr/local' by giving `configure' the option `--prefix=PATH', or
by specifying a value for the `DESTDIR' `make' variable when running
`make install'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', `make install' will
use PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.


File: bash.info,  Node: Specifying the System Type,  Next: Sharing Defaults,  Prev: Installation Names,  Up: Installing Bash

10.5 Specifying the System Type
===============================

There may be some features `configure' can not figure out
automatically, but need to determine by the type of host Bash will run
on.  Usually `configure' can figure that out, but if it prints a
message saying it can not guess the host type, give it the
`--host=TYPE' option.  `TYPE' can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
`CPU-COMPANY-SYSTEM' (e.g., `i386-unknown-freebsd4.2').

   See the file `support/config.sub' for the possible values of each
field.


File: bash.info,  Node: Sharing Defaults,  Next: Operation Controls,  Prev: Specifying the System Type,  Up: Installing Bash

10.6 Sharing Defaults
=====================

If you want to set default values for `configure' scripts to share, you
can create a site shell script called `config.site' that gives default
values for variables like `CC', `cache_file', and `prefix'.  `configure'
looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: the Bash `configure' looks for a site script, but not all
`configure' scripts do.


File: bash.info,  Node: Operation Controls,  Next: Optional Features,  Prev: Sharing Defaults,  Up: Installing Bash

10.7 Operation Controls
=======================

`configure' recognizes the following options to control how it operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.

`--srcdir=DIR'
     Look for the Bash source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

   `configure' also accepts some other, not widely used, boilerplate
options.  `configure --help' prints the complete list.


File: bash.info,  Node: Optional Features,  Prev: Operation Controls,  Up: Installing Bash

10.8 Optional Features
======================

The Bash `configure' has a number of `--enable-FEATURE' options, where
FEATURE indicates an optional part of Bash.  There are also several
`--with-PACKAGE' options, where PACKAGE is something like `bash-malloc'
or `purify'.  To turn off the default use of a package, use
`--without-PACKAGE'.  To configure Bash without a feature that is
enabled by default, use `--disable-FEATURE'.

   Here is a complete list of the `--enable-' and `--with-' options
that the Bash `configure' recognizes.

`--with-afs'
     Define if you are using the Andrew File System from Transarc.

`--with-bash-malloc'
     Use the Bash version of `malloc' in the directory `lib/malloc'.
     This is not the same `malloc' that appears in GNU libc, but an
     older version originally derived from the 4.2 BSD `malloc'.  This
     `malloc' is very fast, but wastes some space on each allocation.
     This option is enabled by default.  The `NOTES' file contains a
     list of systems for which this should be turned off, and
     `configure' disables this option automatically for a number of
     systems.

`--with-curses'
     Use the curses library instead of the termcap library.  This should
     be supplied if your system has an inadequate or incomplete termcap
     database.

`--with-gnu-malloc'
     A synonym for `--with-bash-malloc'.

`--with-installed-readline[=PREFIX]'
     Define this to make Bash link with a locally-installed version of
     Readline rather than the version in `lib/readline'.  This works
     only with Readline 5.0 and later versions.  If PREFIX is `yes' or
     not supplied, `configure' uses the values of the make variables
     `includedir' and `libdir', which are subdirectories of `prefix' by
     default, to find the installed version of Readline if it is not in
     the standard system include and library directories.  If PREFIX is
     `no', Bash links with the version in `lib/readline'.  If PREFIX is
     set to any other value, `configure' treats it as a directory
     pathname and looks for the installed version of Readline in
     subdirectories of that directory (include files in
     PREFIX/`include' and the library in PREFIX/`lib').

`--with-purify'
     Define this to use the Purify memory allocation checker from
     Rational Software.

`--enable-minimal-config'
     This produces a shell with minimal features, close to the
     historical Bourne shell.

   There are several `--enable-' options that alter how Bash is
compiled and linked, rather than changing run-time features.

`--enable-largefile'
     Enable support for large files
     (http://www.sas.com/standards/large_file/x_open.20Mar96.html) if
     the operating system requires special compiler options to build
     programs which can access large files.  This is enabled by
     default, if the operating system provides large file support.

`--enable-profiling'
     This builds a Bash binary that produces profiling information to be
     processed by `gprof' each time it is executed.

`--enable-static-link'
     This causes Bash to be linked statically, if `gcc' is being used.
     This could be used to build a version to use as root's shell.

   The `minimal-config' option can be used to disable all of the
following options, but it is processed first, so individual options may
be enabled using `enable-FEATURE'.

   All of the following options except for `disabled-builtins' and
`xpg-echo-default' are enabled by default, unless the operating system
does not provide the necessary support.

`--enable-alias'
     Allow alias expansion and include the `alias' and `unalias'
     builtins (*note Aliases::).

`--enable-arith-for-command'
     Include support for the alternate form of the `for' command that
     behaves like the C language `for' statement (*note Looping
     Constructs::).

`--enable-array-variables'
     Include support for one-dimensional array shell variables (*note
     Arrays::).

`--enable-bang-history'
     Include support for `csh'-like history substitution (*note History
     Interaction::).

`--enable-brace-expansion'
     Include `csh'-like brace expansion ( `b{a,b}c' ==> `bac bbc' ).
     See *note Brace Expansion::, for a complete description.

`--enable-casemod-attributes'
     Include support for case-modifying attributes in the `declare'
     builtin and assignment statements.  Variables with the UPPERCASE
     attribute, for example, will have their values converted to
     uppercase upon assignment.

`--enable-casemod-expansion'
     Include support for case-modifying word expansions.

`--enable-command-timing'
     Include support for recognizing `time' as a reserved word and for
     displaying timing statistics for the pipeline following `time'
     (*note Pipelines::).  This allows pipelines as well as shell
     builtins and functions to be timed.

`--enable-cond-command'
     Include support for the `[[' conditional command.  (*note
     Conditional Constructs::).

`--enable-cond-regexp'
     Include support for matching POSIX regular expressions using the
     `=~' binary operator in the `[[' conditional command.  (*note
     Conditional Constructs::).

`--enable-coprocesses'
     Include support for coprocesses and the `coproc' reserved word
     (*note Pipelines::).

`--enable-debugger'
     Include support for the bash debugger (distributed separately).

`--enable-directory-stack'
     Include support for a `csh'-like directory stack and the `pushd',
     `popd', and `dirs' builtins (*note The Directory Stack::).

`--enable-disabled-builtins'
     Allow builtin commands to be invoked via `builtin xxx' even after
     `xxx' has been disabled using `enable -n xxx'.  See *note Bash
     Builtins::, for details of the `builtin' and `enable' builtin
     commands.

`--enable-dparen-arithmetic'
     Include support for the `((...))' command (*note Conditional
     Constructs::).

`--enable-extended-glob'
     Include support for the extended pattern matching features
     described above under *note Pattern Matching::.

`--enable-extended-glob-default'
     Set the default value of the EXTGLOB shell option described above
     under *note The Shopt Builtin:: to be enabled.

`--enable-help-builtin'
     Include the `help' builtin, which displays help on shell builtins
     and variables (*note Bash Builtins::).

`--enable-history'
     Include command history and the `fc' and `history' builtin
     commands (*note Bash History Facilities::).

`--enable-job-control'
     This enables the job control features (*note Job Control::), if
     the operating system supports them.

`--enable-multibyte'
     This enables support for multibyte characters if the operating
     system provides the necessary support.

`--enable-net-redirections'
     This enables the special handling of filenames of the form
     `/dev/tcp/HOST/PORT' and `/dev/udp/HOST/PORT' when used in
     redirections (*note Redirections::).

`--enable-process-substitution'
     This enables process substitution (*note Process Substitution::) if
     the operating system provides the necessary support.

`--enable-progcomp'
     Enable the programmable completion facilities (*note Programmable
     Completion::).  If Readline is not enabled, this option has no
     effect.

`--enable-prompt-string-decoding'
     Turn on the interpretation of a number of backslash-escaped
     characters in the `$PS1', `$PS2', `$PS3', and `$PS4' prompt
     strings.  See *note Printing a Prompt::, for a complete list of
     prompt string escape sequences.

`--enable-readline'
     Include support for command-line editing and history with the Bash
     version of the Readline library (*note Command Line Editing::).

`--enable-restricted'
     Include support for a "restricted shell".  If this is enabled,
     Bash, when called as `rbash', enters a restricted mode.  See *note
     The Restricted Shell::, for a description of restricted mode.

`--enable-select'
     Include the `select' builtin, which allows the generation of simple
     menus (*note Conditional Constructs::).

`--enable-separate-helpfiles'
     Use external files for the documentation displayed by the `help'
     builtin instead of storing the text internally.

`--enable-single-help-strings'
     Store the text displayed by the `help' builtin as a single string
     for each help topic.  This aids in translating the text to
     different languages.  You may need to disable this if your
     compiler cannot handle very long string literals.

`--enable-strict-posix-default'
     Make Bash POSIX-conformant by default (*note Bash POSIX Mode::).

`--enable-usg-echo-default'
     A synonym for `--enable-xpg-echo-default'.

`--enable-xpg-echo-default'
     Make the `echo' builtin expand backslash-escaped characters by
     default, without requiring the `-e' option.  This sets the default
     value of the `xpg_echo' shell option to `on', which makes the Bash
     `echo' behave more like the version specified in the Single Unix
     Specification, version 3.  *Note Bash Builtins::, for a
     description of the escape sequences that `echo' recognizes.


   The file `config-top.h' contains C Preprocessor `#define' statements
for options which are not settable from `configure'.  Some of these are
not meant to be changed; beware of the consequences if you do.  Read
the comments associated with each definition for more information about
its effect.


File: bash.info,  Node: Reporting Bugs,  Next: Major Differences From The Bourne Shell,  Prev: Installing Bash,  Up: Top

Appendix A Reporting Bugs
*************************

Please report all bugs you find in Bash.  But first, you should make
sure that it really is a bug, and that it appears in the latest version
of Bash.  The latest version of Bash is always available for FTP from
`ftp://ftp.gnu.org/pub/gnu/bash/'.

   Once you have determined that a bug actually exists, use the
`bashbug' command to submit a bug report.  If you have a fix, you are
encouraged to mail that as well!  Suggestions and `philosophical' bug
reports may be mailed to <bug-bash@gnu.org> or posted to the Usenet
newsgroup `gnu.bash.bug'.

   All bug reports should include:
   * The version number of Bash.

   * The hardware and operating system.

   * The compiler used to compile Bash.

   * A description of the bug behaviour.

   * A short script or `recipe' which exercises the bug and may be used
     to reproduce it.

`bashbug' inserts the first three items automatically into the template
it provides for filing a bug report.

   Please send all reports concerning this manual to
<chet.ramey@case.edu>.


File: bash.info,  Node: Major Differences From The Bourne Shell,  Next: GNU Free Documentation License,  Prev: Reporting Bugs,  Up: Top

Appendix B Major Differences From The Bourne Shell
**************************************************

Bash implements essentially the same grammar, parameter and variable
expansion, redirection, and quoting as the Bourne Shell.  Bash uses the
POSIX standard as the specification of how these features are to be
implemented.  There are some differences between the traditional Bourne
shell and Bash; this section quickly details the differences of
significance.  A number of these differences are explained in greater
depth in previous sections.  This section uses the version of `sh'
included in SVR4.2 (the last version of the historical Bourne shell) as
the baseline reference.

   * Bash is POSIX-conformant, even where the POSIX specification
     differs from traditional `sh' behavior (*note Bash POSIX Mode::).

   * Bash has multi-character invocation options (*note Invoking
     Bash::).

   * Bash has command-line editing (*note Command Line Editing::) and
     the `bind' builtin.

   * Bash provides a programmable word completion mechanism (*note
     Programmable Completion::), and builtin commands `complete',
     `compgen', and `compopt', to manipulate it.

   * Bash has command history (*note Bash History Facilities::) and the
     `history' and `fc' builtins to manipulate it.  The Bash history
     list maintains timestamp information and uses the value of the
     `HISTTIMEFORMAT' variable to display it.

   * Bash implements `csh'-like history expansion (*note History
     Interaction::).

   * Bash has one-dimensional array variables (*note Arrays::), and the
     appropriate variable expansions and assignment syntax to use them.
     Several of the Bash builtins take options to act on arrays.  Bash
     provides a number of built-in array variables.

   * The `$'...'' quoting syntax, which expands ANSI-C
     backslash-escaped characters in the text between the single quotes,
     is supported (*note ANSI-C Quoting::).

   * Bash supports the `$"..."' quoting syntax to do locale-specific
     translation of the characters between the double quotes.  The
     `-D', `--dump-strings', and `--dump-po-strings' invocation options
     list the translatable strings found in a script (*note Locale
     Translation::).

   * Bash implements the `!' keyword to negate the return value of a
     pipeline (*note Pipelines::).  Very useful when an `if' statement
     needs to act only if a test fails.  The Bash `-o pipefail' option
     to `set' will cause a pipeline to return a failure status if any
     command fails.

   * Bash has the `time' reserved word and command timing (*note
     Pipelines::).  The display of the timing statistics may be
     controlled with the `TIMEFORMAT' variable.

   * Bash implements the `for (( EXPR1 ; EXPR2 ; EXPR3 ))' arithmetic
     for command, similar to the C language (*note Looping
     Constructs::).

   * Bash includes the `select' compound command, which allows the
     generation of simple menus (*note Conditional Constructs::).

   * Bash includes the `[[' compound command, which makes conditional
     testing part of the shell grammar (*note Conditional
     Constructs::), including optional regular expression matching.

   * Bash provides optional case-insensitive matching for the `case' and
     `[[' constructs.

   * Bash includes brace expansion (*note Brace Expansion::) and tilde
     expansion (*note Tilde Expansion::).

   * Bash implements command aliases and the `alias' and `unalias'
     builtins (*note Aliases::).

   * Bash provides shell arithmetic, the `((' compound command (*note
     Conditional Constructs::), and arithmetic expansion (*note Shell
     Arithmetic::).

   * Variables present in the shell's initial environment are
     automatically exported to child processes.  The Bourne shell does
     not normally do this unless the variables are explicitly marked
     using the `export' command.

   * Bash supports the `+=' assignment operator, which appends to the
     value of the variable named on the left hand side.

   * Bash includes the POSIX pattern removal `%', `#', `%%' and `##'
     expansions to remove leading or trailing substrings from variable
     values (*note Shell Parameter Expansion::).

   * The expansion `${#xx}', which returns the length of `${xx}', is
     supported (*note Shell Parameter Expansion::).

   * The expansion `${var:'OFFSET`[:'LENGTH`]}', which expands to the
     substring of `var''s value of length LENGTH, beginning at OFFSET,
     is present (*note Shell Parameter Expansion::).

   * The expansion `${var/[/]'PATTERN`[/'REPLACEMENT`]}', which matches
     PATTERN and replaces it with REPLACEMENT in the value of `var', is
     available (*note Shell Parameter Expansion::).

   * The expansion `${!PREFIX}*' expansion, which expands to the names
     of all shell variables whose names begin with PREFIX, is available
     (*note Shell Parameter Expansion::).

   * Bash has INDIRECT variable expansion using `${!word}' (*note Shell
     Parameter Expansion::).

   * Bash can expand positional parameters beyond `$9' using `${NUM}'.

   * The POSIX `$()' form of command substitution is implemented (*note
     Command Substitution::), and preferred to the Bourne shell's ```'
     (which is also implemented for backwards compatibility).

   * Bash has process substitution (*note Process Substitution::).

   * Bash automatically assigns variables that provide information
     about the current user (`UID', `EUID', and `GROUPS'), the current
     host (`HOSTTYPE', `OSTYPE', `MACHTYPE', and `HOSTNAME'), and the
     instance of Bash that is running (`BASH', `BASH_VERSION', and
     `BASH_VERSINFO').  *Note Bash Variables::, for details.

   * The `IFS' variable is used to split only the results of expansion,
     not all words (*note Word Splitting::).  This closes a
     longstanding shell security hole.

   * Bash implements the full set of POSIX filename expansion operators,
     including CHARACTER CLASSES, EQUIVALENCE CLASSES, and COLLATING
     SYMBOLS (*note Filename Expansion::).

   * Bash implements extended pattern matching features when the
     `extglob' shell option is enabled (*note Pattern Matching::).

   * It is possible to have a variable and a function with the same
     name; `sh' does not separate the two name spaces.

   * Bash functions are permitted to have local variables using the
     `local' builtin, and thus useful recursive functions may be written
     (*note Bash Builtins::).

   * Variable assignments preceding commands affect only that command,
     even builtins and functions (*note Environment::).  In `sh', all
     variable assignments preceding commands are global unless the
     command is executed from the file system.

   * Bash performs filename expansion on filenames specified as operands
     to input and output redirection operators (*note Redirections::).

   * Bash contains the `<>' redirection operator, allowing a file to be
     opened for both reading and writing, and the `&>' redirection
     operator, for directing standard output and standard error to the
     same file (*note Redirections::).

   * Bash includes the `<<<' redirection operator, allowing a string to
     be used as the standard input to a command.

   * Bash implements the `[n]<&WORD' and `[n]>&WORD' redirection
     operators, which move one file descriptor to another.

   * Bash treats a number of filenames specially when they are used in
     redirection operators (*note Redirections::).

   * Bash can open network connections to arbitrary machines and
     services with the redirection operators (*note Redirections::).

   * The `noclobber' option is available to avoid overwriting existing
     files with output redirection (*note The Set Builtin::).  The `>|'
     redirection operator may be used to override `noclobber'.

   * The Bash `cd' and `pwd' builtins (*note Bourne Shell Builtins::)
     each take `-L' and `-P' options to switch between logical and
     physical modes.

   * Bash allows a function to override a builtin with the same name,
     and provides access to that builtin's functionality within the
     function via the `builtin' and `command' builtins (*note Bash
     Builtins::).

   * The `command' builtin allows selective disabling of functions when
     command lookup is performed (*note Bash Builtins::).

   * Individual builtins may be enabled or disabled using the `enable'
     builtin (*note Bash Builtins::).

   * The Bash `exec' builtin takes additional options that allow users
     to control the contents of the environment passed to the executed
     command, and what the zeroth argument to the command is to be
     (*note Bourne Shell Builtins::).

   * Shell functions may be exported to children via the environment
     using `export -f' (*note Shell Functions::).

   * The Bash `export', `readonly', and `declare' builtins can take a
     `-f' option to act on shell functions, a `-p' option to display
     variables with various attributes set in a format that can be used
     as shell input, a `-n' option to remove various variable
     attributes, and `name=value' arguments to set variable attributes
     and values simultaneously.

   * The Bash `hash' builtin allows a name to be associated with an
     arbitrary filename, even when that filename cannot be found by
     searching the `$PATH', using `hash -p' (*note Bourne Shell
     Builtins::).

   * Bash includes a `help' builtin for quick reference to shell
     facilities (*note Bash Builtins::).

   * The `printf' builtin is available to display formatted output
     (*note Bash Builtins::).

   * The Bash `read' builtin (*note Bash Builtins::) will read a line
     ending in `\' with the `-r' option, and will use the `REPLY'
     variable as a default if no non-option arguments are supplied.
     The Bash `read' builtin also accepts a prompt string with the `-p'
     option and will use Readline to obtain the line when given the
     `-e' option.  The `read' builtin also has additional options to
     control input: the `-s' option will turn off echoing of input
     characters as they are read, the `-t' option will allow `read' to
     time out if input does not arrive within a specified number of
     seconds, the `-n' option will allow reading only a specified
     number of characters rather than a full line, and the `-d' option
     will read until a particular character rather than newline.

   * The `return' builtin may be used to abort execution of scripts
     executed with the `.' or `source' builtins (*note Bourne Shell
     Builtins::).

   * Bash includes the `shopt' builtin, for finer control of shell
     optional capabilities (*note The Shopt Builtin::), and allows
     these options to be set and unset at shell invocation (*note
     Invoking Bash::).

   * Bash has much more optional behavior controllable with the `set'
     builtin (*note The Set Builtin::).

   * The `-x' (`xtrace') option displays commands other than simple
     commands when performing an execution trace (*note The Set
     Builtin::).

   * The `test' builtin (*note Bourne Shell Builtins::) is slightly
     different, as it implements the POSIX algorithm, which specifies
     the behavior based on the number of arguments.

   * Bash includes the `caller' builtin, which displays the context of
     any active subroutine call (a shell function or a script executed
     with the `.' or `source' builtins).  This supports the bash
     debugger.

   * The `trap' builtin (*note Bourne Shell Builtins::) allows a
     `DEBUG' pseudo-signal specification, similar to `EXIT'.  Commands
     specified with a `DEBUG' trap are executed before every simple
     command, `for' command, `case' command, `select' command, every
     arithmetic `for' command, and before the first command executes in
     a shell function.  The `DEBUG' trap is not inherited by shell
     functions unless the function has been given the `trace' attribute
     or the `functrace' option has been enabled using the `shopt'
     builtin.  The `extdebug' shell option has additional effects on the
     `DEBUG' trap.

     The `trap' builtin (*note Bourne Shell Builtins::) allows an `ERR'
     pseudo-signal specification, similar to `EXIT' and `DEBUG'.
     Commands specified with an `ERR' trap are executed after a simple
     command fails, with a few exceptions.  The `ERR' trap is not
     inherited by shell functions unless the `-o errtrace' option to
     the `set' builtin is enabled.

     The `trap' builtin (*note Bourne Shell Builtins::) allows a
     `RETURN' pseudo-signal specification, similar to `EXIT' and
     `DEBUG'.  Commands specified with an `RETURN' trap are executed
     before execution resumes after a shell function or a shell script
     executed with `.' or `source' returns.  The `RETURN' trap is not
     inherited by shell functions unless the function has been given
     the `trace' attribute or the `functrace' option has been enabled
     using the `shopt' builtin.

   * The Bash `type' builtin is more extensive and gives more
     information about the names it finds (*note Bash Builtins::).

   * The Bash `umask' builtin permits a `-p' option to cause the output
     to be displayed in the form of a `umask' command that may be
     reused as input (*note Bourne Shell Builtins::).

   * Bash implements a `csh'-like directory stack, and provides the
     `pushd', `popd', and `dirs' builtins to manipulate it (*note The
     Directory Stack::).  Bash also makes the directory stack visible
     as the value of the `DIRSTACK' shell variable.

   * Bash interprets special backslash-escaped characters in the prompt
     strings when interactive (*note Printing a Prompt::).

   * The Bash restricted mode is more useful (*note The Restricted
     Shell::); the SVR4.2 shell restricted mode is too limited.

   * The `disown' builtin can remove a job from the internal shell job
     table (*note Job Control Builtins::) or suppress the sending of
     `SIGHUP' to a job when the shell exits as the result of a `SIGHUP'.

   * Bash includes a number of features to support a separate debugger
     for shell scripts.

   * The SVR4.2 shell has two privilege-related builtins (`mldmode' and
     `priv') not present in Bash.

   * Bash does not have the `stop' or `newgrp' builtins.

   * Bash does not use the `SHACCT' variable or perform shell
     accounting.

   * The SVR4.2 `sh' uses a `TIMEOUT' variable like Bash uses `TMOUT'.


More features unique to Bash may be found in *note Bash Features::.

B.1 Implementation Differences From The SVR4.2 Shell
====================================================

Since Bash is a completely new implementation, it does not suffer from
many of the limitations of the SVR4.2 shell.  For instance:

   * Bash does not fork a subshell when redirecting into or out of a
     shell control structure such as  an `if' or `while' statement.

   * Bash does not allow unbalanced quotes.  The SVR4.2 shell will
     silently insert a needed closing quote at `EOF' under certain
     circumstances.  This can be the cause of some hard-to-find errors.

   * The SVR4.2 shell uses a baroque memory management scheme based on
     trapping `SIGSEGV'.  If the shell is started from a process with
     `SIGSEGV' blocked (e.g., by using the `system()' C library
     function call), it misbehaves badly.

   * In a questionable attempt at security, the SVR4.2 shell, when
     invoked without the `-p' option, will alter its real and effective
     UID and GID if they are less than some magic threshold value,
     commonly 100.  This can lead to unexpected results.

   * The SVR4.2 shell does not allow users to trap `SIGSEGV',
     `SIGALRM', or `SIGCHLD'.

   * The SVR4.2 shell does not allow the `IFS', `MAILCHECK', `PATH',
     `PS1', or `PS2' variables to be unset.

   * The SVR4.2 shell treats `^' as the undocumented equivalent of `|'.

   * Bash allows multiple option arguments when it is invoked (`-x -v');
     the SVR4.2 shell allows only one option argument (`-xv').  In
     fact, some versions of the shell dump core if the second argument
     begins with a `-'.

   * The SVR4.2 shell exits a script if any builtin fails; Bash exits a
     script only if one of the POSIX special builtins fails, and only
     for certain failures, as enumerated in the POSIX standard.

   * The SVR4.2 shell behaves differently when invoked as `jsh' (it
     turns on job control).


File: bash.info,  Node: GNU Free Documentation License,  Next: Indexes,  Prev: Major Differences From The Bourne Shell,  Up: Top

Appendix C GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     `http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly
     and finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from
     you under this License.  If your rights have been terminated and
     not permanently reinstated, receipt of a copy of some or all of
     the same material does not give you any rights to use it.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.  If the Document specifies that a proxy
     can decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

 11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: bash.info,  Node: Indexes,  Prev: GNU Free Documentation License,  Up: Top

Appendix D Indexes
******************

* Menu:

* Builtin Index::		Index of Bash builtin commands.
* Reserved Word Index::		Index of Bash reserved words.
* Variable Index::		Quick reference helps you find the
				variable you want.
* Function Index::		Index of bindable Readline functions.
* Concept Index::		General index for concepts described in
				this manual.


File: bash.info,  Node: Builtin Index,  Next: Reserved Word Index,  Up: Indexes

D.1 Index of Shell Builtin Commands
===================================

 [index ]
* Menu:

* .:                                     Bourne Shell Builtins.
                                                              (line  16)
* ::                                     Bourne Shell Builtins.
                                                              (line  11)
* [:                                     Bourne Shell Builtins.
                                                              (line 213)
* alias:                                 Bash Builtins.       (line  11)
* bg:                                    Job Control Builtins.
                                                              (line   7)
* bind:                                  Bash Builtins.       (line  21)
* break:                                 Bourne Shell Builtins.
                                                              (line  29)
* builtin:                               Bash Builtins.       (line  98)
* caller:                                Bash Builtins.       (line 106)
* cd:                                    Bourne Shell Builtins.
                                                              (line  36)
* command:                               Bash Builtins.       (line 123)
* compgen:                               Programmable Completion Builtins.
                                                              (line  10)
* complete:                              Programmable Completion Builtins.
                                                              (line  28)
* compopt:                               Programmable Completion Builtins.
                                                              (line 217)
* continue:                              Bourne Shell Builtins.
                                                              (line  55)
* declare:                               Bash Builtins.       (line 142)
* dirs:                                  Directory Stack Builtins.
                                                              (line   7)
* disown:                                Job Control Builtins.
                                                              (line  83)
* echo:                                  Bash Builtins.       (line 221)
* enable:                                Bash Builtins.       (line 273)
* eval:                                  Bourne Shell Builtins.
                                                              (line  63)
* exec:                                  Bourne Shell Builtins.
                                                              (line  70)
* exit:                                  Bourne Shell Builtins.
                                                              (line  82)
* export:                                Bourne Shell Builtins.
                                                              (line  88)
* fc:                                    Bash History Builtins.
                                                              (line  10)
* fg:                                    Job Control Builtins.
                                                              (line  16)
* getopts:                               Bourne Shell Builtins.
                                                              (line 103)
* hash:                                  Bourne Shell Builtins.
                                                              (line 145)
* help:                                  Bash Builtins.       (line 301)
* history:                               Bash History Builtins.
                                                              (line  39)
* jobs:                                  Job Control Builtins.
                                                              (line  25)
* kill:                                  Job Control Builtins.
                                                              (line  57)
* let:                                   Bash Builtins.       (line 321)
* local:                                 Bash Builtins.       (line 328)
* logout:                                Bash Builtins.       (line 338)
* mapfile:                               Bash Builtins.       (line 342)
* popd:                                  Directory Stack Builtins.
                                                              (line  37)
* printf:                                Bash Builtins.       (line 388)
* pushd:                                 Directory Stack Builtins.
                                                              (line  58)
* pwd:                                   Bourne Shell Builtins.
                                                              (line 163)
* read:                                  Bash Builtins.       (line 413)
* readarray:                             Bash Builtins.       (line 493)
* readonly:                              Bourne Shell Builtins.
                                                              (line 172)
* return:                                Bourne Shell Builtins.
                                                              (line 188)
* set:                                   The Set Builtin.     (line  11)
* shift:                                 Bourne Shell Builtins.
                                                              (line 201)
* shopt:                                 The Shopt Builtin.   (line   9)
* source:                                Bash Builtins.       (line 501)
* suspend:                               Job Control Builtins.
                                                              (line  94)
* test:                                  Bourne Shell Builtins.
                                                              (line 213)
* times:                                 Bourne Shell Builtins.
                                                              (line 281)
* trap:                                  Bourne Shell Builtins.
                                                              (line 286)
* type:                                  Bash Builtins.       (line 505)
* typeset:                               Bash Builtins.       (line 536)
* ulimit:                                Bash Builtins.       (line 542)
* umask:                                 Bourne Shell Builtins.
                                                              (line 332)
* unalias:                               Bash Builtins.       (line 630)
* unset:                                 Bourne Shell Builtins.
                                                              (line 349)
* wait:                                  Job Control Builtins.
                                                              (line  73)


File: bash.info,  Node: Reserved Word Index,  Next: Variable Index,  Prev: Builtin Index,  Up: Indexes

D.2 Index of Shell Reserved Words
=================================

 [index ]
* Menu:

* !:                                     Pipelines.           (line   9)
* [[:                                    Conditional Constructs.
                                                              (line 117)
* ]]:                                    Conditional Constructs.
                                                              (line 117)
* case:                                  Conditional Constructs.
                                                              (line  28)
* do:                                    Looping Constructs.  (line  12)
* done:                                  Looping Constructs.  (line  12)
* elif:                                  Conditional Constructs.
                                                              (line   7)
* else:                                  Conditional Constructs.
                                                              (line   7)
* esac:                                  Conditional Constructs.
                                                              (line  28)
* fi:                                    Conditional Constructs.
                                                              (line   7)
* for:                                   Looping Constructs.  (line  29)
* function:                              Shell Functions.     (line  13)
* if:                                    Conditional Constructs.
                                                              (line   7)
* in:                                    Conditional Constructs.
                                                              (line  28)
* select:                                Conditional Constructs.
                                                              (line  76)
* then:                                  Conditional Constructs.
                                                              (line   7)
* time:                                  Pipelines.           (line   9)
* until:                                 Looping Constructs.  (line  12)
* while:                                 Looping Constructs.  (line  20)
* {:                                     Command Grouping.    (line  21)
* }:                                     Command Grouping.    (line  21)


File: bash.info,  Node: Variable Index,  Next: Function Index,  Prev: Reserved Word Index,  Up: Indexes

D.3 Parameter and Variable Index
================================

 [index ]
* Menu:

* !:                                     Special Parameters.  (line  46)
* #:                                     Special Parameters.  (line  30)
* $:                                     Special Parameters.  (line  42)
* *:                                     Special Parameters.  (line   9)
* -:                                     Special Parameters.  (line  37)
* 0:                                     Special Parameters.  (line  50)
* ?:                                     Special Parameters.  (line  33)
* @:                                     Special Parameters.  (line  19)
* _:                                     Special Parameters.  (line  59)
* auto_resume:                           Job Control Variables.
                                                              (line   6)
* BASH:                                  Bash Variables.      (line  13)
* BASH_ALIASES:                          Bash Variables.      (line  30)
* BASH_ARGC:                             Bash Variables.      (line  37)
* BASH_ARGV:                             Bash Variables.      (line  47)
* BASH_CMDS:                             Bash Variables.      (line  57)
* BASH_COMMAND:                          Bash Variables.      (line  64)
* BASH_ENV:                              Bash Variables.      (line  69)
* BASH_EXECUTION_STRING:                 Bash Variables.      (line  75)
* BASH_LINENO:                           Bash Variables.      (line  78)
* BASH_REMATCH:                          Bash Variables.      (line  87)
* BASH_SOURCE:                           Bash Variables.      (line  95)
* BASH_SUBSHELL:                         Bash Variables.      (line  99)
* BASH_VERSINFO:                         Bash Variables.      (line 103)
* BASH_VERSION:                          Bash Variables.      (line 127)
* BASH_XTRACEFD:                         Bash Variables.      (line 130)
* BASHOPTS:                              Bash Variables.      (line  16)
* BASHPID:                               Bash Variables.      (line  25)
* bell-style:                            Readline Init File Syntax.
                                                              (line  38)
* bind-tty-special-chars:                Readline Init File Syntax.
                                                              (line  45)
* CDPATH:                                Bourne Shell Variables.
                                                              (line   9)
* COLUMNS:                               Bash Variables.      (line 141)
* comment-begin:                         Readline Init File Syntax.
                                                              (line  50)
* COMP_CWORD:                            Bash Variables.      (line 146)
* COMP_KEY:                              Bash Variables.      (line 175)
* COMP_LINE:                             Bash Variables.      (line 152)
* COMP_POINT:                            Bash Variables.      (line 157)
* COMP_TYPE:                             Bash Variables.      (line 165)
* COMP_WORDBREAKS:                       Bash Variables.      (line 179)
* COMP_WORDS:                            Bash Variables.      (line 185)
* completion-prefix-display-length:      Readline Init File Syntax.
                                                              (line  60)
* completion-query-items:                Readline Init File Syntax.
                                                              (line  67)
* COMPREPLY:                             Bash Variables.      (line 193)
* convert-meta:                          Readline Init File Syntax.
                                                              (line  77)
* DIRSTACK:                              Bash Variables.      (line 198)
* disable-completion:                    Readline Init File Syntax.
                                                              (line  83)
* editing-mode:                          Readline Init File Syntax.
                                                              (line  88)
* EMACS:                                 Bash Variables.      (line 208)
* enable-keypad:                         Readline Init File Syntax.
                                                              (line  99)
* EUID:                                  Bash Variables.      (line 213)
* expand-tilde:                          Readline Init File Syntax.
                                                              (line 110)
* FCEDIT:                                Bash Variables.      (line 217)
* FIGNORE:                               Bash Variables.      (line 221)
* FUNCNAME:                              Bash Variables.      (line 227)
* GLOBIGNORE:                            Bash Variables.      (line 236)
* GROUPS:                                Bash Variables.      (line 242)
* histchars:                             Bash Variables.      (line 248)
* HISTCMD:                               Bash Variables.      (line 263)
* HISTCONTROL:                           Bash Variables.      (line 268)
* HISTFILE:                              Bash Variables.      (line 284)
* HISTFILESIZE:                          Bash Variables.      (line 288)
* HISTIGNORE:                            Bash Variables.      (line 296)
* history-preserve-point:                Readline Init File Syntax.
                                                              (line 114)
* history-size:                          Readline Init File Syntax.
                                                              (line 120)
* HISTSIZE:                              Bash Variables.      (line 315)
* HISTTIMEFORMAT:                        Bash Variables.      (line 319)
* HOME:                                  Bourne Shell Variables.
                                                              (line  13)
* horizontal-scroll-mode:                Readline Init File Syntax.
                                                              (line 125)
* HOSTFILE:                              Bash Variables.      (line 328)
* HOSTNAME:                              Bash Variables.      (line 339)
* HOSTTYPE:                              Bash Variables.      (line 342)
* IFS:                                   Bourne Shell Variables.
                                                              (line  18)
* IGNOREEOF:                             Bash Variables.      (line 345)
* input-meta:                            Readline Init File Syntax.
                                                              (line 132)
* INPUTRC:                               Bash Variables.      (line 355)
* isearch-terminators:                   Readline Init File Syntax.
                                                              (line 139)
* keymap:                                Readline Init File Syntax.
                                                              (line 146)
* LANG:                                  Bash Variables.      (line 359)
* LC_ALL:                                Bash Variables.      (line 363)
* LC_COLLATE:                            Bash Variables.      (line 367)
* LC_CTYPE:                              Bash Variables.      (line 374)
* LC_MESSAGES <1>:                       Bash Variables.      (line 379)
* LC_MESSAGES:                           Locale Translation.  (line  11)
* LC_NUMERIC:                            Bash Variables.      (line 383)
* LINENO:                                Bash Variables.      (line 387)
* LINES:                                 Bash Variables.      (line 391)
* MACHTYPE:                              Bash Variables.      (line 396)
* MAIL:                                  Bourne Shell Variables.
                                                              (line  22)
* MAILCHECK:                             Bash Variables.      (line 400)
* MAILPATH:                              Bourne Shell Variables.
                                                              (line  27)
* mark-modified-lines:                   Readline Init File Syntax.
                                                              (line 159)
* mark-symlinked-directories:            Readline Init File Syntax.
                                                              (line 164)
* match-hidden-files:                    Readline Init File Syntax.
                                                              (line 169)
* meta-flag:                             Readline Init File Syntax.
                                                              (line 132)
* OLDPWD:                                Bash Variables.      (line 408)
* OPTARG:                                Bourne Shell Variables.
                                                              (line  34)
* OPTERR:                                Bash Variables.      (line 411)
* OPTIND:                                Bourne Shell Variables.
                                                              (line  38)
* OSTYPE:                                Bash Variables.      (line 415)
* output-meta:                           Readline Init File Syntax.
                                                              (line 176)
* page-completions:                      Readline Init File Syntax.
                                                              (line 181)
* PATH:                                  Bourne Shell Variables.
                                                              (line  42)
* PIPESTATUS:                            Bash Variables.      (line 418)
* POSIXLY_CORRECT:                       Bash Variables.      (line 423)
* PPID:                                  Bash Variables.      (line 432)
* PROMPT_COMMAND:                        Bash Variables.      (line 436)
* PROMPT_DIRTRIM:                        Bash Variables.      (line 440)
* PS1:                                   Bourne Shell Variables.
                                                              (line  48)
* PS2:                                   Bourne Shell Variables.
                                                              (line  53)
* PS3:                                   Bash Variables.      (line 446)
* PS4:                                   Bash Variables.      (line 451)
* PWD:                                   Bash Variables.      (line 457)
* RANDOM:                                Bash Variables.      (line 460)
* REPLY:                                 Bash Variables.      (line 465)
* revert-all-at-newline:                 Readline Init File Syntax.
                                                              (line 191)
* SECONDS:                               Bash Variables.      (line 468)
* SHELL:                                 Bash Variables.      (line 474)
* SHELLOPTS:                             Bash Variables.      (line 479)
* SHLVL:                                 Bash Variables.      (line 488)
* show-all-if-ambiguous:                 Readline Init File Syntax.
                                                              (line 197)
* show-all-if-unmodified:                Readline Init File Syntax.
                                                              (line 203)
* skip-completed-text:                   Readline Init File Syntax.
                                                              (line 212)
* TEXTDOMAIN:                            Locale Translation.  (line  11)
* TEXTDOMAINDIR:                         Locale Translation.  (line  11)
* TIMEFORMAT:                            Bash Variables.      (line 493)
* TMOUT:                                 Bash Variables.      (line 531)
* TMPDIR:                                Bash Variables.      (line 543)
* UID:                                   Bash Variables.      (line 547)
* visible-stats:                         Readline Init File Syntax.
                                                              (line 225)


File: bash.info,  Node: Function Index,  Next: Concept Index,  Prev: Variable Index,  Up: Indexes

D.4 Function Index
==================

 [index ]
* Menu:

* abort (C-g):                           Miscellaneous Commands.
                                                               (line 10)
* accept-line (Newline or Return):       Commands For History. (line  6)
* backward-char (C-b):                   Commands For Moving.  (line 15)
* backward-delete-char (Rubout):         Commands For Text.    (line 11)
* backward-kill-line (C-x Rubout):       Commands For Killing. (line  9)
* backward-kill-word (M-<DEL>):          Commands For Killing. (line 24)
* backward-word (M-b):                   Commands For Moving.  (line 22)
* beginning-of-history (M-<):            Commands For History. (line 20)
* beginning-of-line (C-a):               Commands For Moving.  (line  6)
* call-last-kbd-macro (C-x e):           Keyboard Macros.      (line 13)
* capitalize-word (M-c):                 Commands For Text.    (line 46)
* character-search (C-]):                Miscellaneous Commands.
                                                               (line 41)
* character-search-backward (M-C-]):     Miscellaneous Commands.
                                                               (line 46)
* clear-screen (C-l):                    Commands For Moving.  (line 34)
* complete (<TAB>):                      Commands For Completion.
                                                               (line  6)
* copy-backward-word ():                 Commands For Killing. (line 58)
* copy-forward-word ():                  Commands For Killing. (line 63)
* copy-region-as-kill ():                Commands For Killing. (line 54)
* delete-char (C-d):                     Commands For Text.    (line  6)
* delete-char-or-list ():                Commands For Completion.
                                                               (line 39)
* delete-horizontal-space ():            Commands For Killing. (line 46)
* digit-argument (M-0, M-1, ... M--):    Numeric Arguments.    (line  6)
* do-uppercase-version (M-a, M-b, M-X, ...): Miscellaneous Commands.
                                                               (line 14)
* downcase-word (M-l):                   Commands For Text.    (line 42)
* dump-functions ():                     Miscellaneous Commands.
                                                               (line 73)
* dump-macros ():                        Miscellaneous Commands.
                                                               (line 85)
* dump-variables ():                     Miscellaneous Commands.
                                                               (line 79)
* end-kbd-macro (C-x )):                 Keyboard Macros.      (line  9)
* end-of-history (M->):                  Commands For History. (line 23)
* end-of-line (C-e):                     Commands For Moving.  (line  9)
* exchange-point-and-mark (C-x C-x):     Miscellaneous Commands.
                                                               (line 36)
* forward-backward-delete-char ():       Commands For Text.    (line 15)
* forward-char (C-f):                    Commands For Moving.  (line 12)
* forward-search-history (C-s):          Commands For History. (line 31)
* forward-word (M-f):                    Commands For Moving.  (line 18)
* history-search-backward ():            Commands For History. (line 51)
* history-search-forward ():             Commands For History. (line 46)
* insert-comment (M-#):                  Miscellaneous Commands.
                                                               (line 60)
* insert-completions (M-*):              Commands For Completion.
                                                               (line 18)
* kill-line (C-k):                       Commands For Killing. (line  6)
* kill-region ():                        Commands For Killing. (line 50)
* kill-whole-line ():                    Commands For Killing. (line 15)
* kill-word (M-d):                       Commands For Killing. (line 19)
* menu-complete ():                      Commands For Completion.
                                                               (line 22)
* menu-complete-backward ():             Commands For Completion.
                                                               (line 34)
* next-history (C-n):                    Commands For History. (line 17)
* non-incremental-forward-search-history (M-n): Commands For History.
                                                               (line 41)
* non-incremental-reverse-search-history (M-p): Commands For History.
                                                               (line 36)
* overwrite-mode ():                     Commands For Text.    (line 50)
* possible-completions (M-?):            Commands For Completion.
                                                               (line 15)
* prefix-meta (<ESC>):                   Miscellaneous Commands.
                                                               (line 18)
* previous-history (C-p):                Commands For History. (line 13)
* quoted-insert (C-q or C-v):            Commands For Text.    (line 20)
* re-read-init-file (C-x C-r):           Miscellaneous Commands.
                                                               (line  6)
* redraw-current-line ():                Commands For Moving.  (line 38)
* reverse-search-history (C-r):          Commands For History. (line 27)
* revert-line (M-r):                     Miscellaneous Commands.
                                                               (line 25)
* self-insert (a, b, A, 1, !, ...):      Commands For Text.    (line 24)
* set-mark (C-@):                        Miscellaneous Commands.
                                                               (line 32)
* skip-csi-sequence ():                  Miscellaneous Commands.
                                                               (line 51)
* start-kbd-macro (C-x ():               Keyboard Macros.      (line  6)
* transpose-chars (C-t):                 Commands For Text.    (line 27)
* transpose-words (M-t):                 Commands For Text.    (line 33)
* undo (C-_ or C-x C-u):                 Miscellaneous Commands.
                                                               (line 22)
* universal-argument ():                 Numeric Arguments.    (line 10)
* unix-filename-rubout ():               Commands For Killing. (line 41)
* unix-line-discard (C-u):               Commands For Killing. (line 12)
* unix-word-rubout (C-w):                Commands For Killing. (line 37)
* upcase-word (M-u):                     Commands For Text.    (line 38)
* yank (C-y):                            Commands For Killing. (line 68)
* yank-last-arg (M-. or M-_):            Commands For History. (line 65)
* yank-nth-arg (M-C-y):                  Commands For History. (line 56)
* yank-pop (M-y):                        Commands For Killing. (line 71)


File: bash.info,  Node: Concept Index,  Prev: Function Index,  Up: Indexes

D.5 Concept Index
=================

 [index ]
* Menu:

* alias expansion:                       Aliases.             (line   6)
* arithmetic evaluation:                 Shell Arithmetic.    (line   6)
* arithmetic expansion:                  Arithmetic Expansion.
                                                              (line   6)
* arithmetic, shell:                     Shell Arithmetic.    (line   6)
* arrays:                                Arrays.              (line   6)
* background:                            Job Control Basics.  (line   6)
* Bash configuration:                    Basic Installation.  (line   6)
* Bash installation:                     Basic Installation.  (line   6)
* Bourne shell:                          Basic Shell Features.
                                                              (line   6)
* brace expansion:                       Brace Expansion.     (line   6)
* builtin:                               Definitions.         (line  17)
* command editing:                       Readline Bare Essentials.
                                                              (line   6)
* command execution:                     Command Search and Execution.
                                                              (line   6)
* command expansion:                     Simple Command Expansion.
                                                              (line   6)
* command history:                       Bash History Facilities.
                                                              (line   6)
* command search:                        Command Search and Execution.
                                                              (line   6)
* command substitution:                  Command Substitution.
                                                              (line   6)
* command timing:                        Pipelines.           (line   9)
* commands, compound:                    Compound Commands.   (line   6)
* commands, conditional:                 Conditional Constructs.
                                                              (line   6)
* commands, grouping:                    Command Grouping.    (line   6)
* commands, lists:                       Lists.               (line   6)
* commands, looping:                     Looping Constructs.  (line   6)
* commands, pipelines:                   Pipelines.           (line   6)
* commands, shell:                       Shell Commands.      (line   6)
* commands, simple:                      Simple Commands.     (line   6)
* comments, shell:                       Comments.            (line   6)
* completion builtins:                   Programmable Completion Builtins.
                                                              (line   6)
* configuration:                         Basic Installation.  (line   6)
* control operator:                      Definitions.         (line  21)
* coprocess:                             Coprocesses.         (line   6)
* directory stack:                       The Directory Stack. (line   6)
* editing command lines:                 Readline Bare Essentials.
                                                              (line   6)
* environment:                           Environment.         (line   6)
* evaluation, arithmetic:                Shell Arithmetic.    (line   6)
* event designators:                     Event Designators.   (line   6)
* execution environment:                 Command Execution Environment.
                                                              (line   6)
* exit status <1>:                       Exit Status.         (line   6)
* exit status:                           Definitions.         (line  26)
* expansion:                             Shell Expansions.    (line   6)
* expansion, arithmetic:                 Arithmetic Expansion.
                                                              (line   6)
* expansion, brace:                      Brace Expansion.     (line   6)
* expansion, filename:                   Filename Expansion.  (line   9)
* expansion, parameter:                  Shell Parameter Expansion.
                                                              (line   6)
* expansion, pathname:                   Filename Expansion.  (line   9)
* expansion, tilde:                      Tilde Expansion.     (line   6)
* expressions, arithmetic:               Shell Arithmetic.    (line   6)
* expressions, conditional:              Bash Conditional Expressions.
                                                              (line   6)
* field:                                 Definitions.         (line  30)
* filename:                              Definitions.         (line  35)
* filename expansion:                    Filename Expansion.  (line   9)
* foreground:                            Job Control Basics.  (line   6)
* functions, shell:                      Shell Functions.     (line   6)
* history builtins:                      Bash History Builtins.
                                                              (line   6)
* history events:                        Event Designators.   (line   7)
* history expansion:                     History Interaction. (line   6)
* history list:                          Bash History Facilities.
                                                              (line   6)
* History, how to use:                   Programmable Completion Builtins.
                                                              (line 237)
* identifier:                            Definitions.         (line  51)
* initialization file, readline:         Readline Init File.  (line   6)
* installation:                          Basic Installation.  (line   6)
* interaction, readline:                 Readline Interaction.
                                                              (line   6)
* interactive shell <1>:                 Interactive Shells.  (line   6)
* interactive shell:                     Invoking Bash.       (line 127)
* internationalization:                  Locale Translation.  (line   6)
* job:                                   Definitions.         (line  38)
* job control <1>:                       Job Control Basics.  (line   6)
* job control:                           Definitions.         (line  42)
* kill ring:                             Readline Killing Commands.
                                                              (line  19)
* killing text:                          Readline Killing Commands.
                                                              (line   6)
* localization:                          Locale Translation.  (line   6)
* login shell:                           Invoking Bash.       (line 124)
* matching, pattern:                     Pattern Matching.    (line   6)
* metacharacter:                         Definitions.         (line  46)
* name:                                  Definitions.         (line  51)
* native languages:                      Locale Translation.  (line   6)
* notation, readline:                    Readline Bare Essentials.
                                                              (line   6)
* operator, shell:                       Definitions.         (line  57)
* parameter expansion:                   Shell Parameter Expansion.
                                                              (line   6)
* parameters:                            Shell Parameters.    (line   6)
* parameters, positional:                Positional Parameters.
                                                              (line   6)
* parameters, special:                   Special Parameters.  (line   6)
* pathname expansion:                    Filename Expansion.  (line   9)
* pattern matching:                      Pattern Matching.    (line   6)
* pipeline:                              Pipelines.           (line   6)
* POSIX:                                 Definitions.         (line   9)
* POSIX Mode:                            Bash POSIX Mode.     (line   6)
* process group:                         Definitions.         (line  62)
* process group ID:                      Definitions.         (line  66)
* process substitution:                  Process Substitution.
                                                              (line   6)
* programmable completion:               Programmable Completion.
                                                              (line   6)
* prompting:                             Printing a Prompt.   (line   6)
* quoting:                               Quoting.             (line   6)
* quoting, ANSI:                         ANSI-C Quoting.      (line   6)
* Readline, how to use:                  Job Control Variables.
                                                              (line  24)
* redirection:                           Redirections.        (line   6)
* reserved word:                         Definitions.         (line  70)
* restricted shell:                      The Restricted Shell.
                                                              (line   6)
* return status:                         Definitions.         (line  75)
* shell arithmetic:                      Shell Arithmetic.    (line   6)
* shell function:                        Shell Functions.     (line   6)
* shell script:                          Shell Scripts.       (line   6)
* shell variable:                        Shell Parameters.    (line   6)
* shell, interactive:                    Interactive Shells.  (line   6)
* signal:                                Definitions.         (line  78)
* signal handling:                       Signals.             (line   6)
* special builtin <1>:                   Special Builtins.    (line   6)
* special builtin:                       Definitions.         (line  82)
* startup files:                         Bash Startup Files.  (line   6)
* suspending jobs:                       Job Control Basics.  (line   6)
* tilde expansion:                       Tilde Expansion.     (line   6)
* token:                                 Definitions.         (line  86)
* translation, native languages:         Locale Translation.  (line   6)
* variable, shell:                       Shell Parameters.    (line   6)
* variables, readline:                   Readline Init File Syntax.
                                                              (line  37)
* word:                                  Definitions.         (line  90)
* word splitting:                        Word Splitting.      (line   6)
* yanking text:                          Readline Killing Commands.
                                                              (line   6)


